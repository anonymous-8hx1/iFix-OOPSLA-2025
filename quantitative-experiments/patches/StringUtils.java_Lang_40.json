{
    "src": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
    "patches": [
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.92013888888889,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.88131009615384,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.86897523941532,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.85824983016305,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.85737690172698,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.8257992393092,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr ) ;",
            "score": 99.80629475911458,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , searchStr ) ;",
            "score": 99.80508188100961,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.78215422453704,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) ;",
            "score": 99.73152669270833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) false ) ;",
            "score": 99.80351039341518,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.797119140625,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.78134553328805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.74067125822368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.74067125822368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.74067125822368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.74067125822368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.74067125822368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , searchStr.length( ) ) ;",
            "score": 99.72639683314732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) )",
            "score": 99.80164513221153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.79458821614584,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.77820276331019,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.77084455818965,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.76900050951087,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( str.length( ) -1) , searchStr.length( ) ) ;",
            "score": 99.76462965745192,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) - 1 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ;",
            "score": 99.73755992542614,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.71933774594908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.692587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == ', '|| str.charAt(1) == ', ') ;",
            "score": 99.76671424278847,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'ABCDEF'|| str.charAt(1) == 'ABCDEF') ;",
            "score": 99.76671424278847,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'cde'|| str.charAt(1) == 'cde') ;",
            "score": 99.76671424278847,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'def'|| str.charAt(1) == 'def') ;",
            "score": 99.76671424278847,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'abcdef'|| str.charAt(1) == 'abcdef') ;",
            "score": 99.76671424278847,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.765546875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.75139054008152,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) ) ;",
            "score": 99.72670200892857,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) { return false ; } return true ;",
            "score": 99.72423053609914,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.71234130859375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.68943189538044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.68943189538044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.68943189538044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.68943189538044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.68943189538044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.79234967912946,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.charAt(0) == ', '|| str.charAt(0) == ', ') ;",
            "score": 99.76516488882211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'ABCDEF'|| str.charAt(0) == 'ABCDEF') ;",
            "score": 99.76516488882211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'cde'|| str.charAt(0) == 'cde') ;",
            "score": 99.76516488882211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'def'|| str.charAt(0) == 'def') ;",
            "score": 99.76516488882211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'abcdef'|| str.charAt(0) == 'abcdef') ;",
            "score": 99.76516488882211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.75867120150862,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ; } else { return false ; }",
            "score": 99.71961712015086,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } else { return false ; }",
            "score": 99.71961712015086,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ; } else { return false ; }",
            "score": 99.71961712015086,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ; } else { return false ; }",
            "score": 99.71961712015086,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ; } else { return false ; }",
            "score": 99.71961712015086,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68935759171195,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( new String ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) true ) ;",
            "score": 99.78878348214286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.75611139112904,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.75086712015086,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.length( ) ) ;",
            "score": 99.73330290421195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.71912493024554,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.69890030570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.69735863095238,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.689130859375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return replace( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.75141759072581,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.7382421875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr , false ) ;",
            "score": 99.72469388521634,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) { return false ; } return false ;",
            "score": 99.71762190193965,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.69417317708333,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) ) ;",
            "score": 99.69323149181548,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.682412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) { return false ; } return true ;",
            "score": 99.76026294849537,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.7436759702621,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(1, searchStr.length( ) -1) ) ;",
            "score": 99.7283466045673,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) { return true ; } return true ;",
            "score": 99.711181640625,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.68739670973558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr.toUpperCase( ) ) ;",
            "score": 99.67443316915761,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,",
            "score": 99.67392800071023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.7581199363426,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.74051219019397,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.7211581143466,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) { return true ; } return false ;",
            "score": 99.71031452047414,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , searchStr ) ;",
            "score": 99.66948009672619,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return !( str.charAt(0) == ', '|| str.charAt(1) == ', ') ;",
            "score": 99.75551576967592,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'ABCDEF'|| str.charAt(1) == 'ABCDEF') ;",
            "score": 99.75551576967592,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'cde'|| str.charAt(1) == 'cde') ;",
            "score": 99.75551576967592,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'def'|| str.charAt(1) == 'def') ;",
            "score": 99.75551576967592,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'abcdef'|| str.charAt(1) == 'abcdef') ;",
            "score": 99.75551576967592,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , new String [ ] { searchStr } ) ;",
            "score": 99.7543524380388,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , new String [ ] { search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.73276703933189,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) +1) ) ;",
            "score": 99.72115384615384,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) + 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.70384680706522,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.68587552584134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.66607375372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) : contains( str , searchStr ) ;",
            "score": 99.75382777622768,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.7499469259511,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.7372413917824,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , null ) ;",
            "score": 99.71919759114583,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else { return false ; }",
            "score": 99.70316569010417,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.68505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.66400146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) ) ;",
            "score": 99.6632941750919,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.72878689236111,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , true ) ;",
            "score": 99.71840413411458,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return contains( str , searchStr ) ;",
            "score": 99.7080965909091,
            "correctness": "wrong",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.66881385216347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) ) ;",
            "score": 99.66313620174633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) ) ;",
            "score": 99.66313620174633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) ) ;",
            "score": 99.66313620174633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) ) ;",
            "score": 99.66313620174633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) ) ;",
            "score": 99.66313620174633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return ) { return false ;",
            "score": 99.66264204545455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == ', '|| str.charAt(0) == ', ') ;",
            "score": 99.74807400173611,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'ABCDEF'|| str.charAt(0) == 'ABCDEF') ;",
            "score": 99.74807400173611,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'cde'|| str.charAt(0) == 'cde') ;",
            "score": 99.74807400173611,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'def'|| str.charAt(0) == 'def') ;",
            "score": 99.74807400173611,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'abcdef'|| str.charAt(0) == 'abcdef') ;",
            "score": 99.74807400173611,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.7278464988426,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.72228610131049,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) -1) , searchStr.trim( ) ) ;",
            "score": 99.71826171875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) - 1 ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr == null ) ;",
            "score": 99.703017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.size( ) ) ;",
            "score": 99.66419813368056,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.65984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.65984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.65984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.65984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.65984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( searchStr == null ) ||( searchStr == null ) ) { return false ;",
            "score": 99.65770422894022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( search CaMeL Str == null ) || ( search CaMeL Str == null ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) ) ;",
            "score": 99.74106959292763,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str == null || searchStr == null || searchStr.toUpperCase( ) == null ) ;",
            "score": 99.72139195033482,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0, str.length( ) ) ) ;",
            "score": 99.72017415364583,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( ).substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.71263709435097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr , null ) ;",
            "score": 99.69307767427884,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66022858796296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66022858796296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66022858796296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66022858796296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66022858796296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr ) ;",
            "score": 99.65238683363971,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.73795572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.73382568359375,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.72109038254311,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ; } else { return false ; }",
            "score": 99.69827586206897,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } else { return false ; }",
            "score": 99.69827586206897,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ; } else { return false ; }",
            "score": 99.69827586206897,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ; } else { return false ; }",
            "score": 99.69827586206897,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ; } else { return false ; }",
            "score": 99.69827586206897,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return false ; } return contains( str ) ;",
            "score": 99.6912090594952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return false ; } return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.657880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.657880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.657880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.657880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.657880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str == null ) ||( searchStr == null ) ) { return false ;",
            "score": 99.6520763578869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str == null ) || ( search CaMeL Str == null ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) ) ;",
            "score": 99.73724686472039,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) ? contains( str.toUpperCase( ) , searchStr ) : contains( str ) ;",
            "score": 99.73157159213362,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) ? contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) + ', ') ;",
            "score": 99.71552566002156,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.71552566002156,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) + 'cde') ;",
            "score": 99.71552566002156,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) + 'def') ;",
            "score": 99.71552566002156,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) + 'abcdef') ;",
            "score": 99.71552566002156,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) -2) ) ;",
            "score": 99.70879657451923,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) -4) ) ;",
            "score": 99.70879657451923,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) -3) ) ;",
            "score": 99.70879657451923,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) -8) ) ;",
            "score": 99.70879657451923,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) -7) ) ;",
            "score": 99.70879657451923,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ; } else { return true ; }",
            "score": 99.69159146012932,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } else { return true ; }",
            "score": 99.69159146012932,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ; } else { return true ; }",
            "score": 99.69159146012932,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ; } else { return true ; }",
            "score": 99.69159146012932,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ; } else { return true ; }",
            "score": 99.69159146012932,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } else { return contains( str , searchStr ) ;",
            "score": 99.69039212740384,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } else { return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.65633138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.65633138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.65633138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.65633138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str , searchStr.toUpperCase( ) ) ;",
            "score": 99.65633138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) { return false ; } return false ;",
            "score": 99.73592122395833,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr ) : contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.72932652064732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) : contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.71279611895162,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) ,0) ;",
            "score": 99.7067362467448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return contains( str , searchStr ) ;",
            "score": 99.6891377766927,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ).toUpperCase( ) ) ;",
            "score": 99.65340482271634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str.length( ) ==0) ||( str.charAt(0) == ', ') ) ;",
            "score": 99.73399522569444,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( str . length ( ) == 0 ) || ( str . char CaMeL At ( 0 ) == $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str.length( ) ==0) ||( str.charAt(0) == 'ABCDEF') ) ;",
            "score": 99.73399522569444,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( str . length ( ) == 0 ) || ( str . char CaMeL At ( 0 ) == $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str.length( ) ==0) ||( str.charAt(0) == 'cde') ) ;",
            "score": 99.73399522569444,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( str . length ( ) == 0 ) || ( str . char CaMeL At ( 0 ) == $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str.length( ) ==0) ||( str.charAt(0) == 'def') ) ;",
            "score": 99.73399522569444,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( str . length ( ) == 0 ) || ( str . char CaMeL At ( 0 ) == $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str.length( ) ==0) ||( str.charAt(0) == 'abcdef') ) ;",
            "score": 99.73399522569444,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( str . length ( ) == 0 ) || ( str . char CaMeL At ( 0 ) == $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.71282327586206,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.71217447916666,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( ', ') ) ;",
            "score": 99.70531287560097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.70531287560097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( 'cde') ) ;",
            "score": 99.70531287560097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( 'def') ) ;",
            "score": 99.70531287560097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.70531287560097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,0) ;",
            "score": 99.68880208333333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.68677819293478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.655,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.toLowerCase( ) ) ;",
            "score": 99.72768373842592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) )",
            "score": 99.72545276988636,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str ) ;",
            "score": 99.68653564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68507667824075,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.65387834821429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return ) { return false ;",
            "score": 99.64669189453124,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,0) ;",
            "score": 99.724775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.trim( ) ) ;",
            "score": 99.7009914232337,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr ;",
            "score": 99.68468128551136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str.toUpperCase( ) ) ) ;",
            "score": 99.65193684895833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == null || searchStr == null ) ;",
            "score": 99.71209716796875,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.substring(0, searchStr.length( ) ) ) ) ;",
            "score": 99.70168541217673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ) ;",
            "score": 99.69969075520834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr , true ) ;",
            "score": 99.68426983173077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68282765355603,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( str.toUpperCase( ) ) ;",
            "score": 99.64923828125,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) ) ;",
            "score": 99.63908305921052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , ) ;",
            "score": 99.72317504882812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr != null && searchStr.length( ) >0) { return true ; } return false ;",
            "score": 99.7135597511574,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str != null && search CaMeL Str . length ( ) > 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str.toUpperCase( ) ) ;",
            "score": 99.71116420200893,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.70109311995968,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.69655198317308,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.69655198317308,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.69655198317308,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.69655198317308,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.69655198317308,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else { return true ; }",
            "score": 99.68274943033855,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( str.toUpperCase( ) ) ) ;",
            "score": 99.64791304976852,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63517960258152,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr ) : contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.72095598493304,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) : contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) { return true ; } return true ;",
            "score": 99.71352358217592,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.71038186961206,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr != null ) { return contains( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.69709725215517,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str != null ) { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.69595102163461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , null ) ;",
            "score": 99.67671130952381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , str.toUpperCase( ) ) ;",
            "score": 99.62881071671195,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') == -1) { return false ; } return true ;",
            "score": 99.71345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') == -1) { return false ; } return true ;",
            "score": 99.71345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') == -1) { return false ; } return true ;",
            "score": 99.71345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') == -1) { return false ; } return true ;",
            "score": 99.71345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') == -1) { return false ; } return true ;",
            "score": 99.71345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.70958209859914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.70958209859914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.70958209859914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.70958209859914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.70958209859914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , false ) ;",
            "score": 99.69527180989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( str.toUpperCase( ) ) ) { return true ; } else { return false ; }",
            "score": 99.68105973868535,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( contains( str , searchStr.substring(0, searchStr.length( ) ) ) ) ;",
            "score": 99.64588758680556,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) ) ;",
            "score": 99.62791683799342,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).toUpperCase( ) ;",
            "score": 99.71951859085648,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.toLowerCase( ) ) ;",
            "score": 99.71236478365384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.toUpperCase( ) ) ;",
            "score": 99.69442983774039,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , searchStr.trim( ) ) ;",
            "score": 99.68043736049107,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr ) ? false : contains( str , searchStr ) ;",
            "score": 99.67024369673295,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ? false : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , null ) ;",
            "score": 99.64982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6441062644676,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr ) ;",
            "score": 99.6247199563419,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) || contains( str , searchStr ) ;",
            "score": 99.71622140066964,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) || contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return( str.toUpperCase( ) == searchStr.toUpperCase( ) ) ;",
            "score": 99.70447716346153,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr , str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.69613155241936,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.69381713867188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.67961173221983,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.6697246844952,
            "correctness": "wrong",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.64591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.64591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.64591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.64591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.64591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring( ) ) ;",
            "score": 99.64396158854167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , false ) ;",
            "score": 99.62361414292279,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : contains( str ) ;",
            "score": 99.71617713341347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.70360456194196,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.70360456194196,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.70360456194196,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.70360456194196,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.70360456194196,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr ) ;",
            "score": 99.6920101768092,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -1, searchStr.length( ) -1) ;",
            "score": 99.67930772569444,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 1 , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , searchStr ;",
            "score": 99.66929274338942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : contains( searchStr ) ;",
            "score": 99.71500941685268,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return str.toUpperCase( ) == searchStr ;",
            "score": 99.70331021012932,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return equals( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.69451707409274,
            "correctness": "uncompilable",
            "tokenized_patch": "return equals ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.charAt(0) ) ;",
            "score": 99.6909930889423,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.substring( searchStr.length( ) -1) ) ;",
            "score": 99.67863246372768,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.62064034598214,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) false )",
            "score": 99.71231192129629,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , ) ;",
            "score": 99.70298549107143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( searchStr ) != -1) { return false ; } return true ;",
            "score": 99.70195855034723,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) != - 1 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return append( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6941626764113,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.67601697198276,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( searchStr == null ) { return false ; } return contains( str , searchStr ) ;",
            "score": 99.668642578125,
            "correctness": "wrong",
            "tokenized_patch": "else if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( new String ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == null ) { return false ;",
            "score": 99.61981491815476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str.toUpperCase( ) , searchStr ) ) { return false ; } return true ;",
            "score": 99.71193150111607,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , null ) ;",
            "score": 99.70203899515086,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.70194046585648,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) return false ; return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.69273158482143,
            "correctness": "wrong",
            "tokenized_patch": "if ( str == null ) return false ; return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } } return contains( str , searchStr ) ;",
            "score": 99.667724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } } return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,",
            "score": 99.63953314887152,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return false ;",
            "score": 99.61892218338816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) { return true ; } return false ;",
            "score": 99.70169632523148,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.70090247844827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.70090247844827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.70090247844827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.70090247844827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.70090247844827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , -1) ;",
            "score": 99.68744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ; } else { return true ; }",
            "score": 99.675048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } else { return true ; }",
            "score": 99.675048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ; } else { return true ; }",
            "score": 99.675048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ; } else { return true ; }",
            "score": 99.675048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ; } else { return true ; }",
            "score": 99.675048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ) ;",
            "score": 99.666357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64003725405092,
            "correctness": "wrong",
            "tokenized_patch": "return equals ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return false ; } return contains( str ) ;",
            "score": 99.63918050130208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return false ; } return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toString( ) ) ;",
            "score": 99.6179729959239,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return false ; } return true ;",
            "score": 99.700244140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.69859967912946,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.substring(0, searchStr.length( ) ) ) ) ;",
            "score": 99.69150863155242,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.trim( ).length( ) -1) ) ;",
            "score": 99.68394118088942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . trim ( ) . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ; } else { return false ; }",
            "score": 99.67441813151042,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.66614350818452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.66614350818452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.66614350818452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.66614350818452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.66614350818452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , true ) ;",
            "score": 99.63791073069854,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.61715262276786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.61715262276786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.61715262276786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.61715262276786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.61715262276786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.69990596064815,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str.trim( ).toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68961063508064,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.68376079358552,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.charValue( ) ) ;",
            "score": 99.663330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . char CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = contains( str , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.63834322415866,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toArray( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.637080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Array ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.61702473958333,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr )",
            "score": 99.70665147569444,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.696884765625,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, str.length( ) -1) ) ;",
            "score": 99.68350219726562,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.equals( str.toUpperCase( ) ) ) { return false ; } else { return false ; }",
            "score": 99.67015759698276,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , name.toUpperCase( ) ) ;",
            "score": 99.636943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.61593191964286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.70584422144397,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.69588797433036,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.replace( ', ', ', ') ) ;",
            "score": 99.67958420973558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.replace( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.67958420973558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.replace( 'cde', 'cde') ) ;",
            "score": 99.67958420973558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.replace( 'def', 'def') ) ;",
            "score": 99.67958420973558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.replace( 'abcdef', 'abcdef') ) ;",
            "score": 99.67958420973558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.66863458806819,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr == null ;",
            "score": 99.65591430664062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , toUpperCase( ) ) ;",
            "score": 99.63724320023148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.6364215353261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.6364215353261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.6364215353261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.6364215353261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.6364215353261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null || searchStr == null ) { return false ;",
            "score": 99.6155422044837,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) : false ;",
            "score": 99.70496868265086,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str == null ) ||( searchStr.toUpperCase( ) == null ) ) ;",
            "score": 99.69500262920673,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( str == null ) || ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains(0, searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68842930947581,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).toUpperCase( ) ) ;",
            "score": 99.67935844089673,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ; } return true ;",
            "score": 99.66756184895833,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( contains( str ) ) { return false ; } return contains( str , searchStr ) ;",
            "score": 99.65355383831522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str ) ) { return false ; } return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return contains( str.toUpperCase( ) ,",
            "score": 99.636357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( str.toUpperCase( ) ) ;",
            "score": 99.63331886574075,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "} return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.69383893694196,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, str.length( ) -1) , searchStr ) ;",
            "score": 99.67880249023438,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , str . length ( ) - 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ; } else { return false ; }",
            "score": 99.66736857096355,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.size( ) ) ;",
            "score": 99.65352199388587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name.toUpperCase( ) ) ;",
            "score": 99.61347888764881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) : containsIgnoreCase( str , searchStr ) ;",
            "score": 99.70283726283482,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) : contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.69698531539352,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , value ) ;",
            "score": 99.6934014682112,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.68624779485887,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , str ) ;",
            "score": 99.67734781901042,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return false ; } else { return false ; }",
            "score": 99.66554478236607,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , false ) ;",
            "score": 99.65352006392045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.63252563476563,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62270326967592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , value.toUpperCase( ) ) ;",
            "score": 99.61290922619048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.70267288773148,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.indexOf( str ) == -1) { return false ; } return true ;",
            "score": 99.69595703125,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( str ) == - 1 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( null , str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.69316574622844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68463331653226,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68463331653226,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68463331653226,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68463331653226,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68463331653226,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1).trim( ) ) ;",
            "score": 99.67673903245192,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).substring(0, searchStr.length( ) ) ) ;",
            "score": 99.66517857142857,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( searchStr == null ) { return false ;",
            "score": 99.6523907001202,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.631357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.631357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.631357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.631357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.631357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ).toUpperCase( ) ) ;",
            "score": 99.62209154211956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return ) { return true ;",
            "score": 99.61272638494319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str.toUpperCase( ) , searchStr ) ) { return false ; } return false ;",
            "score": 99.70254080636161,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return !( str.length( ) ==0|| str.charAt(0) == ', ') ;",
            "score": 99.6951395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.length( ) ==0|| str.charAt(0) == 'ABCDEF') ;",
            "score": 99.6951395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.length( ) ==0|| str.charAt(0) == 'cde') ;",
            "score": 99.6951395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.length( ) ==0|| str.charAt(0) == 'def') ;",
            "score": 99.6951395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.length( ) ==0|| str.charAt(0) == 'abcdef') ;",
            "score": 99.6951395670573,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.67567952473958,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr == null.length( ) ) ) ;",
            "score": 99.65189302884616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str == null . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , false ) ;",
            "score": 99.6296745749081,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) { return false ; }",
            "score": 99.62006084735577,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ;",
            "score": 99.6123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.7021484375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( str.length( ) -1, searchStr.length( ) ) ) ;",
            "score": 99.69473031850961,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) - 1 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return contains( str.toUpperCase( ) ) ;",
            "score": 99.69240897042411,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring( length( ) ) ) ;",
            "score": 99.68109537760417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ).toUpperCase( ) ) ;",
            "score": 99.64994140625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,0, searchStr.length( ) && searchStr.length( ) >0) ;",
            "score": 99.61379665798611,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . length ( ) && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , true ) ;",
            "score": 99.60198615579044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(0, searchStr.length( ) false ) ) ;",
            "score": 99.70118871228448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( searchStr ) == -1) { return false ; } return true ;",
            "score": 99.69308810763889,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) == - 1 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ', ') ) ;",
            "score": 99.69196428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( 'ABCDEF') ) ;",
            "score": 99.69196428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( 'cde') ) ;",
            "score": 99.69196428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( 'def') ) ;",
            "score": 99.69196428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( 'abcdef') ) ;",
            "score": 99.69196428571429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.substring( searchStr.length( ) ) ) ) ;",
            "score": 99.68012852822581,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . substring ( search CaMeL Str . length ( ) ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , ', ') ;",
            "score": 99.67381795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , 'ABCDEF') ;",
            "score": 99.67381795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , 'cde') ;",
            "score": 99.67381795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , 'def') ;",
            "score": 99.67381795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) , 'abcdef') ;",
            "score": 99.67381795247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ', '.toUpperCase( ) ) ;",
            "score": 99.628125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.628125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'cde'.toUpperCase( ) ) ;",
            "score": 99.628125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'def'.toUpperCase( ) ) ;",
            "score": 99.628125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.628125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ==0&& searchStr.length( ) >0) ;",
            "score": 99.61093026620371,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) == 0 && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name.toUpperCase( ) , searchStr ) ;",
            "score": 99.60182787024456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) : true ;",
            "score": 99.70111294450432,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , searchStr.length( ) ) ;",
            "score": 99.69174985532408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.69051387392241,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( str.length( ) -1) ) ;",
            "score": 99.67871907552083,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( contains( str , searchStr.substring(0, searchStr.length( ) ) ) ) ;",
            "score": 99.6733867938702,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return true ; } return true ;",
            "score": 99.66380964006696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return true ; } return true ;",
            "score": 99.66380964006696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return true ; } return true ;",
            "score": 99.66380964006696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return true ; } return true ;",
            "score": 99.66380964006696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return true ; } return true ;",
            "score": 99.66380964006696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.60026041666667,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr ) ; } else { return true ; }",
            "score": 99.70067487444196,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.69016870959052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.69016870959052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.69016870959052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.69016870959052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.69016870959052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( searchStr ) != -1) { return true ; } return false ;",
            "score": 99.68973343460648,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) != - 1 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.trim( ).length( ) ) ) ;",
            "score": 99.67869349888393,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . trim ( ) . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.size( ) -1) ) ;",
            "score": 99.6722881610577,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . size ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return false ; } return true ;",
            "score": 99.66323416573661,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return false ; } return true ;",
            "score": 99.66323416573661,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return false ; } return true ;",
            "score": 99.66323416573661,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return false ; } return true ;",
            "score": 99.66323416573661,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return false ; } return true ;",
            "score": 99.66323416573661,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + ', ') ;",
            "score": 99.627216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.627216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + 'cde') ;",
            "score": 99.627216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + 'def') ;",
            "score": 99.627216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + 'abcdef') ;",
            "score": 99.627216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61050528067129,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return contains( str.toUpperCase( ) , searchStr )",
            "score": 99.69915140086206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.68924967447917,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.677294921875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.endsWith( ', ') ) ;",
            "score": 99.67041954627403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.endsWith( 'ABCDEF') ) ;",
            "score": 99.67041954627403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.endsWith( 'cde') ) ;",
            "score": 99.67041954627403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.endsWith( 'def') ) ;",
            "score": 99.67041954627403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.endsWith( 'abcdef') ) ;",
            "score": 99.67041954627403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) { return true ; } return false ;",
            "score": 99.66206577845982,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null ) { return false ; } if( searchStr == null ) { return false ; }",
            "score": 99.64578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } if ( search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == searchStr.toUpperCase( ) ;",
            "score": 99.61977132161458,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) ) ;",
            "score": 99.5992790670956,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) true )",
            "score": 99.69818793402777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) true )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) != searchStr.length( ) ) { return false ; } return true ;",
            "score": 99.68755425347223,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != search CaMeL Str . length ( ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return replace( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.67666739004629,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( ', ', ', ') , searchStr.length( ) ) ;",
            "score": 99.67007211538461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'ABCDEF', 'ABCDEF') , searchStr.length( ) ) ;",
            "score": 99.67007211538461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'cde', 'cde') , searchStr.length( ) ) ;",
            "score": 99.67007211538461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'def', 'def') , searchStr.length( ) ) ;",
            "score": 99.67007211538461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'abcdef', 'abcdef') , searchStr.length( ) ) ;",
            "score": 99.67007211538461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ; } return true ;",
            "score": 99.6620624248798,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } return true ;",
            "score": 99.6620624248798,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ; } return true ;",
            "score": 99.6620624248798,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ; } return true ;",
            "score": 99.6620624248798,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ; } return true ;",
            "score": 99.6620624248798,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( searchStr ) ) ;",
            "score": 99.64578012319711,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).trim( ) ) ;",
            "score": 99.60685929008152,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "try { return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.598876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : contains( str , searchStr )",
            "score": 99.69611227101294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : contains ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') == -1) { return false ; } return false ;",
            "score": 99.687373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') == -1) { return false ; } return false ;",
            "score": 99.687373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') == -1) { return false ; } return false ;",
            "score": 99.687373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') == -1) { return false ; } return false ;",
            "score": 99.687373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') == -1) { return false ; } return false ;",
            "score": 99.687373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str.toUpperCase( ) == null ) ||( searchStr == null ) ) { return false ;",
            "score": 99.68648976293103,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str . to CaMeL Upper CaMeL Case ( ) == null ) || ( search CaMeL Str == null ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.67455267137096,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str + searchStr.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.67005333533653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str.toUpperCase( ) ) ) { return true ; } return false ;",
            "score": 99.66199602399554,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( ', ', str.toUpperCase( ) ) ;",
            "score": 99.61817568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', str.toUpperCase( ) ) ;",
            "score": 99.61817568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', str.toUpperCase( ) ) ;",
            "score": 99.61817568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', str.toUpperCase( ) ) ;",
            "score": 99.61817568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', str.toUpperCase( ) ) ;",
            "score": 99.61817568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name.toUpperCase( ) , searchStr ) ;",
            "score": 99.59782329358552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) ? searchStr : contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.69607107979911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) ? search CaMeL Str : contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return str.toUpperCase( ) == searchStr ;",
            "score": 99.68622036637932,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ).toUpperCase( ) ) ;",
            "score": 99.68537507233796,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ; } return false ;",
            "score": 99.66163917824075,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,0, searchStr.length( ) || searchStr.length( ) >0) ;",
            "score": 99.60545970775463,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . length ( ) || search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( value , searchStr.toUpperCase( ) ) ;",
            "score": 99.5973484205163,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( value , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr ) ; } else { return false ; }",
            "score": 99.69548688616071,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(0, str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.68543743265086,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) != searchStr.length( ) ) { return true ; } return false ;",
            "score": 99.68305121527777,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != search CaMeL Str . length ( ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return true ; } else { return false ; }",
            "score": 99.66091796875,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return true ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ', ') ;",
            "score": 99.61772604549633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.61772604549633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'cde') ;",
            "score": 99.61772604549633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'def') ;",
            "score": 99.61772604549633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'abcdef') ;",
            "score": 99.61772604549633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , containsIgnoreCase( searchStr ) ) ;",
            "score": 99.59611372514205,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.length( ) ) ;",
            "score": 99.6813077059659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.toUpperCase( ) ) ) ;",
            "score": 99.67006138392857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) +1) , searchStr.length( ) ) ;",
            "score": 99.66222205528847,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) + 1 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str.toUpperCase( ) ) ) { return false ; } return true ;",
            "score": 99.66039167131696,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str + toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60228587962963,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , searchStr.toUpperCase( ) ) ;",
            "score": 99.59569149925595,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : contains( str ) ;",
            "score": 99.69417630709134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , str ) ;",
            "score": 99.68282765355603,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return false ; } return false ;",
            "score": 99.67974609375,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.66977224042338,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return false ; } else { return false ; }",
            "score": 99.66009521484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) { return false ; }",
            "score": 99.64000447591145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str == null ) ||( str.toUpperCase( ) == null ) ) ;",
            "score": 99.61639404296875,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( str == null ) || ( str . to CaMeL Upper CaMeL Case ( ) == null ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.length( ) ) ;",
            "score": 99.60209324048913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return ) { return true ;",
            "score": 99.59078979492188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : contains( searchStr ) ;",
            "score": 99.69237409319196,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null || searchStr.toUpperCase( ) == false ) ;",
            "score": 99.68274797712054,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str.toUpperCase( ) ) ) { return true ; } return true ;",
            "score": 99.65952845982143,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.indexOf( ', ') ) ;",
            "score": 99.65891676682692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.65891676682692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.indexOf( 'cde') ) ;",
            "score": 99.65891676682692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.indexOf( 'def') ) ;",
            "score": 99.65891676682692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.65891676682692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.616279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , name.toUpperCase( ) ) ;",
            "score": 99.58972886029412,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null || searchStr.toUpperCase( ) ==0) ;",
            "score": 99.68222481863839,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') != -1) { return false ; } return true ;",
            "score": 99.6787890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') != -1) { return false ; } return true ;",
            "score": 99.6787890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') != -1) { return false ; } return true ;",
            "score": 99.6787890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') != -1) { return false ; } return true ;",
            "score": 99.6787890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') != -1) { return false ; } return true ;",
            "score": 99.6787890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66903483072916,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) -1) ) ;",
            "score": 99.65730794270833,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr ) ) { return false ; } return false ;",
            "score": 99.63612874348958,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : contains( str , searchStr )",
            "score": 99.69153252963362,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : contains ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( searchStr ) ) ;",
            "score": 99.67848714192708,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , char.toUpperCase( ) ) ;",
            "score": 99.66808661099138,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , char . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.61088423295455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.toUpperCase( ) ) ;",
            "score": 99.601318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + false ;",
            "score": 99.67865200700432,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.66585567079741,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) { return true ; } return true ;",
            "score": 99.65856061662946,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.valueOf( str.toUpperCase( ) ).booleanValue( ) ;",
            "score": 99.656796875,
            "correctness": "wrong",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.append( searchStr ) ) ;",
            "score": 99.63278432992789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . append ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58577473958333,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ? false : contains( str , searchStr ) ;",
            "score": 99.68873009314903,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ? false : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') == -1) { return true ; } return true ;",
            "score": 99.677998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') == -1) { return true ; } return true ;",
            "score": 99.677998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') == -1) { return true ; } return true ;",
            "score": 99.677998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') == -1) { return true ; } return true ;",
            "score": 99.677998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') == -1) { return true ; } return true ;",
            "score": 99.677998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.67739762931035,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).substring(0, searchStr.length( ) ) == -1) ;",
            "score": 99.66573893229166,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.655859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , toUpperCase( ) ) ;",
            "score": 99.60795261548913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.equals( searchStr ) ) ;",
            "score": 99.60098970853366,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58550734747024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58550734747024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58550734747024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58550734747024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58550734747024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , searchStr.trim( ) ) ;",
            "score": 99.6769386574074,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.66534830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , false ) ;",
            "score": 99.63021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return false ;",
            "score": 99.58512155633224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( value.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6759620949074,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.substring( str.toUpperCase( ) , searchStr.length( ) ) ) ;",
            "score": 99.664794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . substring ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(1) ) ;",
            "score": 99.65152994791667,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.60407820991848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.60035988136575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , ', ') ;",
            "score": 99.58470243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'ABCDEF') ;",
            "score": 99.58470243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'cde') ;",
            "score": 99.58470243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'def') ;",
            "score": 99.58470243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'abcdef') ;",
            "score": 99.58470243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? true : false ;",
            "score": 99.68674045138889,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.charAt(0) == ', '|| str.charAt(2) == ', ') ;",
            "score": 99.67672964242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'ABCDEF'|| str.charAt(2) == 'ABCDEF') ;",
            "score": 99.67672964242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'cde'|| str.charAt(2) == 'cde') ;",
            "score": 99.67672964242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'def'|| str.charAt(2) == 'def') ;",
            "score": 99.67672964242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'abcdef'|| str.charAt(2) == 'abcdef') ;",
            "score": 99.67672964242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ! str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.67592075892857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ! str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66237877155173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) { return false ; } return true ;",
            "score": 99.65686907087054,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.startsWith( ', ') ) ;",
            "score": 99.6511981670673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.6511981670673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.startsWith( 'cde') ) ;",
            "score": 99.6511981670673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.startsWith( 'def') ) ;",
            "score": 99.6511981670673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.6511981670673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) false ) ;",
            "score": 99.6285909016927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.size( ) ) ) ;",
            "score": 99.59866333007812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . size ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( searchStr == null ) ||( searchStr.length( ) ==0) ) ;",
            "score": 99.67659505208333,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( search CaMeL Str == null ) || ( search CaMeL Str . length ( ) == 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , this ) ;",
            "score": 99.67444268588362,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66203061995968,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return true ; } return false ;",
            "score": 99.65672956194196,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return true ; } return false ;",
            "score": 99.65672956194196,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return true ; } return false ;",
            "score": 99.65672956194196,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return true ; } return false ;",
            "score": 99.65672956194196,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return true ; } return false ;",
            "score": 99.65672956194196,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) != searchStr.length( ) ) { return false ; } return true ;",
            "score": 99.6510546875,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) != search CaMeL Str . length ( ) ) { return false ; } return true ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , searchStr ) ;",
            "score": 99.60233561197917,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , toUpperCase( searchStr ) ) ;",
            "score": 99.5845059481534,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str.toUpperCase( ) == null ) ||( searchStr == null ) ) { return true ;",
            "score": 99.67434166217673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str . to CaMeL Upper CaMeL Case ( ) == null ) || ( search CaMeL Str == null ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.66181798135081,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ; } return false ;",
            "score": 99.65638146033653,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } return false ;",
            "score": 99.65638146033653,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ; } return false ;",
            "score": 99.65638146033653,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ; } return false ;",
            "score": 99.65638146033653,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ; } return false ;",
            "score": 99.65638146033653,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } return contains( str ) ;",
            "score": 99.64987182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0, searchStr ;",
            "score": 99.6229248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(1) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60133870442708,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 1 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.( ) ) ;",
            "score": 99.59825721153847,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } ) ;",
            "score": 99.58414713541667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , this.searchStr.toUpperCase( ) ) ;",
            "score": 99.67412277747844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , this . search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "contains( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66051432291667,
            "correctness": "uncompilable",
            "tokenized_patch": "contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str.toUpperCase( ) ) ) { return false ; } return false ;",
            "score": 99.65626743861607,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) +1) , searchStr ) ;",
            "score": 99.6490009014423,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) + 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( str == null ) { return false ; }",
            "score": 99.622900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null || searchStr.length( ) ==0) {",
            "score": 99.59847005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , name.toUpperCase( ) , searchStr ) ;",
            "score": 99.58038039434524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return true ; } return false ;",
            "score": 99.67453125,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) + false ) ;",
            "score": 99.67392073006465,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + false ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ! searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66036783854166,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).length( ) ==0) { return false ; } return true ;",
            "score": 99.65456627155173,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( contains( str.substring(0, searchStr.length( ) -1) ) ) ;",
            "score": 99.64760335286458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr [0] ) ;",
            "score": 99.61980731670673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str [ 0 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ) ) ;",
            "score": 99.59732394748264,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ,0) ;",
            "score": 99.68408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return true ; } return true ;",
            "score": 99.6741796875,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.6601983432112,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.charAt(0) ) ;",
            "score": 99.6427471454327,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsAll( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.59676106770833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; if( str == null ) { return false ;",
            "score": 99.59571329752605,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; if ( str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } if( str == null ) { return false ;",
            "score": 99.580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } if ( str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(0, searchStr.length( ) true ) ) ;",
            "score": 99.68317281788794,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( searchStr ) != -1) { return false ; } return false ;",
            "score": 99.67386429398148,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) != - 1 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.67218648976294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.67218648976294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.67218648976294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.67218648976294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.67218648976294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).length( ) ==0) ;",
            "score": 99.65815080915179,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return true ; } else { return false ; }",
            "score": 99.65414428710938,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return true ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.59655309606481,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.594716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.57762610394022,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.57762610394022,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.57762610394022,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.57762610394022,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.57762610394022,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) -1) ;",
            "score": 99.68218783674568,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return containsIgnoreCase( str ) ;",
            "score": 99.67301432291667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).contains( searchStr.toUpperCase( ) ) ;",
            "score": 99.67203776041667,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ).length( ) ) ) ;",
            "score": 99.65413120814732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , null ) ;",
            "score": 99.61511948529412,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.isUpperCase( ) ) ;",
            "score": 99.59628182870371,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . is CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +1) ;",
            "score": 99.593701171875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains = contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6816827182112,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') != -1) { return true ; } return false ;",
            "score": 99.6725,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') != -1) { return true ; } return false ;",
            "score": 99.6725,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') != -1) { return true ; } return false ;",
            "score": 99.6725,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') != -1) { return true ; } return false ;",
            "score": 99.6725,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') != -1) { return true ; } return false ;",
            "score": 99.6725,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return contains( str.toUpperCase( ) ) ;",
            "score": 99.67164963942308,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) { return false ; } return false ;",
            "score": 99.65336390904018,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') > -1) { return true ; } return false ;",
            "score": 99.63921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') > -1) { return true ; } return false ;",
            "score": 99.63921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') > -1) { return true ; } return false ;",
            "score": 99.63921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') > -1) { return true ; } return false ;",
            "score": 99.63921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') > -1) { return true ; } return false ;",
            "score": 99.63921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toString( ) ) ;",
            "score": 99.613603515625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str [0] , searchStr.toUpperCase( ) ) ;",
            "score": 99.59321732954545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 0 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( value.toUpperCase( ) , searchStr ) ;",
            "score": 99.57703167459239,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt(0) ) ;",
            "score": 99.6725,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + true ;",
            "score": 99.67133620689656,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ; }",
            "score": 99.65738118489584,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return true ; } return false ;",
            "score": 99.65332903180804,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.length( ) > searchStr.length( ) ) { return true ; } return false ;",
            "score": 99.637490234375,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) > search CaMeL Str . length ( ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , true ) ;",
            "score": 99.61344770951705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.toUpperCase( ) == null ) {",
            "score": 99.59314982096355,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toLowerCase( ) , searchStr ) ;",
            "score": 99.57679814877717,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return containsIgnoreCase( str , searchStr )",
            "score": 99.67898220486111,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == ', '&& str.charAt(0) == ', ') ;",
            "score": 99.67225060096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'ABCDEF'&& str.charAt(0) == 'ABCDEF') ;",
            "score": 99.67225060096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'cde'&& str.charAt(0) == 'cde') ;",
            "score": 99.67225060096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'def'&& str.charAt(0) == 'def') ;",
            "score": 99.67225060096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'abcdef'&& str.charAt(0) == 'abcdef') ;",
            "score": 99.67225060096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return true ; } return true ;",
            "score": 99.65320696149554,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') , searchStr.length( ) ) ;",
            "score": 99.63709435096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') , searchStr.length( ) ) ;",
            "score": 99.63709435096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') , searchStr.length( ) ) ;",
            "score": 99.63709435096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') , searchStr.length( ) ) ;",
            "score": 99.63709435096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') , searchStr.length( ) ) ;",
            "score": 99.63709435096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.next( ) ) ;",
            "score": 99.5934425636574,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . next ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.58952530570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.58952530570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.58952530570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.58952530570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.58952530570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str == null ) &&( searchStr == null ) ) { return false ;",
            "score": 99.57662527901786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str == null ) && ( search CaMeL Str == null ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.67879512392241,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') == -1) { return true ; } return false ;",
            "score": 99.6722265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') == -1) { return true ; } return false ;",
            "score": 99.6722265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') == -1) { return true ; } return false ;",
            "score": 99.6722265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') == -1) { return true ; } return false ;",
            "score": 99.6722265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') == -1) { return true ; } return false ;",
            "score": 99.6722265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.65608461441532,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( ', ') ) { return true ; } return true ;",
            "score": 99.65315464564732,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } return true ;",
            "score": 99.65315464564732,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'cde') ) { return true ; } return true ;",
            "score": 99.65315464564732,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'def') ) { return true ; } return true ;",
            "score": 99.65315464564732,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'abcdef') ) { return true ; } return true ;",
            "score": 99.65315464564732,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.612041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + false ;",
            "score": 99.588583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , searchStr.length( ) ) ;",
            "score": 99.67211009837963,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66859654017857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str.toUpperCase( ) ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.655517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return false ; } return true ;",
            "score": 99.65228271484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.replace( ', ', ', ') ) ;",
            "score": 99.63631497896634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.replace( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.63631497896634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.replace( 'cde', 'cde') ) ;",
            "score": 99.63631497896634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.replace( 'def', 'def') ) ;",
            "score": 99.63631497896634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.replace( 'abcdef', 'abcdef') ) ;",
            "score": 99.63631497896634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6115191915761,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , name ) ;",
            "score": 99.586982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) ) ;",
            "score": 99.57606608072916,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) != searchStr.length( ) ) { return false ; } return false ;",
            "score": 99.67073567708333,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != search CaMeL Str . length ( ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) +0) ;",
            "score": 99.66780037715517,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') > -1) { return true ; } return true ;",
            "score": 99.635849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') > -1) { return true ; } return true ;",
            "score": 99.635849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') > -1) { return true ; } return true ;",
            "score": 99.635849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') > -1) { return true ; } return true ;",
            "score": 99.635849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') > -1) { return true ; } return true ;",
            "score": 99.635849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.61129056490384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( ) ) ;",
            "score": 99.58958899456522,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ ', '] , searchStr.toUpperCase( ) ) ;",
            "score": 99.58635919744319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ $STRING$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ 'ABCDEF'] , searchStr.toUpperCase( ) ) ;",
            "score": 99.58635919744319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ $STRING$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ 'cde'] , searchStr.toUpperCase( ) ) ;",
            "score": 99.58635919744319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ $STRING$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ 'def'] , searchStr.toUpperCase( ) ) ;",
            "score": 99.58635919744319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ $STRING$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ 'abcdef'] , searchStr.toUpperCase( ) ) ;",
            "score": 99.58635919744319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ $STRING$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , null , searchStr.toUpperCase( ) ) ;",
            "score": 99.6670342807112,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.65440150669643,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ? true : contains( str , searchStr ) ;",
            "score": 99.61115056818181,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ? true : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.equals( str.toUpperCase( ) ) ) ;",
            "score": 99.58875528971355,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( -1) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5851171875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( - 1 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return !( str.charAt(0) == ', '|| str.charAt(2) == ', ') ;",
            "score": 99.67063621238425,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'ABCDEF'|| str.charAt(2) == 'ABCDEF') ;",
            "score": 99.67063621238425,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'cde'|| str.charAt(2) == 'cde') ;",
            "score": 99.67063621238425,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'def'|| str.charAt(2) == 'def') ;",
            "score": 99.67063621238425,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'abcdef'|| str.charAt(2) == 'abcdef') ;",
            "score": 99.67063621238425,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ || str . char CaMeL At ( $NUMBER$ ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return true ; } return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.66533954326923,
            "correctness": "wrong",
            "tokenized_patch": "if ( str == null ) { return true ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return false ; } else { return false ; }",
            "score": 99.651220703125,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , ', ') ;",
            "score": 99.61079545454545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , 'ABCDEF') ;",
            "score": 99.61079545454545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , 'cde') ;",
            "score": 99.61079545454545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , 'def') ;",
            "score": 99.61079545454545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , 'abcdef') ;",
            "score": 99.61079545454545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null || searchStr == null ) { return false ; }",
            "score": 99.58357747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toCharArray( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6759620949074,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Char CaMeL Array ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( ', ') ) ;",
            "score": 99.6698330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.6698330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'cde') ) ;",
            "score": 99.6698330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'def') ) ;",
            "score": 99.6698330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.6698330965909,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str.toUpperCase( ) == null ) ||( searchStr == null ) ) ;",
            "score": 99.6652362530048,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( str . to CaMeL Upper CaMeL Case ( ) == null ) || ( search CaMeL Str == null ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains(( String ) str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.65330403645834,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( ( String ) str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).length( ) ) ;",
            "score": 99.6342837685033,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str + ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.5822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str + $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str + 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.5822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str + $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str + 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.5822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str + $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str + 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.5822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str + $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str + 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.5822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str + $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr.toString( ) ) ;",
            "score": 99.66735387731481,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return false ; } return false ;",
            "score": 99.65033830915179,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return false ; } return false ;",
            "score": 99.65033830915179,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return false ; } return false ;",
            "score": 99.65033830915179,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return false ; } return false ;",
            "score": 99.65033830915179,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return false ; } return false ;",
            "score": 99.65033830915179,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) > searchStr.length( ) ) { return true ; } return true ;",
            "score": 99.634208984375,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) > search CaMeL Str . length ( ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str ,0) ;",
            "score": 99.60735529119319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.58816964285714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + ', ') ;",
            "score": 99.58142671130952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.58142671130952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + 'cde') ;",
            "score": 99.58142671130952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + 'def') ;",
            "score": 99.58142671130952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + 'abcdef') ;",
            "score": 99.58142671130952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { if( searchStr == null ) { return false ;",
            "score": 99.5722989169034,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).toUpperCase( ) ;",
            "score": 99.6741253396739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( str ) == -1) { return false ; } return false ;",
            "score": 99.666953125,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( str ) == - 1 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr != null ) { return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.65208217075893,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str != null ) { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ; } else { return true ; }",
            "score": 99.65011596679688,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.63405247738487,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , ', ') ;",
            "score": 99.56876627604167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.56876627604167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , 'cde') ;",
            "score": 99.56876627604167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , 'def') ;",
            "score": 99.56876627604167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , 'abcdef') ;",
            "score": 99.56876627604167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? true : true ;",
            "score": 99.67396375868056,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.charAt(0) , searchStr.length( ) ) ;",
            "score": 99.66632549579327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . char CaMeL At ( 0 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.65117355872844,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ; } return true ;",
            "score": 99.64928260216347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } return true ;",
            "score": 99.64928260216347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ; } return true ;",
            "score": 99.64928260216347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ; } return true ;",
            "score": 99.64928260216347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ; } return true ;",
            "score": 99.64928260216347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != -1;",
            "score": 99.63015747070312,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( contains( str ) ) { return false ; }",
            "score": 99.60671762319711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( contains ( str ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , value.toUpperCase( ) ) ;",
            "score": 99.586923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name , searchStr.toUpperCase( ) ) ;",
            "score": 99.580732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.toString( ) ) ;",
            "score": 99.56810461956522,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) <= searchStr.length( ) ) { return false ; } return true ;",
            "score": 99.66575339988425,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) <= search CaMeL Str . length ( ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).length( ) ==0) { return false ; } return false ;",
            "score": 99.64846275592673,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toUpperCase( str ).toUpperCase( ) ) ;",
            "score": 99.58554077148438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , value.toUpperCase( ) ) ;",
            "score": 99.56633444393383,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false : contains( str ) ;",
            "score": 99.67361215444711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) , searchStr.length( ) ) ;",
            "score": 99.66551830150463,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ).toUpperCase( ) ) ;",
            "score": 99.650146484375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str.substring(0, str.length( ) ) , searchStr.length( ) ) ;",
            "score": 99.6481182391827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , str . length ( ) ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( ', ') ) ) ;",
            "score": 99.62949006453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'ABCDEF') ) ) ;",
            "score": 99.62949006453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'cde') ) ) ;",
            "score": 99.62949006453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'def') ) ) ;",
            "score": 99.62949006453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'abcdef') ) ) ;",
            "score": 99.62949006453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , toUpperCase( searchStr ) ) ;",
            "score": 99.60158128004808,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.58544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr == null || searchStr == null ) ;",
            "score": 99.56520677649456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return false ; } else { return true ; }",
            "score": 99.64730398995536,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return false ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.equals( searchStr ) ) ;",
            "score": 99.565185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , searchStr.toUpperCase( ) )",
            "score": 99.67197091238839,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( searchStr ) != -1) { return true ; } return true ;",
            "score": 99.66439706307871,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) != - 1 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return add( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64938256048387,
            "correctness": "uncompilable",
            "tokenized_patch": "return add ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( ', ') ) { return true ; } return false ;",
            "score": 99.64673723493304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } return false ;",
            "score": 99.64673723493304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'cde') ) { return true ; } return false ;",
            "score": 99.64673723493304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'def') ) { return true ; } return false ;",
            "score": 99.64673723493304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'abcdef') ) { return true ; } return false ;",
            "score": 99.64673723493304,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == -1;",
            "score": 99.6278788248698,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.trim( ) ) ;",
            "score": 99.6637546705163,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return false ; } return false ;",
            "score": 99.64631870814732,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toCharArray( ) , searchStr.length( ) ) ;",
            "score": 99.6276324728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Char CaMeL Array ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str == null ) ||( searchStr == null ) ) { return true ;",
            "score": 99.56287202380952,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str == null ) || ( search CaMeL Str == null ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( str ) != -1) { return false ; } return true ;",
            "score": 99.663271484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( str ) != - 1 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.value.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.66087183459052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) !=0) { return false ; }",
            "score": 99.59615071614583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) != 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return ) { return false ;",
            "score": 99.5613784790039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) ? false : contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.66885141225961,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) ? false : contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( searchStr ) == -1) { return false ; } return false ;",
            "score": 99.66271520543981,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) == - 1 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == searchStr.toUpperCase( ) ) ;",
            "score": 99.66048758370536,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! searchStr.equals( str.toUpperCase( ) ) ) { return false ; } return true ;",
            "score": 99.64462385506465,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String [ ] { str } , searchStr.toUpperCase( ) ) ;",
            "score": 99.62580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str } , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , false ) ;",
            "score": 99.59516834077381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) || searchStr == null ) ;",
            "score": 99.576669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , str.toUpperCase( ) ) ;",
            "score": 99.5586574388587,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) *true ;",
            "score": 99.66860856681035,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) +1) ;",
            "score": 99.66029094827586,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).toUpperCase( ).trim( ) ;",
            "score": 99.64767357610887,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else { return contains( str ) ; }",
            "score": 99.64354564525463,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else { return contains ( str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , true ) ;",
            "score": 99.59501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase(.toUpperCase( ) ) ) ;",
            "score": 99.58096426504629,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , ', ') ;",
            "score": 99.55833798363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'ABCDEF') ;",
            "score": 99.55833798363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'cde') ;",
            "score": 99.55833798363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'def') ;",
            "score": 99.55833798363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'abcdef') ;",
            "score": 99.55833798363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ? false : contains( str , searchStr.toUpperCase( ) )",
            "score": 99.66836442618535,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ? false : contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) <= searchStr.length( ) ) { return true ; } return false ;",
            "score": 99.66202799479167,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) <= search CaMeL Str . length ( ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": ") { return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.65963429418103,
            "correctness": "uncompilable",
            "tokenized_patch": ") { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64760269657258,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return true ; } else { return false ; }",
            "score": 99.64305623372395,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return true ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) -1) ;",
            "score": 99.625478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr.trim( ) ) ;",
            "score": 99.594375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.576015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.value ) ;",
            "score": 99.55831473214286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.getName( ) ) ;",
            "score": 99.66775828394397,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64706526131465,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.trim( ).length( ) -1) ) ;",
            "score": 99.64168875558036,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . trim ( ) . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr == false ) ;",
            "score": 99.59390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , toUpperCase( ) ) ;",
            "score": 99.58053927951389,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(1, searchStr.length( ) ) ) ;",
            "score": 99.66693987165179,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 1 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isLowerCase( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64702778477823,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Lower CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.substring( searchStr.length( ) -1) ) ) ;",
            "score": 99.64155105064656,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . substring ( search CaMeL Str . length ( ) - 1 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.endsWith( ', ') ) ;",
            "score": 99.62435208834134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.endsWith( 'ABCDEF') ) ;",
            "score": 99.62435208834134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.endsWith( 'cde') ) ;",
            "score": 99.62435208834134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.endsWith( 'def') ) ;",
            "score": 99.62435208834134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.endsWith( 'abcdef') ) ;",
            "score": 99.62435208834134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ,",
            "score": 99.59339317908653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.equals( searchStr ) ) ) ;",
            "score": 99.57982494212963,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . equals ( search CaMeL Str ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.574990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.574990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.574990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.574990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', str.toUpperCase( ) , searchStr ) ;",
            "score": 99.574990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr ) ;",
            "score": 99.55752766927084,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , searchStr",
            "score": 99.66662176724138,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( ', '.equals( str.substring(0, searchStr.length( ) -1) ) ) ;",
            "score": 99.66053185096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( 'ABCDEF'.equals( str.substring(0, searchStr.length( ) -1) ) ) ;",
            "score": 99.66053185096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( 'cde'.equals( str.substring(0, searchStr.length( ) -1) ) ) ;",
            "score": 99.66053185096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( 'def'.equals( str.substring(0, searchStr.length( ) -1) ) ) ;",
            "score": 99.66053185096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( 'abcdef'.equals( str.substring(0, searchStr.length( ) -1) ) ) ;",
            "score": 99.66053185096153,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.length( ) ) ;",
            "score": 99.622802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , null ) ;",
            "score": 99.59194800967262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , searchStr ) ;",
            "score": 99.57948369565217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) *false ;",
            "score": 99.66625134698276,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.toString( ) ) ;",
            "score": 99.6598046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.64658675655242,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ; } else return true ;",
            "score": 99.64054652622768,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } else return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.6225,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , null ) ;",
            "score": 99.5901171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return count( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57911964699075,
            "correctness": "uncompilable",
            "tokenized_patch": "return count ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.charValue( ) ) ;",
            "score": 99.55700102306548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . char CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return false ; } return containsIgnoreCase( str ) ;",
            "score": 99.65931114783653,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , chars.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64581930226294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , chars . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.64043978987068,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.lastIndexOf( ', ') ) ) ;",
            "score": 99.622275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.lastIndexOf( 'ABCDEF') ) ) ;",
            "score": 99.622275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.lastIndexOf( 'cde') ) ) ;",
            "score": 99.622275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.lastIndexOf( 'def') ) ) ;",
            "score": 99.622275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.lastIndexOf( 'abcdef') ) ) ;",
            "score": 99.622275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , false ) ;",
            "score": 99.58906824448529,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.isUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57875795717592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . is CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , null ) ;",
            "score": 99.57343606387867,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == null ) { return true ;",
            "score": 99.55607096354167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , true ) ;",
            "score": 99.66605050223214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null || searchStr == null ) { return false ;",
            "score": 99.648330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( out , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64576770413306,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( out , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( ', ') ) { return false ; } return true ;",
            "score": 99.63922991071429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } return true ;",
            "score": 99.63922991071429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'cde') ) { return false ; } return true ;",
            "score": 99.63922991071429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'def') ) { return false ; } return true ;",
            "score": 99.63922991071429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'abcdef') ) { return false ; } return true ;",
            "score": 99.63922991071429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.charAt(0) ).booleanValue( ) ;",
            "score": 99.6199239095052,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . char CaMeL At ( 0 ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58879288383152,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.5787353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ; }",
            "score": 99.57334594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,0) ;",
            "score": 99.555908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ? true : contains( str , searchStr ) ;",
            "score": 99.66562124399039,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ? true : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.valueOf( searchStr.charAt(0) ).booleanValue( ) ;",
            "score": 99.6184833233173,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( search CaMeL Str . char CaMeL At ( 0 ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) ,0) ;",
            "score": 99.58712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ] ) ) ;",
            "score": 99.57664794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) && searchStr == null ) ;",
            "score": 99.57333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == null ) ;",
            "score": 99.55545043945312,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) > searchStr.length( ) ) { return true ; } return false ;",
            "score": 99.65804940682871,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > search CaMeL Str . length ( ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str == null || str.toUpperCase( ) == null || searchStr == null ) ;",
            "score": 99.6471416766827,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.64565934806035,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.equals( str.toUpperCase( ) ) ) { return false ; } return false ;",
            "score": 99.63903387661638,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsAll( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.618125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.5763927641369,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str + ', '+ searchStr.toUpperCase( ) ) ;",
            "score": 99.57235863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.57235863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.57235863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.57235863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.57235863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( containsIgnoreCase( str , searchStr ) ) ;",
            "score": 99.55290083451705,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.lastIndexOf( ', ') ) ;",
            "score": 99.65772501627605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.lastIndexOf( 'ABCDEF') ) ;",
            "score": 99.65772501627605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.lastIndexOf( 'cde') ) ;",
            "score": 99.65772501627605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.lastIndexOf( 'def') ) ;",
            "score": 99.65772501627605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.lastIndexOf( 'abcdef') ) ;",
            "score": 99.65772501627605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(( String ) str , searchStr.toUpperCase( ) ) ;",
            "score": 99.64584585336539,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.64515341481855,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ; } else { return true ; }",
            "score": 99.63882446289062,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr ) ; }",
            "score": 99.58648126775569,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , null , searchStr.toUpperCase( ) ) ;",
            "score": 99.57234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.6449774380388,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64491102430556,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.length( ) -1) ) ;",
            "score": 99.61717640269886,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,1) ;",
            "score": 99.58626302083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( false ) ) ;",
            "score": 99.5713602701823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr == null && searchStr == null ) ;",
            "score": 99.55260699728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str == null && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.66466022359914,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceAll( ', ', ', ') ) ;",
            "score": 99.6571553548177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceAll( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.6571553548177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceAll( 'cde', 'cde') ) ;",
            "score": 99.6571553548177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceAll( 'def', 'def') ) ;",
            "score": 99.6571553548177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceAll( 'abcdef', 'abcdef') ) ;",
            "score": 99.6571553548177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return valueOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64494376346983,
            "correctness": "uncompilable",
            "tokenized_patch": "return value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ; } return false ;",
            "score": 99.63744178185097,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } return false ;",
            "score": 99.63744178185097,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ; } return false ;",
            "score": 99.63744178185097,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ; } return false ;",
            "score": 99.63744178185097,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ; } return false ;",
            "score": 99.63744178185097,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) true ) ;",
            "score": 99.5859883626302,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( str.toUpperCase( ) ) ;",
            "score": 99.57540328414352,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.getName( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.570517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . get CaMeL Name ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) && true ;",
            "score": 99.66466022359914,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) && true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( searchStr.indexOf( searchStr ) == -1) { return true ; } return true ;",
            "score": 99.65683774594908,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) == - 1 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.644111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return true ; } else { return false ; }",
            "score": 99.63741932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return true ; } else { return false ; }",
            "score": 99.63741932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return true ; } else { return false ; }",
            "score": 99.63741932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return true ; } else { return false ; }",
            "score": 99.63741932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return true ; } else { return false ; }",
            "score": 99.63741932744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr.length( ) ) ;",
            "score": 99.617158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr , false ) ;",
            "score": 99.5846484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.equals( str.toUpperCase( ) ) ;",
            "score": 99.57497687088816,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return true ;",
            "score": 99.55092259457237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) false ) ) ;",
            "score": 99.66443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ? ', ': str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.6561279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? $STRING$ : str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ? 'ABCDEF': str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.6561279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? $STRING$ : str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ? 'cde': str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.6561279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? $STRING$ : str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ? 'def': str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.6561279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? $STRING$ : str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ? 'abcdef': str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.6561279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? $STRING$ : str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.64433436239919,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return false ; } else { return true ; }",
            "score": 99.63717651367188,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return false ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.charAt( searchStr.length( ) -1) ) ;",
            "score": 99.61636117788461,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL At ( search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.equals( ) ) ;",
            "score": 99.57482458043981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; if( str == null ) { return false ; }",
            "score": 99.56923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; if ( str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , toString.toUpperCase( ) ) ;",
            "score": 99.55087678328805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr ) ) { return false ; } return true ;",
            "score": 99.6642557779948,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return(( searchStr == null ) &&( searchStr.length( ) ==0) ) ;",
            "score": 99.65596516927083,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( search CaMeL Str == null ) && ( search CaMeL Str . length ( ) == 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toString( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64371464170259,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return true ; } else { return false ; }",
            "score": 99.63680594308036,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return true ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6148097826087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.56828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.56828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.56828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.56828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.56828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , null ) ;",
            "score": 99.548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( str ) == -1) { return true ; } return true ;",
            "score": 99.655859375,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( str ) == - 1 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , charValue.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64316878780242,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char CaMeL Value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return true ; } return false ;",
            "score": 99.63599537037037,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.61375075120192,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , false ) ;",
            "score": 99.58421912560097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, str.length( ) ) ) ;",
            "score": 99.573486328125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( searchStr.toUpperCase( ) ) ;",
            "score": 99.5483630952381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ? true : contains( str , searchStr.toUpperCase( ) )",
            "score": 99.66295123922414,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ? true : contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.6424496299342,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == null || str.toUpperCase( ) == null ) ;",
            "score": 99.64139229910714,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null || str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.equals( searchStr.toUpperCase( ) ) ) { return true ; } return false ;",
            "score": 99.63591657366071,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.57333608774039,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( -1) ) ;",
            "score": 99.5678515625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , ) ;",
            "score": 99.54832874644886,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( str ) <0) { return false ; } return true ;",
            "score": 99.65578206380208,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( str ) < 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).toLowerCase( ) ;",
            "score": 99.64167131696429,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( value == null ) { return false ; }",
            "score": 99.5828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( value == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.57216186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.567783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toString( ) == null ) { return false ;",
            "score": 99.54807000411184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL String ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) +0;",
            "score": 99.66263133081897,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') != -1) { return false ; } return false ;",
            "score": 99.65421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') != -1) { return false ; } return false ;",
            "score": 99.65421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') != -1) { return false ; } return false ;",
            "score": 99.65421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') != -1) { return false ; } return false ;",
            "score": 99.65421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') != -1) { return false ; } return false ;",
            "score": 99.65421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == null ) ;",
            "score": 99.64079145951705,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.64018397177419,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return true ; } return true ;",
            "score": 99.63590494791667,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.61257005774456,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { if( searchStr == null ) { return false ; }",
            "score": 99.58130944293478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { if ( search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.57190880408653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + true ;",
            "score": 99.5666796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.toLowerCase( ) ) ;",
            "score": 99.65336277173913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toUpperCase( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64032451923077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( str.toUpperCase( ) ) ) { return true ; } return false ;",
            "score": 99.63573279747597,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( contains( str , searchStr ) ) { return false ; } return false ;",
            "score": 99.58018188476562,
            "correctness": "wrong",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56534830729167,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ) == null || searchStr == null ) ;",
            "score": 99.5477627840909,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).toString( ) ;",
            "score": 99.66228616648706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( str ) == -1) { return true ; } return false ;",
            "score": 99.6533203125,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( str ) == - 1 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.equals( searchStr.toUpperCase( ) ) ) { return true ; } return true ;",
            "score": 99.6334228515625,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.valueOf( searchStr ).booleanValue( ) ;",
            "score": 99.61154656661184,
            "correctness": "wrong",
            "tokenized_patch": "return Boolean . value CaMeL Of ( search CaMeL Str ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) { return true ; }",
            "score": 99.57091346153847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , false ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , false ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return false ;",
            "score": 99.54741354549633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') >=0&& str.indexOf( ', ') >=0) ;",
            "score": 99.6533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 && str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') >=0&& str.indexOf( 'ABCDEF') >=0) ;",
            "score": 99.6533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 && str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') >=0&& str.indexOf( 'cde') >=0) ;",
            "score": 99.6533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 && str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') >=0&& str.indexOf( 'def') >=0) ;",
            "score": 99.6533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 && str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') >=0&& str.indexOf( 'abcdef') >=0) ;",
            "score": 99.6533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 && str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(( String ) searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.63957868303571,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return set( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6383568548387,
            "correctness": "uncompilable",
            "tokenized_patch": "return set ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( str.toUpperCase( ) ) ) { return true ; } return true ;",
            "score": 99.6330096905048,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,0, searchStr.length( ) ) ;",
            "score": 99.6111701516544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null || searchStr == null ) { return false ; }",
            "score": 99.57912973257211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ).trim( ) ) ;",
            "score": 99.57090928819444,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ', ') ) ;",
            "score": 99.56348673502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( 'ABCDEF') ) ;",
            "score": 99.56348673502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( 'cde') ) ;",
            "score": 99.56348673502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( 'def') ) ;",
            "score": 99.56348673502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( 'abcdef') ) ;",
            "score": 99.56348673502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '+ searchStr.toUpperCase( ) ) ;",
            "score": 99.547119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.547119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.547119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.547119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.547119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ).toLowerCase( ) ) ;",
            "score": 99.65306712962963,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )1) ;",
            "score": 99.63865443638393,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( in.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6378761574074,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( in . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( str.toUpperCase( ) ) ) { return false ; } return true ;",
            "score": 99.63272798978366,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( str ) ) ;",
            "score": 99.6105487530048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ).length( ) ==0) ;",
            "score": 99.57044474283855,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.indexOf( str ) != -1) { return true ; } return false ;",
            "score": 99.652841796875,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( str ) != - 1 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , char.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6377374057112,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) ) , searchStr ) ;",
            "score": 99.63258579799107,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') ) ;",
            "score": 99.61001247829861,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.61001247829861,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') ) ;",
            "score": 99.61001247829861,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') ) ;",
            "score": 99.61001247829861,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.61001247829861,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(( String ) str.toUpperCase( ) , searchStr ) ;",
            "score": 99.57875413161058,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.56897989908855,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return ) { return false ;",
            "score": 99.5454989346591,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) == false ) ;",
            "score": 99.65909550107759,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') != -1) { return true ; } return true ;",
            "score": 99.652568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') != -1) { return true ; } return true ;",
            "score": 99.652568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') != -1) { return true ; } return true ;",
            "score": 99.652568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') != -1) { return true ; } return true ;",
            "score": 99.652568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') != -1) { return true ; } return true ;",
            "score": 99.652568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return false ; } return containsIgnoreCase( str ) ;",
            "score": 99.65239800347223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != false ;",
            "score": 99.63716765372983,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(1, searchStr.length( ) ) , searchStr.length( ) ) ;",
            "score": 99.63221958705357,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 1 , search CaMeL Str . length ( ) ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.60689453125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr , null ) ;",
            "score": 99.578388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.56767345610119,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str , ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56266276041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( value.toUpperCase( ) , searchStr ) ;",
            "score": 99.54366904810855,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr )",
            "score": 99.65737082741477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , String.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63688413558468,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , String . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -0, searchStr.length( ) -1) ;",
            "score": 99.63145616319444,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 0 , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.606689453125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str , searchStr.equals( searchStr ).toUpperCase( ) ) ;",
            "score": 99.5674579326923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toArray( ) ) ;",
            "score": 99.562373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( String ) str.toUpperCase( ) , searchStr ) ;",
            "score": 99.54261363636364,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( ( String ) str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) : contains ;",
            "score": 99.65726023706897,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return containsIgnoreCase( str ) ;",
            "score": 99.63670857747395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return max( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.63620521282327,
            "correctness": "uncompilable",
            "tokenized_patch": "return max ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) ).trim( ) ) ;",
            "score": 99.63112095424107,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,0.null ) ;",
            "score": 99.57582158627717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 . null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( searchStr ) ) ;",
            "score": 99.5673595610119,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', '+ str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String [ ] { searchStr } , searchStr ) ;",
            "score": 99.54252292798913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String [ ] { search CaMeL Str } , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != ', '|| str.charAt(0) == ', ') ;",
            "score": 99.65135779747597,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'ABCDEF'|| str.charAt(0) == 'ABCDEF') ;",
            "score": 99.65135779747597,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'cde'|| str.charAt(0) == 'cde') ;",
            "score": 99.65135779747597,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'def'|| str.charAt(0) == 'def') ;",
            "score": 99.65135779747597,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'abcdef'|| str.charAt(0) == 'abcdef') ;",
            "score": 99.65135779747597,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == searchStr.toUpperCase( ) ;",
            "score": 99.63643704927884,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( directory.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63619429976852,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( directory . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.substring( str.length( ) -1) ) ;",
            "score": 99.63099083533653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . substring ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1, searchStr.length( ) ) ) ;",
            "score": 99.60547892252605,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , null ) ;",
            "score": 99.57530799278847,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.56699782151442,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '|| str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'|| str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'|| str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'|| str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'|| str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.562265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( Locale.US ) ) ;",
            "score": 99.6499492938702,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( Locale . US ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return contains( str , searchStr.length( ) ) ;",
            "score": 99.63022286551339,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0,1) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60537484975961,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , 1 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( ', ', ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.561484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.561484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.561484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.561484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.561484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) false ) ;",
            "score": 99.54146118164063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false : contains( str , searchStr )",
            "score": 99.65564385775862,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : contains ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != ', '|| str.charAt(1) == ', ') ;",
            "score": 99.64888822115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'ABCDEF'|| str.charAt(1) == 'ABCDEF') ;",
            "score": 99.64888822115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'cde'|| str.charAt(1) == 'cde') ;",
            "score": 99.64888822115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'def'|| str.charAt(1) == 'def') ;",
            "score": 99.64888822115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'abcdef'|| str.charAt(1) == 'abcdef') ;",
            "score": 99.64888822115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ || str . char CaMeL At ( 1 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null || searchStr == null ) { return true ;",
            "score": 99.633115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null || search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return true ; } else return false ;",
            "score": 99.62962183459052,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return true ; } else return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.startsWith( ', ') ) ;",
            "score": 99.60533728966347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.60533728966347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.startsWith( 'cde') ) ;",
            "score": 99.60533728966347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.startsWith( 'def') ) ;",
            "score": 99.60533728966347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.60533728966347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.575234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( String ) str , searchStr.toUpperCase( ) ) ;",
            "score": 99.56130149147727,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( ( String ) str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) && false ;",
            "score": 99.65545022898706,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) && false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ; } else return false ;",
            "score": 99.62932477678571,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } else return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.lastCaMeL",
            "score": 99.57498168945312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . last CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( exp.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56589988425925,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( exp . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) -1) ;",
            "score": 99.56099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ).toUpperCase( ) ) ;",
            "score": 99.65542497306035,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr.toUpperCase( ) ) ) { return false ;",
            "score": 99.63249860491071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.equals( str.toUpperCase( ) ) ) { return true ; } return true ;",
            "score": 99.62929350754311,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( String.valueOf( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60452974759616,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( String . value CaMeL Of ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( list.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56499565972223,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( list . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , true , searchStr.toUpperCase( ) ) ;",
            "score": 99.560654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , true , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) *",
            "score": 99.65462239583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( ', ') > -1) { return false ; } return true ;",
            "score": 99.645322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'ABCDEF') > -1) { return false ; } return true ;",
            "score": 99.645322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'cde') > -1) { return false ; } return true ;",
            "score": 99.645322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'def') > -1) { return false ; } return true ;",
            "score": 99.645322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.indexOf( 'abcdef') > -1) { return false ; } return true ;",
            "score": 99.645322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.toUpperCase( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.63541085379464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . to CaMeL Upper CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null || searchStr == null ) { return true ;",
            "score": 99.63233483355978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null || search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.equals( str.toUpperCase( ) ) ) { return true ; } return false ;",
            "score": 99.62924299568965,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.valueOf( str.toUpperCase( ).endsWith( ', ') ) ;",
            "score": 99.60393817608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.toUpperCase( ).endsWith( 'ABCDEF') ) ;",
            "score": 99.60393817608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.toUpperCase( ).endsWith( 'cde') ) ;",
            "score": 99.60393817608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.toUpperCase( ).endsWith( 'def') ) ;",
            "score": 99.60393817608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.toUpperCase( ).endsWith( 'abcdef') ) ;",
            "score": 99.60393817608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.value ) ;",
            "score": 99.5741015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( ).toUpperCase( ) ) ;",
            "score": 99.56384729456019,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ) , searchStr ) ;",
            "score": 99.56025133634868,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56025133634868,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56025133634868,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56025133634868,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56025133634868,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.trim( ) ) ;",
            "score": 99.53948102678571,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ) ? false : contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.65428748497597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) ? false : contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt(1) ) ;",
            "score": 99.644169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( searchStr.toUpperCase( ) ) ) { return false ; } return true ;",
            "score": 99.62921142578125,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,1) ;",
            "score": 99.57365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.substring(0, searchStr.length( ) ) ==0) { return false ; }",
            "score": 99.56342230902777,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.5389763327206,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.charAt(0) == ', ') { return false ; } return true ;",
            "score": 99.64402262369792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.charAt(0) == 'ABCDEF') { return false ; } return true ;",
            "score": 99.64402262369792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.charAt(0) == 'cde') { return false ; } return true ;",
            "score": 99.64402262369792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.charAt(0) == 'def') { return false ; } return true ;",
            "score": 99.64402262369792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.charAt(0) == 'abcdef') { return false ; } return true ;",
            "score": 99.64402262369792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str != null ) { return contains( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.63459382233796,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str != null ) { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56282552083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + ', '+ searchStr.toUpperCase( ) ) ;",
            "score": 99.55890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'ABCDEF'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.55890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'cde'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.55890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'def'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.55890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'abcdef'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.55890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr ) ) { return false ;",
            "score": 99.53724975585938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.65318359375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( false , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63441910282258,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str ,0, searchStr.length( ) ) == -1;",
            "score": 99.60277210582386,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , 0 , search CaMeL Str . length ( ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.56229858398437,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str + ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.5587109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.5587109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.5587109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.5587109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.5587109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ).length( ) ) ;",
            "score": 99.64365022078805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63426050646552,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return contains( str.toUpperCase( ) ) ;",
            "score": 99.62849644252232,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( contains( str ) ).booleanValue( ) ;",
            "score": 99.60262451171874,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( contains ( str ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr.",
            "score": 99.5730511209239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , false , searchStr.toUpperCase( ) ) ;",
            "score": 99.5586328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , ', ') ;",
            "score": 99.53604789402173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.53604789402173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , 'cde') ;",
            "score": 99.53604789402173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , 'def') ;",
            "score": 99.53604789402173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , 'abcdef') ;",
            "score": 99.53604789402173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.toUpperCase( ) ) ;",
            "score": 99.63394059806035,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( str.toUpperCase( ) ) ) { return false ; } return false ;",
            "score": 99.6284930889423,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.substring(1) ) ;",
            "score": 99.60233561197917,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains(( String ) searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.5585428873698,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( ( String ) search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return containsIgnoreCase( str , str.toUpperCase( ) ) ;",
            "score": 99.53566576086956,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.65102713448661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null.toUpperCase( ) ;",
            "score": 99.6302157315341,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ; } else return false ;",
            "score": 99.62818287037037,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } else return false ;",
            "score": 99.62818287037037,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ; } else return false ;",
            "score": 99.62818287037037,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ; } else return false ;",
            "score": 99.62818287037037,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ; } else return false ;",
            "score": 99.62818287037037,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ! contains( searchStr ) ) ;",
            "score": 99.56064633969908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ! contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return super.containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return super . contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) false ) ;",
            "score": 99.53474731445313,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.64199829101562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.6337654359879,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return false ; } else return true ;",
            "score": 99.62806438577586,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return false ; } else return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.format( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.56035698784723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.trim( ) == null ) { return false ;",
            "score": 99.53452997622283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . trim ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) || containsIgnoreCase( str , searchStr ) ;",
            "score": 99.65058244977679,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) || contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.charAt(0) ) ;",
            "score": 99.64155717329545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63215883316532,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.62977430555556,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).startsWith( ', ') ;",
            "score": 99.62753182870371,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.62753182870371,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).startsWith( 'cde') ;",
            "score": 99.62753182870371,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).startsWith( 'def') ;",
            "score": 99.62753182870371,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).startsWith( 'abcdef') ;",
            "score": 99.62753182870371,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr.substring(",
            "score": 99.571708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str . substring (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )",
            "score": 99.556708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? false : false ;",
            "score": 99.65041775173611,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( ).toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6318595640121,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str == null ) ||( str.toUpperCase( ) == null ) ) { return false ;",
            "score": 99.62929506655092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str == null ) || ( str . to CaMeL Upper CaMeL Case ( ) == null ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return false ; } else return false ;",
            "score": 99.62737405711206,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return false ; } else return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, count ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60052020733173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , count ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.55973307291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55638631184895,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( value , searchStr.toUpperCase( ) ) ;",
            "score": 99.53316457648026,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( value , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).toUpperCase( )",
            "score": 99.65036245492789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return trim( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63135553175404,
            "correctness": "uncompilable",
            "tokenized_patch": "return trim ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null || searchStr == null ) { return false ; } }",
            "score": 99.6288429542824,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) && searchStr.length( ) >0) ;",
            "score": 99.559560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.length( ) -1) ;",
            "score": 99.641171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str String.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62787737165179,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str String . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( ', ') ) { return false ; } return false ;",
            "score": 99.62713623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } return false ;",
            "score": 99.62713623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'cde') ) { return false ; } return false ;",
            "score": 99.62713623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'def') ) { return false ; } return false ;",
            "score": 99.62713623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).equals( 'abcdef') ) { return false ; } return false ;",
            "score": 99.62713623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , value ) ;",
            "score": 99.57081240699405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( str.toUpperCase( ) ) ;",
            "score": 99.55910011574075,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.clear( ) ) ;",
            "score": 99.53056003736413,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . clear ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1) , searchStr.toUpperCase( ) ) ;",
            "score": 99.64997209821429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return true ; } else { return true ; }",
            "score": 99.627119140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return true ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.indexOf( ', ') , searchStr.toLowerCase( ) ) ;",
            "score": 99.599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') , searchStr.toLowerCase( ) ) ;",
            "score": 99.599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') , searchStr.toLowerCase( ) ) ;",
            "score": 99.599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') , searchStr.toLowerCase( ) ) ;",
            "score": 99.599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') , searchStr.toLowerCase( ) ) ;",
            "score": 99.599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ? false : str.toUpperCase( ) , searchStr ) ;",
            "score": 99.570576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? false : str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55846228966347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.52981700067934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ).length( ) ) ;",
            "score": 99.640380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.63053104795259,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).length( ) ==0) { return true ; } return true ;",
            "score": 99.62674265894397,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) > -1;",
            "score": 99.59925333658855,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) > - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str + searchStr.toUpperCase( ) ) ;",
            "score": 99.55843313116776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.554912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , value.toUpperCase( ) , searchStr ) ;",
            "score": 99.52933175223214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) *0;",
            "score": 99.64680428340517,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toLowerCase( ) , searchStr.length( ) ) ;",
            "score": 99.64001916956019,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.63047347530242,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return true ; } else { return false ; }",
            "score": 99.62674082880434,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return true ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ) == str.toUpperCase( ) ) ;",
            "score": 99.62598673502605,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || searchStr == null || searchStr == null ) { return false ; }",
            "score": 99.57047213040866,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String [ ] { str } , searchStr ) ;",
            "score": 99.52923874627976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String [ ] { str } , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) == true ) ;",
            "score": 99.646240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toLowerCase( ) , searchStr.trim( ) ) ;",
            "score": 99.63674587673611,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return count( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.63028690732759,
            "correctness": "uncompilable",
            "tokenized_patch": "return count ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return true ; } else return false ;",
            "score": 99.62669214709052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return true ; } else return false ;",
            "score": 99.62669214709052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return true ; } else return false ;",
            "score": 99.62669214709052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return true ; } else return false ;",
            "score": 99.62669214709052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return true ; } else return false ;",
            "score": 99.62669214709052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ? false",
            "score": 99.62477329799107,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(2) ) ;",
            "score": 99.59798177083333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(4) ) ;",
            "score": 99.59798177083333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(3) ) ;",
            "score": 99.59798177083333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(8) ) ;",
            "score": 99.59798177083333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(7) ) ;",
            "score": 99.59798177083333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.equals( searchStr ) ) ;",
            "score": 99.55729166666667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55465262276786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , ;",
            "score": 99.52882982336956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.64609711745689,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.630126953125,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return true ; } else { return true ; }",
            "score": 99.62611897786458,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return true ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.startsWith( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.59754356971153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.59754356971153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.59754356971153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.59754356971153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.59754356971153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , null , false ) ;",
            "score": 99.5697711447011,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.55695452008929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.55460611979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.55460611979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.55460611979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.55460611979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.55460611979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).booleanValue( ) ;",
            "score": 99.64535627693965,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == ', ';",
            "score": 99.62952053931451,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == 'ABCDEF';",
            "score": 99.62952053931451,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == 'cde';",
            "score": 99.62952053931451,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == 'def';",
            "score": 99.62952053931451,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == 'abcdef';",
            "score": 99.62952053931451,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62606916756465,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62606916756465,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62606916756465,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62606916756465,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62606916756465,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.toUpperCase( ).booleanValue( ) ) ;",
            "score": 99.59744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) . boolean CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.size( ) false ) ;",
            "score": 99.56976318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . size ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.endsWith( ', ') ) ) ;",
            "score": 99.55619755497685,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.endsWith( 'ABCDEF') ) ) ;",
            "score": 99.55619755497685,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.endsWith( 'cde') ) ) ;",
            "score": 99.55619755497685,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.endsWith( 'def') ) ) ;",
            "score": 99.55619755497685,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.endsWith( 'abcdef') ) ) ;",
            "score": 99.55619755497685,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , true ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.553701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , true ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toString( ) ) ;",
            "score": 99.5285580283717,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , chars.toUpperCase( ) ) ;",
            "score": 99.62931034482759,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , chars . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) -1) , searchStr ) ;",
            "score": 99.62601143973214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).charAt(0) ) ;",
            "score": 99.59528057391827,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , false ) ;",
            "score": 99.52800186820652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) )",
            "score": 99.64455159505208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( Locale.getDefault( ) ) ) ;",
            "score": 99.63592059795673,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( Locale . get CaMeL Default ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isUpperCase( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62881174395162,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).length( ) ==0) { return true ; } return false ;",
            "score": 99.62589237607759,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "{ return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62347412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.569013671875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str , ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.552998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.552998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.552998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.552998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.552998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.trim( ) ) ;",
            "score": 99.52775065104167,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr ) ? false : contains( str.toUpperCase( ) , searchStr )",
            "score": 99.64433762122844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ? false : contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.63515218098958,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != ', ';",
            "score": 99.62863060735887,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != 'ABCDEF';",
            "score": 99.62863060735887,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != 'cde';",
            "score": 99.62863060735887,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != 'def';",
            "score": 99.62863060735887,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != 'abcdef';",
            "score": 99.62863060735887,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return true ; } else { return false ; }",
            "score": 99.62580672554348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return true ; } else { return false ; }",
            "score": 99.62580672554348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return true ; } else { return false ; }",
            "score": 99.62580672554348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return true ; } else { return false ; }",
            "score": 99.62580672554348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return true ; } else { return false ; }",
            "score": 99.62580672554348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , true ) ;",
            "score": 99.59383138020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , false ) ;",
            "score": 99.568740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.552958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.552958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.552958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.552958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.552958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) : contains( searchStr ) ;",
            "score": 99.6442401592548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains.toUpperCase( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.62800816127232,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return false ; } else return false ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return false ; } else return false ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return false ; } else return false ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return false ; } else return false ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return false ; } else return false ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.equals( searchStr ) ).booleanValue( ) ;",
            "score": 99.59342447916667,
            "correctness": "wrong",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . equals ( search CaMeL Str ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( ) ) ;",
            "score": 99.56869904891305,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55535419170673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + false ) ;",
            "score": 99.55263671875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + false ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) { return false ;",
            "score": 99.52629288383152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + ', ';",
            "score": 99.64314217403017,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + 'ABCDEF';",
            "score": 99.64314217403017,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + 'cde';",
            "score": 99.64314217403017,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + 'def';",
            "score": 99.64314217403017,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + 'abcdef';",
            "score": 99.64314217403017,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr , searchStr.length( ) ) ;",
            "score": 99.63405128761575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return false ; } else return true ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return false ; } else return true ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return false ; } else return true ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return false ; } else return true ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return false ; } else return true ;",
            "score": 99.62575767780173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.62129267939815,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( searchStr == null ) ||( searchStr == null ) ) { return false ; }",
            "score": 99.56851196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( search CaMeL Str == null ) || ( search CaMeL Str == null ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.552294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.552294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.552294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.552294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.552294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } , ', ') ;",
            "score": 99.52548615828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } , 'ABCDEF') ;",
            "score": 99.52548615828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } , 'cde') ;",
            "score": 99.52548615828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } , 'def') ;",
            "score": 99.52548615828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } , 'abcdef') ;",
            "score": 99.52548615828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) true ) ) ;",
            "score": 99.64306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return StringUtils.containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.63331886574075,
            "correctness": "wrong",
            "tokenized_patch": "return String CaMeL Utils . contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr.toUpperCase( ) ) ) { return true ;",
            "score": 99.62125941685268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) || searchStr.length( ) >0) ;",
            "score": 99.5525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) || search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.55204845610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.55204845610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.55204845610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.55204845610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , false ) ;",
            "score": 99.55204845610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.clone( ) ) ;",
            "score": 99.52530570652173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . clone ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr , searchStr.length( ) ) ;",
            "score": 99.63190827546296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( command , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.62759891633064,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( command , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( searchStr.toUpperCase( ) ) ) { return false ; } return false ;",
            "score": 99.62506103515625,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.indexOf( ', ') ) ) ;",
            "score": 99.589560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.indexOf( 'ABCDEF') ) ) ;",
            "score": 99.589560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.indexOf( 'cde') ) ) ;",
            "score": 99.589560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.indexOf( 'def') ) ) ;",
            "score": 99.589560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.indexOf( 'abcdef') ) ) ;",
            "score": 99.589560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '.toUpperCase( ) , searchStr ) ;",
            "score": 99.56824311755952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56824311755952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56824311755952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56824311755952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'.toUpperCase( ) , searchStr ) ;",
            "score": 99.56824311755952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.searchStr.toUpperCase( ) ) ;",
            "score": 99.55234162703805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -1, searchStr.length( ) -0) ;",
            "score": 99.62467447916667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 1 , search CaMeL Str . length ( ) - 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.62112991898148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.62112991898148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.62112991898148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.62112991898148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.62112991898148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( str ) , searchStr.length( ) ) ;",
            "score": 99.58927095853366,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( str ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ).length( ) >0) ;",
            "score": 99.5518290201823,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52457682291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.62704763104838,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( ', ') ) { return true ; } else { return false ; }",
            "score": 99.624326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'ABCDEF') ) { return true ; } else { return false ; }",
            "score": 99.624326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'cde') ) { return true ; } else { return false ; }",
            "score": 99.624326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'def') ) { return true ; } else { return false ; }",
            "score": 99.624326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'abcdef') ) { return true ; } else { return false ; }",
            "score": 99.624326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).toUpperCase( ) , true ) ;",
            "score": 99.589140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0, false ) ) ;",
            "score": 99.56787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , new String( searchStr ) ) ;",
            "score": 99.55178965692934,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , new String ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str ,0, searchStr.toUpperCase( ) ) ;",
            "score": 99.551533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( start , searchStr.toUpperCase( ) ) ;",
            "score": 99.52449898097827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( start , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , true ) ;",
            "score": 99.63955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , searchStr.trim( ) ) ;",
            "score": 99.62889720775463,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.6262915826613,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( searchStr ) ) { return true ; } else return true ;",
            "score": 99.62386348329741,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) { return true ; } else return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0, count ) ) ;",
            "score": 99.58865121694711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , count ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55147512335526,
            "correctness": "wrong",
            "tokenized_patch": "return equals ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) ,",
            "score": 99.55146928267045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , str.toUpperCase( ) ) ;",
            "score": 99.52370091488487,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return value( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.62622912176724,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ; } else return true ;",
            "score": 99.62365270543981,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } else return true ;",
            "score": 99.62365270543981,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ; } else return true ;",
            "score": 99.62365270543981,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ; } else return true ;",
            "score": 99.62365270543981,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ; } else return true ;",
            "score": 99.62365270543981,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.toLowerCase( ) ).booleanValue( ) ;",
            "score": 99.588173828125,
            "correctness": "wrong",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Lower CaMeL Case ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , new String [ ] { searchStr } ) ;",
            "score": 99.56658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , new String [ ] { search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toClass( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.551220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Class ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , contains( searchStr ) ) ;",
            "score": 99.52344859730114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + searchStr.toUpperCase( ) ) ;",
            "score": 99.63736074942129,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return false ; } else { return true ; }",
            "score": 99.623564453125,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return false ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! contains( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.58805338541667,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.toUpperCase( ) ) ;",
            "score": 99.5510546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr.toLowerCase( ) ) ) ;",
            "score": 99.62595703125,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , str.toUpperCase( ) ) ;",
            "score": 99.62531990840517,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61961986400463,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toLowerCase( ) , searchStr.length( ) ) ;",
            "score": 99.58744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(",
            "score": 99.56577555338542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.55111030910327,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( null , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.550927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( null , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ;",
            "score": 99.52141779119319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ;",
            "score": 99.52141779119319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ;",
            "score": 99.52141779119319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ;",
            "score": 99.52141779119319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ;",
            "score": 99.52141779119319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ).trim( ) ) ;",
            "score": 99.62548828125,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).equals( searchStr ) ) ;",
            "score": 99.62415813577586,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return false ; } else { return false ; }",
            "score": 99.62281334918478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return false ; } else { return false ; }",
            "score": 99.62281334918478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return false ; } else { return false ; }",
            "score": 99.62281334918478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return false ; } else { return false ; }",
            "score": 99.62281334918478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return false ; } else { return false ; }",
            "score": 99.62281334918478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.indexOf( ', ') ) ;",
            "score": 99.58689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.58689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.indexOf( 'cde') ) ;",
            "score": 99.58689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.indexOf( 'def') ) ;",
            "score": 99.58689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.58689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.valueOf( ) ) ;",
            "score": 99.565361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . value CaMeL Of ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLocale( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.550556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Locale ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , str.toUpperCase( ) ) ;",
            "score": 99.52139945652173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? false : true ;",
            "score": 99.6345847800926,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , searchStr.trim( ) ) ;",
            "score": 99.625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.62367983217592,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ).length( ) ==0) { return false ; } else { return false ; }",
            "score": 99.62216421274039,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . trim ( ) . length ( ) == 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str ,( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.61907489483173,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.valueOf( str.startsWith( ', ') ).booleanValue( ) ;",
            "score": 99.58578491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . starts CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.startsWith( 'ABCDEF') ).booleanValue( ) ;",
            "score": 99.58578491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . starts CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.startsWith( 'cde') ).booleanValue( ) ;",
            "score": 99.58578491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . starts CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.startsWith( 'def') ).booleanValue( ) ;",
            "score": 99.58578491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . starts CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.startsWith( 'abcdef') ).booleanValue( ) ;",
            "score": 99.58578491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . starts CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,0, false ) ;",
            "score": 99.56497325067934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr.toString( ) ) ;",
            "score": 99.5210597826087,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , this ) ;",
            "score": 99.6343359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.lastIndexOf( searchStr ) ) ;",
            "score": 99.62486853966347,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , str ) ;",
            "score": 99.61853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.58368210565476,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( false , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.5503515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( false , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , length( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55007005774456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , length ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , ) ;",
            "score": 99.52051890980114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( true ) ) ;",
            "score": 99.63420758928571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return max( str.toUpperCase( ) , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.62292901400862,
            "correctness": "uncompilable",
            "tokenized_patch": "return max ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ).toUpperCase( ) ) ;",
            "score": 99.62179129464286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ] , searchStr.toUpperCase( ) ) ;",
            "score": 99.61790248325893,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.trim( ).length( ) ) ;",
            "score": 99.583017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . trim ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , value ) ;",
            "score": 99.563603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', contains( str.toUpperCase( ) ) ) ;",
            "score": 99.55025024414063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', contains( str.toUpperCase( ) ) ) ;",
            "score": 99.55025024414063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', contains( str.toUpperCase( ) ) ) ;",
            "score": 99.55025024414063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', contains( str.toUpperCase( ) ) ) ;",
            "score": 99.55025024414063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', contains( str.toUpperCase( ) ) ) ;",
            "score": 99.55025024414063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1).toUpperCase( ) ) ;",
            "score": 99.55005900065105,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toString( ).toUpperCase( ) ) ;",
            "score": 99.52027428668478,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! contains( str.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58066030649039,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return false ; } return contains( str ,",
            "score": 99.54994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return false ; } return contains ( str ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.( ).toUpperCase( ) ) ;",
            "score": 99.54949396306819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : false ;",
            "score": 99.63388459578805,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( false ) ) ;",
            "score": 99.62180873325893,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == false ) ;",
            "score": 99.61719859730114,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') +1, searchStr.length( ) ) ;",
            "score": 99.5799560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') +1, searchStr.length( ) ) ;",
            "score": 99.5799560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') +1, searchStr.length( ) ) ;",
            "score": 99.5799560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') +1, searchStr.length( ) ) ;",
            "score": 99.5799560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') +1, searchStr.length( ) ) ;",
            "score": 99.5799560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.54976981026786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.54976981026786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.54976981026786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.54976981026786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , true ) ;",
            "score": 99.54976981026786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.equals( searchStr ) ) ;",
            "score": 99.5491473858173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,0) ;",
            "score": 99.51911272321429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ).trim( ) ) ;",
            "score": 99.62094907407408,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ) ;",
            "score": 99.6207784016927,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.equals( ', ') ) ;",
            "score": 99.57967122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.equals( 'ABCDEF') ) ;",
            "score": 99.57967122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.equals( 'cde') ) ;",
            "score": 99.57967122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.equals( 'def') ) ;",
            "score": 99.57967122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.equals( 'abcdef') ) ;",
            "score": 99.57967122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.EMPTY ) ;",
            "score": 99.562822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . EMPTY ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , searchStr",
            "score": 99.549375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) ) ) ;",
            "score": 99.54902787642045,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } ) ;",
            "score": 99.51910041360294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(1) ) ;",
            "score": 99.63303048270089,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( ', ') ) { return true ; } else return true ;",
            "score": 99.62106007543103,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'ABCDEF') ) { return true ; } else return true ;",
            "score": 99.62106007543103,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'cde') ) { return true ; } else return true ;",
            "score": 99.62106007543103,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'def') ) { return true ; } else return true ;",
            "score": 99.62106007543103,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).startsWith( 'abcdef') ) { return true ; } else return true ;",
            "score": 99.62106007543103,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) { return true ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replace( ', ', ', ') ) ;",
            "score": 99.62038352272727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replace( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.62038352272727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replace( 'cde', 'cde') ) ;",
            "score": 99.62038352272727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replace( 'def', 'def') ) ;",
            "score": 99.62038352272727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replace( 'abcdef', 'abcdef') ) ;",
            "score": 99.62038352272727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ).toUpperCase( ) ) ;",
            "score": 99.57962168817934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , searchStr ;",
            "score": 99.56250939002403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null || searchStr.toUpperCase( ) ) ;",
            "score": 99.54922340029762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , str.toUpperCase( ) ) ;",
            "score": 99.51908947172619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , searchStr ) ;",
            "score": 99.62014431423611,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( searchStr , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.61404984085648,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , containsIgnoreCase( searchStr ) ) ;",
            "score": 99.57941143329327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , ', ') ;",
            "score": 99.562099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , 'ABCDEF') ;",
            "score": 99.562099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , 'cde') ;",
            "score": 99.562099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , 'def') ;",
            "score": 99.562099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , 'abcdef') ;",
            "score": 99.562099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ', str.toUpperCase( ) ) ;",
            "score": 99.5186077615489,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF', str.toUpperCase( ) ) ;",
            "score": 99.5186077615489,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde', str.toUpperCase( ) ) ;",
            "score": 99.5186077615489,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def', str.toUpperCase( ) ) ;",
            "score": 99.5186077615489,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef', str.toUpperCase( ) ) ;",
            "score": 99.5186077615489,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) )",
            "score": 99.63114711216518,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61989048549107,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ).toUpperCase( ) ) ;",
            "score": 99.61872468171296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.length( ) -1) ;",
            "score": 99.57888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.size( ) ==0) { return false ; }",
            "score": 99.56207275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . size ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , true ) ;",
            "score": 99.548408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( str.toUpperCase( ) ) ) ;",
            "score": 99.547607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ;",
            "score": 99.51787971047794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) && containsIgnoreCase( str , searchStr ) ;",
            "score": 99.63071986607143,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) && contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).toUpperCase( ).trim( ) ;",
            "score": 99.61981201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return this.contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61855132004311,
            "correctness": "uncompilable",
            "tokenized_patch": "return this . contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toCharArray( ) ) ;",
            "score": 99.61734121817129,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0,0) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5786884014423,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , 0 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.format( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5614764873798,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . format ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + ) ;",
            "score": 99.54840087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ) , searchStr.length( ) ) ;",
            "score": 99.54742901141827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.iterator( ) ) ;",
            "score": 99.51749320652173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . iterator ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ).length( ) ==0;",
            "score": 99.6197021484375,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.startsWith( ', ') ) { return false ; } else { return false ; }",
            "score": 99.618203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'ABCDEF') ) { return false ; } else { return false ; }",
            "score": 99.618203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'cde') ) { return false ; } else { return false ; }",
            "score": 99.618203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'def') ) { return false ; } else { return false ; }",
            "score": 99.618203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'abcdef') ) { return false ; } else { return false ; }",
            "score": 99.618203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( str.toLowerCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61650933159723,
            "correctness": "wrong",
            "tokenized_patch": "return equals ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.equals( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56137319711539,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.54730694110577,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ) == null ) { return false ;",
            "score": 99.51719755284927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) )",
            "score": 99.62911987304688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.61915690104166,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , searchStr.length( ) ) ;",
            "score": 99.61646412037037,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.578486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.decode( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.56107271634616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . decode ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == null ) ;",
            "score": 99.54738362630208,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , ', '.toUpperCase( ) ) ;",
            "score": 99.51655505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.51655505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde'.toUpperCase( ) ) ;",
            "score": 99.51655505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def'.toUpperCase( ) ) ;",
            "score": 99.51655505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.51655505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( str ) ) ;",
            "score": 99.56099446614583,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5472265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr.toString( ) , searchStr ) ;",
            "score": 99.51627250339673,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? true : ) ;",
            "score": 99.62742332175925,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return count( str.toUpperCase( ) , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.61883755387932,
            "correctness": "uncompilable",
            "tokenized_patch": "return count ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).toUpperCase( ) , false ) ;",
            "score": 99.578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.",
            "score": 99.56006969105114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + false ;",
            "score": 99.54702613467262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) ? contains( str.toUpperCase( ) , searchStr ) : contains( str )",
            "score": 99.62578473772321,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) ? contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : contains ( str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars , str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61863550646552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).toLowerCase( ) ) ;",
            "score": 99.57701044497283,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) ) ; }",
            "score": 99.54680786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) ) ; }",
            "score": 99.54680786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) ) ; }",
            "score": 99.54680786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) ) ; }",
            "score": 99.54680786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) ) ; }",
            "score": 99.54680786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( searchStr ) ;",
            "score": 99.54621233258929,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , null , searchStr ) ;",
            "score": 99.51510799632354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase(0) ) ;",
            "score": 99.62575857979911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.6183551290761,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( this.str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61628670528017,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( this . str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61082106370192,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) , true ) ;",
            "score": 99.576689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0, searchStr",
            "score": 99.55953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54664147418478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54664147418478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54664147418478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54664147418478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54664147418478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.54584209735577,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null ) { if( searchStr == null ) { return false ;",
            "score": 99.514990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.getName( ) ) ;",
            "score": 99.6246484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.61807145743535,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( searchStr ) ) ) ;",
            "score": 99.61373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( search CaMeL Str ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,( String ) str.toUpperCase( ) ) ;",
            "score": 99.61075265066964,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , ( String ) str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toArray( ) , searchStr.length( ) ) ;",
            "score": 99.5766015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Array ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length ) ;",
            "score": 99.559443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toInteger( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Integer ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) )",
            "score": 99.62463831018519,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ; } else return true ;",
            "score": 99.61586733217592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } else return true ;",
            "score": 99.61586733217592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ; } else return true ;",
            "score": 99.61586733217592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ; } else return true ;",
            "score": 99.61586733217592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ; } else return true ;",
            "score": 99.61586733217592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.toCharArray( ) ) ;",
            "score": 99.61306527944711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( stream.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61074037905092,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( stream . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.576591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.54562245244566,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , new String ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( str.toUpperCase( ) ) ) ;",
            "score": 99.54356971153847,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString.toUpperCase( ) ) ;",
            "score": 99.5145199424342,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61799568965517,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', '.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61534381734914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61534381734914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61534381734914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61534381734914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61534381734914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.lastIndexOf( ', ') ) ) ;",
            "score": 99.61061378761575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.lastIndexOf( 'ABCDEF') ) ) ;",
            "score": 99.61061378761575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.lastIndexOf( 'cde') ) ) ;",
            "score": 99.61061378761575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.lastIndexOf( 'def') ) ) ;",
            "score": 99.61061378761575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.lastIndexOf( 'abcdef') ) ) ;",
            "score": 99.61061378761575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.trim( ).length( ) ) ) ;",
            "score": 99.5756327311198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . trim ( ) . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.name ) ;",
            "score": 99.55912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || str.toUpperCase( ) == null ) { return false ; }",
            "score": 99.54561360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.51384171195652,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , containsIgnoreCase( searchStr ) , searchStr ) ;",
            "score": 99.62374173677884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toString( ).toUpperCase( ).trim( ) ;",
            "score": 99.61764322916666,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.indexOf( ', ') ) ;",
            "score": 99.6101543719952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.6101543719952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.indexOf( 'cde') ) ;",
            "score": 99.6101543719952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.indexOf( 'def') ) ;",
            "score": 99.6101543719952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.6101543719952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.57553100585938,
            "correctness": "wrong",
            "tokenized_patch": "return is CaMeL Empty ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || searchStr.trim( ) == null ) { return false ; }",
            "score": 99.5587666829427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . trim ( ) == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , true ) ;",
            "score": 99.54551478794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } , false ) ;",
            "score": 99.51377802309783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6173846905048,
            "correctness": "uncompilable",
            "tokenized_patch": "contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ; } else return false ;",
            "score": 99.61342592592592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } else return false ;",
            "score": 99.61342592592592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ; } else return false ;",
            "score": 99.61342592592592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ; } else return false ;",
            "score": 99.61342592592592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ; } else return false ;",
            "score": 99.61342592592592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57543006310097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.-1) ;",
            "score": 99.55874399038461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.54531462296195,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( new String ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toCharArray( ) ) ;",
            "score": 99.5136188009511,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) ==0;",
            "score": 99.61261455829327,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , false ) ;",
            "score": 99.55865157277961,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(0, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.544228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( 0 , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , toUpperCase( ) ) ;",
            "score": 99.5131771689967,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.contains( searchStr ) ) ;",
            "score": 99.62267127403847,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).length( ) ==0;",
            "score": 99.61651400862068,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) ) , true ) ;",
            "score": 99.61253004807692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , searchStr ) ;",
            "score": 99.60869683159723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == ', '.toUpperCase( ) ;",
            "score": 99.60857599431819,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'ABCDEF'.toUpperCase( ) ;",
            "score": 99.60857599431819,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'cde'.toUpperCase( ) ;",
            "score": 99.60857599431819,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'def'.toUpperCase( ) ;",
            "score": 99.60857599431819,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'abcdef'.toUpperCase( ) ;",
            "score": 99.60857599431819,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , searchStr ) ;",
            "score": 99.57471764605978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr ).toUpperCase( ) ) ;",
            "score": 99.54130415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) ) ;",
            "score": 99.51123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + searchStr ;",
            "score": 99.62265805844908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).toLowerCase( ) ;",
            "score": 99.61534830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.60866380774456,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return( contains( str.toUpperCase( ) , searchStr.length( ) ) ) ;",
            "score": 99.57369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , false ) ;",
            "score": 99.543427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toUpperCase( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.541259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr searchStr ) ;",
            "score": 99.5106534090909,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) >0) { return false ; } return true ;",
            "score": 99.61063187210648,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , }",
            "score": 99.60763888888889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , null ) ;",
            "score": 99.556044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , false ) ;",
            "score": 99.5430859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).equals( searchStr ) ;",
            "score": 99.61465567129629,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) ==0|| searchStr.length( ) ==0) { return false ;",
            "score": 99.60823567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 || search CaMeL Str . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , false ) ;",
            "score": 99.57283528645833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ).toUpperCase( ) ) ;",
            "score": 99.5403362771739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).trim( ) ;",
            "score": 99.62146448206019,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.6144598599138,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else return true ;",
            "score": 99.61004083806819,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.572734375,
            "correctness": "wrong",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.matches( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.5395038311298,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . matches ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return true ;",
            "score": 99.50872481496711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str.toUpperCase( ) ).toUpperCase( ).trim( ) ;",
            "score": 99.61435041756465,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.60708731192129,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , contains( str.toUpperCase( ) ) ) ;",
            "score": 99.60597446986607,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.5724385579427,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5420254794034,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( new String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.substring(0, searchStr.length( ) ) ==0) { return false ; }",
            "score": 99.539326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', '.toUpperCase( ) , searchStr ) ;",
            "score": 99.50852369225544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF'.toUpperCase( ) , searchStr ) ;",
            "score": 99.50852369225544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde'.toUpperCase( ) , searchStr ) ;",
            "score": 99.50852369225544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def'.toUpperCase( ) , searchStr ) ;",
            "score": 99.50852369225544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef'.toUpperCase( ) , searchStr ) ;",
            "score": 99.50852369225544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) : containsIgnoreCase( searchStr ) ;",
            "score": 99.62115948016827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) : contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61374240451389,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60579136439732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( ', ', ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.57235013521634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'ABCDEF', 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.57235013521634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'cde', 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.57235013521634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'def', 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.57235013521634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'abcdef', 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.57235013521634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String searchStr = str.toUpperCase( ) ; return contains( str , searchStr ) ;",
            "score": 99.55465932992789,
            "correctness": "uncompilable",
            "tokenized_patch": "String search CaMeL Str = str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.53865872896634,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , value ) ;",
            "score": 99.50830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return true ; } else { return true ; }",
            "score": 99.60807291666667,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return true ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) == null ? false : searchStr.toUpperCase( ) ;",
            "score": 99.60573032924107,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ? false : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -1) ;",
            "score": 99.57219381893383,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null && searchStr.length( ) ==0) { return false ; }",
            "score": 99.5541483561198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null && search CaMeL Str . length ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , null.toUpperCase( ) ) ;",
            "score": 99.541875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , null . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5384521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null ? false : containsIgnoreCase( str , searchStr ) ;",
            "score": 99.5078761888587,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null ? false : contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str != null ) { return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.61368502103366,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str != null ) { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) >0) { return false ; } return false ;",
            "score": 99.60712348090277,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toCharArray( ) , searchStr.toCharArray( ) ) ;",
            "score": 99.60547779224537,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Char CaMeL Array ( ) , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ? true",
            "score": 99.60518973214286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( containsIgnoreCase( str ) ).booleanValue( ) ;",
            "score": 99.57107543945312,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( contains CaMeL Ignore CaMeL Case ( str ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.53706287202381,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , null ) ;",
            "score": 99.50785495923913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0|| str.charAt(0) == ', ') ;",
            "score": 99.60450280230978,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0|| str.charAt(0) == 'ABCDEF') ;",
            "score": 99.60450280230978,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0|| str.charAt(0) == 'cde') ;",
            "score": 99.60450280230978,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0|| str.charAt(0) == 'def') ;",
            "score": 99.60450280230978,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0|| str.charAt(0) == 'abcdef') ;",
            "score": 99.60450280230978,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ).) ;",
            "score": 99.60402134486607,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.getName( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.541455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . get CaMeL Name ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.getName( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.541455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . get CaMeL Name ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.getName( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.541455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . get CaMeL Name ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.getName( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.541455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . get CaMeL Name ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.getName( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.541455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . get CaMeL Name ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toLowerCase( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.53700608473558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Lower CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ;",
            "score": 99.50755774456522,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) false ) ;",
            "score": 99.61973063151042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( searchStr ) ) ;",
            "score": 99.60446166992188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )0) ;",
            "score": 99.60332380022321,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.toLowerCase( ) , searchStr.length( ) ) ;",
            "score": 99.570595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ).toUpperCase( ) ;",
            "score": 99.55392937911184,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.50745159646739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).startsWith( ', ') ) ;",
            "score": 99.60612540409483,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.60612540409483,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).startsWith( 'cde') ) ;",
            "score": 99.60612540409483,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).startsWith( 'def') ) ;",
            "score": 99.60612540409483,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.60612540409483,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) -1) ;",
            "score": 99.60443405877976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.booleanValue( ) ).booleanValue( ) ;",
            "score": 99.56995159646739,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . boolean CaMeL Value ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) , ) ;",
            "score": 99.5538330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ).toLowerCase( ) ) ;",
            "score": 99.540576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ).toLowerCase( ) ) ;",
            "score": 99.540576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ).toLowerCase( ) ) ;",
            "score": 99.540576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ).toLowerCase( ) ) ;",
            "score": 99.540576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ).toLowerCase( ) ) ;",
            "score": 99.540576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.equals( str.toUpperCase( ) ) ) ;",
            "score": 99.53665321751645,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.equals( ) ) ;",
            "score": 99.50740913722827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ).",
            "score": 99.61913158275463,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return false ; } else { return false ; }",
            "score": 99.6058933423913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return false ; } else { return false ; }",
            "score": 99.6058933423913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return false ; } else { return false ; }",
            "score": 99.6058933423913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return false ; } else { return false ; }",
            "score": 99.6058933423913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return false ; } else { return false ; }",
            "score": 99.6058933423913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,( String ) searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.55335411658653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) ,",
            "score": 99.54048295454545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) ,",
            "score": 99.54048295454545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) ,",
            "score": 99.54048295454545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) ,",
            "score": 99.54048295454545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) ,",
            "score": 99.54048295454545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.isUpperCase( ) ) ;",
            "score": 99.53641550164474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . is CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == null ) { return ) ;",
            "score": 99.507080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(2, searchStr.length( ) ) ) ;",
            "score": 99.61907087053571,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(4, searchStr.length( ) ) ) ;",
            "score": 99.61907087053571,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(3, searchStr.length( ) ) ) ;",
            "score": 99.61907087053571,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(8, searchStr.length( ) ) ) ;",
            "score": 99.61907087053571,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(7, searchStr.length( ) ) ) ;",
            "score": 99.61907087053571,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.6120849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return true ; } else { return true ; }",
            "score": 99.60544752038044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return true ; } else { return true ; }",
            "score": 99.60544752038044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return true ; } else { return true ; }",
            "score": 99.60544752038044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return true ; } else { return true ; }",
            "score": 99.60544752038044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return true ; } else { return true ; }",
            "score": 99.60544752038044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr.trim( ) ) ;",
            "score": 99.60348378057066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == str.toUpperCase( ) ;",
            "score": 99.6020840731534,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.5695703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.540185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , String.indexOf( searchStr ) ) ;",
            "score": 99.50684703480114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , String . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return containsIgnoreCase( str , searchStr )",
            "score": 99.61823640046296,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.61169885706019,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.toString( ) ) ;",
            "score": 99.6034647623698,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.552861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str.toUpperCase( ) , searchStr ) ) { return false ; }",
            "score": 99.5353534405048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.50667724609374,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( out.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61144567418981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( out . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return false ; } else { return false ; }",
            "score": 99.60466974431819,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) ==0) ;",
            "score": 99.60185102982955,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.length( ) ) == -1;",
            "score": 99.56878662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . length ( ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', '+ searchStr.toUpperCase( ) ) ;",
            "score": 99.53939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.53939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.53939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.53939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.53939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( searchStr ) ;",
            "score": 99.53498920641448,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr ) ;",
            "score": 99.50657552083334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr ) ;",
            "score": 99.50657552083334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr ) ;",
            "score": 99.50657552083334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr ) ;",
            "score": 99.50657552083334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr ) ;",
            "score": 99.50657552083334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toUpperCase( ) )",
            "score": 99.61819223257211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).substring(0, searchStr.length( ) ) != null ) ;",
            "score": 99.61073040140086,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( searchStr == null ) { return true ;",
            "score": 99.60175030048077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) +1) ;",
            "score": 99.56822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , false ) ;",
            "score": 99.55133928571429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , name ) ;",
            "score": 99.53914388020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , str.toUpperCase( ) ) ;",
            "score": 99.534599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toString( ) , searchStr ) ;",
            "score": 99.50607167119566,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6104736328125,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toLowerCase( ) ) ;",
            "score": 99.60192418981481,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return( contains( str.toUpperCase( ) , str.toUpperCase( ) ) ) ;",
            "score": 99.60061306423611,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str ,0, searchStr.length( ) ) != -1;",
            "score": 99.5677490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , 0 , search CaMeL Str . length ( ) ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53910688920455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( str.toUpperCase( ) ) ;",
            "score": 99.53419404871323,
            "correctness": "wrong",
            "tokenized_patch": "return str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , ', ') ;",
            "score": 99.50452190896739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , 'ABCDEF') ;",
            "score": 99.50452190896739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , 'cde') ;",
            "score": 99.50452190896739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , 'def') ;",
            "score": 99.50452190896739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , 'abcdef') ;",
            "score": 99.50452190896739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , ', ', false ) ;",
            "score": 99.61735026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'ABCDEF', false ) ;",
            "score": 99.61735026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'cde', false ) ;",
            "score": 99.61735026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'def', false ) ;",
            "score": 99.61735026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'abcdef', false ) ;",
            "score": 99.61735026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.6103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.booleanValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . boolean CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr , searchStr ) ;",
            "score": 99.50439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr , searchStr ) ;",
            "score": 99.50439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr , searchStr ) ;",
            "score": 99.50439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr , searchStr ) ;",
            "score": 99.50439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr , searchStr ) ;",
            "score": 99.50439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.61016167534723,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , this.str.toUpperCase( ) ) ;",
            "score": 99.60015190972223,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , this . str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toLocale( ) ) ;",
            "score": 99.538681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Locale ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.53345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toString( ) ) ;",
            "score": 99.50413754111842,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , String.toUpperCase( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61014811197917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr , searchStr.length( ) ) ) ;",
            "score": 99.597685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) -1) , searchStr ) ;",
            "score": 99.56640625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) - 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , false ) ;",
            "score": 99.55066448709239,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , false ) ;",
            "score": 99.53866722470238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr.length( ) ) ;",
            "score": 99.53269361413044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return compare( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.60980435075432,
            "correctness": "uncompilable",
            "tokenized_patch": "return compare ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return contains( str ) ;",
            "score": 99.60009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >=0) { return false ; } else { return false ; }",
            "score": 99.5995585123698,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) >= 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.59722290039062,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(2) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5657958984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(4) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5657958984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(3) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5657958984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(8) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5657958984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(7) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5657958984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains(0, searchStr.toUpperCase( ) ) ;",
            "score": 99.53865131578948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , -1) ;",
            "score": 99.50406222873264,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ] ) ) ;",
            "score": 99.61562674386161,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.trim( ) ) ) ;",
            "score": 99.5494893391927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return true ; } return contains( str.toUpperCase( ) ,",
            "score": 99.53837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return true ; } return contains ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.532607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( Integer.toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.50342906605114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( Integer . to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( searchStr.length( ) ) ) ;",
            "score": 99.59650127704327,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null ) { return false ; } if( searchStr == null ) { return false ;",
            "score": 99.54847208658855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , ', ') ;",
            "score": 99.537783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.537783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , 'cde') ;",
            "score": 99.537783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , 'def') ;",
            "score": 99.537783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , 'abcdef') ;",
            "score": 99.537783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , contains( searchStr ) ) ;",
            "score": 99.53243314302884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(0, searchStr.toUpperCase( ) ) ;",
            "score": 99.5023883322011,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ', ') ;",
            "score": 99.61538260323661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) 'ABCDEF') ;",
            "score": 99.61538260323661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) 'cde') ;",
            "score": 99.61538260323661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) 'def') ;",
            "score": 99.61538260323661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) 'abcdef') ;",
            "score": 99.61538260323661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.60926885190217,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( toUpperCase( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59895542689732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).startsWith( searchStr ) ) ;",
            "score": 99.59556513247283,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( contains( str.toUpperCase( ) , searchStr.trim( ) ) ) ;",
            "score": 99.564140625,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.getValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.547802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . get CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.53188852163461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr.toString( ) ) ;",
            "score": 99.50175548735119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60902506510416,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.toUpperCase( ) == null ) { return false ;",
            "score": 99.59893120659723,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return true ; } else { return true ; }",
            "score": 99.5971042798913,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return true ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( Locale.US ) ) ;",
            "score": 99.59544020432692,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( Locale . US ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).toUpperCase( ) ) ;",
            "score": 99.56411261307566,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(0, str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.537216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr } , true ) ;",
            "score": 99.50147545855978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str } , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , value.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60872676454741,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.5951639811198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) == searchStr ) ;",
            "score": 99.54732473273026,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , str.toUpperCase( ) ) ;",
            "score": 99.53142438616071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , searchStr.toString( ) ) ;",
            "score": 99.50126316236413,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(1).toUpperCase( ) ) ;",
            "score": 99.61479840959821,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 1 ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( searchStr.toUpperCase( ) ==",
            "score": 99.59770856584821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return false ; } else { return false ; }",
            "score": 99.5964992357337,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) ==0) ;",
            "score": 99.56373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0) ) ;",
            "score": 99.53042602539062,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.toCharArray( ) , searchStr ) ;",
            "score": 99.50031844429348,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Char CaMeL Array ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) == false ) ;",
            "score": 99.614619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return add( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60743995949075,
            "correctness": "uncompilable",
            "tokenized_patch": "return add ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.59480794270833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str ).booleanValue( ) ;",
            "score": 99.56346938189338,
            "correctness": "wrong",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr == ) ;",
            "score": 99.54681396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( ! contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.52976296164773,
            "correctness": "wrong",
            "tokenized_patch": "return ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.iterator( ).next( ) ) ;",
            "score": 99.49991508152173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . iterator ( ) . next ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) false ) ;",
            "score": 99.61456298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ).trim( ) ;",
            "score": 99.60641043526786,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.containsIgnoreCase( searchStr.toUpperCase( ) ) ;",
            "score": 99.5971148947011,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . contains CaMeL Ignore CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else { return null ; }",
            "score": 99.59578450520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else { return null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.trim( ) ) ;",
            "score": 99.59281782670455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , toUpperCase( ) ) ;",
            "score": 99.5629352072011,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5465087890625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . format ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +0) ;",
            "score": 99.535546875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "try { return contains( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.52958540482955,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , String.valueOf( searchStr ) ) ;",
            "score": 99.49956720525569,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , String . value CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) : false ;",
            "score": 99.61396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.60636393229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( start.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59711371527777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( start . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) <0) { return false ; } else { return false ; }",
            "score": 99.59496053059895,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) < 0 ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( str.length( ) -1) ) ;",
            "score": 99.59222881610577,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) == null || searchStr == null ) {",
            "score": 99.53547807173295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.name ) ;",
            "score": 99.49944196428571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toUpperCase( ) false ) ;",
            "score": 99.61392647879464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isWhitespace( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60607489224138,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Whitespace ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).substring(0, searchStr.length( ) ) ) ;",
            "score": 99.5628153483073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.545634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = toUpperCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.528330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new searchStr.toUpperCase( ) ) ;",
            "score": 99.49938354492187,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.toUpperCase( str.toUpperCase( ) ) ) ;",
            "score": 99.60594764122597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) )1;",
            "score": 99.59681919642857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else return false ;",
            "score": 99.59480424360795,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( Locale.getDefault( ) ) , searchStr ) ;",
            "score": 99.59127103365384,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( Locale . get CaMeL Default ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , false.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.562734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , -1) ;",
            "score": 99.53534490411931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.next( ) ) ;",
            "score": 99.52741805366848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . next ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.trim( ) , searchStr ) ;",
            "score": 99.49895918996711,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . trim ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , searchStr ;",
            "score": 99.60567220052083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59668872974537,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.535302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.535302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.535302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.535302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.535302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ).length( ) !=0) ;",
            "score": 99.52698771158855,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) != 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return ) { return true ;",
            "score": 99.49892356178977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : true ;",
            "score": 99.61344047214673,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) == null || searchStr == null ) { return false ;",
            "score": 99.596650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) -1, searchStr.toUpperCase( ) ) ;",
            "score": 99.5626171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) - 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ? true : str.toUpperCase( ) , searchStr ) ;",
            "score": 99.5444140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? true : str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str ) , searchStr.toUpperCase( ) ) ; }",
            "score": 99.53439331054688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.52584134615384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null || searchStr.toUpperCase( ) == null ;",
            "score": 99.4986572265625,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) true ) ;",
            "score": 99.61339314778645,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.toUpperCase( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.60513741629464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59623500279018,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null || searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.543984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( true , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.534072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( true , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr ) ;",
            "score": 99.4974300986842,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ] ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.61326381138393,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ] ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ! searchStr.toUpperCase( ) ) ;",
            "score": 99.59575544084821,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return false ; } else { return true ; }",
            "score": 99.59253991168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return false ; } else { return true ; }",
            "score": 99.59253991168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return false ; } else { return true ; }",
            "score": 99.59253991168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return false ; } else { return true ; }",
            "score": 99.59253991168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return false ; } else { return true ; }",
            "score": 99.59253991168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceAll( ', ', ', ') ) ;",
            "score": 99.58961181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceAll( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.58961181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceAll( 'cde', 'cde') ) ;",
            "score": 99.58961181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceAll( 'def', 'def') ) ;",
            "score": 99.58961181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceAll( 'abcdef', 'abcdef') ) ;",
            "score": 99.58961181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) , false ) ;",
            "score": 99.5619921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr ) ) { return false ; }",
            "score": 99.54381742931548,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , true ) ;",
            "score": 99.534013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(( String ) str.toUpperCase( ) ) ;",
            "score": 99.49723677201705,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , ) ;",
            "score": 99.6129619891827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [1].toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60405441810344,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ 1 ] . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , ;",
            "score": 99.59487123842592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).booleanValue( ) ;",
            "score": 99.56189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) >0) { return false ; }",
            "score": 99.5436503092448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) > 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) ,",
            "score": 99.53389115767045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ) , searchStr.trim( ) ) ;",
            "score": 99.5249492938702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( searchStr == null ) {",
            "score": 99.49719769021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.60338934536638,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).add( searchStr.toUpperCase( ) ) ;",
            "score": 99.59462709780092,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . add ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , str.charAt(0) ) ;",
            "score": 99.5894191576087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) , searchStr.length( ) ) ;",
            "score": 99.56179942255434,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , length ) ;",
            "score": 99.543212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) ,",
            "score": 99.53371175130208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) ,",
            "score": 99.53371175130208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) ,",
            "score": 99.53371175130208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) ,",
            "score": 99.53371175130208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) ,",
            "score": 99.53371175130208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.size( ) ) ;",
            "score": 99.52492357336956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) true ) ;",
            "score": 99.4970947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.60334995814732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( ) ) ;",
            "score": 99.561376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr.lastCaMeL",
            "score": 99.542958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str . last CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52462332589286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52462332589286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52462332589286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52462332589286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52462332589286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.49692170516305,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).length( ) !=0) ;",
            "score": 99.60334123883929,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } if( searchStr == null ) { return false ;",
            "score": 99.59395658052884,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return true ; } else { return true ; }",
            "score": 99.5913722826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return true ; } else { return true ; }",
            "score": 99.5913722826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return true ; } else { return true ; }",
            "score": 99.5913722826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return true ; } else { return true ; }",
            "score": 99.5913722826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return true ; } else { return true ; }",
            "score": 99.5913722826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } else { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.length( ) ) , searchStr.length( ) ) ;",
            "score": 99.5890643780048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . length ( ) ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.intValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.561328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . int CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.start ) ;",
            "score": 99.542802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . start ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.524619140625,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.60322627314815,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).contains( searchStr ) ;",
            "score": 99.59374060997597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.value.toUpperCase( ) ) ;",
            "score": 99.59128333782327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return contains( str ) ;",
            "score": 99.54258219401042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.52442467730978,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ;",
            "score": 99.49674166165866,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , ', ', true ) ;",
            "score": 99.61174406828704,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'ABCDEF', true ) ;",
            "score": 99.61174406828704,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'cde', true ) ;",
            "score": 99.61174406828704,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'def', true ) ;",
            "score": 99.61174406828704,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'abcdef', true ) ;",
            "score": 99.61174406828704,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).contains( ) ;",
            "score": 99.59329788773148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) +1, searchStr.toUpperCase( ) ) ;",
            "score": 99.560126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) + 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.542275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.532353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.532353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.532353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.532353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.532353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.endsWith( ', ') ) ;",
            "score": 99.52413236177884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.endsWith( 'ABCDEF') ) ;",
            "score": 99.52413236177884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.endsWith( 'cde') ) ;",
            "score": 99.52413236177884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.endsWith( 'def') ) ;",
            "score": 99.52413236177884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.endsWith( 'abcdef') ) ;",
            "score": 99.52413236177884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , Character.toUpperCase( searchStr ) ) ;",
            "score": 99.60311453683036,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , Character . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr",
            "score": 99.54224795386905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , false ) ;",
            "score": 99.53140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isLowerCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.5241168478261,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Lower CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.49653552827381,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.59211869673295,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.indexOf( searchStr ) ) ;",
            "score": 99.58913748604911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toLowerCase( ) ) ;",
            "score": 99.55899711277173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,0) ;",
            "score": 99.54209989659927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.booleanValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . boolean CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.booleanValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . boolean CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.booleanValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . boolean CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.booleanValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . boolean CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.booleanValue( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . boolean CaMeL Value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.endsWith( ) ) ;",
            "score": 99.52296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( l , searchStr.toUpperCase( ) ) ;",
            "score": 99.4965183423913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( l , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).trim( ) ;",
            "score": 99.61152980638587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , searchStr.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.60240436422414,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.59147135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.59147135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.59147135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.59147135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.59147135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.558994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54170735677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , true ) ;",
            "score": 99.53072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( false , searchStr.length( ) ) ) ;",
            "score": 99.52283732096355,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( false , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false : contains( str , searchStr",
            "score": 99.61134556361607,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : contains ( str , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == searchStr ).toUpperCase( ) ;",
            "score": 99.59097994290866,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.length( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . length ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.class ) ;",
            "score": 99.54158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return false ; } return contains( str ,",
            "score": 99.53067680027173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return false ; } return contains ( str ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.size( ) ) ;",
            "score": 99.5224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return false ;",
            "score": 99.49632626488095,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? true : false ;",
            "score": 99.61115828804348,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( return searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.602099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceFirst( ', ', ', ') ) ;",
            "score": 99.585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceFirst( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceFirst( 'cde', 'cde') ) ;",
            "score": 99.585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceFirst( 'def', 'def') ) ;",
            "score": 99.585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.replaceFirst( 'abcdef', 'abcdef') ) ;",
            "score": 99.585693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', '.toUpperCase( ) , searchStr ) ;",
            "score": 99.541005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF'.toUpperCase( ) , searchStr ) ;",
            "score": 99.541005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde'.toUpperCase( ) , searchStr ) ;",
            "score": 99.541005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def'.toUpperCase( ) , searchStr ) ;",
            "score": 99.541005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef'.toUpperCase( ) , searchStr ) ;",
            "score": 99.541005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.53058733258929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.53058733258929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.53058733258929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.53058733258929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.53058733258929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).toUpperCase( ).length( ) ==0) ;",
            "score": 99.60201009114583,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59078414351852,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ; } else { return false ;",
            "score": 99.58768015894397,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( Locale.ENGLISH ) ) ;",
            "score": 99.58539287860577,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( Locale . ENGLISH ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.charValue( ) , searchStr.trim( ) ) ;",
            "score": 99.54080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL Value ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.substring(1) ) ;",
            "score": 99.5216815655048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.class ) ;",
            "score": 99.49615187872024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(2) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6102294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(4) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6102294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(3) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6102294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(8) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6102294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(7) , searchStr.toUpperCase( ) ) ;",
            "score": 99.6102294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.60173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) + ) ;",
            "score": 99.59075927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.58754185267857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.charValue( ) ) ;",
            "score": 99.54055606617646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,1, searchStr.toUpperCase( ) ) ;",
            "score": 99.530068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( ', '.toUpperCase( ) ) ;",
            "score": 99.521552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.521552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'cde'.toUpperCase( ) ) ;",
            "score": 99.521552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'def'.toUpperCase( ) ) ;",
            "score": 99.521552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.521552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , name.toUpperCase( ) ) ;",
            "score": 99.49575407608695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str , searchStr.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.60135203394397,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null || searchStr.toUpperCase( ) == null ;",
            "score": 99.59040178571429,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.58725922683189,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! containsIgnoreCase( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58444213867188,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).trim( ) ) ;",
            "score": 99.5573666221217,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , new char [0] ) ;",
            "score": 99.5405078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , new char [ 0 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( String ) contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.52986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ( String ) contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr ) ;",
            "score": 99.49460073617789,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( filter.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59994393807871,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( filter . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( l.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58934642650463,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( l . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -1, searchStr.toUpperCase( ) ) ;",
            "score": 99.58723397090517,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , null , searchStr.length( ) ) ;",
            "score": 99.58443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , null , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ).substring(0, searchStr.length( ) ) ) ;",
            "score": 99.55709838867188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.getValue( ) ) ;",
            "score": 99.539814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . get CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) ) ; }",
            "score": 99.5295918782552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) ) ; }",
            "score": 99.5295918782552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) ) ; }",
            "score": 99.5295918782552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) ) ; }",
            "score": 99.5295918782552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) ) ; }",
            "score": 99.5295918782552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str , searchStr.length( ) ) ) ;",
            "score": 99.52146402994792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr == null || searchStr == null ) ;",
            "score": 99.4943911903783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , ', ') ;",
            "score": 99.60931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , 'ABCDEF') ;",
            "score": 99.60931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , 'cde') ;",
            "score": 99.60931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , 'def') ;",
            "score": 99.60931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr , 'abcdef') ;",
            "score": 99.60931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String searchStr = str.toUpperCase( ) ; if( searchStr == null ) { return false ;",
            "score": 99.58910260881696,
            "correctness": "uncompilable",
            "tokenized_patch": "String search CaMeL Str = str . to CaMeL Upper CaMeL Case ( ) ; if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.toUpperCase( ) ) ) ;",
            "score": 99.55709838867188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.valueOf( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5397265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . value CaMeL Of ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +2) ;",
            "score": 99.529404296875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +4) ;",
            "score": 99.529404296875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +3) ;",
            "score": 99.529404296875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +8) ;",
            "score": 99.529404296875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +7) ;",
            "score": 99.529404296875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr [0].toUpperCase( ) ) ;",
            "score": 99.52126242897727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str [ 0 ] . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , new String [ ] { searchStr } ) ;",
            "score": 99.494384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , new String [ ] { search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr ) ? true : false ;",
            "score": 99.609130859375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return charAt( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59982825969827,
            "correctness": "uncompilable",
            "tokenized_patch": "return char CaMeL At ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( ', ') ) { return true ; } else { return false ; }",
            "score": 99.58654203869048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'ABCDEF') ) { return true ; } else { return false ; }",
            "score": 99.58654203869048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'cde') ) { return true ; } else { return false ; }",
            "score": 99.58654203869048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'def') ) { return true ; } else { return false ; }",
            "score": 99.58654203869048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'abcdef') ) { return true ; } else { return false ; }",
            "score": 99.58654203869048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } else { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.5566015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false : false ;",
            "score": 99.52836277173913,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.59954202586206,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( searchStr.length( ) -1) ) ;",
            "score": 99.55659623579545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52755301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52755301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52755301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52755301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52755301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).length( ) ==0;",
            "score": 99.5207186612216,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.trim( ).toUpperCase( ) == searchStr ;",
            "score": 99.49376331676136,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase(1) ) ;",
            "score": 99.59950474330357,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )2) ;",
            "score": 99.58780343191964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )4) ;",
            "score": 99.58780343191964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )3) ;",
            "score": 99.58780343191964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )8) ;",
            "score": 99.58780343191964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( )7) ;",
            "score": 99.58780343191964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58610316685268,
            "correctness": "uncompilable",
            "tokenized_patch": "final return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( searchStr.toString( ) ).booleanValue( ) ;",
            "score": 99.55642578125,
            "correctness": "wrong",
            "tokenized_patch": "return Boolean . value CaMeL Of ( search CaMeL Str . to CaMeL String ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.trim( ) ) ;",
            "score": 99.53926418138587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr.toUpperCase( ) ) ) {",
            "score": 99.527548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! matches( str , searchStr.toUpperCase( ) ) ) { return false ; }",
            "score": 99.52039513221153,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) +",
            "score": 99.60856119791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr.toUpperCase( ) == null ) {",
            "score": 99.52744362571023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).toString( ).toUpperCase( ) ;",
            "score": 99.59849446614584,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( char.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5872214988426,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( char . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str..toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58485630580357,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) { return true ; }",
            "score": 99.53915405273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , str.toUpperCase( ) ) ) ;",
            "score": 99.49320652173913,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , searchStr )",
            "score": 99.60767540564903,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( Character.toUpperCase( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59819684709821,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( Character . to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ) ) ;",
            "score": 99.58203125,
            "correctness": "wrong",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( ', ') ;",
            "score": 99.55609452097039,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.55609452097039,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( 'cde') ;",
            "score": 99.55609452097039,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( 'def') ;",
            "score": 99.55609452097039,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( 'abcdef') ;",
            "score": 99.55609452097039,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) +1) ;",
            "score": 99.52694847470238,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , toUpperCase( searchStr ) ) ;",
            "score": 99.52016038161058,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) || searchStr == null ) ;",
            "score": 99.49279254415761,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).toUpperCase( )",
            "score": 99.60733736478366,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return delete( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59818070023148,
            "correctness": "uncompilable",
            "tokenized_patch": "return delete ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr1.toUpperCase( ) ) ;",
            "score": 99.58646937779018,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str 1 . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58413260323661,
            "correctness": "wrong",
            "tokenized_patch": "else return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,0, searchStr.length( ) ) ;",
            "score": 99.58169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.538671875,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( ', ', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', name , searchStr.toUpperCase( ) ) ;",
            "score": 99.52640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , str.toUpperCase( ) ) ;",
            "score": 99.52,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString.toUpperCase( ) , searchStr ) ;",
            "score": 99.49244225543478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new StringBuffer( str.toUpperCase( ) ).toUpperCase( ) ) ;",
            "score": 99.58383283943965,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String CaMeL Buffer ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toLowerCase( ) ) ;",
            "score": 99.579716796875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toCharArray( ) , searchStr.trim( ) ) ;",
            "score": 99.55591881793478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Char CaMeL Array ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , length ) ;",
            "score": 99.538583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.51995380108173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return ) { return false ; }",
            "score": 99.492431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) )",
            "score": 99.60727364676339,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( str.toUpperCase( ) ==",
            "score": 99.5862285907452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( str . to CaMeL Upper CaMeL Case ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ).trim( ) ) ;",
            "score": 99.579599609375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.555869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr.toCaMeL",
            "score": 99.538203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str . to CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', '+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.524765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.524765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.524765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.524765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef'+ str , searchStr.toUpperCase( ) ) ;",
            "score": 99.524765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.51963404605263,
            "correctness": "wrong",
            "tokenized_patch": "return str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.59700520833333,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.58587091619319,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , true ) ;",
            "score": 99.55577503551136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , containsIgnoreCase ) ;",
            "score": 99.537724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , contains CaMeL Ignore CaMeL Case ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.toUpperCase( ) == null )",
            "score": 99.52476435122283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) || contains( searchStr ) ;",
            "score": 99.5194561298077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) || contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str == null ) ||( searchStr == null ) ) { return false ; }",
            "score": 99.49188787286931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str == null ) || ( search CaMeL Str == null ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Character.equals( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.596923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return Character . equals ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.toUpperCase( ) == null ) { return true ;",
            "score": 99.58581995081019,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( str ) ) ;",
            "score": 99.57902388139205,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( true ) ) ;",
            "score": 99.52464803059895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) true ) ;",
            "score": 99.491748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , charAt( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.59641520182292,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char CaMeL At ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.537216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( false , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52444893973214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( false , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).length( ) ==0;",
            "score": 99.519013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.indexOf( ', ') , searchStr ) ;",
            "score": 99.49097789417614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.indexOf( 'ABCDEF') , searchStr ) ;",
            "score": 99.49097789417614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.indexOf( 'cde') , searchStr ) ;",
            "score": 99.49097789417614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.indexOf( 'def') , searchStr ) ;",
            "score": 99.49097789417614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.indexOf( 'abcdef') , searchStr ) ;",
            "score": 99.49097789417614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) + true ) ;",
            "score": 99.6061328125,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + true ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , str ;",
            "score": 99.58423723493304,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return false ; } else { return true ; }",
            "score": 99.58305220170455,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return false ; } else { return true ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str ,0, searchStr.length( ) ) ;",
            "score": 99.5771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( ', ') +1) ) ;",
            "score": 99.554521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'ABCDEF') +1) ) ;",
            "score": 99.554521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'cde') +1) ) ;",
            "score": 99.554521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'def') +1) ) ;",
            "score": 99.554521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'abcdef') +1) ) ;",
            "score": 99.554521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return false ; } if( searchCaMeL",
            "score": 99.53702799479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return false ; } if ( search CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.52438221807066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).trim( ) ;",
            "score": 99.51901112432066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ).toUpperCase( ) ) ;",
            "score": 99.49089704241071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58400315504808,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) <0;",
            "score": 99.55433721127717,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) < 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', searchStr.toLowerCase( ) ) ;",
            "score": 99.52424701891448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toLowerCase( ) ) ;",
            "score": 99.52424701891448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toLowerCase( ) ) ;",
            "score": 99.52424701891448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toLowerCase( ) ) ;",
            "score": 99.52424701891448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toLowerCase( ) ) ;",
            "score": 99.52424701891448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.51833871694711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.5953369140625,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).containsIgnoreCase( ) ;",
            "score": 99.58382161458333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains CaMeL Ignore CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).endsWith( ', ') ;",
            "score": 99.58180519386575,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).endsWith( 'ABCDEF') ;",
            "score": 99.58180519386575,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).endsWith( 'cde') ;",
            "score": 99.58180519386575,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).endsWith( 'def') ;",
            "score": 99.58180519386575,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).endsWith( 'abcdef') ;",
            "score": 99.58180519386575,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.charAt(0) == ', ').booleanValue( ) ;",
            "score": 99.57668832632211,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . char CaMeL At ( 0 ) == $STRING$ ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.charAt(0) == 'ABCDEF').booleanValue( ) ;",
            "score": 99.57668832632211,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . char CaMeL At ( 0 ) == $STRING$ ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.charAt(0) == 'cde').booleanValue( ) ;",
            "score": 99.57668832632211,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . char CaMeL At ( 0 ) == $STRING$ ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.charAt(0) == 'def').booleanValue( ) ;",
            "score": 99.57668832632211,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . char CaMeL At ( 0 ) == $STRING$ ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.charAt(0) == 'abcdef').booleanValue( ) ;",
            "score": 99.57668832632211,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . char CaMeL At ( 0 ) == $STRING$ ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.toLowerCase( ) , searchStr.length( ) ) ;",
            "score": 99.55408732096355,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , count ) ;",
            "score": 99.53669084821429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , count ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str1, searchStr.toUpperCase( ) ) ;",
            "score": 99.52418212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) || searchStr.length( ) ==0) ;",
            "score": 99.518291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) || search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.toUpperCase( str.toUpperCase( ) ) ) ;",
            "score": 99.59519606370192,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.length( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58371310763889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . length ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str.toLowerCase( ) , searchStr.length( ) ) ;",
            "score": 99.553681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0|| searchStr == null ) { return false ; }",
            "score": 99.5364990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.51787109375,
            "correctness": "wrong",
            "tokenized_patch": "return str . equals ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.toString( ).length( ) ==0) { return false ;",
            "score": 99.48945949388587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL String ( ) . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) : true ;",
            "score": 99.605283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , chars.toUpperCase( ) ) ;",
            "score": 99.594375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , chars . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toUpperCase( ) , false ) ;",
            "score": 99.58336046006944,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) +1) ) ;",
            "score": 99.55354447798295,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.52290852864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.52290852864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.52290852864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.52290852864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.52290852864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ! searchStr.length( ) ) ;",
            "score": 99.5175069173177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , ! search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ', ', searchStr ) ;",
            "score": 99.48911830357143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'ABCDEF', searchStr ) ;",
            "score": 99.48911830357143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'cde', searchStr ) ;",
            "score": 99.48911830357143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'def', searchStr ) ;",
            "score": 99.48911830357143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'abcdef', searchStr ) ;",
            "score": 99.48911830357143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , searchStr.) ;",
            "score": 99.60491071428571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( command.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.593994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( command . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).equals( ', ') ;",
            "score": 99.57900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).equals( 'ABCDEF') ;",
            "score": 99.57900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).equals( 'cde') ;",
            "score": 99.57900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).equals( 'def') ;",
            "score": 99.57900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).equals( 'abcdef') ;",
            "score": 99.57900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( ', ') || searchStr.startsWith( ', ') ) ;",
            "score": 99.57613431490384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) || search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'ABCDEF') || searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.57613431490384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) || search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'cde') || searchStr.startsWith( 'cde') ) ;",
            "score": 99.57613431490384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) || search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'def') || searchStr.startsWith( 'def') ) ;",
            "score": 99.57613431490384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) || search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'abcdef') || searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.57613431490384,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) || search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == false ;",
            "score": 99.52260520241477,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return ) { return true ;",
            "score": 99.48905181884766,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).substring(0, searchStr.length( ) ) == null ) ;",
            "score": 99.5937079067888,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.contains( searchStr.toUpperCase( ) ) ;",
            "score": 99.583251953125,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ).substring(0, searchStr.length( ) ) ) ;",
            "score": 99.57862200055804,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).trim( ) ) ;",
            "score": 99.55328690378289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , containsIgnoreCase( str ) ) ;",
            "score": 99.48882446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , contains CaMeL Ignore CaMeL Case ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( substring.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58296260127315,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( substring . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase(0) , searchStr.toUpperCase(0) ) ;",
            "score": 99.57861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( 0 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( ', ') && searchStr.startsWith( ', ') ) ;",
            "score": 99.5752704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'ABCDEF') && searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.5752704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'cde') && searchStr.startsWith( 'cde') ) ;",
            "score": 99.5752704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'def') && searchStr.startsWith( 'def') ) ;",
            "score": 99.5752704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.startsWith( 'abcdef') && searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.5752704326923,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,0, searchStr.length( ) ) ;",
            "score": 99.5528515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.equals( str.toUpperCase( ) ) ) ;",
            "score": 99.51727585565476,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.append( ', ') ) ;",
            "score": 99.48822631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.append( 'ABCDEF') ) ;",
            "score": 99.48822631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.append( 'cde') ) ;",
            "score": 99.48822631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.append( 'def') ) ;",
            "score": 99.48822631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.append( 'abcdef') ) ;",
            "score": 99.48822631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).toString( ) ;",
            "score": 99.604140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.substring(0, searchStr.toUpperCase( ) ) ) ;",
            "score": 99.59340006510416,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . substring ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } if( searchStr == null ) { return true ;",
            "score": 99.58274489182692,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } if ( search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr , searchStr.length( ) ) ;",
            "score": 99.57516714242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.indexOf( ', ') ) ;",
            "score": 99.55269368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.55269368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.indexOf( 'cde') ) ;",
            "score": 99.55269368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.indexOf( 'def') ) ;",
            "score": 99.55269368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.55269368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( str.toUpperCase( ) ) ) ;",
            "score": 99.5355936686198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(1, searchStr.toUpperCase( ) ) ;",
            "score": 99.52177991365132,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return trim( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59324363425925,
            "correctness": "uncompilable",
            "tokenized_patch": "return trim ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null ? false : str.toUpperCase( ) ;",
            "score": 99.58251014122597,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ? false : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.lastIndexOf( ', ') ) ;",
            "score": 99.57504272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.lastIndexOf( 'ABCDEF') ) ;",
            "score": 99.57504272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.lastIndexOf( 'cde') ) ;",
            "score": 99.57504272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.lastIndexOf( 'def') ) ;",
            "score": 99.57504272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.lastIndexOf( 'abcdef') ) ;",
            "score": 99.57504272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str.toLowerCase( ) , searchStr.length( ) ) ) ;",
            "score": 99.5525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , str.trim( ) ) ;",
            "score": 99.535537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , Boolean.TRUE ) ;",
            "score": 99.52165421195652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , Boolean . TRUE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) || contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.51600138346355,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) || contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsOnly( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59323646282327,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Only ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).contains( str.toUpperCase( ) ) ;",
            "score": 99.582431640625,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ).toUpperCase( ) ) ; }",
            "score": 99.57677283653847,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.551865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; break ;",
            "score": 99.521552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( -1).toUpperCase( ) ) ;",
            "score": 99.515908203125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( - 1 ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.substring(0, searchStr == null ) ) { return false ;",
            "score": 99.48790394176136,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . substring ( 0 , search CaMeL Str == null ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.getLength( ) ) ;",
            "score": 99.60328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . get CaMeL Length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).toUpperCase( ).length( ) ==0;",
            "score": 99.59306640625,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ; } else return true ;",
            "score": 99.57557262073864,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ; } else return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.substring(0, searchStr.length( ) -2) ) ;",
            "score": 99.57342998798077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.substring(0, searchStr.length( ) -4) ) ;",
            "score": 99.57342998798077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.substring(0, searchStr.length( ) -3) ) ;",
            "score": 99.57342998798077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.substring(0, searchStr.length( ) -8) ) ;",
            "score": 99.57342998798077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.substring(0, searchStr.length( ) -7) ) ;",
            "score": 99.57342998798077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , null ) ;",
            "score": 99.55185768821023,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ] ) , searchStr ) ;",
            "score": 99.51589965820312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ] ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ', ') , searchStr ) ;",
            "score": 99.48783569335937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'ABCDEF') , searchStr ) ;",
            "score": 99.48783569335937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'cde') , searchStr ) ;",
            "score": 99.48783569335937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'def') , searchStr ) ;",
            "score": 99.48783569335937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'abcdef') , searchStr ) ;",
            "score": 99.48783569335937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr ,0) ;",
            "score": 99.6030859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( String.toUpperCase( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59259033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( String . to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null ?0: searchStr.toUpperCase( ) ;",
            "score": 99.58221435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ? 0 : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( Locale.getDefault( ) ) ) ;",
            "score": 99.57342059795673,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( Locale . get CaMeL Default ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str.append( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.53535970052083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [1] , searchStr.toUpperCase( ) ) ;",
            "score": 99.521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 1 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.substring(0, searchStr.length( ) ) ==0) { return true ; }",
            "score": 99.5157421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ) { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.59242983217592,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null || searchStr == null ) { return true ;",
            "score": 99.582138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57469798900463,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.trim( ) ) ;",
            "score": 99.57218627929687,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toLowerCase( ) ) ;",
            "score": 99.551123046875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , true ) ;",
            "score": 99.53488338694854,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.split( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.52147420247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . split ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.split( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.52147420247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . split ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.split( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.52147420247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . split ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.split( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.52147420247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . split ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.split( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.52147420247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . split ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.51524861653645,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ', searchStr ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF', searchStr ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde', searchStr ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def', searchStr ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef', searchStr ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,2) ;",
            "score": 99.60228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,4) ;",
            "score": 99.60228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,3) ;",
            "score": 99.60228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,8) ;",
            "score": 99.60228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,7) ;",
            "score": 99.60228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59239459859914,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.58195891203704,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') , searchStr.indexOf( ', ') ) ;",
            "score": 99.57421033135776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.57421033135776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') , searchStr.indexOf( 'cde') ) ;",
            "score": 99.57421033135776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') , searchStr.indexOf( 'def') ) ;",
            "score": 99.57421033135776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.57421033135776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -2) ) ;",
            "score": 99.57215465198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -4) ) ;",
            "score": 99.57215465198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -3) ) ;",
            "score": 99.57215465198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -8) ) ;",
            "score": 99.57215465198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -7) ) ;",
            "score": 99.57215465198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, str.length( ) -1) ) ;",
            "score": 99.5506591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).trim( ).length( ) ==0) ;",
            "score": 99.5150897686298,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains = str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.48541814630681,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) && ) ;",
            "score": 99.60218157087054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) && ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( substring( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.59224446614583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( substring ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.toArray( ) ) ;",
            "score": 99.57387358566811,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } return true ;",
            "score": 99.57212611607143,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55050048828124,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) false ) , searchStr ) ;",
            "score": 99.52091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) false ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = indexOf( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.51497749660327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.getName( ) ) ;",
            "score": 99.48449125744048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59171268857759,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.51485501802884,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == null && searchStr == null ) ;",
            "score": 99.4832430752841,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null && search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr.toString( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.60186089409723,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return compare( str.toUpperCase( ) , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.59150222252156,
            "correctness": "uncompilable",
            "tokenized_patch": "return compare ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.58157913773148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.charAt(0) ) ;",
            "score": 99.54994710286458,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str ) , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.520458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).equals( searchStr ) ) ;",
            "score": 99.51420261548913,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , null.toUpperCase( ) ) ;",
            "score": 99.48248000372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) false ;",
            "score": 99.60124860491071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) {",
            "score": 99.59140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).containsIgnoreCase( ) ;",
            "score": 99.58132595486111,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . contains CaMeL Ignore CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.57320851293103,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.54878743489583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.getValue( ).toUpperCase( ) ) ;",
            "score": 99.533349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . get CaMeL Value ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) || searchStr == null ;",
            "score": 99.52041015625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) || search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.equals( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.51412963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).length( ) ==0) ;",
            "score": 99.48189086914063,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , count ) ;",
            "score": 99.600966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , count ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( false , false ) ) ;",
            "score": 99.5913818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( false , false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.contains( searchStr.toUpperCase( ) ) ;",
            "score": 99.58120888157895,
            "correctness": "wrong",
            "tokenized_patch": "return str . contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.charCount( ) ) ;",
            "score": 99.513486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . char CaMeL Count ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr ) ;",
            "score": 99.48179408482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean contains( str.toUpperCase( ) ) ; return contains( str.toUpperCase( ) ) ;",
            "score": 99.57187836745689,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean contains ( str . to CaMeL Upper CaMeL Case ( ) ) ; return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , null , searchStr.length( ) ) ;",
            "score": 99.548173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , null , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ', ', false ) ;",
            "score": 99.53286345108695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'ABCDEF', false ) ;",
            "score": 99.53286345108695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'cde', false ) ;",
            "score": 99.53286345108695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'def', false ) ;",
            "score": 99.53286345108695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'abcdef', false ) ;",
            "score": 99.53286345108695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.481689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toUpperCase( ) true ) ;",
            "score": 99.60014997209821,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr.toUpperCase( ) ).toUpperCase( ) ) ;",
            "score": 99.5910400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , str ) ;",
            "score": 99.58086867559524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( searchStr.toUpperCase( ) ) ;",
            "score": 99.57168473868535,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.indexOf( searchStr ) != -1) ;",
            "score": 99.57008056640625,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) != - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.54774541440217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(0, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.51334635416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.48154994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr [0].toUpperCase( ) ) ;",
            "score": 99.60012582632211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str [ 0 ] . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEnum( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59088766163794,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Enum ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.charAt(0) , searchStr.trim( ) ) ;",
            "score": 99.56958946814903,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . char CaMeL At ( 0 ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) ) ;",
            "score": 99.54773763020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) ,0) ;",
            "score": 99.4811779203869,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.590712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , true , searchStr.toUpperCase( ) ) ;",
            "score": 99.57096915409483,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , true , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [0].toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.56939227764423,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 0 ] . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.substring(2) ) ;",
            "score": 99.5474141438802,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.substring(4) ) ;",
            "score": 99.5474141438802,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.substring(3) ) ;",
            "score": 99.5474141438802,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.substring(8) ) ;",
            "score": 99.5474141438802,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.substring(7) ) ;",
            "score": 99.5474141438802,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase(1, searchStr.toUpperCase( ) ) ;",
            "score": 99.51948879076087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( [ ] ) contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.51281207540761,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( [ ] ) contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null ) ;",
            "score": 99.48087252103366,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ) : contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.59987386067708,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) : contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).substring(0, searchStr.length( ) ) ==0) ;",
            "score": 99.59066877693965,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.length( ) ) ;",
            "score": 99.56932983398437,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr , true ) ;",
            "score": 99.532216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.51869268002717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.51869268002717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.51869268002717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.51869268002717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.51869268002717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ).length( ) >=0) ;",
            "score": 99.5125020345052,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) >= 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ') ;",
            "score": 99.48085374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF') ;",
            "score": 99.48085374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde') ;",
            "score": 99.48085374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def') ;",
            "score": 99.48085374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef') ;",
            "score": 99.48085374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? false : ) ;",
            "score": 99.59983543113425,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59051724137932,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.57970739293981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57058279854911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + true ;",
            "score": 99.51841517857143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == ', ') { return false ;",
            "score": 99.48055013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == 'ABCDEF') { return false ;",
            "score": 99.48055013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == 'cde') { return false ;",
            "score": 99.48055013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == 'def') { return false ;",
            "score": 99.48055013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == 'abcdef') { return false ;",
            "score": 99.48055013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.59036570581897,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String [ ] { str } , searchStr.length , searchStr.length ) ;",
            "score": 99.54724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str } , search CaMeL Str . length , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.51781209309895,
            "correctness": "uncompilable",
            "tokenized_patch": "try { contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ) == null ) { return false ;",
            "score": 99.47995174632354,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.59955512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.59955512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.59955512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.59955512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.59955512152777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59018891433189,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.57932447350544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.length( ) - searchStr.length( ) ) ) ;",
            "score": 99.56890399639423,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . length ( ) - search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toLowerCase( ) ) ;",
            "score": 99.51759935461956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toLowerCase( ) ) ;",
            "score": 99.51759935461956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toLowerCase( ) ) ;",
            "score": 99.51759935461956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toLowerCase( ) ) ;",
            "score": 99.51759935461956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toLowerCase( ) ) ;",
            "score": 99.51759935461956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , str ) ;",
            "score": 99.47992234002976,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return start( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59011501736111,
            "correctness": "uncompilable",
            "tokenized_patch": "return start ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr [0] , searchStr.toUpperCase( ) ) ;",
            "score": 99.56971153846153,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str [ 0 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && containsIgnoreCase( str ) ;",
            "score": 99.56876831054687,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , searchStr ;",
            "score": 99.53075154622395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.matches( searchStr ) ) ;",
            "score": 99.51220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . matches ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) false ) ;",
            "score": 99.47930353338069,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).equals( searchStr ) ;",
            "score": 99.59942157451923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null ? true : searchStr.toUpperCase( ) ;",
            "score": 99.57858712332589,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ? true : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ; } else return true ;",
            "score": 99.56935813210227,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ; } else return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.toLowerCase( ) ) ) ;",
            "score": 99.56856282552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.5172119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( -0, searchStr.length( ) ) ) ;",
            "score": 99.51201171875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( - 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( containsIgnoreCase( str ) , searchStr ) ;",
            "score": 99.47853781960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( contains CaMeL Ignore CaMeL Case ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( str.toUpperCase( ) , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.58997844827586,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).contains( searchStr ) ;",
            "score": 99.57842548076923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.toArray( ) ) ;",
            "score": 99.568046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) { return false ; }",
            "score": 99.5305859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( length ) ) ;",
            "score": 99.51656087239583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( length ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr , searchStr.length( ) ) ) ;",
            "score": 99.51185021033653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return containsIgnoreCase( searchStr ) ;",
            "score": 99.47810502485795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.59929289641204,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).trim( ) ==0;",
            "score": 99.58994477370689,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).equals( ', ') ;",
            "score": 99.57834298270089,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).equals( 'ABCDEF') ;",
            "score": 99.57834298270089,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).equals( 'cde') ;",
            "score": 99.57834298270089,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).equals( 'def') ;",
            "score": 99.57834298270089,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).equals( 'abcdef') ;",
            "score": 99.57834298270089,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.trim( ).length( ) ) ;",
            "score": 99.5676739032452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . trim ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == ', ';",
            "score": 99.5164794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == 'ABCDEF';",
            "score": 99.5164794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == 'cde';",
            "score": 99.5164794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == 'def';",
            "score": 99.5164794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == 'abcdef';",
            "score": 99.5164794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( str.toUpperCase( ) ) ) ;",
            "score": 99.5117919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) && searchStr == null ) ;",
            "score": 99.47808547247024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.58989426185344,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ] ) ;",
            "score": 99.57817731584821,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ).toLowerCase( ) ) ;",
            "score": 99.54564453125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,2) ;",
            "score": 99.53004092261905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,4) ;",
            "score": 99.53004092261905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,3) ;",
            "score": 99.53004092261905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,8) ;",
            "score": 99.53004092261905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,7) ;",
            "score": 99.53004092261905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , ', ') ;",
            "score": 99.516474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , 'ABCDEF') ;",
            "score": 99.516474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , 'cde') ;",
            "score": 99.516474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , 'def') ;",
            "score": 99.516474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str , searchStr.toUpperCase( ) ) , 'abcdef') ;",
            "score": 99.516474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, toUpperCase( ) ) ) ;",
            "score": 99.51171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.equals( ', ') ) ;",
            "score": 99.47802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.equals( 'ABCDEF') ) ;",
            "score": 99.47802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.equals( 'cde') ) ;",
            "score": 99.47802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.equals( 'def') ) ;",
            "score": 99.47802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.equals( 'abcdef') ) ;",
            "score": 99.47802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr ) ; return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.59885079520089,
            "correctness": "wrong",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ; return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) == null",
            "score": 99.57802553530092,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) -1) ;",
            "score": 99.56736597521552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.5671875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) + ', ') ;",
            "score": 99.5163806733631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.5163806733631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) + 'cde') ;",
            "score": 99.5163806733631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) + 'def') ;",
            "score": 99.5163806733631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) + 'abcdef') ;",
            "score": 99.5163806733631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.51126231317934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).toUpperCase( )",
            "score": 99.5985995205966,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ).length( ) !=0;",
            "score": 99.58929036458333,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } if( searchStr.toUpperCase( ) ==",
            "score": 99.57799421037946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , str.charAt(1) ) ;",
            "score": 99.56678838315217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , str . char CaMeL At ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) +1) ) ;",
            "score": 99.54543050130208,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) + 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0).toUpperCase( ) ) ;",
            "score": 99.51125081380208,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) true ) ;",
            "score": 99.59839739118304,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = str.toUpperCase( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.589208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.5670917217548,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( Locale.getDefault( ) ) ) ;",
            "score": 99.56673490084134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( Locale . get CaMeL Default ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ).trim( ) ) ;",
            "score": 99.54457158627717,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.5159765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.5159765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.5159765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.5159765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.5159765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.59770856584821,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.544501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , searchStr ) ;",
            "score": 99.52916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( length ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.51573689778645,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( length ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr || searchStr == null ) ;",
            "score": 99.47692289806548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) == true ) ;",
            "score": 99.59658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.valueOf( searchStr ) ) ;",
            "score": 99.58872884114584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . value CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.booleanValue( ) ) ;",
            "score": 99.566572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . boolean CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ).trim( ) ) ;",
            "score": 99.54444521949405,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.52892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + ) ;",
            "score": 99.515478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0,0) ) ;",
            "score": 99.5103290264423,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , -1) ;",
            "score": 99.59624774639423,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).equals( searchStr ) ;",
            "score": 99.58864830280173,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str + searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.52869183084239,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ', ') ) ;",
            "score": 99.51546630859374,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( 'ABCDEF') ) ;",
            "score": 99.51546630859374,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( 'cde') ) ;",
            "score": 99.51546630859374,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( 'def') ) ;",
            "score": 99.51546630859374,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( 'abcdef') ) ;",
            "score": 99.51546630859374,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr , searchStr ) ) ;",
            "score": 99.51017622514205,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) +1) ;",
            "score": 99.47655087425595,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) : contains( str ) ;",
            "score": 99.5961405436198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).trim( ) ;",
            "score": 99.58853853665866,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.565908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.56508963448661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.56508963448661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.56508963448661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.56508963448661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.56508963448661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , true.toUpperCase( ) ) ;",
            "score": 99.544013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , true . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).length( ) ) ;",
            "score": 99.52841584578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.51521102241848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).trim( ).length( ) ==0;",
            "score": 99.50925699869792,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.contains( searchStr ) ) ;",
            "score": 99.4759854403409,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? true : true ;",
            "score": 99.59607464334239,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( containsIgnoreCase( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.57698880709134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.FALSE ) ;",
            "score": 99.5281640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . FALSE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( ', ') ) ;",
            "score": 99.51448567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( 'ABCDEF') ) ;",
            "score": 99.51448567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( 'cde') ) ;",
            "score": 99.51448567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( 'def') ) ;",
            "score": 99.51448567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( 'abcdef') ) ;",
            "score": 99.51448567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars , searchStr.toUpperCase( ) ) ;",
            "score": 99.50894968133224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , ', ') ;",
            "score": 99.47543174342105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , 'ABCDEF') ;",
            "score": 99.47543174342105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , 'cde') ;",
            "score": 99.47543174342105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , 'def') ;",
            "score": 99.47543174342105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , 'abcdef') ;",
            "score": 99.47543174342105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(2) ) ;",
            "score": 99.59597342354911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(4) ) ;",
            "score": 99.59597342354911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(3) ) ;",
            "score": 99.59597342354911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(8) ) ;",
            "score": 99.59597342354911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(7) ) ;",
            "score": 99.59597342354911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.toString( ) ) ;",
            "score": 99.565673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) || contains( str.toUpperCase( ) ) ;",
            "score": 99.56430489676339,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) || contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.indexOf( ', ') +1) ) ;",
            "score": 99.543134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.indexOf( 'ABCDEF') +1) ) ;",
            "score": 99.543134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.indexOf( 'cde') +1) ) ;",
            "score": 99.543134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.indexOf( 'def') +1) ) ;",
            "score": 99.543134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.indexOf( 'abcdef') +1) ) ;",
            "score": 99.543134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ] ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.51385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ] ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ] ) ) ;",
            "score": 99.50872802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr ) ? true : true ;",
            "score": 99.59592918113425,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.57604528356481,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( Locale.US ) ) ;",
            "score": 99.56550736860795,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( Locale . US ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.format( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.56415264423077,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,0, searchStr.toUpperCase( ).length( ) ) ;",
            "score": 99.54310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = searchStr.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.50868733723958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '.toUpperCase( ) ) ;",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'.toUpperCase( ) ) ;",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'.toUpperCase( ) ) ;",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58787378771552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58787378771552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58787378771552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58787378771552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58787378771552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.startsWith( ', ') ) ;",
            "score": 99.56528883713942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.56528883713942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.startsWith( 'cde') ) ;",
            "score": 99.56528883713942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.startsWith( 'def') ) ;",
            "score": 99.56528883713942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.56528883713942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr , searchStr.length( ) ) ;",
            "score": 99.54296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , size ) ;",
            "score": 99.52806454613095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , size ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase(",
            "score": 99.51314290364583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).length( ) ==0;",
            "score": 99.50853271484375,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ;",
            "score": 99.47489790482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ;",
            "score": 99.47489790482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ;",
            "score": 99.47489790482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ;",
            "score": 99.47489790482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ;",
            "score": 99.47489790482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , searchStr ;",
            "score": 99.59535435267857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.58755387931035,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str.toLowerCase( ) , searchStr.trim( ) ) ) ;",
            "score": 99.5423046875,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.toString( ) == null ) { return true ;",
            "score": 99.47417249177632,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL String ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) true ;",
            "score": 99.59517996651786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).length( ) ==0;",
            "score": 99.5872802734375,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "String searchStr = str.toUpperCase( ) ; if( searchStr == null ) { return true ;",
            "score": 99.57517787388393,
            "correctness": "uncompilable",
            "tokenized_patch": "String search CaMeL Str = str . to CaMeL Upper CaMeL Case ( ) ; if ( search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr.trim( ) ) ) ;",
            "score": 99.56490652901786,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , false ) ;",
            "score": 99.52725380345395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ searchStr.toUpperCase( ) ) ;",
            "score": 99.51241262335526,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.51241262335526,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.51241262335526,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.51241262335526,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.51241262335526,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) ] ) ) ;",
            "score": 99.5081097146739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( name ) ) ;",
            "score": 99.47405450994319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( name ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return substring( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.58686355064656,
            "correctness": "uncompilable",
            "tokenized_patch": "return substring ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toLowerCase( ) ) ;",
            "score": 99.56418971011513,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( true , searchStr.length( ) ) ) ;",
            "score": 99.5080057779948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( true , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , ', ') ;",
            "score": 99.47383045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , 'ABCDEF') ;",
            "score": 99.47383045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , 'cde') ;",
            "score": 99.47383045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , 'def') ;",
            "score": 99.47383045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , 'abcdef') ;",
            "score": 99.47383045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return true ; } else { return false ;",
            "score": 99.5614813442888,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.54173743206522,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( ', '.length( ) ) ) ;",
            "score": 99.51034545898438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( 'ABCDEF'.length( ) ) ) ;",
            "score": 99.51034545898438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( 'cde'.length( ) ) ) ;",
            "score": 99.51034545898438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( 'def'.length( ) ) ) ;",
            "score": 99.51034545898438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( 'abcdef'.length( ) ) ) ;",
            "score": 99.51034545898438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).booleanValue( ) ;",
            "score": 99.59466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( byte.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57467086226852,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( byte . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str , searchStr.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.56106883081897,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toLowerCase( ) ) != -1;",
            "score": 99.54166666666667,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , null , null ) ;",
            "score": 99.5266750169837,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false : true ;",
            "score": 99.5099460767663,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , toUpperCase( ) , searchStr ) ;",
            "score": 99.57454427083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.lastIndexOf( ', ') ) ;",
            "score": 99.56320190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.lastIndexOf( 'ABCDEF') ) ;",
            "score": 99.56320190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.lastIndexOf( 'cde') ) ;",
            "score": 99.56320190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.lastIndexOf( 'def') ) ;",
            "score": 99.56320190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.lastIndexOf( 'abcdef') ) ;",
            "score": 99.56320190429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toLowerCase( ) ) == -1;",
            "score": 99.54119873046875,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; return true ;",
            "score": 99.50953258167614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.50722092848558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , null ) ;",
            "score": 99.47212299547698,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == true ) ;",
            "score": 99.57440740411931,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.trim( ) ) ;",
            "score": 99.56244860197368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).length( ) >0) ;",
            "score": 99.56063406808036,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.substring( ) ) ;",
            "score": 99.50705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( searchStr.length( ) ) ) ;",
            "score": 99.58522135416666,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == ', ') ;",
            "score": 99.57432972301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == 'ABCDEF') ;",
            "score": 99.57432972301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == 'cde') ;",
            "score": 99.57432972301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == 'def') ;",
            "score": 99.57432972301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == 'abcdef') ;",
            "score": 99.57432972301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.56243024553571,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.endsWith( ', ') ).booleanValue( ) ;",
            "score": 99.54004923502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . ends CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.endsWith( 'ABCDEF') ).booleanValue( ) ;",
            "score": 99.54004923502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . ends CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.endsWith( 'cde') ).booleanValue( ) ;",
            "score": 99.54004923502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . ends CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.endsWith( 'def') ).booleanValue( ) ;",
            "score": 99.54004923502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . ends CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.endsWith( 'abcdef') ).booleanValue( ) ;",
            "score": 99.54004923502605,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . ends CaMeL With ( $STRING$ ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.size( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.52652640964673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . size ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new Character( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.50882090692934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new Character ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.length( ) , searchStr.length( ) ) ;",
            "score": 99.506787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . length ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return containsIgnoreCase( str ) ;",
            "score": 99.47186889648438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.matches( str.toUpperCase( ) ) ) ;",
            "score": 99.5847412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . matches ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == null || searchStr.toUpperCase( ) ;",
            "score": 99.57410120081019,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) >=0;",
            "score": 99.56240446671195,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr == null ? null : searchStr.toUpperCase( ) ) ;",
            "score": 99.56050166377315,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str == null ? null : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.replace( ', ', ', ') ) ;",
            "score": 99.53997802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.53997802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'cde', 'cde') ) ;",
            "score": 99.53997802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'def', 'def') ) ;",
            "score": 99.53997802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'abcdef', 'abcdef') ) ;",
            "score": 99.53997802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr.toString( ) ) ;",
            "score": 99.52650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( chars , searchStr.toUpperCase( ) ) ;",
            "score": 99.50881029211956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( chars , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.50674040421195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '|| searchStr.toUpperCase( ) ) ;",
            "score": 99.47156343005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.47156343005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.47156343005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.47156343005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.47156343005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str.toUpperCase( ) )",
            "score": 99.59390371817129,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.toUpperCase( ) ;",
            "score": 99.58388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null.length( ).toUpperCase( ) ;",
            "score": 99.57369290865384,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null . length ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ; } else { return true ;",
            "score": 99.56033640894397,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } else { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( str == null ) { return false ;",
            "score": 99.52646891276042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { if( searchStr == null ) { return false ; }",
            "score": 99.470947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { if ( search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).trim( ) ;",
            "score": 99.58384874131944,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return false ; }",
            "score": 99.52645263671874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.50762648809524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.50762648809524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.50762648809524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.50762648809524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , null ) ;",
            "score": 99.50762648809524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null + searchStr.toUpperCase( ) ) ;",
            "score": 99.47088913690476,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , null + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( containsIgnoreCase( str , searchStr ) , searchStr ) ;",
            "score": 99.5929706280048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58371310763889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( false ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55945696149554,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( false ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.size( ) true ) ;",
            "score": 99.52590942382812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . size ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( true , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.507568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( true , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.startsWith( ', ') ) ;",
            "score": 99.50565279447116,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.50565279447116,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.startsWith( 'cde') ) ;",
            "score": 99.50565279447116,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.startsWith( 'def') ) ;",
            "score": 99.50565279447116,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.50565279447116,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toArray( ) , searchStr ) ;",
            "score": 99.47077287946429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Array ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ? ;",
            "score": 99.59294782366071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.equals( searchStr ) ) ;",
            "score": 99.58358561197916,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ).length( ) ==0) ;",
            "score": 99.57335486778847,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( ', ') ) ;",
            "score": 99.56121271306819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.56121271306819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'cde') ) ;",
            "score": 99.56121271306819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'def') ) ;",
            "score": 99.56121271306819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.56121271306819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.replace ) ;",
            "score": 99.5257421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . replace ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , searchStr.toUpperCase( ) )",
            "score": 99.59269496372768,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , charValue.toUpperCase( ) ) ;",
            "score": 99.58320674189815,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , char CaMeL Value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( this.str , searchStr.toUpperCase( ) ) ;",
            "score": 99.573046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( this . str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && containsIgnoreCase( searchStr ) ;",
            "score": 99.56069113991477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toUpperCase( ) , true ) ;",
            "score": 99.55878737877156,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.startsWith( searchStr.toUpperCase( ) ) ;",
            "score": 99.53883958899456,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . starts CaMeL With ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', '+ str.toUpperCase( ) ) ;",
            "score": 99.5072380514706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ str.toUpperCase( ) ) ;",
            "score": 99.5072380514706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ str.toUpperCase( ) ) ;",
            "score": 99.5072380514706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ str.toUpperCase( ) ) ;",
            "score": 99.5072380514706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ str.toUpperCase( ) ) ;",
            "score": 99.5072380514706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + str.toUpperCase( ) , searchStr ) ;",
            "score": 99.50547572544643,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "} return contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.47017211914063,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.toUpperCase( ) false ) ;",
            "score": 99.59256685697116,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).startsWith( searchStr ) ) ;",
            "score": 99.56050441576087,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.equals( ', ') ) ;",
            "score": 99.5587158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.equals( 'ABCDEF') ) ;",
            "score": 99.5587158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.equals( 'cde') ) ;",
            "score": 99.5587158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.equals( 'def') ) ;",
            "score": 99.5587158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.equals( 'abcdef') ) ;",
            "score": 99.5587158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( ', ') ) ;",
            "score": 99.52549235026042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( 'ABCDEF') ) ;",
            "score": 99.52549235026042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( 'cde') ) ;",
            "score": 99.52549235026042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( 'def') ) ;",
            "score": 99.52549235026042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.format( 'abcdef') ) ;",
            "score": 99.52549235026042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == null ;",
            "score": 99.50689086914062,
            "correctness": "wrong",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , Integer.toUpperCase( searchStr ) ) ;",
            "score": 99.46987915039062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Integer . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + searchStr.toUpperCase( ) ) ;",
            "score": 99.59242078993056,
            "correctness": "timeout",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).endsWith( ', ') ) ;",
            "score": 99.55868635506465,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).endsWith( 'ABCDEF') ) ;",
            "score": 99.55868635506465,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).endsWith( 'cde') ) ;",
            "score": 99.55868635506465,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).endsWith( 'def') ) ;",
            "score": 99.55868635506465,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).endsWith( 'abcdef') ) ;",
            "score": 99.55868635506465,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50653631036931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50653631036931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50653631036931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50653631036931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50653631036931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( indexOf( str , searchStr.toUpperCase( ) ) ==0) ;",
            "score": 99.504619140625,
            "correctness": "wrong",
            "tokenized_patch": "return ( index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr.size( ) ) ;",
            "score": 99.57249168113425,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) -1) ;",
            "score": 99.50623139880952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , new String [ ] { searchStr } )",
            "score": 99.59139578683036,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , new String [ ] { search CaMeL Str } )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).trim( ) ==0) ;",
            "score": 99.58302525111607,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,( int ) searchStr.length( ) ) ;",
            "score": 99.56003981370192,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , ( int ) search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).equals( ', ') ) ;",
            "score": 99.55837673611111,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).equals( 'ABCDEF') ) ;",
            "score": 99.55837673611111,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).equals( 'cde') ) ;",
            "score": 99.55837673611111,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).equals( 'def') ) ;",
            "score": 99.55837673611111,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).equals( 'abcdef') ) ;",
            "score": 99.55837673611111,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) ) , searchStr.length( ) ) ;",
            "score": 99.5386454264323,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == searchStr ;",
            "score": 99.5060526529948,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,1, searchStr.toUpperCase( ) ) ;",
            "score": 99.50440615699405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.size( ) ) ;",
            "score": 99.46826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } else { return false ; }",
            "score": 99.55777587890626,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } else { return false ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , String == null || searchStr == null ) ;",
            "score": 99.46812220982143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , String == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , null , false ) ;",
            "score": 99.59105541087963,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return max( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.58268790409483,
            "correctness": "uncompilable",
            "tokenized_patch": "return max ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.equals( searchStr ) || searchStr.equals( searchStr ) ) ;",
            "score": 99.559599609375,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . equals ( search CaMeL Str ) || search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) >0;",
            "score": 99.55768291766827,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! contains( str , searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.537685546875,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.charValue( ) , searchStr.length( ) ) ;",
            "score": 99.524501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL Value ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( false ) ) ;",
            "score": 99.50574747721355,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.length( ) ) ) ;",
            "score": 99.50325927734374,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . length ( ) ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , String == null && searchStr == null ) ;",
            "score": 99.46811058407738,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , String == null && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) , true ) ;",
            "score": 99.59105383831522,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(1, searchStr.length( ) ) ) ;",
            "score": 99.53609008789063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 1 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , size ) ;",
            "score": 99.52439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , size ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.equals( searchStr.toUpperCase( ) ) ) {",
            "score": 99.50514729817708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isUpperCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.50318444293478,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , null ) ;",
            "score": 99.46735491071429,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) ,0) ;",
            "score": 99.59062138310185,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.58210358796296,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equalsIgnoreCase( searchStr.toUpperCase( ) ) ;",
            "score": 99.53568699048913,
            "correctness": "wrong",
            "tokenized_patch": "return str . equals CaMeL Ignore CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return contains( str , searchStr ) ;",
            "score": 99.52431233723958,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) ,",
            "score": 99.50421142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) && contains( searchStr ) ;",
            "score": 99.50316443810097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) && contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.46732003348214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.46732003348214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.46732003348214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.46732003348214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.46732003348214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(0, searchStr.size( ) ) ) ;",
            "score": 99.59020124162946,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . size ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.57149703414352,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55892944335938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).startsWith( ', ') ;",
            "score": 99.55636280980603,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.55636280980603,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).startsWith( 'cde') ;",
            "score": 99.55636280980603,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).startsWith( 'def') ;",
            "score": 99.55636280980603,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).startsWith( 'abcdef') ;",
            "score": 99.55636280980603,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.toLowerCase( ) , searchStr.trim( ) ) ;",
            "score": 99.53555297851562,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( name ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.50416100543478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( name ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str.toUpperCase( ) , searchStr ) , searchStr ) ;",
            "score": 99.50282639723558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( String.toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.46628639914773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( String . to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) != false ) ;",
            "score": 99.590166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) != false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).contains( ) ;",
            "score": 99.57115106997283,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.indexOf( ', ') ) ;",
            "score": 99.55634014423077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.55634014423077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.indexOf( 'cde') ) ;",
            "score": 99.55634014423077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.indexOf( 'def') ) ;",
            "score": 99.55634014423077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.55634014423077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( false , searchStr.toUpperCase( ) ) ;",
            "score": 99.50398055366848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(0, searchStr ;",
            "score": 99.46624200994319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 0 , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase(1) , searchStr.toUpperCase( ) ) ;",
            "score": 99.58073207310268,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( 1 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.length( ) -1) , searchStr ) ;",
            "score": 99.55853271484375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . length ( ) - 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return matches( str , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.55630095108695,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.length( ) ) != -1;",
            "score": 99.53538818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . length ( ) ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr ==0) ;",
            "score": 99.523955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).length( ) >0;",
            "score": 99.50249689275569,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr == null && searchStr == null ) ;",
            "score": 99.46595523231908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str == null && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( Integer.toUpperCase( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.59002685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( Integer . to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , null ) ;",
            "score": 99.52373190487133,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(1, searchStr.length( ) ) , searchStr ) ;",
            "score": 99.50345865885417,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 1 , search CaMeL Str . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ).equals( searchStr ) ) ;",
            "score": 99.502392578125,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.trim( ) ) ;",
            "score": 99.46572730654762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.58054896763393,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') == -1) ;",
            "score": 99.55839029947917,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') == -1) ;",
            "score": 99.55839029947917,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') == -1) ;",
            "score": 99.55839029947917,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') == -1) ;",
            "score": 99.55839029947917,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') == -1) ;",
            "score": 99.55839029947917,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( true ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55562046595982,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( true ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.length( ) , true ) ;",
            "score": 99.53490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , new String [0] ) ;",
            "score": 99.523515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , new String [ 0 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( ', ', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.50283415421195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'ABCDEF', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.50283415421195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'cde', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.50283415421195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'def', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.50283415421195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'abcdef', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.50283415421195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr.length( ) false ) ;",
            "score": 99.58909388950893,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( false , true ) ) ;",
            "score": 99.58040364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( false , true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ? false : str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.57021859975961,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? false : str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; return true ;",
            "score": 99.55828125,
            "correctness": "wrong",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.55552936422414,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.50281871448864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString( str.toUpperCase( ) ) ) ;",
            "score": 99.50185324928977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == null ;",
            "score": 99.46431107954545,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return read( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57926432291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return read ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57020399305556,
            "correctness": "uncompilable",
            "tokenized_patch": "return str ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.charAt(0) ) ;",
            "score": 99.55814302884616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( null , searchStr.length( ) ) ) ;",
            "score": 99.50147501627605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( null , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr ) ) { return ) ;",
            "score": 99.46430053710938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.57912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , toUpperCase( ) ) ;",
            "score": 99.57008644386575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.charAt(0) , searchStr.length( ) ) ;",
            "score": 99.5576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL At ( 0 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.55494847790948,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; if( str == null ) {",
            "score": 99.50257939877717,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; if ( str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).substring(1) ) ;",
            "score": 99.50142415364583,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . substring ( 1 ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toArray( ) ) ;",
            "score": 99.4640880766369,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , filter.toUpperCase( ) ) ;",
            "score": 99.57911839978448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , filter . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ).length( ) ) ;",
            "score": 99.57005931712963,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) ) ; }",
            "score": 99.55479600694444,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toLowerCase( ).toUpperCase( ) ) ;",
            "score": 99.53380859375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL Lower CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ) , searchStr.size( ) ) ;",
            "score": 99.50123948317308,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).toString( ) ;",
            "score": 99.58791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.5574367357337,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).substring( ).toUpperCase( ) ) ;",
            "score": 99.55464228877315,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . substring ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ; } return true ;",
            "score": 99.53380766369048,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.valueOf( searchStr ) ) ;",
            "score": 99.5226318359375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . value CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null || searchStr == null || searchStr == null ) {",
            "score": 99.50244750976563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.substring(0, searchStr.length( ) ) !=0) { return false ; }",
            "score": 99.500771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . substring ( 0 , search CaMeL Str . length ( ) ) != 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ) == null || searchStr == null ) { return false ;",
            "score": 99.46400669642857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) == null || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.58770073784723,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).contains( ', ') ;",
            "score": 99.56977190290179,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).contains( 'ABCDEF') ;",
            "score": 99.56977190290179,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).contains( 'cde') ;",
            "score": 99.56977190290179,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).contains( 'def') ;",
            "score": 99.56977190290179,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).contains( 'abcdef') ;",
            "score": 99.56977190290179,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).indexOf( searchStr ) != -1) ;",
            "score": 99.5572979266827,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( search CaMeL Str ) != - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') +1) ;",
            "score": 99.533154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') +1) ;",
            "score": 99.533154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') +1) ;",
            "score": 99.533154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') +1) ;",
            "score": 99.533154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') +1) ;",
            "score": 99.533154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) ) ; }",
            "score": 99.50240071614583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', str , searchStr ) ;",
            "score": 99.46389590992646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', str , searchStr ) ;",
            "score": 99.46389590992646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', str , searchStr ) ;",
            "score": 99.46389590992646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', str , searchStr ) ;",
            "score": 99.46389590992646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', str , searchStr ) ;",
            "score": 99.46389590992646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1, searchStr.length( ) false ) ) ;",
            "score": 99.58759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 , search CaMeL Str . length ( ) false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.57877323545259,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( new String( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.5692726417824,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ).charAt(0) ) ;",
            "score": 99.53279252485795,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.52169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.52169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.52169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.52169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.52169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) && searchStr.length( ) >=0) ;",
            "score": 99.5003125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) && search CaMeL Str . length ( ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return this.contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55332728794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return this . contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isWhitespace( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.532587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Whitespace ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.5022609544837,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.50028076171876,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null && searchStr == null ) { return false ;",
            "score": 99.46368729440789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null && search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = contains( str.toUpperCase( ) , searchStr.toUpperCase( ) )",
            "score": 99.58735874720982,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == searchStr ) ;",
            "score": 99.56777719350961,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr.trim( ) ) ) ;",
            "score": 99.50001109730114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.4633556547619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String( str.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.56767216435185,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.substring(1) ) ;",
            "score": 99.49998982747395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , -1) ;",
            "score": 99.46323464133523,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , Integer.toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.58723667689732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , Integer . to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.57833546605603,
            "correctness": "uncompilable",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( ', ', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.55672200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'ABCDEF', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.55672200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'cde', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.55672200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'def', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.55672200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'abcdef', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.55672200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ,( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.55248084435097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.charAt( searchStr.length( ) ) ) ;",
            "score": 99.53230794270833,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL At ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr.size( ) ) ;",
            "score": 99.520869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , ) ;",
            "score": 99.46318223741319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } if( str.toUpperCase( ) ==",
            "score": 99.56742037259616,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } if ( str . to CaMeL Upper CaMeL Case ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( Locale.US ) , searchStr.trim( ) ) ;",
            "score": 99.55649977463942,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( Locale . US ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.substring(1) ) ;",
            "score": 99.53206734035327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.52055027173913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; ) ;",
            "score": 99.49996512276786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , value ) ;",
            "score": 99.46314912683823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , new String [ ] { str } ) ;",
            "score": 99.5317913552989,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , new String [ ] { str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ).toString( ) ) ;",
            "score": 99.52046535326087,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.name( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5014117697011,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . name ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.searchStr.toUpperCase( ) ) ;",
            "score": 99.58559389467592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , name.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57700532058189,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) - ) ) ;",
            "score": 99.531728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) - ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr.getCaMeL",
            "score": 99.52017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str . get CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) , searchStr.toUpperCase( ) ;",
            "score": 99.50103759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.size( ) , searchStr.length( ) ) ;",
            "score": 99.49952233355978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(0, str.toUpperCase( ) , searchStr ) ;",
            "score": 99.46297200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr ).trim( ) ;",
            "score": 99.58554868344908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , char [0] ) ;",
            "score": 99.57677205403645,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , char [ 0 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5670753761574,
            "correctness": "uncompilable",
            "tokenized_patch": "return new ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toUpperCase( ) , false ) ;",
            "score": 99.55173255657327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.5316852072011,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , false ) ;",
            "score": 99.46285207648026,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [1] , searchStr.toUpperCase( ) ) ;",
            "score": 99.57638113839286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ 1 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr.toLowerCase( ) ) ; }",
            "score": 99.55545748197116,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.indexOf( ', ') ) ;",
            "score": 99.53163840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.53163840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.indexOf( 'cde') ) ;",
            "score": 99.53163840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.indexOf( 'def') ) ;",
            "score": 99.53163840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.53163840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,0.false ) ;",
            "score": 99.5200726052989,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 . false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( false , searchStr.toUpperCase( ) ) ;",
            "score": 99.50035336143092,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , toUpperCase( searchStr ) ) ;",
            "score": 99.4991455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) false ) ;",
            "score": 99.46281294389205,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) || ) ;",
            "score": 99.58547537667411,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) || ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ;",
            "score": 99.56692270132211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.55513916015624,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr( ) ) ;",
            "score": 99.51984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr ) ) ;",
            "score": 99.46281163832721,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).trim( ).trim( ) ;",
            "score": 99.57586263020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toUpperCase( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.5667724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) -2) ) ;",
            "score": 99.55490112304688,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) -4) ) ;",
            "score": 99.55490112304688,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) -3) ) ;",
            "score": 99.55490112304688,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) -8) ) ;",
            "score": 99.55490112304688,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) -7) ) ;",
            "score": 99.55490112304688,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , ) ;",
            "score": 99.49971516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , matches( searchStr ) ) ;",
            "score": 99.498779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , matches ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.append( searchStr ) ) ;",
            "score": 99.46254660866477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . append ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) || contains( searchStr ) ;",
            "score": 99.58507361778847,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) || contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( matches.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57585539641204,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( matches . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ?0",
            "score": 99.56674630301339,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? 0",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! Character.isUpperCase( str.charAt(0) ) ;",
            "score": 99.55476888020833,
            "correctness": "wrong",
            "tokenized_patch": "return ! Character . is CaMeL Upper CaMeL Case ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.) ;",
            "score": 99.5197245279948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.value( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.4997027853261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . value ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr ) ;",
            "score": 99.49876644736842,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toLowerCase( ) == null ) { return false ;",
            "score": 99.46230933779762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) L",
            "score": 99.58501519097223,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) L",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.valueOf( searchStr ) ) ;",
            "score": 99.5756084735577,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . value CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.56647858796296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( Locale.getDefault( ) ) ) ;",
            "score": 99.55342240767045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( Locale . get CaMeL Default ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.indexOf( ) ) ;",
            "score": 99.54986361799568,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ',( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.4996670809659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF',( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.4996670809659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde',( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.4996670809659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def',( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.4996670809659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef',( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.4996670809659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == false ) { return false ;",
            "score": 99.46204194568452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).toUpperCase( ).trim( ) ;",
            "score": 99.58432798032408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).size( ) ==0) ;",
            "score": 99.57558768136161,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . size ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null : contains( str.toUpperCase( ) ) ;",
            "score": 99.5659812644676,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null : contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , searchStr.length( ) ) ;",
            "score": 99.553369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length -1) ;",
            "score": 99.53083602241848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr ) ; }",
            "score": 99.4986572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.49853515625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return new String( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.46192515980114,
            "correctness": "uncompilable",
            "tokenized_patch": "return new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , toUpperCase( ) ) ;",
            "score": 99.57533842941811,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) >0) { return false ; } else { return false ;",
            "score": 99.54962789601294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.trim( ).toUpperCase( ) ) ;",
            "score": 99.53064453125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.49864130434783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.49864130434783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.49864130434783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.49864130434783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.49864130434783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.next( ).toUpperCase( ) ) ;",
            "score": 99.49843962296195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . next ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ).}",
            "score": 99.58411516462054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return stop( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57533094618056,
            "correctness": "uncompilable",
            "tokenized_patch": "return stop ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).startsWith( ', ') ) ;",
            "score": 99.55262974330357,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.55262974330357,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).startsWith( 'cde') ) ;",
            "score": 99.55262974330357,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).startsWith( 'def') ) ;",
            "score": 99.55262974330357,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.55262974330357,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) !=0;",
            "score": 99.54920372596153,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) ,0) ;",
            "score": 99.51845415900735,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "searchStr = str.toUpperCase( ) ; return searchStr == null ;",
            "score": 99.46173650568181,
            "correctness": "wrong",
            "tokenized_patch": "search CaMeL Str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr , searchStr.length( ) ) ;",
            "score": 99.55251146399456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ; return true ;",
            "score": 99.54909752155173,
            "correctness": "wrong",
            "tokenized_patch": "contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toArray( ).toUpperCase( ) ) ;",
            "score": 99.530322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Array ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.49830163043478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.49830163043478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.49830163043478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.49830163043478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.49830163043478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.498291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.getValue( ) ) ;",
            "score": 99.46143740699405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . get CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( str , searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.57489013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ; }",
            "score": 99.54905482700893,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.replace( ', ', ', ') ) ;",
            "score": 99.53029378255208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.replace( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.53029378255208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.replace( 'cde', 'cde') ) ;",
            "score": 99.53029378255208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.replace( 'def', 'def') ) ;",
            "score": 99.53029378255208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.replace( 'abcdef', 'abcdef') ) ;",
            "score": 99.53029378255208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.getCaMeL",
            "score": 99.5178731282552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . get CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( String ) searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.49827067057292,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.46105346679687,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , null , true ) ;",
            "score": 99.58390299479167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( str.length( ) ) ) ;",
            "score": 99.57466343470982,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( name.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.5641796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.charAt(0) , searchStr.length( ) ) ;",
            "score": 99.5518108865489,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1) , searchStr.length( ) ) ;",
            "score": 99.49814860026042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , false ) ; }",
            "score": 99.4979248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.start ) ;",
            "score": 99.4609142485119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . start ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).toString( ) ;",
            "score": 99.5835193452381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) false ;",
            "score": 99.5745849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt(2) ) ;",
            "score": 99.55162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt(4) ) ;",
            "score": 99.55162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt(3) ) ;",
            "score": 99.55162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt(8) ) ;",
            "score": 99.55162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt(7) ) ;",
            "score": 99.55162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( $NUMBER$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toLowerCase( ) , searchStr.trim( ) ) ;",
            "score": 99.52970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( str.toUpperCase( ) ) ) ;",
            "score": 99.51758829752605,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.( ) ) ;",
            "score": 99.49800248579545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( true , searchStr.toUpperCase( ) ) ;",
            "score": 99.4971988075658,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( true , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return ) { return ) ;",
            "score": 99.46087091619319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,0)",
            "score": 99.58348592122395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.toUpperCase( ) , null ) ;",
            "score": 99.56387442129629,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.indexOf( searchStr ) ) ;",
            "score": 99.5514453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).trim( ).length( ) >0) ;",
            "score": 99.4978496844952,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str [0].toUpperCase( ) , searchStr ) ;",
            "score": 99.46022727272727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 0 ] . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == -0;",
            "score": 99.57411702473958,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return str.toUpperCase( ) == searchStr",
            "score": 99.56383405412946,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) -1) ) ;",
            "score": 99.52905951605902,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , searchStr.toUpperCase( ) ) ;",
            "score": 99.49703176398026,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.name.toUpperCase( ) ) ;",
            "score": 99.46017020089286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).length( ) !=0;",
            "score": 99.57394935344827,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) || containsIgnoreCase( str ) ;",
            "score": 99.55103149414063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) || contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) , searchStr ) ;",
            "score": 99.54767975983796,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).startsWith( ', ') ;",
            "score": 99.52895972842262,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.52895972842262,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).startsWith( 'cde') ;",
            "score": 99.52895972842262,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).startsWith( 'def') ;",
            "score": 99.52895972842262,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).startsWith( 'abcdef') ;",
            "score": 99.52895972842262,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , value.toUpperCase( ) , searchStr ) ;",
            "score": 99.5172265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , value . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , return false ) ;",
            "score": 99.49700372869319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , return false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( searchStr ) == -1) ;",
            "score": 99.55071411132812,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) == - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).toLowerCase( ) , searchStr ) ;",
            "score": 99.52878736413044,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.append( ) ) ;",
            "score": 99.51708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . append ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.startsWith( str.toUpperCase( ) ) ;",
            "score": 99.4975818452381,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . starts CaMeL With ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; return false ;",
            "score": 99.49695933948864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , toUpperCase( str ) ) ;",
            "score": 99.46007690429687,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL Upper CaMeL Case ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.toUpperCase( ) )",
            "score": 99.58188883463542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).equals( searchStr ) ;",
            "score": 99.57381998697916,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) - searchStr.length( ) ) ) ;",
            "score": 99.55023193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) - search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ,0, searchStr.length( ) ) ;",
            "score": 99.52869233630952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.matches( ', ') ) ;",
            "score": 99.51686604817708,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.matches( 'ABCDEF') ) ;",
            "score": 99.51686604817708,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.matches( 'cde') ) ;",
            "score": 99.51686604817708,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.matches( 'def') ) ;",
            "score": 99.51686604817708,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.matches( 'abcdef') ) ;",
            "score": 99.51686604817708,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( true , searchStr.toUpperCase( ) ) ;",
            "score": 99.49667756453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( true , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toInteger( ) , searchStr ) ;",
            "score": 99.45962379092262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Integer ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,0.0) ;",
            "score": 99.58141637731481,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).toUpperCase( ) !=0;",
            "score": 99.57364908854167,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , this.searchStr.toUpperCase( ) ) ;",
            "score": 99.56306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , this . search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( str.charValue( ) ).booleanValue( ) ;",
            "score": 99.5499851392663,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . char CaMeL Value ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , Character.length( searchStr.length( ) ) ) ;",
            "score": 99.54702322823661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , Character . length ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).toUpperCase( ) , null ) ;",
            "score": 99.528193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,0, true ) ;",
            "score": 99.51677139945652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).length( ) >0) ;",
            "score": 99.49750366210938,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.String( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.49662449048913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).String( ) ;",
            "score": 99.58139829282408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( ', ') ? true : false ) ;",
            "score": 99.5498798076923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'ABCDEF') ? true : false ) ;",
            "score": 99.5498798076923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'cde') ? true : false ) ;",
            "score": 99.5498798076923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'def') ? true : false ) ;",
            "score": 99.5498798076923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'abcdef') ? true : false ) ;",
            "score": 99.5498798076923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.5281292459239,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , toUpperCase ) ;",
            "score": 99.516494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, str.toUpperCase( ) ) ;",
            "score": 99.49750077097039,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == searchStr ) ;",
            "score": 99.45941840277777,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str.toUpperCase( ) , searchStr ) , searchStr ) ;",
            "score": 99.58100947627315,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toString( ).toUpperCase( ) !=0) ;",
            "score": 99.57276204427083,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) != 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return startsWith( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.54901413690476,
            "correctness": "wrong",
            "tokenized_patch": "return starts CaMeL With ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains contains( str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.52743530273438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.49740998641305,
            "correctness": "wrong",
            "tokenized_patch": "return str . trim ( ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , containsIgnoreCase( searchStr ) , searchStr ) ;",
            "score": 99.45929509943181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toUpperCase( ) false ) ;",
            "score": 99.58018141526442,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars.toUpperCase( ) , searchStr ) ;",
            "score": 99.57261898643092,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.charAt( ) ) ;",
            "score": 99.5487890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . char CaMeL At ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.split( ', ') ) ;",
            "score": 99.52718098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.split( 'ABCDEF') ) ;",
            "score": 99.52718098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.split( 'cde') ) ;",
            "score": 99.52718098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.split( 'def') ) ;",
            "score": 99.52718098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.split( 'abcdef') ) ;",
            "score": 99.52718098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.49632771809895,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == searchStr ;",
            "score": 99.45908425071023,
            "correctness": "wrong",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? true : contains( str , searchStr",
            "score": 99.57970319475446,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : contains ( str , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.57261555989584,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ).;",
            "score": 99.56226490162037,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim(.length( ) ) ) ;",
            "score": 99.548583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , false ) ;",
            "score": 99.52698863636364,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , null ) ;",
            "score": 99.51506604646382,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.49695354959239,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( -1, searchStr.toUpperCase( ) ) ;",
            "score": 99.49593098958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( - 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return contains( str.toUpperCase( ) ) ;",
            "score": 99.45906205610795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return containsIgnoreCase( str , searchStr )",
            "score": 99.579248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.57259114583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toUpperCase( ) , true ) ;",
            "score": 99.56143301504629,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.indexOf( ', ') ) ) ;",
            "score": 99.54617874710648,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.indexOf( 'ABCDEF') ) ) ;",
            "score": 99.54617874710648,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.indexOf( 'cde') ) ) ;",
            "score": 99.54617874710648,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.indexOf( 'def') ) ) ;",
            "score": 99.54617874710648,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.indexOf( 'abcdef') ) ) ;",
            "score": 99.54617874710648,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') , searchStr.length( ) ) ;",
            "score": 99.52658913352273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') , searchStr.length( ) ) ;",
            "score": 99.52658913352273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') , searchStr.length( ) ) ;",
            "score": 99.52658913352273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') , searchStr.length( ) ) ;",
            "score": 99.52658913352273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') , searchStr.length( ) ) ;",
            "score": 99.52658913352273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , null , true ) ;",
            "score": 99.51503057065217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) ,",
            "score": 99.49586070667614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str == null || searchStr == null ) ;",
            "score": 99.45905504728618,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.lastIndexOf( searchStr ) ) ;",
            "score": 99.5480069247159,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ; } return false ;",
            "score": 99.52616954985119,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.4956563313802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , ', ') ;",
            "score": 99.45876593338816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.45876593338816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , 'cde') ;",
            "score": 99.45876593338816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , 'def') ;",
            "score": 99.45876593338816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , 'abcdef') ;",
            "score": 99.45876593338816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , length ) ;",
            "score": 99.57234139278017,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ).equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.52611194957386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) ,0) ;",
            "score": 99.51481827445652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ] ).toUpperCase( ) ) ;",
            "score": 99.4966532389323,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ] ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == null || searchStr == null ) {",
            "score": 99.4948221842448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return true ;",
            "score": 99.45863970588235,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + $STRING$",
            "score": 99.57891845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + $STRING$",
            "score": 99.57891845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + $STRING$",
            "score": 99.57891845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + $STRING$",
            "score": 99.57891845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) + $STRING$",
            "score": 99.57891845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.5719793911638,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr ) ;",
            "score": 99.54731580946181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.startsWith( searchStr.toUpperCase( ) ) ;",
            "score": 99.52498372395833,
            "correctness": "wrong",
            "tokenized_patch": "return str . starts CaMeL With ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return searchStr.length( ) >0;",
            "score": 99.496396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . length ( ) > 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return substring( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57180447048611,
            "correctness": "uncompilable",
            "tokenized_patch": "return substring ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == ', '+ searchStr.toUpperCase( ) ;",
            "score": 99.56096942608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'ABCDEF'+ searchStr.toUpperCase( ) ;",
            "score": 99.56096942608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'cde'+ searchStr.toUpperCase( ) ;",
            "score": 99.56096942608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'def'+ searchStr.toUpperCase( ) ;",
            "score": 99.56096942608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'abcdef'+ searchStr.toUpperCase( ) ;",
            "score": 99.56096942608173,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr , false ) ;",
            "score": 99.5246814546131,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) : contains( str , searchStr ) ;",
            "score": 99.57847086588542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str.toUpperCase( ) , searchStr.toUpperCase( ) ) true ;",
            "score": 99.57163899739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.5607198079427,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr , searchStr.length( ) ) != -1;",
            "score": 99.54718017578125,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str , search CaMeL Str . length ( ) ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) ==0;",
            "score": 99.54494900173611,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase(.length( ) -1) ) ;",
            "score": 99.524638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( searchStr.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.4960186298077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , name ) ;",
            "score": 99.49416934742646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString( ).toUpperCase( ) ) ;",
            "score": 99.45840308779762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , ', ')",
            "score": 99.57845052083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'ABCDEF')",
            "score": 99.57845052083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'cde')",
            "score": 99.57845052083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'def')",
            "score": 99.57845052083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , 'abcdef')",
            "score": 99.57845052083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ).length( ) -1) ;",
            "score": 99.546904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr.length( ) ==0) { return false ; }",
            "score": 99.513916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . length ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).substring(0, searchStr.length( ) ) ;",
            "score": 99.495673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) {",
            "score": 99.4941073330966,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr.length( ) ==0) { return false ;",
            "score": 99.4580310639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).substring(0, searchStr.length( ) ) == false ) ;",
            "score": 99.57112910829741,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) ,0) ;",
            "score": 99.54685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ; ) ;",
            "score": 99.54443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).length( ) -1) ;",
            "score": 99.52432105654762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( searchStr.length( ) !=",
            "score": 99.51352945963542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( search CaMeL Str . length ( ) !=",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).equals( searchStr ) ;",
            "score": 99.49556790865384,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr.toUpperCase( ) ) )",
            "score": 99.49330647786458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , toString( searchStr ) ) ;",
            "score": 99.45792236328126,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL String ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).trim( ).toUpperCase( ).trim( ) ;",
            "score": 99.57112630208333,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , ', ') ;",
            "score": 99.546728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , 'ABCDEF') ;",
            "score": 99.546728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , 'cde') ;",
            "score": 99.546728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , 'def') ;",
            "score": 99.546728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) , 'abcdef') ;",
            "score": 99.546728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.524306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) ,0) ;",
            "score": 99.51276598478618,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equalsIgnoreCase( searchStr ) ;",
            "score": 99.495537109375,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return new String( str.toUpperCase( ) , searchStr ) == null ;",
            "score": 99.45789683948864,
            "correctness": "uncompilable",
            "tokenized_patch": "return new String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.57111227101294,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null ?0: str.toUpperCase( ) ;",
            "score": 99.55931678185097,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ? 0 : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } return false ;",
            "score": 99.54666573660714,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.lastIndexOf( ', ') ) ) ;",
            "score": 99.523759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.lastIndexOf( 'ABCDEF') ) ) ;",
            "score": 99.523759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.lastIndexOf( 'cde') ) ) ;",
            "score": 99.523759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.lastIndexOf( 'def') ) ) ;",
            "score": 99.523759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.lastIndexOf( 'abcdef') ) ) ;",
            "score": 99.523759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) {",
            "score": 99.49243927001953,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(( String ) str , searchStr ) ;",
            "score": 99.45709228515625,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).endsWith( searchStr ) ) ;",
            "score": 99.54666270380434,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr , searchStr.length( ) ) == -1;",
            "score": 99.52372233072917,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str , search CaMeL Str . length ( ) ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , null , searchStr.toUpperCase( ) ) ;",
            "score": 99.5779441550926,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) ,0) ;",
            "score": 99.52354847301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr.toUpperCase( ) , searchStr ) ; }",
            "score": 99.49408428485577,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ', '.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.49190266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'ABCDEF'.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.49190266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'cde'.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.49190266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'def'.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.49190266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'abcdef'.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.49190266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.57775426793981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.57775426793981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.57775426793981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.57775426793981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.57775426793981,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) , true ) ;",
            "score": 99.5436590786638,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.equals( ', ') ) ;",
            "score": 99.52334594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.equals( 'ABCDEF') ) ;",
            "score": 99.52334594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.equals( 'cde') ) ;",
            "score": 99.52334594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.equals( 'def') ) ;",
            "score": 99.52334594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.equals( 'abcdef') ) ;",
            "score": 99.52334594726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str ) ) ;",
            "score": 99.49406433105469,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.toLowerCase( ) == null ) {",
            "score": 99.49186197916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . to CaMeL Lower CaMeL Case ( ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ', '== searchStr.toUpperCase( ) ) { return false ;",
            "score": 99.45624069940476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'ABCDEF'== searchStr.toUpperCase( ) ) { return false ;",
            "score": 99.45624069940476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'cde'== searchStr.toUpperCase( ) ) { return false ;",
            "score": 99.45624069940476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'def'== searchStr.toUpperCase( ) ) { return false ;",
            "score": 99.45624069940476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'abcdef'== searchStr.toUpperCase( ) ) { return false ;",
            "score": 99.45624069940476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.57039668642241,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == false ) ;",
            "score": 99.5587158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -1, searchStr.length( ) ) ;",
            "score": 99.5433984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toLowerCase( ) ) ;",
            "score": 99.52277483258929,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).trim( ).length( ) ==0;",
            "score": 99.49341759314903,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( -1, searchStr.toUpperCase( ) ) ;",
            "score": 99.49181518554687,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( - 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toInteger( ) ) ;",
            "score": 99.45586867559524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Integer ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toString( ).toUpperCase( ) != null ) ;",
            "score": 99.57008463541666,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).contains( searchStr ) ) ;",
            "score": 99.55865948016827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! Character.isDigit( str.charAt(0) ) ;",
            "score": 99.5460205078125,
            "correctness": "wrong",
            "tokenized_patch": "return ! Character . is CaMeL Digit ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.valueOf( str.toLowerCase( ).booleanValue( ) ) ;",
            "score": 99.5226953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( str . to CaMeL Lower CaMeL Case ( ) . boolean CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.clone( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.51194166100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . clone ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , str.length( ) ) ;",
            "score": 99.49337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) || searchStr ;",
            "score": 99.4558438387784,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) || search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.57761056082589,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return charValue( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.57004310344827,
            "correctness": "uncompilable",
            "tokenized_patch": "return char CaMeL Value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.length( ) ==0) ;",
            "score": 99.5221875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr == null ) ;",
            "score": 99.51186735733695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + ', ';",
            "score": 99.49164109002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + 'ABCDEF';",
            "score": 99.49164109002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + 'cde';",
            "score": 99.49164109002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + 'def';",
            "score": 99.49164109002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + 'abcdef';",
            "score": 99.49164109002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( -1) ) ;",
            "score": 99.56956324084052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.substring( str.length( ) -1) , searchStr ) ;",
            "score": 99.54562612680289,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( str . length ( ) - 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.charAt( str.length( ) -1) ) ;",
            "score": 99.52211507161458,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL At ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , true ) ;",
            "score": 99.51177657277961,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) && searchStr.length( ) <0) ;",
            "score": 99.49294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) && search CaMeL Str . length ( ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.format( searchStr ) ) ;",
            "score": 99.4553555575284,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . format ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( searchStr , searchStr.toUpperCase( ) ) == -1;",
            "score": 99.5691669170673,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str == null ? false : contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.558427734375,
            "correctness": "wrong",
            "tokenized_patch": "return str == null ? false : contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.length( ) ==0|| str.charAt(0) == ', ') { return false ;",
            "score": 99.54547588641827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0|| str.charAt(0) == 'ABCDEF') { return false ;",
            "score": 99.54547588641827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0|| str.charAt(0) == 'cde') { return false ;",
            "score": 99.54547588641827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0|| str.charAt(0) == 'def') { return false ;",
            "score": 99.54547588641827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0|| str.charAt(0) == 'abcdef') { return false ;",
            "score": 99.54547588641827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 || str . char CaMeL At ( 0 ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring( -1) ) ;",
            "score": 99.54251414331897,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.length( ) -1) ;",
            "score": 99.52188110351562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str.toUpperCase( ) , searchStr ) ) { return true ; }",
            "score": 99.492919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return ) { return false ; }",
            "score": 99.45521763392857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).append( searchStr ).toUpperCase( ) ;",
            "score": 99.5690285011574,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . append ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == searchStr ) ;",
            "score": 99.55820719401042,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.54239595853366,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , searchStr ;",
            "score": 99.5115254720052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr ) ; }",
            "score": 99.49129231770833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( int ) str.toUpperCase( ) , searchStr ) ;",
            "score": 99.45508922230114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ( int ) str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) , searchStr )",
            "score": 99.5773456280048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Math.substring( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.56901602909483,
            "correctness": "uncompilable",
            "tokenized_patch": "return Math . substring ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } if( searchStr == null ) { return true ;",
            "score": 99.55789184570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } if ( search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.length ) ;",
            "score": 99.54500325520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( ', ').toUpperCase( ) , searchStr ) ;",
            "score": 99.5115254720052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( 'ABCDEF').toUpperCase( ) , searchStr ) ;",
            "score": 99.5115254720052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( 'cde').toUpperCase( ) , searchStr ) ;",
            "score": 99.5115254720052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( 'def').toUpperCase( ) , searchStr ) ;",
            "score": 99.5115254720052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( 'abcdef').toUpperCase( ) , searchStr ) ;",
            "score": 99.5115254720052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , ) ;",
            "score": 99.49088134765626,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.FALSE ) ;",
            "score": 99.45422944568452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . FALSE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str ).toUpperCase( ).toUpperCase( ).trim( ) ;",
            "score": 99.56888133081897,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ).toUpperCase( ) == searchStr.toUpperCase( ) ;",
            "score": 99.55784254807692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ) . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) , true ) ;",
            "score": 99.50977623980978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equalsIgnoreCase( searchStr ) ;",
            "score": 99.49255901834239,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , -1) ;",
            "score": 99.49083116319444,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).toUpperCase( ) ? true : false ;",
            "score": 99.57673249421296,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ? true : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).trim( ) !=0;",
            "score": 99.56835095635776,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ).trim( ) ) ;",
            "score": 99.52140299479167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Integer.toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.50924682617188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Integer . to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).length( ) >0;",
            "score": 99.49244384765625,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( ', '.toUpperCase( ) ) ) ;",
            "score": 99.49073282877605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'ABCDEF'.toUpperCase( ) ) ) ;",
            "score": 99.49073282877605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'cde'.toUpperCase( ) ) ) ;",
            "score": 99.49073282877605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'def'.toUpperCase( ) ) ) ;",
            "score": 99.49073282877605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'abcdef'.toUpperCase( ) ) ) ;",
            "score": 99.49073282877605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return ) return false ;",
            "score": 99.45375279017857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return ) return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toString( ).toUpperCase( ) ;",
            "score": 99.56822791466347,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr.length( ) ) ) ;",
            "score": 99.54427083333333,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , searchStr.length( ) ) ;",
            "score": 99.52107508042279,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.size( ) && searchStr.length( ) >0) ;",
            "score": 99.49220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.0, searchStr.0) ) ;",
            "score": 99.49072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . 0 , search CaMeL Str . 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str , searchStr ) ) { return true ;",
            "score": 99.45367431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( ', ') && searchStr.startsWith( ', ') ) ;",
            "score": 99.5442403157552,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'ABCDEF') && searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.5442403157552,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'cde') && searchStr.startsWith( 'cde') ) ;",
            "score": 99.5442403157552,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'def') && searchStr.startsWith( 'def') ) ;",
            "score": 99.5442403157552,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'abcdef') && searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.5442403157552,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( ', ') ) == -1;",
            "score": 99.5210597826087,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'ABCDEF') ) == -1;",
            "score": 99.5210597826087,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'cde') ) == -1;",
            "score": 99.5210597826087,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'def') ) == -1;",
            "score": 99.5210597826087,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'abcdef') ) == -1;",
            "score": 99.5210597826087,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + str.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.492119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.49064497514205,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return searchStr == null ;",
            "score": 99.45329938616071,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ').toUpperCase( ) ) ;",
            "score": 99.5415508563702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF').toUpperCase( ) ) ;",
            "score": 99.5415508563702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde').toUpperCase( ) ) ;",
            "score": 99.5415508563702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def').toUpperCase( ) ) ;",
            "score": 99.5415508563702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef').toUpperCase( ) ) ;",
            "score": 99.5415508563702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ) , searchStr.length( ) ) ;",
            "score": 99.49209196671195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) ==0) { return false ;",
            "score": 99.45305524553571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,0, false ) ;",
            "score": 99.57605432581019,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.56780374461206,
            "correctness": "uncompilable",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) , searchStr.toLowerCase( ) ) ;",
            "score": 99.54414699388587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.length( ) ) ;",
            "score": 99.52018657483552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) && searchStr.equals( searchStr ) ) ;",
            "score": 99.49208420973558,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) && search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.49025656960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.49025656960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.49025656960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.49025656960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.49025656960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr.trim( ) == null ) { return false ;",
            "score": 99.45296223958333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . trim ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) : contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.57601928710938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) : contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , matches ) ;",
            "score": 99.56771113954741,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , matches ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , true ) ;",
            "score": 99.50823102678571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ?1: searchStr.toUpperCase( ) ) ;",
            "score": 99.49190090013587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? 1 : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase(0) ) ;",
            "score": 99.49022420247395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == searchStr == null ;",
            "score": 99.45260009765624,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.toUpperCase( ) true ) ;",
            "score": 99.575927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.567666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( searchStr , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.556640625,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.charAt(0) == searchStr.length( ) ) ;",
            "score": 99.54324776785714,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).trim( ).length( ) >0;",
            "score": 99.49176025390625,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return ) { return ) ;",
            "score": 99.45259094238281,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) :",
            "score": 99.57581018518519,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) :",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).substring(0, searchStr.toUpperCase( ) ) ;",
            "score": 99.56745016163794,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( ', ') ) { return true ; } return false ;",
            "score": 99.54313520951705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'ABCDEF') ) { return true ; } return false ;",
            "score": 99.54313520951705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'cde') ) { return true ; } return false ;",
            "score": 99.54313520951705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'def') ) { return true ; } return false ;",
            "score": 99.54313520951705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'abcdef') ) { return true ; } return false ;",
            "score": 99.54313520951705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) !=0) { return false ; } else { return false ;",
            "score": 99.54034213362068,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Integer.toUpperCase( searchStr.length( ) ) ) ;",
            "score": 99.5198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Integer . to CaMeL Upper CaMeL Case ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.startsWith( ) ) ;",
            "score": 99.491171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . starts CaMeL With ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.toUpperCase( ) ) ; }",
            "score": 99.49003092447917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toCharArray( ) , searchStr ) ;",
            "score": 99.45241827713816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Char CaMeL Array ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.56740993923611,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; return false ;",
            "score": 99.555859375,
            "correctness": "wrong",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) return false ;",
            "score": 99.54030845905173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.charAt(0) ) ;",
            "score": 99.51969401041667,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.append( ', ').toUpperCase( ) ) ;",
            "score": 99.50728352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'ABCDEF').toUpperCase( ) ) ;",
            "score": 99.50728352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'cde').toUpperCase( ) ) ;",
            "score": 99.50728352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'def').toUpperCase( ) ) ;",
            "score": 99.50728352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'abcdef').toUpperCase( ) ) ;",
            "score": 99.50728352864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ?1: str.toUpperCase( ) ) ;",
            "score": 99.49114118303571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? 1 : str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , ) ;",
            "score": 99.45222473144531,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ).trim( ) ==0;",
            "score": 99.5673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ).contains( searchStr.toUpperCase( ) ) ;",
            "score": 99.555830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ) . contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( false ) , searchStr.toUpperCase( false ) ) ;",
            "score": 99.54009799299568,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( false ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr == null ) ) ;",
            "score": 99.5072354403409,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str == null ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.intern( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.48966117527173,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . intern ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , ', ', str.toUpperCase( ) ) ;",
            "score": 99.45212916324013,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', str.toUpperCase( ) ) ;",
            "score": 99.45212916324013,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', str.toUpperCase( ) ) ;",
            "score": 99.45212916324013,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', str.toUpperCase( ) ) ;",
            "score": 99.45212916324013,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', str.toUpperCase( ) ) ;",
            "score": 99.45212916324013,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? false : contains ;",
            "score": 99.57444480613425,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).searchStr.toUpperCase( ) ) ;",
            "score": 99.56730143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String str , searchStr.toUpperCase( ) ) ;",
            "score": 99.555732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') , searchStr.trim( ) ) ;",
            "score": 99.53958834134616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') , searchStr.trim( ) ) ;",
            "score": 99.53958834134616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') , searchStr.trim( ) ) ;",
            "score": 99.53958834134616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') , searchStr.trim( ) ) ;",
            "score": 99.53958834134616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') , searchStr.trim( ) ) ;",
            "score": 99.53958834134616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) ) ) ;",
            "score": 99.51949055989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , matches.toUpperCase( ) ) ;",
            "score": 99.4902576264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , matches . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , searchStr ) ;",
            "score": 99.45204380580357,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ).size( ) ==0;",
            "score": 99.56700397359914,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . size ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( searchStr == null ) ||( searchStr == null ) ) { return true ;",
            "score": 99.5557171365489,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( search CaMeL Str == null ) || ( search CaMeL Str == null ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( searchStr.indexOf( ', ') ) ) ;",
            "score": 99.51921280570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( searchStr.indexOf( 'ABCDEF') ) ) ;",
            "score": 99.51921280570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( searchStr.indexOf( 'cde') ) ) ;",
            "score": 99.51921280570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( searchStr.indexOf( 'def') ) ) ;",
            "score": 99.51921280570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( searchStr.indexOf( 'abcdef') ) ) ;",
            "score": 99.51921280570652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , null ) ;",
            "score": 99.507080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.48850416100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.48850416100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.48850416100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.48850416100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.48850416100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ;",
            "score": 99.45189319957386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).toUpperCase( ) ;",
            "score": 99.56699625651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , this ) ;",
            "score": 99.5556408110119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charValue( ) , searchStr ) ;",
            "score": 99.50690774356617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL Value ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str.toUpperCase( ) ) ) { return false ; }",
            "score": 99.489697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) false ;",
            "score": 99.48793538411458,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null || searchStr.toUpperCase( ) ;",
            "score": 99.45146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) != true ) ;",
            "score": 99.573583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) != true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( this ) ) ;",
            "score": 99.56668526785714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( this ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') , searchStr ) ;",
            "score": 99.51861017400569,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') , searchStr ) ;",
            "score": 99.51861017400569,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') , searchStr ) ;",
            "score": 99.51861017400569,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') , searchStr ) ;",
            "score": 99.51861017400569,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') , searchStr ) ;",
            "score": 99.51861017400569,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) == false ) ;",
            "score": 99.50594075520833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,( char ) searchStr.toUpperCase( ) ) ;",
            "score": 99.48942427201705,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , ( char ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.trim( ) ) ;",
            "score": 99.45102074032738,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).add( searchStr ) ;",
            "score": 99.57321401742789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . add ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ).toString( ) ;",
            "score": 99.56663411458334,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) +1) ;",
            "score": 99.53866682381465,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str2, searchStr.toUpperCase( ) ) ;",
            "score": 99.48768310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str4, searchStr.toUpperCase( ) ) ;",
            "score": 99.48768310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str3, searchStr.toUpperCase( ) ) ;",
            "score": 99.48768310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str8, searchStr.toUpperCase( ) ) ;",
            "score": 99.48768310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str7, searchStr.toUpperCase( ) ) ;",
            "score": 99.48768310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , ) ;",
            "score": 99.45083618164062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( this.str , searchStr.toUpperCase( ) ) ;",
            "score": 99.55451311383929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( this . str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.replaceAll( ', ', ', ') ) ;",
            "score": 99.54033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.replaceAll( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.54033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.replaceAll( 'cde', 'cde') ) ;",
            "score": 99.54033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.replaceAll( 'def', 'def') ) ;",
            "score": 99.54033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.replaceAll( 'abcdef', 'abcdef') ) ;",
            "score": 99.54033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase(0) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53825160435268,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( 0 ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) >0;",
            "score": 99.51834239130434,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( searchStr.trim( ) ) ;",
            "score": 99.48810546875,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.48707217261905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ;",
            "score": 99.45005888097427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(0, searchStr.length( ) ) )",
            "score": 99.57294379340277,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.56625764266305,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == str.toUpperCase( ) ) ;",
            "score": 99.55449969951923,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.charAt( ) ) ;",
            "score": 99.53988792782738,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . char CaMeL At ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr == null ) ;",
            "score": 99.50519670758929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) && searchStr.length( ) ==0) ;",
            "score": 99.487880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) && search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.48695439877717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.48695439877717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.48695439877717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.48695439877717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.48695439877717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) == false ;",
            "score": 99.44996279761905,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) == false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ,0, true ) ;",
            "score": 99.57279007523148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).toUpperCase( ).length( ) !=0;",
            "score": 99.56619466145834,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.554443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).startsWith( searchStr ) ;",
            "score": 99.53756398168103,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( ', ') +1) ) ;",
            "score": 99.51669709578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'ABCDEF') +1) ) ;",
            "score": 99.51669709578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'cde') +1) ) ;",
            "score": 99.51669709578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'def') +1) ) ;",
            "score": 99.51669709578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'abcdef') +1) ) ;",
            "score": 99.51669709578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ false ] , searchStr.toUpperCase( ) ) ;",
            "score": 99.48663884943181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ false ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) ,0) ;",
            "score": 99.57249915081522,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).toUpperCase( ).toLowerCase( ) ;",
            "score": 99.56583077566964,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr.toUpperCase( ) == null ) { return false ;",
            "score": 99.553994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( ', ') ) { return false ; } return true ;",
            "score": 99.53900701349431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'ABCDEF') ) { return false ; } return true ;",
            "score": 99.53900701349431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'cde') ) { return false ; } return true ;",
            "score": 99.53900701349431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'def') ) { return false ; } return true ;",
            "score": 99.53900701349431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'abcdef') ) { return false ; } return true ;",
            "score": 99.53900701349431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains contains( str.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.51568603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) ,0) ;",
            "score": 99.50471297554348,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.48770141601562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , true ) ; }",
            "score": 99.48628373579545,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + ) ;",
            "score": 99.44952392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return str.toUpperCase( ) == null",
            "score": 99.57201209435097,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return str . to CaMeL Upper CaMeL Case ( ) == null",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.56580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null ? true : str.toUpperCase( ) ;",
            "score": 99.55389873798077,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ? true : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.lastIndexOf( ', ') ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.lastIndexOf( 'ABCDEF') ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.lastIndexOf( 'cde') ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.lastIndexOf( 'def') ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.lastIndexOf( 'abcdef') ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toCharArray( ) ) ;",
            "score": 99.51553505345395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.searchStr ) ;",
            "score": 99.48737899116848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.48612837357955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.48612837357955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.48612837357955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.48612837357955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.48612837357955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , str.toString( ) ) ;",
            "score": 99.44949776785714,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return value( ).toUpperCase( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.565771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == searchStr ).contains( searchStr ) ;",
            "score": 99.552958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.charAt(0) , searchStr ) ;",
            "score": 99.53884055397727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . char CaMeL At ( 0 ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.length( ) , false ) ;",
            "score": 99.53598969558189,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( return contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.4871826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + false ;",
            "score": 99.48597935267857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) false ) ;",
            "score": 99.44932556152344,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55233999399039,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str +1, searchStr.toUpperCase( ) ) ;",
            "score": 99.51503208705357,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( name.toString( ) , searchStr ) ;",
            "score": 99.44932338169643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( null , searchStr.toUpperCase( ) ) ;",
            "score": 99.552001953125,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str.charAt(0) ) ;",
            "score": 99.53834364149306,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && contains( searchStr.toUpperCase( ) ) ;",
            "score": 99.51454856178977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr }",
            "score": 99.50330699573864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) || searchStr.equals( searchStr ) ) ;",
            "score": 99.487060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) || search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.size( ) false ) ;",
            "score": 99.44915771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . size ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ?",
            "score": 99.57181351273148,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ?",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).trim( ) !=0) ;",
            "score": 99.565185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) != 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toString( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55177815755208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL String ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') , searchStr.trim( ) ) ;",
            "score": 99.51447088068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') , searchStr.trim( ) ) ;",
            "score": 99.51447088068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') , searchStr.trim( ) ) ;",
            "score": 99.51447088068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') , searchStr.trim( ) ) ;",
            "score": 99.51447088068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') , searchStr.trim( ) ) ;",
            "score": 99.51447088068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr ) ;",
            "score": 99.50284830729167,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr.equals( searchStr ) ) ;",
            "score": 99.48688213641827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( false , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.48509680706522,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( false , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) && true ;",
            "score": 99.57171875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) && true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return value.toUpperCase( ).equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.56511320891204,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , || searchStr == null ) ;",
            "score": 99.48509632457386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.equals( str ) ) ;",
            "score": 99.4487548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . equals ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) )",
            "score": 99.57108764648437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0).toUpperCase( ) , searchStr ) ;",
            "score": 99.53814227764423,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.51416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equalsIgnoreCase( searchStr ) ) ;",
            "score": 99.486796875,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str == null || searchStr.toUpperCase( ) == null ) ;",
            "score": 99.48506496263587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase(0) , searchStr ) ;",
            "score": 99.44856567382813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( 0 ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [0] , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.57101675180289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 0 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.toUpperCase( ).length( ) ) ) ;",
            "score": 99.56453450520833,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.startsWith( ', ') ) { return true ; } return true ;",
            "score": 99.53789728338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'ABCDEF') ) { return true ; } return true ;",
            "score": 99.53789728338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'cde') ) { return true ; } return true ;",
            "score": 99.53789728338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'def') ) { return true ; } return true ;",
            "score": 99.53789728338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'abcdef') ) { return true ; } return true ;",
            "score": 99.53789728338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') , searchStr.toString( ) ) ;",
            "score": 99.53433663504464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') , searchStr.toString( ) ) ;",
            "score": 99.53433663504464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') , searchStr.toString( ) ) ;",
            "score": 99.53433663504464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') , searchStr.toString( ) ) ;",
            "score": 99.53433663504464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') , searchStr.toString( ) ) ;",
            "score": 99.53433663504464,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; }",
            "score": 99.50236293247768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).searchStr ) ;",
            "score": 99.4863811990489,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , true ) ;",
            "score": 99.44851202713816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return true ; } if( searchStr == null ) { return false ;",
            "score": 99.55052693684895,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return true ; } if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.toLowerCase( ) , searchStr ) ;",
            "score": 99.51393432617188,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ;",
            "score": 99.50199167351974,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false :0;",
            "score": 99.48597783627717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ! searchStr.toUpperCase( ) ) ;",
            "score": 99.55033365885417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr , searchStr ) ;",
            "score": 99.53752335258152,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.trim( ).length( ) ) == -1;",
            "score": 99.51382446289062,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . trim ( ) . length ( ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) ,0) ;",
            "score": 99.50174386160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).equals( searchStr ) ) ;",
            "score": 99.48577411358173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; if( searchStr == null ) {",
            "score": 99.48483143682066,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; if ( search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return containsIgnoreCase( str , searchStr",
            "score": 99.57042518028847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ) {",
            "score": 99.56397326239224,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( ', ') -1) ;",
            "score": 99.5373026529948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'ABCDEF') -1) ;",
            "score": 99.5373026529948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'cde') -1) ;",
            "score": 99.5373026529948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'def') -1) ;",
            "score": 99.5373026529948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( 'abcdef') -1) ;",
            "score": 99.5373026529948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toArray( ) , searchStr.length( ) ) ;",
            "score": 99.5134509858631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Array ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( searchStr ) ) ;",
            "score": 99.50077989366319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.4855205829327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == searchStr ) ;",
            "score": 99.44718627929687,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , searchStr.substring( ) ) ;",
            "score": 99.56387223868535,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return true ; } return false ;",
            "score": 99.5369384765625,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.endsWith( str ) ) ;",
            "score": 99.4855205829327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ends CaMeL With ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr + ', ') ;",
            "score": 99.57019624255952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr + 'ABCDEF') ;",
            "score": 99.57019624255952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr + 'cde') ;",
            "score": 99.57019624255952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr + 'def') ;",
            "score": 99.57019624255952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr + 'abcdef') ;",
            "score": 99.57019624255952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).contains( ', ') ;",
            "score": 99.54981486002605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).contains( 'ABCDEF') ;",
            "score": 99.54981486002605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).contains( 'cde') ;",
            "score": 99.54981486002605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).contains( 'def') ;",
            "score": 99.54981486002605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).contains( 'abcdef') ;",
            "score": 99.54981486002605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . contains ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.indexOf( searchStr ) ) ;",
            "score": 99.53684488932292,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) , searchStr.trim( ) ) ;",
            "score": 99.5131305197011,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , new ) ;",
            "score": 99.4994884672619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , new ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.toUpperCase( ) ) ) ;",
            "score": 99.48496500651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.562978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == true ;",
            "score": 99.54978249289773,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length , searchStr.length( ) ) ;",
            "score": 99.53650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).length( ) >0;",
            "score": 99.48494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) > 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( Integer.toUpperCase( str ) , searchStr ) ;",
            "score": 99.4462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( Integer . to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return min( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.56267679148706,
            "correctness": "uncompilable",
            "tokenized_patch": "return min ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).startsWith( searchStr ) ) ;",
            "score": 99.5364278157552,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str == null ?0: searchStr.toUpperCase( ) ) ;",
            "score": 99.48464037024456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? 0 : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , System.0) ;",
            "score": 99.48326044497283,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , System . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', ', name.toUpperCase( ) ) ;",
            "score": 99.44620554070724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', name.toUpperCase( ) ) ;",
            "score": 99.44620554070724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', name.toUpperCase( ) ) ;",
            "score": 99.44620554070724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', name.toUpperCase( ) ) ;",
            "score": 99.44620554070724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', name.toUpperCase( ) ) ;",
            "score": 99.44620554070724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name.toUpperCase( ) , searchStr.toUpperCase( ) )",
            "score": 99.56906362680289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).toLowerCase( ) !=0;",
            "score": 99.56254069010417,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( ', ', searchStr.toLowerCase( ) ) ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'ABCDEF', searchStr.toLowerCase( ) ) ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'cde', searchStr.toLowerCase( ) ) ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'def', searchStr.toLowerCase( ) ) ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'abcdef', searchStr.toLowerCase( ) ) ) ;",
            "score": 99.5362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.51289295014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.charValue( ) ) ;",
            "score": 99.49881114130434,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . char CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , -1, searchStr.toUpperCase( ) ) ;",
            "score": 99.48463023792614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , - 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ) == null ) { return false ;",
            "score": 99.4461669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.53579711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, str.length( ) ).toUpperCase( ) ) ;",
            "score": 99.53187913161058,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , str . length ( ) ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , matches ) ;",
            "score": 99.51288132440476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , matches ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( ).toUpperCase( ) ) ;",
            "score": 99.49874745244566,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.substring(0, searchStr.length( ) ).length( ) ==0) ;",
            "score": 99.484560546875,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . substring ( 0 , search CaMeL Str . length ( ) ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + ', ';",
            "score": 99.44571940104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + 'ABCDEF';",
            "score": 99.44571940104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + 'cde';",
            "score": 99.44571940104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + 'def';",
            "score": 99.44571940104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + 'abcdef';",
            "score": 99.44571940104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( ', ', searchStr.trim( ) ) ) ;",
            "score": 99.53556315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'ABCDEF', searchStr.trim( ) ) ) ;",
            "score": 99.53556315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'cde', searchStr.trim( ) ) ) ;",
            "score": 99.53556315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'def', searchStr.trim( ) ) ) ;",
            "score": 99.53556315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'abcdef', searchStr.trim( ) ) ) ;",
            "score": 99.53556315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( ', ') ) != -1;",
            "score": 99.51279084578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'ABCDEF') ) != -1;",
            "score": 99.51279084578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'cde') ) != -1;",
            "score": 99.51279084578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'def') ) != -1;",
            "score": 99.51279084578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.indexOf( 'abcdef') ) != -1;",
            "score": 99.51279084578805,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , length( ) ) ;",
            "score": 99.49840777853261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , toString( ) ) ;",
            "score": 99.484501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ") { return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44562639508929,
            "correctness": "uncompilable",
            "tokenized_patch": ") { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.56217233758224,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , true ) ;",
            "score": 99.5127422626202,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( , searchStr ) , searchStr ) ;",
            "score": 99.49826978600544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( , search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.48259943181819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr.trim( ) ) ;",
            "score": 99.44559151785714,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr , searchStr.toLowerCase( ) ) ;",
            "score": 99.53531901041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) ,0) ;",
            "score": 99.51253255208333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ) == null ) { return true ;",
            "score": 99.445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toString( ).toUpperCase( ) ==0) ;",
            "score": 99.5610595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr ,( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.5477803548177,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr [ searchStr.length -1] ) ;",
            "score": 99.53524780273438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str [ search CaMeL Str . length - 1 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.49752674932066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || str.toUpperCase( ) == null ) {",
            "score": 99.48207785866477,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || str . to CaMeL Upper CaMeL Case ( ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) ) ;",
            "score": 99.44513298483456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String [ ] { str } , searchStr.length ) ;",
            "score": 99.5120265794837,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String [ ] { str } , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr.toString( ) ) ;",
            "score": 99.445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr.toString( ) ) ;",
            "score": 99.445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr.toString( ) ) ;",
            "score": 99.445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr.toString( ) ) ;",
            "score": 99.445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr.toString( ) ) ;",
            "score": 99.445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1, searchStr.length( ) true ) ) ;",
            "score": 99.567294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 , search CaMeL Str . length ( ) true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.56078040081522,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toLowerCase( ) ) ) ;",
            "score": 99.5347900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.indexOf( ', ') ) ;",
            "score": 99.51176147460937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.51176147460937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.indexOf( 'cde') ) ;",
            "score": 99.51176147460937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.indexOf( 'def') ) ;",
            "score": 99.51176147460937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.51176147460937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , null ) ;",
            "score": 99.49729322350544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) ) , searchStr ) ;",
            "score": 99.48429048978366,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ).length( ) ==0) { return false ;",
            "score": 99.44468470982143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return max( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.5602394386574,
            "correctness": "uncompilable",
            "tokenized_patch": "return max ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.5470660665761,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.trim( ).toUpperCase( ) ) ;",
            "score": 99.5346042798913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ).toLowerCase( ) ) ;",
            "score": 99.51160198709239,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,( int ) searchStr.toUpperCase( ) ) ;",
            "score": 99.49711470170455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , ( int ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.48423073508523,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int length = searchStr.length( ) ; if( length ==0) { return false ;",
            "score": 99.48195578835227,
            "correctness": "uncompilable",
            "tokenized_patch": "int length = search CaMeL Str . length ( ) ; if ( length == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , - [0] ) ;",
            "score": 99.44458618164063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , - [ 0 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.56020171066811,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == true ) ;",
            "score": 99.5464375813802,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ).toLowerCase( ) , searchStr ) ;",
            "score": 99.51159137228261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) || searchStr == null ) ;",
            "score": 99.49641927083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).endsWith( ', ') ;",
            "score": 99.48411923363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).endsWith( 'ABCDEF') ;",
            "score": 99.48411923363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).endsWith( 'cde') ;",
            "score": 99.48411923363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).endsWith( 'def') ;",
            "score": 99.48411923363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).endsWith( 'abcdef') ;",
            "score": 99.48411923363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true , searchStr.toUpperCase( ) ) ;",
            "score": 99.48156156994048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.44437902113971,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.566708984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.56009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.toUpperCase( ) , searchStr.length( ) ) ;",
            "score": 99.52781459263393,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return booleanValue = Boolean.valueOf( searchStr ).booleanValue( ) ;",
            "score": 99.51111370584239,
            "correctness": "uncompilable",
            "tokenized_patch": "return boolean CaMeL Value = Boolean . value CaMeL Of ( search CaMeL Str ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( out , searchStr.toUpperCase( ) ) ;",
            "score": 99.48155146059783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( out , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.getName( ) , searchStr ) ;",
            "score": 99.44378952752976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . get CaMeL Name ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr + ', ') ;",
            "score": 99.566591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr + 'ABCDEF') ;",
            "score": 99.566591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr + 'cde') ;",
            "score": 99.566591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr + 'def') ;",
            "score": 99.566591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr + 'abcdef') ;",
            "score": 99.566591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.equals( searchStr ) || searchStr.equals( searchStr ) ) ;",
            "score": 99.53432210286458,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . equals ( search CaMeL Str ) || search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.substring( ) ) ;",
            "score": 99.5106891134511,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toClass( ) ) ;",
            "score": 99.4840625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Class ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.48149181547619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr == null ) ;",
            "score": 99.44366164434524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? searchStr",
            "score": 99.5664813701923,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).substring(0, searchStr.length( ) ) ;",
            "score": 99.55929249730603,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . substring ( 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).equals( searchStr ) ) ;",
            "score": 99.53429594494048,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr [0] ) ;",
            "score": 99.48389781605114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str [ 0 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , String.toUpperCase( ) ) ;",
            "score": 99.44354538690476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toUpperCase( ) )",
            "score": 99.5663350423177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars , searchStr.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.5592840786638,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == false ) ;",
            "score": 99.5447285970052,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( ', ') ? true : true ) ;",
            "score": 99.53418907752403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'ABCDEF') ? true : true ) ;",
            "score": 99.53418907752403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'cde') ? true : true ) ;",
            "score": 99.53418907752403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'def') ? true : true ) ;",
            "score": 99.53418907752403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.startsWith( 'abcdef') ? true : true ) ;",
            "score": 99.53418907752403,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ? true : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.5104449728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) ] ) ) ;",
            "score": 99.483818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( start , searchStr.toUpperCase( ) ) ;",
            "score": 99.4434814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( start , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars.toUpperCase( ) , str.toUpperCase( ) ) ;",
            "score": 99.55900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.53410200639205,
            "correctness": "wrong",
            "tokenized_patch": "return is CaMeL Empty ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ).",
            "score": 99.48096812855114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ).trim( ) !=0;",
            "score": 99.5589111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.contains( str.toUpperCase( ) ) ;",
            "score": 99.54463918585526,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).startsWith( ', ') ) ;",
            "score": 99.533935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.533935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).startsWith( 'cde') ) ;",
            "score": 99.533935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).startsWith( 'def') ) ;",
            "score": 99.533935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.533935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( str ) ) ;",
            "score": 99.50955539279514,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( ).toUpperCase( ) ) ;",
            "score": 99.49434230638587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr.trim( ) ) , searchStr ) ;",
            "score": 99.48323880709134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str . trim ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": ") { return contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.44277808779762,
            "correctness": "uncompilable",
            "tokenized_patch": ") { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr [0] , searchStr [1] ) ;",
            "score": 99.56583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str [ 0 ] , search CaMeL Str [ 1 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).toUpperCase( ).trim( ) ) ;",
            "score": 99.5094684103261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.trim( ) ) ;",
            "score": 99.49381938733552,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.size( ) || searchStr.length( ) >0) ;",
            "score": 99.483203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) || search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new str.toUpperCase( ) , searchStr ) ;",
            "score": 99.4421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) *0;",
            "score": 99.565361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.length( ) ) ;",
            "score": 99.55857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.substring( searchStr.length( ) -1) ) ;",
            "score": 99.53310546875,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) ;",
            "score": 99.49268687855114,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, ', '.length( ) ) ) ;",
            "score": 99.48261052911931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, 'ABCDEF'.length( ) ) ) ;",
            "score": 99.48261052911931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, 'cde'.length( ) ) ) ;",
            "score": 99.48261052911931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, 'def'.length( ) ) ) ;",
            "score": 99.48261052911931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, 'abcdef'.length( ) ) ) ;",
            "score": 99.48261052911931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.47939046223958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.47939046223958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.47939046223958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.47939046223958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr , searchStr.toUpperCase( ) ) ; }",
            "score": 99.47939046223958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( ', ') ) ;",
            "score": 99.44216437088816,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( 'ABCDEF') ) ;",
            "score": 99.44216437088816,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( 'cde') ) ;",
            "score": 99.44216437088816,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( 'def') ) ;",
            "score": 99.44216437088816,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( 'abcdef') ) ;",
            "score": 99.44216437088816,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr toUpperCase( ) ) ;",
            "score": 99.56525127704327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).trim( ) == -1) ;",
            "score": 99.55838328394397,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null || searchStr.toUpperCase( ) ;",
            "score": 99.54403921274039,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( Locale.US ) , searchStr ) ;",
            "score": 99.532958984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( Locale . US ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.indexOf( ', ') ) ;",
            "score": 99.52383858816964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.52383858816964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.indexOf( 'cde') ) ;",
            "score": 99.52383858816964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.indexOf( 'def') ) ;",
            "score": 99.52383858816964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.52383858816964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , name ) ;",
            "score": 99.4413829985119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return substring( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.55825700431035,
            "correctness": "uncompilable",
            "tokenized_patch": "return substring ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && contains( str.toUpperCase( ) ) ;",
            "score": 99.53292236328124,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).indexOf( ', ') ) ;",
            "score": 99.52361591045673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).indexOf( 'ABCDEF') ) ;",
            "score": 99.52361591045673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).indexOf( 'cde') ) ;",
            "score": 99.52361591045673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).indexOf( 'def') ) ;",
            "score": 99.52361591045673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).indexOf( 'abcdef') ) ;",
            "score": 99.52361591045673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ).length( ) ) ;",
            "score": 99.50839378720238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.48218712439903,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.name( ) ) ;",
            "score": 99.4793011209239,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str.toUpperCase( ) ) ;",
            "score": 99.44132486979167,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) *true ;",
            "score": 99.564921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return remove( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55805121527777,
            "correctness": "uncompilable",
            "tokenized_patch": "return remove ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).equals( searchStr ) ) ;",
            "score": 99.53278142755681,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsAll( str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.50821586277173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(0, str.toUpperCase( ) ) ;",
            "score": 99.47914751838235,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) ==0|| searchStr == null ) { return false ;",
            "score": 99.5431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == 0 || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ).toLowerCase( ) ) ;",
            "score": 99.50796110733695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.-1) ;",
            "score": 99.4918545809659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ str.toUpperCase( ) , searchStr ) ;",
            "score": 99.47910853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ str.toUpperCase( ) , searchStr ) ;",
            "score": 99.47910853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ str.toUpperCase( ) , searchStr ) ;",
            "score": 99.47910853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ str.toUpperCase( ) , searchStr ) ;",
            "score": 99.47910853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ str.toUpperCase( ) , searchStr ) ;",
            "score": 99.47910853794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( String.toUpperCase( str ) , searchStr ) ;",
            "score": 99.44127807617187,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( String . to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , return false ) ;",
            "score": 99.5639178936298,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , return false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( str.toUpperCase( ) , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.55787816540948,
            "correctness": "uncompilable",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ).toUpperCase( ) ;",
            "score": 99.54313520951705,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.indexOf( ', ') ) ;",
            "score": 99.53249193274456,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.53249193274456,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.indexOf( 'cde') ) ;",
            "score": 99.53249193274456,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.indexOf( 'def') ) ;",
            "score": 99.53249193274456,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.53249193274456,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.522041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ? str : str.toUpperCase( ) , searchStr ) ;",
            "score": 99.49169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ? str : str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr str.toUpperCase( ) ) ;",
            "score": 99.4811767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new char [0] , searchStr.toUpperCase( ) ) ;",
            "score": 99.47896144701087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new char [ 0 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr ).toUpperCase( ) ;",
            "score": 99.563857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toString( ) , searchStr ) ;",
            "score": 99.55742355872844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length ) ;",
            "score": 99.50742885044643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str.toUpperCase( ).equals( searchStr ) ) ) ;",
            "score": 99.4811480978261,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null ) { return false ; } if( searchStr == null ) {",
            "score": 99.4787830171131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } if ( search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , searchStr.trim( ) ) ;",
            "score": 99.44061569940476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == null.toUpperCase( ) ;",
            "score": 99.5638427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != false ;",
            "score": 99.5566936990489,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == searchStr.charAt(0) ) ;",
            "score": 99.53192138671875,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return true ; } else { return false ;",
            "score": 99.52175467354911,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return true ; } else { return false ;",
            "score": 99.52175467354911,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return true ; } else { return false ;",
            "score": 99.52175467354911,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return true ; } else { return false ;",
            "score": 99.52175467354911,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return true ; } else { return false ;",
            "score": 99.52175467354911,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return contains( str , searchStr ) ;",
            "score": 99.48081618088942,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.name , searchStr.toUpperCase( ) ) ;",
            "score": 99.47860863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(0, str.toUpperCase( ) ) ;",
            "score": 99.44006928943452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( 0 , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return enable( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55653211805556,
            "correctness": "uncompilable",
            "tokenized_patch": "return enable ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.trim( ) , searchStr.length( ) ) ;",
            "score": 99.53177012567934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . trim ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.substring(0) ) ;",
            "score": 99.52105712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return true ; } return false ;",
            "score": 99.50727771577381,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) >0;",
            "score": 99.48075358072917,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return searchStr.trim( ) == null ;",
            "score": 99.43992978050595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return search CaMeL Str . trim ( ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.5562160326087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ).containsIgnoreCase( searchStr ) ;",
            "score": 99.541943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) . contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return containsIgnoreCase( str ) ;",
            "score": 99.53116861979167,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.matches( ) ) ;",
            "score": 99.49061650815217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . matches ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.contains( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47831587357955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.43989490327381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.toUpperCase( ) true ) ;",
            "score": 99.56324181189903,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL Upper CaMeL Case ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return false ; } return true ;",
            "score": 99.53065795898438,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , null ) ;",
            "score": 99.50673130580357,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == ) ;",
            "score": 99.47812721946023,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase(0) ) ;",
            "score": 99.43964233398438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.555732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.containsIgnoreCase( str.toUpperCase( ) ) ;",
            "score": 99.54117838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.length( ) -1) ;",
            "score": 99.53037806919643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.5204296875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).equals( searchStr ) ) ;",
            "score": 99.50623668323864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { containsIgnoreCase( str , searchStr ) ;",
            "score": 99.4901706861413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.substring(0, searchStr.length( ) ) ==0) ;",
            "score": 99.48025948660714,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ) || contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.47802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ) || contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.next ) ;",
            "score": 99.43934849330357,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . next ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , searchStr.",
            "score": 99.5631854717548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == ', ') ;",
            "score": 99.54104614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == 'ABCDEF') ;",
            "score": 99.54104614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == 'cde') ;",
            "score": 99.54104614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == 'def') ;",
            "score": 99.54104614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == 'abcdef') ;",
            "score": 99.54104614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) || containsIgnoreCase( str , searchStr ) ;",
            "score": 99.53019205729167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) || contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.520400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return true ; } return true ;",
            "score": 99.50574311755952,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(",
            "score": 99.490087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring (",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) || searchStr.length( ) >=0) ;",
            "score": 99.48009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) || search CaMeL Str . length ( ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) {",
            "score": 99.47770472935268,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , ) ;",
            "score": 99.43931884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : ) ;",
            "score": 99.5625636888587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( searchStr ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.55553747106481,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr.toUpperCase( ) == null ) { return true ;",
            "score": 99.54060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return true ; } return false ;",
            "score": 99.52996271306819,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0,0) , searchStr.length( ) ) ;",
            "score": 99.50569291548295,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , 0 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) ,0) ;",
            "score": 99.49007375616776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , true && searchStr == null ) ;",
            "score": 99.47765582540761,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , true && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.43913922991071,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , )",
            "score": 99.56240446671195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).append( str ).toUpperCase( ) ;",
            "score": 99.554794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . append ( str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).equals( ', ') ;",
            "score": 99.5405782063802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).equals( 'ABCDEF') ;",
            "score": 99.5405782063802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).equals( 'cde') ;",
            "score": 99.5405782063802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).equals( 'def') ;",
            "score": 99.5405782063802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).equals( 'abcdef') ;",
            "score": 99.5405782063802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.startsWith( ', ') ) ;",
            "score": 99.52953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.52953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.startsWith( 'cde') ) ;",
            "score": 99.52953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.startsWith( 'def') ) ;",
            "score": 99.52953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.52953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , -1) ;",
            "score": 99.50527556046195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr ) == null ;",
            "score": 99.48980422247024,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.47736922554348,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr( ) ) ;",
            "score": 99.43899972098214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ) ==0;",
            "score": 99.55441518930289,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.length( ) ==0|| searchStr.length( ) ==0) ;",
            "score": 99.52944946289062,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . length ( ) == 0 || search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return append( str.toUpperCase( ) ).toUpperCase( ).equals( ', ') ;",
            "score": 99.51976667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str.toUpperCase( ) ).toUpperCase( ).equals( 'ABCDEF') ;",
            "score": 99.51976667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str.toUpperCase( ) ).toUpperCase( ).equals( 'cde') ;",
            "score": 99.51976667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str.toUpperCase( ) ).toUpperCase( ).equals( 'def') ;",
            "score": 99.51976667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str.toUpperCase( ) ).toUpperCase( ).equals( 'abcdef') ;",
            "score": 99.51976667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ).toLowerCase( ) ) ;",
            "score": 99.5048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new Number( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.48962933084239,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new Number ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str +0, searchStr.toUpperCase( ) ) ;",
            "score": 99.47894577752976,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ! contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47727369225544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , null , searchStr ) ;",
            "score": 99.43889508928571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , null , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.length( ) ) ;",
            "score": 99.50419536389802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.lastCaMeL",
            "score": 99.48949584960937,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . last CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( this.searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.47721000339673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( this . search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , false ) ;",
            "score": 99.43875282689145,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) == searchStr ) ;",
            "score": 99.48939580502717,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str ) , searchStr.length( ) ) ;",
            "score": 99.47854614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(1, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.47676013764881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 1 , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , str.toUpperCase( ) ) ;",
            "score": 99.4386345358456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.matches( searchStr ) ) ;",
            "score": 99.55418178013393,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . matches ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , searchStr.charAt( ) ) ;",
            "score": 99.52897135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , search CaMeL Str . char CaMeL At ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return false ; } else { return false ;",
            "score": 99.51868127893519,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr ;",
            "score": 99.48887125651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , Character.toUpperCase( searchStr ) ) ;",
            "score": 99.47828165690105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , Character . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) : false ;",
            "score": 99.47668987771739,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ) == null ) { return ) { return false ;",
            "score": 99.43858642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , char.toString( ) ) ;",
            "score": 99.5540183738426,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , char . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( ', ') -1) ) ;",
            "score": 99.528837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'ABCDEF') -1) ) ;",
            "score": 99.528837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'cde') -1) ) ;",
            "score": 99.528837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'def') -1) ) ;",
            "score": 99.528837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( 'abcdef') -1) ) ;",
            "score": 99.528837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( ).length( ) ) ;",
            "score": 99.51817491319444,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.length( ) -1) ) ;",
            "score": 99.50247192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr == null ) ;",
            "score": 99.48881603422619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.substring(0, searchStr.length( ) ) !=0) { return true ; }",
            "score": 99.47826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . substring ( 0 , search CaMeL Str . length ( ) ) != 0 ) { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).length( ) ==0) { return true ;",
            "score": 99.4375232514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . length ( ) == 0 ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : false ;",
            "score": 99.5390625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr != null && searchStr.length( ) >0) { return true ; }",
            "score": 99.52881876627605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str != null && search CaMeL Str . length ( ) > 0 ) { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) , searchStr.length( ) ) ;",
            "score": 99.5023193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0) {",
            "score": 99.47645263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.43743286132812,
            "correctness": "wrong",
            "tokenized_patch": "else return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return containsIgnoreCase( str.toUpperCase( ) , searchStr ) ; }",
            "score": 99.56141075721153,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return new String( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55381556919643,
            "correctness": "uncompilable",
            "tokenized_patch": "return new String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.52879696800595,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.toString( ) ) ;",
            "score": 99.518154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ) ) ;",
            "score": 99.47801106770834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47629616477273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( searchStr , searchStr ) ;",
            "score": 99.43719803659539,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).append( searchStr ) ;",
            "score": 99.5612041766827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . append ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return max( str.toUpperCase( ) , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.55370251885776,
            "correctness": "uncompilable",
            "tokenized_patch": "return max ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == ', '.toUpperCase( ) ;",
            "score": 99.53882853190105,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == 'ABCDEF'.toUpperCase( ) ;",
            "score": 99.53882853190105,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == 'cde'.toUpperCase( ) ;",
            "score": 99.53882853190105,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == 'def'.toUpperCase( ) ;",
            "score": 99.53882853190105,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == 'abcdef'.toUpperCase( ) ;",
            "score": 99.53882853190105,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) || searchStr.equals( searchStr ) ;",
            "score": 99.52846457741477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) || search CaMeL Str . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).trim( ) , searchStr ) ;",
            "score": 99.50215480638587,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).length( ) !=0;",
            "score": 99.47775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str == null && searchStr == null ) ;",
            "score": 99.43711451480263,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str == null && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).trim( ) !=0;",
            "score": 99.553466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') != -1) ;",
            "score": 99.52821858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') != -1) ;",
            "score": 99.52821858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') != -1) ;",
            "score": 99.52821858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') != -1) ;",
            "score": 99.52821858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') != -1) ;",
            "score": 99.52821858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).toUpperCase( ) ) ) ;",
            "score": 99.51810128348214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toArray( ) , searchStr.toArray( ) ) ;",
            "score": 99.50208050271739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Array ( ) , search CaMeL Str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , toUpperCase( str ) ) ;",
            "score": 99.47767130533855,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( ', ', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47618519176136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'ABCDEF', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47618519176136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'cde', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47618519176136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'def', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47618519176136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'abcdef', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47618519176136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + searchStr ) ;",
            "score": 99.43696032072368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) && false ;",
            "score": 99.56052734375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) && false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , System.out ) ;",
            "score": 99.50144361413044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , System . out ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str , searchStr.trim( ) ) ) ;",
            "score": 99.47727457682292,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new str , searchStr.toUpperCase( ) ) ;",
            "score": 99.43641357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).toUpperCase( ) != null ;",
            "score": 99.55324791217673,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == str.toUpperCase( ) ;",
            "score": 99.53797403971355,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr.length( ) ) ; }",
            "score": 99.51731520432692,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , ) ;",
            "score": 99.48783365885417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ?0: str.toUpperCase( ) ) ;",
            "score": 99.47719029017857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? 0 : str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) {",
            "score": 99.47563244047619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.charValue( ) , searchStr ) ;",
            "score": 99.43615141369048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . char CaMeL Value ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) *false ;",
            "score": 99.559443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) ) ;",
            "score": 99.52761404854911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str ,0, searchStr.length( ) ) > -1;",
            "score": 99.5010653409091,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , 0 , search CaMeL Str . length ( ) ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == null ) { return false ; }",
            "score": 99.48780406605114,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ! contains( searchStr ) ) ;",
            "score": 99.47716754415761,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , ! contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) : false ;",
            "score": 99.47549293154762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str String.toUpperCase( ) , searchStr ) ;",
            "score": 99.43604736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str String . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) +0;",
            "score": 99.559296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null ) ||( searchStr.toUpperCase( ) == null ) ;",
            "score": 99.53768920898438,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null ) || ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr , true ) ;",
            "score": 99.5002673921131,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( false ) ) ;",
            "score": 99.48743286132813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(1) ) ;",
            "score": 99.43578491210937,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) != null.toUpperCase( ) ;",
            "score": 99.53759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) != null . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ;",
            "score": 99.52734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + str.toUpperCase( ) ) ;",
            "score": 99.47666302849265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) + false ;",
            "score": 99.47508704144022,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.4357677641369,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , indexOf( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.55269681490384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return true ; } if( searchStr == null ) { return true ;",
            "score": 99.5372823079427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return true ; } if ( search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) || contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.52699788411458,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) || contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , charCount ) ;",
            "score": 99.47652004076087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , char CaMeL Count ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null && searchStr.toUpperCase( ) == null ;",
            "score": 99.47504216974431,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( new String1( str ) , searchStr ) ;",
            "score": 99.435595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String 1 ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ).return false ;",
            "score": 99.55844350961539,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.55252511160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.trim( ) , searchStr.trim( ) ) ;",
            "score": 99.52694038722827,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . trim ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ).substring( searchStr.length( ) -1) ) ;",
            "score": 99.51655796595982,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . substring ( search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) ,",
            "score": 99.474951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(( String ) searchStr , searchStr ) ;",
            "score": 99.43533325195312,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(2, searchStr.length( ) ) ) ;",
            "score": 99.55784098307292,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(4, searchStr.length( ) ) ) ;",
            "score": 99.55784098307292,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(3, searchStr.length( ) ) ) ;",
            "score": 99.55784098307292,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(8, searchStr.length( ) ) ) ;",
            "score": 99.55784098307292,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(7, searchStr.length( ) ) ) ;",
            "score": 99.55784098307292,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toString( ).toUpperCase( ) ;",
            "score": 99.55215018136161,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( searchStr , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.53712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ).booleanValue( ) ;",
            "score": 99.49918619791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null.toUpperCase( ) , searchStr ) ;",
            "score": 99.48623511904762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , false , searchStr.toUpperCase( ) ) ;",
            "score": 99.47420247395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { str } ) ;",
            "score": 99.43501362047698,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.toUpperCase( ) )",
            "score": 99.5578143780048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.55211981411638,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ', '.equals( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.52670288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'ABCDEF'.equals( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.52670288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'cde'.equals( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.52670288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'def'.equals( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.52670288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'abcdef'.equals( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.52670288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).startsWith( ', ') ;",
            "score": 99.49797620271382,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.49797620271382,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).startsWith( 'cde') ;",
            "score": 99.49797620271382,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).startsWith( 'def') ;",
            "score": 99.49797620271382,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).startsWith( 'abcdef') ;",
            "score": 99.49797620271382,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ', ', true ) ;",
            "score": 99.48620074728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'ABCDEF', true ) ;",
            "score": 99.48620074728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'cde', true ) ;",
            "score": 99.48620074728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'def', true ) ;",
            "score": 99.48620074728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'abcdef', true ) ;",
            "score": 99.48620074728261,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "str = str.toUpperCase( ) ; return searchStr.length( ) >0;",
            "score": 99.47615559895833,
            "correctness": "wrong",
            "tokenized_patch": "str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , new String = searchStr.toUpperCase( ) ) ;",
            "score": 99.55757962740384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) , filter ) ;",
            "score": 99.55206088362068,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , filter ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).contains( ) ;",
            "score": 99.53553838315217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . contains ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && searchStr.equals( searchStr ) ;",
            "score": 99.52655584161931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && search CaMeL Str . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.51577871817129,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase(.trim( ) ) ) ;",
            "score": 99.48598845108695,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null ?1: str.toUpperCase( ) , searchStr ) ;",
            "score": 99.476044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null ? 1 : str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int length = searchStr.length( ) ; if( length ==0) { return false ; }",
            "score": 99.4740680197011,
            "correctness": "uncompilable",
            "tokenized_patch": "int length = search CaMeL Str . length ( ) ; if ( length == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ! searchStr.toUpperCase( ) ) ;",
            "score": 99.43435668945312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == searchStr ) ;",
            "score": 99.53507486979167,
            "correctness": "wrong",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return equals( str , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.5264308763587,
            "correctness": "uncompilable",
            "tokenized_patch": "return equals ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains contains( str.substring(0, searchStr.length( ) -1) ) ;",
            "score": 99.49788765285327,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , containsIgnoreCase( str , searchStr ) ) ;",
            "score": 99.48594970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str , searchStr ) ) ;",
            "score": 99.47568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.toString( ) == null ) { return ) ;",
            "score": 99.43412057976974,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL String ( ) == null ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ? false : ;",
            "score": 99.55746694711539,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return split( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55167643229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return split ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == false.toUpperCase( ) ;",
            "score": 99.53472345525569,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == false . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , true ) ;",
            "score": 99.49742934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str return searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.47559655230978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return false ;",
            "score": 99.43391927083333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return read( str.toUpperCase( ) , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.55158102101294,
            "correctness": "uncompilable",
            "tokenized_patch": "return read ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return searchStr.startsWith( ', ') ;",
            "score": 99.514892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return searchStr.startsWith( 'ABCDEF') ;",
            "score": 99.514892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return searchStr.startsWith( 'cde') ;",
            "score": 99.514892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return searchStr.startsWith( 'def') ;",
            "score": 99.514892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return searchStr.startsWith( 'abcdef') ;",
            "score": 99.514892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).endsWith( ', ') ) ;",
            "score": 99.4960604580966,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).endsWith( 'ABCDEF') ) ;",
            "score": 99.4960604580966,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).endsWith( 'cde') ) ;",
            "score": 99.4960604580966,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).endsWith( 'def') ) ;",
            "score": 99.4960604580966,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).endsWith( 'abcdef') ) ;",
            "score": 99.4960604580966,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , null.toUpperCase( ) ) ;",
            "score": 99.48573521205357,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , null . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.47537935697116,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name , searchStr ) ;",
            "score": 99.4338019875919,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.append( searchStr ) ) ;",
            "score": 99.55133056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . append ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,( String ) str.toUpperCase( ) ) ;",
            "score": 99.53448486328125,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , ( String ) str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.indexOf( str ) == -1) ;",
            "score": 99.52609592013889,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) == - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.size( ) ) ;",
            "score": 99.48570149739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) && searchStr.length( ) >1) ;",
            "score": 99.475205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) && search CaMeL Str . length ( ) > 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,0, false ) ;",
            "score": 99.43348452919408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , 0 , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return contains( str , searchStr )",
            "score": 99.55671492866848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return contains ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) , searchStr ).length( ) ==0;",
            "score": 99.55096646012932,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null || searchStr == null || searchStr == null ) ;",
            "score": 99.48547944568452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null || search CaMeL Str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr.length( ) ) ;",
            "score": 99.43339611235119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , true ).toUpperCase( ) ;",
            "score": 99.556669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , true ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.55044668692129,
            "correctness": "uncompilable",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( ', ') == -1;",
            "score": 99.4954833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'ABCDEF') == -1;",
            "score": 99.4954833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'cde') == -1;",
            "score": 99.4954833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'def') == -1;",
            "score": 99.4954833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'abcdef') == -1;",
            "score": 99.4954833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , searchStr ;",
            "score": 99.48509521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).length( ) !=0;",
            "score": 99.47493119673295,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr == null ) ||( searchStr == null ) ;",
            "score": 99.43325466579861,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str == null ) || ( search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr.toUpperCase( ) ) )",
            "score": 99.5565694173177,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase(.length( ) ) ) ;",
            "score": 99.49538255774456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ] ) , searchStr ) ;",
            "score": 99.47451782226562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ] ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , str.toUpperCase( ) ) ;",
            "score": 99.43324681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , containsIgnoreCase( str , searchStr ) ) ;",
            "score": 99.55642700195312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.valueOf( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.54994553786058,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , String . value CaMeL Of ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) >= -1;",
            "score": 99.52518717447917,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) >= - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') == -1) ;",
            "score": 99.4948962983631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') == -1) ;",
            "score": 99.4948962983631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') == -1) ;",
            "score": 99.4948962983631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') == -1) ;",
            "score": 99.4948962983631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') == -1) ;",
            "score": 99.4948962983631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.String( ) ) ;",
            "score": 99.48459791100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) != false ;",
            "score": 99.5555859375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) == false || searchStr == null ) { return false ;",
            "score": 99.532099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == false || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else { return false ;",
            "score": 99.51369310461956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.49484120244566,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toLowerCase( str.toUpperCase( ) ).length( ) ==0;",
            "score": 99.474326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Lower CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', ! searchStr.toUpperCase( ) ) ;",
            "score": 99.47202758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', ! searchStr.toUpperCase( ) ) ;",
            "score": 99.47202758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', ! searchStr.toUpperCase( ) ) ;",
            "score": 99.47202758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', ! searchStr.toUpperCase( ) ) ;",
            "score": 99.47202758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', ! searchStr.toUpperCase( ) ) ;",
            "score": 99.47202758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , name ) ;",
            "score": 99.43279157366071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) : containsIgnoreCase( str , searchStr ) ;",
            "score": 99.55557250976562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) : contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , searchStr.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.54918077256944,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == false ) ;",
            "score": 99.53203790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr != null && searchStr.length( ) >0) { return false ; }",
            "score": 99.52447509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str != null && search CaMeL Str . length ( ) > 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.51366077769886,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0&& searchStr.length( ) ==0) ;",
            "score": 99.49479536576705,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . length ( ) == 0 && search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains = equals( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.47356305803571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = equals ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null || searchStr == null ) {",
            "score": 99.47191273082386,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ new String [ ] { searchStr } , searchStr ) ;",
            "score": 99.43268694196429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ new String [ ] { search CaMeL Str } , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == ', ';",
            "score": 99.54914656929348,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == 'ABCDEF';",
            "score": 99.54914656929348,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == 'cde';",
            "score": 99.54914656929348,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == 'def';",
            "score": 99.54914656929348,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == 'abcdef';",
            "score": 99.54914656929348,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return searchStr.startsWith( ', ') ;",
            "score": 99.51365443638393,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return searchStr.startsWith( 'ABCDEF') ;",
            "score": 99.51365443638393,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return searchStr.startsWith( 'cde') ;",
            "score": 99.51365443638393,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return searchStr.startsWith( 'def') ;",
            "score": 99.51365443638393,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return searchStr.startsWith( 'abcdef') ;",
            "score": 99.51365443638393,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.EMPTY ) ;",
            "score": 99.483642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . EMPTY ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , false ) ;",
            "score": 99.47187732514881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , containsIgnoreCase( searchStr , searchStr ) ) ;",
            "score": 99.55511005108173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toLowerCase( ) ) ;",
            "score": 99.52429780505952,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.toUpperCase( ).length( ) ==0) { return false ; } else {",
            "score": 99.51319231305804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( ', ') ;",
            "score": 99.49431409333882,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( 'ABCDEF') ;",
            "score": 99.49431409333882,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( 'cde') ;",
            "score": 99.49431409333882,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( 'def') ;",
            "score": 99.49431409333882,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( 'abcdef') ;",
            "score": 99.49431409333882,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , null , false ) ;",
            "score": 99.48271741365132,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , null , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , }",
            "score": 99.47183890964673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toString( ) , searchStr ) ;",
            "score": 99.43235377261513,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , this.searchStr ) ;",
            "score": 99.53161039806548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , this . search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52426147460938,
            "correctness": "uncompilable",
            "tokenized_patch": "final return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , Boolean.FALSE ) ;",
            "score": 99.47170091711956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , Boolean . FALSE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , containsIgnoreCase( searchStr ) ) ;",
            "score": 99.4312744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( searchStr , searchStr.toUpperCase( ) ) != -1;",
            "score": 99.54822716346153,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0,1) , searchStr.length( ) ) ;",
            "score": 99.49416281960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , 1 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { if( searchStr == null || searchStr == null ) { return false ; }",
            "score": 99.48136763139205,
            "correctness": "uncompilable",
            "tokenized_patch": "try { if ( search CaMeL Str == null || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.47328252377717,
            "correctness": "uncompilable",
            "tokenized_patch": "return equals ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ! str.toUpperCase( ) , searchStr ) ;",
            "score": 99.43081665039062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ! str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) )",
            "score": 99.5538330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.toUpperCase( ).toUpperCase( ) ) ) ;",
            "score": 99.54804338727679,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null || searchStr == null ) ;",
            "score": 99.53026123046875,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return StringUtils.containsIgnoreCase( str , searchStr.trim( ) ) ;",
            "score": 99.52341627038044,
            "correctness": "wrong",
            "tokenized_patch": "return String CaMeL Utils . contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ).length( ) <0) ;",
            "score": 99.47306315104167,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) < 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', ', '+ searchStr.toUpperCase( ) ) ;",
            "score": 99.47135416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', 'ABCDEF'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.47135416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', 'cde'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.47135416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', 'def'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.47135416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', 'abcdef'+ searchStr.toUpperCase( ) ) ;",
            "score": 99.47135416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return ) ;",
            "score": 99.43027857730263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).length( ) !=0;",
            "score": 99.54781668526786,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.endsWith( ', ') ) ;",
            "score": 99.52341530539773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.endsWith( 'ABCDEF') ) ;",
            "score": 99.52341530539773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.endsWith( 'cde') ) ;",
            "score": 99.52341530539773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.endsWith( 'def') ) ;",
            "score": 99.52341530539773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.endsWith( 'abcdef') ) ;",
            "score": 99.52341530539773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).charValue( ) ) ;",
            "score": 99.51166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . char CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str , searchStr.toLowerCase( ) ) ) ;",
            "score": 99.49357096354167,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( str == null || searchStr == null ) ;",
            "score": 99.480615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? true :0;",
            "score": 99.4727093240489,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ! searchStr.length( ) ) ;",
            "score": 99.54769461495536,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ! search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.contains( str.toUpperCase( ) ) ;",
            "score": 99.53009392233456,
            "correctness": "wrong",
            "tokenized_patch": "return str . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr.format( ) ) ;",
            "score": 99.51149269386575,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . format ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,.toUpperCase( ) ) ;",
            "score": 99.42944946289063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.54766167534723,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) ==0) ;",
            "score": 99.52978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ; ;",
            "score": 99.51087297712054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , ', ') ;",
            "score": 99.47926089638158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , 'ABCDEF') ;",
            "score": 99.47926089638158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , 'cde') ;",
            "score": 99.47926089638158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , 'def') ;",
            "score": 99.47926089638158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) , 'abcdef') ;",
            "score": 99.47926089638158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).substring(1).toUpperCase( ) ;",
            "score": 99.472392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . substring ( 1 ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , Boolean.TRUE ) ;",
            "score": 99.47016987047698,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , Boolean . TRUE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( value , searchStr ) ;",
            "score": 99.42930501302084,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( value , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , char.toUpperCase( ) ) ;",
            "score": 99.54701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , char . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toLowerCase( ) ) > -1;",
            "score": 99.52273559570312,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) > - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) { return false ; } else {",
            "score": 99.51073279747597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.",
            "score": 99.47917344835069,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( searchStr.trim( ) ) ;",
            "score": 99.47206182065217,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str.toUpperCase( ) ) ) ;",
            "score": 99.47002210115132,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.value ) ;",
            "score": 99.4287971047794,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase = contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.552021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case = contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) == null ) ;",
            "score": 99.5295918782552,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) == ) ;",
            "score": 99.51058255709134,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + false ) ;",
            "score": 99.46976143973214,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + false ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.) ;",
            "score": 99.4271240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).append( ', ') ;",
            "score": 99.55174763997395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).append( 'ABCDEF') ;",
            "score": 99.55174763997395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).append( 'cde') ;",
            "score": 99.55174763997395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).append( 'def') ;",
            "score": 99.55174763997395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).append( 'abcdef') ;",
            "score": 99.55174763997395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . append ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ).length( ) ==1) ;",
            "score": 99.54636056082589,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 1 ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.toString( ) ) ;",
            "score": 99.5223388671875,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).trim( ) ) ;",
            "score": 99.49153645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charValue( ) , searchStr.trim( ) ) ;",
            "score": 99.47814360119048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL Value ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } if( searchStr == null )",
            "score": 99.46952681107955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } if ( search CaMeL Str == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') , searchStr ) ;",
            "score": 99.42648654513889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') , searchStr ) ;",
            "score": 99.42648654513889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') , searchStr ) ;",
            "score": 99.42648654513889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') , searchStr ) ;",
            "score": 99.42648654513889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') , searchStr ) ;",
            "score": 99.42648654513889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ? false : contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.529248046875,
            "correctness": "wrong",
            "tokenized_patch": "return str == null ? false : contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.length( ) , searchStr.length( ) ) ;",
            "score": 99.49111793154762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . length ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , true ) ;",
            "score": 99.47805304276316,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(2, searchStr.toUpperCase( ) ) ;",
            "score": 99.46933381453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(4, searchStr.toUpperCase( ) ) ;",
            "score": 99.46933381453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(3, searchStr.toUpperCase( ) ) ;",
            "score": 99.46933381453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(8, searchStr.toUpperCase( ) ) ;",
            "score": 99.46933381453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(7, searchStr.toUpperCase( ) ) ;",
            "score": 99.46933381453805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return searchStr.toUpperCase( ) == searchStr ;",
            "score": 99.42622680664063,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) -2) ;",
            "score": 99.551103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) -4) ;",
            "score": 99.551103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) -3) ;",
            "score": 99.551103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) -8) ;",
            "score": 99.551103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) -7) ;",
            "score": 99.551103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).charAt(0) == ', ') ;",
            "score": 99.52206818953805,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).charAt(0) == 'ABCDEF') ;",
            "score": 99.52206818953805,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).charAt(0) == 'cde') ;",
            "score": 99.52206818953805,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).charAt(0) == 'def') ;",
            "score": 99.52206818953805,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).charAt(0) == 'abcdef') ;",
            "score": 99.52206818953805,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length , searchStr.length( ) ) ;",
            "score": 99.49101329985119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -0) ;",
            "score": 99.47109087775735,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).contains( ) ) ;",
            "score": 99.4693019701087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . contains ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).append( searchStr.toUpperCase( ) ) ;",
            "score": 99.54561812789352,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . append ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , searchStr.toLowerCase( ) ) ;",
            "score": 99.49088541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( searchStr ) , searchStr ) ;",
            "score": 99.47079467773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; else return true ;",
            "score": 99.46897291100544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; else return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return if( str.toUpperCase( ) == null ) { return false ;",
            "score": 99.42615356445313,
            "correctness": "uncompilable",
            "tokenized_patch": "return if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) == true ;",
            "score": 99.5507421875,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return lookup( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.54483145254629,
            "correctness": "uncompilable",
            "tokenized_patch": "return lookup ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.49086692116477,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.format( searchStr , searchStr ) ) ;",
            "score": 99.47746138139205,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( search CaMeL Str , search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , false ) ;",
            "score": 99.42588895909927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , false )",
            "score": 99.5501708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.toUpperCase( ).length( ) ) ) ;",
            "score": 99.54434640066964,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) ==0|| searchStr == null ) { return true ;",
            "score": 99.52888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == 0 || search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr.charAt(0) ) ) ;",
            "score": 99.52183024088542,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . char CaMeL At ( 0 ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( ', ', ', ') , searchStr ) ;",
            "score": 99.49061168323864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'ABCDEF', 'ABCDEF') , searchStr ) ;",
            "score": 99.49061168323864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'cde', 'cde') , searchStr ) ;",
            "score": 99.49061168323864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'def', 'def') , searchStr ) ;",
            "score": 99.49061168323864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'abcdef', 'abcdef') , searchStr ) ;",
            "score": 99.49061168323864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).substring( ) ) ;",
            "score": 99.47033160665761,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + ) ;",
            "score": 99.46865699404762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , true ) ;",
            "score": 99.42576840049342,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( ', ') || str.startsWith( ', ') ) ;",
            "score": 99.52158425071023,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'ABCDEF') || str.startsWith( 'ABCDEF') ) ;",
            "score": 99.52158425071023,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'cde') || str.startsWith( 'cde') ) ;",
            "score": 99.52158425071023,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'def') || str.startsWith( 'def') ) ;",
            "score": 99.52158425071023,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'abcdef') || str.startsWith( 'abcdef') ) ;",
            "score": 99.52158425071023,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , toUpperCase ) ;",
            "score": 99.47621372767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( char.toUpperCase( ) , searchStr ) ;",
            "score": 99.42524799547698,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( char . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + str.toUpperCase( ) ) ;",
            "score": 99.54916015625,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != -0;",
            "score": 99.54412841796875,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str ) && containsIgnoreCase( str , searchStr ) ;",
            "score": 99.5215555826823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , Character.length( ) ) ;",
            "score": 99.508408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , Character . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.toString( ) ) ;",
            "score": 99.4760509672619,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! contains( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.46996053059895,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( ', ') , searchStr.toUpperCase( ) ) ;",
            "score": 99.46851695667614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'ABCDEF') , searchStr.toUpperCase( ) ) ;",
            "score": 99.46851695667614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'cde') , searchStr.toUpperCase( ) ) ;",
            "score": 99.46851695667614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'def') , searchStr.toUpperCase( ) ) ;",
            "score": 99.46851695667614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( 'abcdef') , searchStr.toUpperCase( ) ) ;",
            "score": 99.46851695667614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( $STRING$ ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).equals( ', ') ) { return false ;",
            "score": 99.4252197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).equals( 'ABCDEF') ) { return false ;",
            "score": 99.4252197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).equals( 'cde') ) { return false ;",
            "score": 99.4252197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).equals( 'def') ) { return false ;",
            "score": 99.4252197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ).equals( 'abcdef') ) { return false ;",
            "score": 99.4252197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != ', ';",
            "score": 99.54409391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != 'ABCDEF';",
            "score": 99.54409391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != 'cde';",
            "score": 99.54409391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != 'def';",
            "score": 99.54409391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != 'abcdef';",
            "score": 99.54409391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == false ) ;",
            "score": 99.52725219726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEquals( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.50826590401786,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Equals ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.4696044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '|| searchStr.toUpperCase( ) ) ;",
            "score": 99.4683837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.4683837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.4683837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.4683837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'|| searchStr.toUpperCase( ) ) ;",
            "score": 99.4683837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , ', ') ;",
            "score": 99.42497173108552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , 'ABCDEF') ;",
            "score": 99.42497173108552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , 'cde') ;",
            "score": 99.42497173108552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , 'def') ;",
            "score": 99.42497173108552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , 'abcdef') ;",
            "score": 99.42497173108552,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.54898734714673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).toString( ) ;",
            "score": 99.5439922626202,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return StringUtils.contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.521484375,
            "correctness": "wrong",
            "tokenized_patch": "return String CaMeL Utils . contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , Character.equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.5078837076823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.size( ) -1) ) ;",
            "score": 99.48947975852273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . size ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ) ==0) ;",
            "score": 99.42490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == -2;",
            "score": 99.5434061686198,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == -4;",
            "score": 99.5434061686198,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == -3;",
            "score": 99.5434061686198,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == -8;",
            "score": 99.5434061686198,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == -7;",
            "score": 99.5434061686198,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toLowerCase( ) , searchStr ) ;",
            "score": 99.48914155505952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , -2) ;",
            "score": 99.47545276988636,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , -4) ;",
            "score": 99.47545276988636,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , -3) ;",
            "score": 99.47545276988636,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , -8) ;",
            "score": 99.47545276988636,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , -7) ;",
            "score": 99.47545276988636,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) || contains( str , searchStr ) ;",
            "score": 99.4691650390625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) || contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( ) ) ;",
            "score": 99.42433568050987,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String [ ] { str } , searchStr.length -1) ;",
            "score": 99.48792085193452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str } , search CaMeL Str . length - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , ) ;",
            "score": 99.47498668323864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).length( ) ==0) ;",
            "score": 99.468994140625,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) false ) ) ;",
            "score": 99.46770368303571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) *1;",
            "score": 99.548876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , chars.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.543125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , chars . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || str.toUpperCase( ) == null ) ;",
            "score": 99.52557983398438,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( searchStr.lastIndexOf( ', ') +1) ) ;",
            "score": 99.520458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.lastIndexOf( 'ABCDEF') +1) ) ;",
            "score": 99.520458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.lastIndexOf( 'cde') +1) ) ;",
            "score": 99.520458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.lastIndexOf( 'def') +1) ) ;",
            "score": 99.520458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.lastIndexOf( 'abcdef') +1) ) ;",
            "score": 99.520458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.value.toUpperCase( ) ) ;",
            "score": 99.50755673363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) ==0) ;",
            "score": 99.48740521599265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str ) , searchStr ) ;",
            "score": 99.46890869140626,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! str.equals( searchStr.toUpperCase( ) ) ) {",
            "score": 99.46759588068181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == null ) ;",
            "score": 99.42367214626736,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) == null : str.toUpperCase( ) ;",
            "score": 99.52548217773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( searchStr ) != -1) ;",
            "score": 99.52011447482639,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . index CaMeL Of ( search CaMeL Str ) != - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return str.toUpperCase( ).toUpperCase( ).length( ) ==0;",
            "score": 99.50755092075893,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return false ; }",
            "score": 99.47490844726562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).trim( ).equals( searchStr ) ;",
            "score": 99.468779296875,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Character.matches( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.4672619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "return Character . matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).size( ) ==0) ;",
            "score": 99.42355346679688,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . size ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , false ).toUpperCase( ) ;",
            "score": 99.548671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , false ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).length( ) ==0;",
            "score": 99.525380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.length( ) ==0) ;",
            "score": 99.52000122070312,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! contains( str , searchStr.toUpperCase( ) ) ) { return false ; } else {",
            "score": 99.50735037667411,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; } else {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.indexOf( ', ') ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.indexOf( 'cde') ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.indexOf( 'def') ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.4869384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return false ; } try {",
            "score": 99.47336647727273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return false ; } try {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.46630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , true )",
            "score": 99.54842122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , str.toString( ) ) ;",
            "score": 99.542724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == null ) ;",
            "score": 99.52534623579545,
            "correctness": "wrong",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.48661665482955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.46868896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null && searchStr == null ) { return false ;",
            "score": 99.42307416130515,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null && search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , ', ') ;",
            "score": 99.48627263849431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , 'ABCDEF') ;",
            "score": 99.48627263849431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , 'cde') ;",
            "score": 99.48627263849431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , 'def') ;",
            "score": 99.48627263849431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) , 'abcdef') ;",
            "score": 99.48627263849431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.getType( ) ) ;",
            "score": 99.5473046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).substring(0, searchStr.length( ) ) ) ;",
            "score": 99.54201931423611,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == str.charAt(0) ) ;",
            "score": 99.51884321732955,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).equals( ', ') ;",
            "score": 99.50662796585648,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).equals( 'ABCDEF') ;",
            "score": 99.50662796585648,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).equals( 'cde') ;",
            "score": 99.50662796585648,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).equals( 'def') ;",
            "score": 99.50662796585648,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ).equals( 'abcdef') ;",
            "score": 99.50662796585648,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.substring( ) ) ;",
            "score": 99.4677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null || str.toUpperCase( ) == null ;",
            "score": 99.42268676757813,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null || str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ) && searchStr.indexOf( searchStr ) != -1;",
            "score": 99.51872452445652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . index CaMeL Of ( search CaMeL Str ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toCharArray( ) , true ) ;",
            "score": 99.48507254464286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Char CaMeL Array ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , matches.toUpperCase( ) ) ;",
            "score": 99.46773035386029,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , matches . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr.trim( ) ) ;",
            "score": 99.42233758223684,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == ) ;",
            "score": 99.54118546195652,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( null , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.524169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( null , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr.size( ) ) ;",
            "score": 99.5184909986413,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr , null ) ;",
            "score": 99.48466564360119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( ', ') ) ;",
            "score": 99.46761067708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'ABCDEF') ) ;",
            "score": 99.46761067708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'cde') ) ;",
            "score": 99.46761067708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'def') ) ;",
            "score": 99.46761067708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'abcdef') ) ;",
            "score": 99.46761067708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + -1) ;",
            "score": 99.46339000355114,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toString( ) == null ) { return ) { return false ;",
            "score": 99.42198486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( ', ') ) { return false ; } return false ;",
            "score": 99.51836603338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'ABCDEF') ) { return false ; } return false ;",
            "score": 99.51836603338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'cde') ) { return false ; } return false ;",
            "score": 99.51836603338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'def') ) { return false ; } return false ;",
            "score": 99.51836603338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( 'abcdef') ) { return false ; } return false ;",
            "score": 99.51836603338069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.48453979492187,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( searchStr ) , searchStr ) ;",
            "score": 99.467548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; break ;",
            "score": 99.46323939732143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String [ ] { searchStr } , searchStr ) ;",
            "score": 99.42152806332237,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { search CaMeL Str } , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + ', ';",
            "score": 99.5178125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + 'ABCDEF';",
            "score": 99.5178125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + 'cde';",
            "score": 99.5178125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + 'def';",
            "score": 99.5178125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) + 'abcdef';",
            "score": 99.5178125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) +1) ;",
            "score": 99.48422420726104,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ', ', searchStr ) ;",
            "score": 99.467255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'ABCDEF', searchStr ) ;",
            "score": 99.467255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'cde', searchStr ) ;",
            "score": 99.467255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'def', searchStr ) ;",
            "score": 99.467255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'abcdef', searchStr ) ;",
            "score": 99.467255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str ) , searchStr.toUpperCase( ) ,",
            "score": 99.46321244673295,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , charValue.toUpperCase( ) ) ;",
            "score": 99.42143811677632,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char CaMeL Value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( ', ') || str.charAt(0) == ', ') ;",
            "score": 99.51776123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'ABCDEF') || str.charAt(0) == 'ABCDEF') ;",
            "score": 99.51776123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'cde') || str.charAt(0) == 'cde') ;",
            "score": 99.51776123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'def') || str.charAt(0) == 'def') ;",
            "score": 99.51776123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'abcdef') || str.charAt(0) == 'abcdef') ;",
            "score": 99.51776123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( searchStr ) ;",
            "score": 99.48422386532738,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.equals( str.toUpperCase( ) ) ) { return false ; }",
            "score": 99.4672320822011,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , str.toUpperCase( ) ) ;",
            "score": 99.42118755139802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str.toUpperCase( ) ) ;",
            "score": 99.51686401367188,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) +1, searchStr.length( ) ) ;",
            "score": 99.48409598214286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) + 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.toUpperCase( searchStr ) ) ;",
            "score": 99.466748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + false , searchStr.toUpperCase( ) ) ;",
            "score": 99.4626232328869,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return next( str.toUpperCase( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53991247106481,
            "correctness": "uncompilable",
            "tokenized_patch": "return next ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == ', '|| searchStr == null ) ;",
            "score": 99.5228604403409,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'ABCDEF'|| searchStr == null ) ;",
            "score": 99.5228604403409,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'cde'|| searchStr == null ) ;",
            "score": 99.5228604403409,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'def'|| searchStr == null ) ;",
            "score": 99.5228604403409,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'abcdef'|| searchStr == null ) ;",
            "score": 99.5228604403409,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return true ; } return true ;",
            "score": 99.51665649414062,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toLowerCase( ).startsWith( ', ') ;",
            "score": 99.48328218005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toLowerCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.48328218005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toLowerCase( ).startsWith( 'cde') ;",
            "score": 99.48328218005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toLowerCase( ).startsWith( 'def') ;",
            "score": 99.48328218005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toLowerCase( ).startsWith( 'abcdef') ;",
            "score": 99.48328218005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( searchStr ) , false ) ;",
            "score": 99.47086791992187,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( search CaMeL Str ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).startsWith( searchStr ) ;",
            "score": 99.46672257133152,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.trim( ).length( ) ==0) { return false ;",
            "score": 99.42088558799342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).contains( searchStr ) ;",
            "score": 99.52278859991776,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str [0] , searchStr.toLowerCase( ) ) ;",
            "score": 99.5164794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 0 ] , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.trim( ).length( ) ) ) ;",
            "score": 99.50412222055289,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . trim ( ) . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).equals( searchStr ) ;",
            "score": 99.46664826766305,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).size( ) ==0;",
            "score": 99.420751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . size ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.5227762858073,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "str = str.toUpperCase( ) ; return containsIgnoreCase( str ) ;",
            "score": 99.5163043478261,
            "correctness": "uncompilable",
            "tokenized_patch": "str = str . to CaMeL Upper CaMeL Case ( ) ; return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( ', ') ? ', ': ', ') ;",
            "score": 99.48235529119319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'ABCDEF') ? 'ABCDEF': 'ABCDEF') ;",
            "score": 99.48235529119319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'cde') ? 'cde': 'cde') ;",
            "score": 99.48235529119319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'def') ? 'def': 'def') ;",
            "score": 99.48235529119319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'abcdef') ? 'abcdef': 'abcdef') ;",
            "score": 99.48235529119319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( searchStr ) ) ;",
            "score": 99.46993679470486,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return(( searchStr == null ) ||( searchStr == null ) ) ;",
            "score": 99.4202392578125,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( search CaMeL Str == null ) || ( search CaMeL Str == null ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchStr )",
            "score": 99.54320179332386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) == -1) ;",
            "score": 99.52232294497283,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.51615767045455,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.equals( ) ) ) ;",
            "score": 99.46634928385417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . equals ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.46076311383929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } ,0) ;",
            "score": 99.42019813939145,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , ', '.toUpperCase( ) ) ;",
            "score": 99.543046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.543046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'cde'.toUpperCase( ) ) ;",
            "score": 99.543046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'def'.toUpperCase( ) ) ;",
            "score": 99.543046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.543046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars.toUpperCase( ).toUpperCase( ) , searchStr ) ;",
            "score": 99.53940610532408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ).equals( false ) ;",
            "score": 99.52199300130208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . equals ( false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.indexOf( str ) ) ) ;",
            "score": 99.51609205163044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . index CaMeL Of ( str ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.toUpperCase( searchStr.length( ) ) ) ;",
            "score": 99.50330607096355,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . to CaMeL Upper CaMeL Case ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true.toUpperCase( ) , searchStr ) ;",
            "score": 99.48175920758929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.toUpperCase( ) , searchStr ) ;",
            "score": 99.46793619791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; ) ;",
            "score": 99.466337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ', ') ; }",
            "score": 99.46073774857955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'ABCDEF') ; }",
            "score": 99.46073774857955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'cde') ; }",
            "score": 99.46073774857955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'def') ; }",
            "score": 99.46073774857955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'abcdef') ; }",
            "score": 99.46073774857955,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr == null ) ;",
            "score": 99.4200080422794,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.toUpperCase( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.53924560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0&& str.charAt(0) == ', ') ;",
            "score": 99.51601774796195,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0&& str.charAt(0) == 'ABCDEF') ;",
            "score": 99.51601774796195,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0&& str.charAt(0) == 'cde') ;",
            "score": 99.51601774796195,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0&& str.charAt(0) == 'def') ;",
            "score": 99.51601774796195,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0&& str.charAt(0) == 'abcdef') ;",
            "score": 99.51601774796195,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . length ( ) == 0 && str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , false.toUpperCase( ) , searchStr ) ;",
            "score": 99.46749441964286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).endsWith( searchStr ) ;",
            "score": 99.46599014945652,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str -1, searchStr.toUpperCase( ) ) ;",
            "score": 99.46001906622024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str - 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.size( ) false ) ) ;",
            "score": 99.542861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . size ( ) false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).startsWith( str ) ) ;",
            "score": 99.51557849702381,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).length( ) ==0) ;",
            "score": 99.48136393229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return contains( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.46590169270833,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; if( str == null ) {",
            "score": 99.45997256324405,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; if ( str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return searchStr [0] == null ;",
            "score": 99.41947021484376,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return search CaMeL Str [ 0 ] == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return valueOf( str , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.53824515964673,
            "correctness": "uncompilable",
            "tokenized_patch": "return value CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( ', ') ; }",
            "score": 99.50241323617789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'ABCDEF') ; }",
            "score": 99.50241323617789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'cde') ; }",
            "score": 99.50241323617789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'def') ; }",
            "score": 99.50241323617789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'abcdef') ; }",
            "score": 99.50241323617789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ).trim( ) ) ;",
            "score": 99.4811947471217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( searchStr ) ;",
            "score": 99.46562267485119,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) ) ,",
            "score": 99.45958187705592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str.toUpperCase( ) ) ) { return false ;",
            "score": 99.41947021484376,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , str ) ;",
            "score": 99.52076256793478,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt( ) , searchStr.length( ) ) ;",
            "score": 99.51497395833333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) -0, searchStr.length( ) ) ;",
            "score": 99.501904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) - 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( searchStr.toUpperCase( ) ) ) { return false ; }",
            "score": 99.4651953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ).equals( ', ') ) { return false ;",
            "score": 99.41934814453126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ).equals( 'ABCDEF') ) { return false ;",
            "score": 99.41934814453126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ).equals( 'cde') ) { return false ;",
            "score": 99.41934814453126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ).equals( 'def') ) { return false ;",
            "score": 99.41934814453126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ).equals( 'abcdef') ) { return false ;",
            "score": 99.41934814453126,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).trim( ).toUpperCase( ).trim( ) ;",
            "score": 99.53812081473214,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) , searchStr ) ;",
            "score": 99.5142132302989,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.length( ) +1) ) ;",
            "score": 99.48079057173295,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . length ( ) + 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null || str.toUpperCase( ) == null ) {",
            "score": 99.45946044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || str . to CaMeL Upper CaMeL Case ( ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) false ) ;",
            "score": 99.41909790039062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toString( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.53807654747597,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL String ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == false || searchStr == null ) ;",
            "score": 99.52021928267045,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == false || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).startsWith( ', ') ) ;",
            "score": 99.51346261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.51346261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).startsWith( 'cde') ) ;",
            "score": 99.51346261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).startsWith( 'def') ) ;",
            "score": 99.51346261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.51346261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , ', ') ;",
            "score": 99.41837804457721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , 'ABCDEF') ;",
            "score": 99.41837804457721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , 'cde') ;",
            "score": 99.41837804457721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , 'def') ;",
            "score": 99.41837804457721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , 'abcdef') ;",
            "score": 99.41837804457721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) & false ;",
            "score": 99.541240234375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) & false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsAll( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.53791610054348,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( ', ') ) { return false ; } else { return false ;",
            "score": 99.50072370256696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'ABCDEF') ) { return false ; } else { return false ;",
            "score": 99.50072370256696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'cde') ) { return false ; } else { return false ;",
            "score": 99.50072370256696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'def') ) { return false ; } else { return false ;",
            "score": 99.50072370256696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ).equals( 'abcdef') ) { return false ; } else { return false ;",
            "score": 99.50072370256696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).charAt(0) ) ;",
            "score": 99.4803466796875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , ', ') ;",
            "score": 99.46617934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , 'ABCDEF') ;",
            "score": 99.46617934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , 'cde') ;",
            "score": 99.46617934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , 'def') ;",
            "score": 99.46617934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , 'abcdef') ;",
            "score": 99.46617934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.substring(0, searchStr == null ) ) { return false ;",
            "score": 99.418017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . substring ( 0 , search CaMeL Str == null ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(2).toUpperCase( ) ) ;",
            "score": 99.54104614257812,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(4).toUpperCase( ) ) ;",
            "score": 99.54104614257812,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(3).toUpperCase( ) ) ;",
            "score": 99.54104614257812,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(8).toUpperCase( ) ) ;",
            "score": 99.54104614257812,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(7).toUpperCase( ) ) ;",
            "score": 99.54104614257812,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(1) , searchStr.length( ) ) ;",
            "score": 99.4798583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 1 ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) == ) ;",
            "score": 99.46520385742187,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.value , searchStr.toUpperCase( ) ) ;",
            "score": 99.45824032738095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . value , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , name.toUpperCase( ) ) ;",
            "score": 99.41789807771382,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).startsWith( str ) ) ;",
            "score": 99.51233440896739,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).toUpperCase( ) , true ) ;",
            "score": 99.47977120535714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , && searchStr == null ) ;",
            "score": 99.4577303799716,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,0, true ) ;",
            "score": 99.41738409745066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , 0 , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) *1;",
            "score": 99.54053896949405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) * 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).toUpperCase( ).trim( ) ;",
            "score": 99.53604125976562,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return false ; } return false ;",
            "score": 99.5185546875,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return !( str.toUpperCase( ).startsWith( ', ') ) ;",
            "score": 99.511962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.511962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).startsWith( 'cde') ) ;",
            "score": 99.511962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).startsWith( 'def') ) ;",
            "score": 99.511962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.511962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( ', ') ? false : true ) ;",
            "score": 99.47955877130681,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? false : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'ABCDEF') ? false : true ) ;",
            "score": 99.47955877130681,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? false : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'cde') ? false : true ) ;",
            "score": 99.47955877130681,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? false : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'def') ? false : true ) ;",
            "score": 99.47955877130681,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? false : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'abcdef') ? false : true ) ;",
            "score": 99.47955877130681,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) ? false : true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( true ) ) ;",
            "score": 99.46484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) :0;",
            "score": 99.4644085427989,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ).toUpperCase( ) ;",
            "score": 99.41705001027961,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str , searchStr.toUpperCase( ) ).length( ) ==0;",
            "score": 99.53567165798611,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , searchStr.size( ) ) ;",
            "score": 99.46466936383929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).trim( ).length( ) !=0;",
            "score": 99.46425374348958,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) ) + ', ';",
            "score": 99.45740327380952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) ) + 'ABCDEF';",
            "score": 99.45740327380952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) ) + 'cde';",
            "score": 99.45740327380952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) ) + 'def';",
            "score": 99.45740327380952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) ) + 'abcdef';",
            "score": 99.45740327380952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null || searchStr == null ;",
            "score": 99.41697998046875,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? true : ) ;",
            "score": 99.54007090692934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? true : ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr.toUpperCase( ) ).length( ) ==0;",
            "score": 99.5355812355324,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str.toLowerCase( ) , searchStr ) ) ;",
            "score": 99.47928292410714,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,0.null ) ;",
            "score": 99.46409847861842,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , 0 . null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) != null ) ;",
            "score": 99.53544108072917,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).endsWith( ', ') ) ;",
            "score": 99.51131184895833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).endsWith( 'ABCDEF') ) ;",
            "score": 99.51131184895833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).endsWith( 'cde') ) ;",
            "score": 99.51131184895833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).endsWith( 'def') ) ;",
            "score": 99.51131184895833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).endsWith( 'abcdef') ) ;",
            "score": 99.51131184895833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') , -1) ;",
            "score": 99.47891090029762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') , -1) ;",
            "score": 99.47891090029762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') , -1) ;",
            "score": 99.47891090029762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') , -1) ;",
            "score": 99.47891090029762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') , -1) ;",
            "score": 99.47891090029762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( str.toUpperCase( ) ) ) ;",
            "score": 99.46419067382813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.containsIgnoreCase( searchStr ) ) ;",
            "score": 99.46394486860795,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( str == null ) ||( searchStr == null ) ) ;",
            "score": 99.45724826388889,
            "correctness": "wrong",
            "tokenized_patch": "return ( ( str == null ) || ( search CaMeL Str == null ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return false ;",
            "score": 99.4167709350586,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return false ;",
            "score": 99.4167709350586,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return false ;",
            "score": 99.4167709350586,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return false ;",
            "score": 99.4167709350586,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return false ;",
            "score": 99.4167709350586,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + searchStr.toUpperCase( ) ) ;",
            "score": 99.51106063179348,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains.toUpperCase( ).toUpperCase( ).length( ) ==0;",
            "score": 99.4984130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr ).toUpperCase( ) ) ;",
            "score": 99.46397816051136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ', '.length( ) ) , searchStr ) ;",
            "score": 99.46377563476562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'ABCDEF'.length( ) ) , searchStr ) ;",
            "score": 99.46377563476562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'cde'.length( ) ) , searchStr ) ;",
            "score": 99.46377563476562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'def'.length( ) ) , searchStr ) ;",
            "score": 99.46377563476562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( 'abcdef'.length( ) ) , searchStr ) ;",
            "score": 99.46377563476562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $STRING$ . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str ) ;",
            "score": 99.41504845252403,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).substring(0, searchStr.length( ) ) != null ;",
            "score": 99.53512912326389,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . substring ( 0 , search CaMeL Str . length ( ) ) != null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr.charAt(0) ) ;",
            "score": 99.51065726902173,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) ) ? false : true ;",
            "score": 99.49799262152777,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) ) ? false : true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , true ) ;",
            "score": 99.47836483226104,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , false ) ;",
            "score": 99.4631706686581,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(1, str.toUpperCase( ) ) ;",
            "score": 99.45712425595238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( 1 , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( str.toUpperCase( ) == null ) { return false ;",
            "score": 99.41449584960938,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , charValue , searchStr.toUpperCase( ) ) ;",
            "score": 99.53511379076087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char CaMeL Value , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).endsWith( searchStr ) ) ;",
            "score": 99.5101902173913,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(1, searchStr.length( ) -1) ) ;",
            "score": 99.47813831676136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 1 , search CaMeL Str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.4633076985677,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Character.isUpperCase( str.toUpperCase( ) ) ;",
            "score": 99.4568103608631,
            "correctness": "uncompilable",
            "tokenized_patch": "return Character . is CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new String( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.41390991210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return new String ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value = str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.53485662286931,
            "correctness": "uncompilable",
            "tokenized_patch": "return value = str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == ', '+ str.toUpperCase( ) ;",
            "score": 99.51735432942708,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'ABCDEF'+ str.toUpperCase( ) ;",
            "score": 99.51735432942708,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'cde'+ str.toUpperCase( ) ;",
            "score": 99.51735432942708,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'def'+ str.toUpperCase( ) ;",
            "score": 99.51735432942708,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'abcdef'+ str.toUpperCase( ) ;",
            "score": 99.51735432942708,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) >=0;",
            "score": 99.497802734375,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.length( ) ==0) { return true ; } return true ;",
            "score": 99.47728207236842,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str , searchStr.toUpperCase( ) , ) ;",
            "score": 99.45677601207386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str , searchStr.toUpperCase( ) , ) ;",
            "score": 99.45677601207386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str , searchStr.toUpperCase( ) , ) ;",
            "score": 99.45677601207386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str , searchStr.toUpperCase( ) , ) ;",
            "score": 99.45677601207386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str , searchStr.toUpperCase( ) , ) ;",
            "score": 99.45677601207386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( value.toUpperCase( ) ) ;",
            "score": 99.41361919202302,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , charValue ) ;",
            "score": 99.5348484205163,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , char CaMeL Value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.startsWith( str.toLowerCase( ) ) ;",
            "score": 99.47726004464286,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . starts CaMeL With ( str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).toString( ) ) ;",
            "score": 99.462646484375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).matches( ', ') ) ;",
            "score": 99.46260579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).matches( 'ABCDEF') ) ;",
            "score": 99.46260579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).matches( 'cde') ) ;",
            "score": 99.46260579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).matches( 'def') ) ;",
            "score": 99.46260579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).matches( 'abcdef') ) ;",
            "score": 99.46260579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null || searchStr == null )",
            "score": 99.4560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str ) ;",
            "score": 99.41335880055146,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).toUpperCase( ) == true ;",
            "score": 99.538876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) == true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + searchStr , searchStr ) ;",
            "score": 99.4133236533717,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) ==0) ;",
            "score": 99.51705932617188,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return ) { return false ;",
            "score": 99.41316441127232,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : contains( str )",
            "score": 99.538388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : contains ( str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : true ;",
            "score": 99.51687754755434,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( str.toUpperCase( ) ) ) ;",
            "score": 99.46199544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr == null ) ;",
            "score": 99.41307067871094,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str [ true ] , searchStr.toUpperCase( ) ) ;",
            "score": 99.51652388139205,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ true ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , -1, searchStr.length( ) ) ;",
            "score": 99.50897771661931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , - 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new StringBuffer( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.496650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String CaMeL Buffer ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', '+ str.toUpperCase( ) ) ;",
            "score": 99.45540364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF'+ str.toUpperCase( ) ) ;",
            "score": 99.45540364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde'+ str.toUpperCase( ) ) ;",
            "score": 99.45540364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def'+ str.toUpperCase( ) ) ;",
            "score": 99.45540364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef'+ str.toUpperCase( ) ) ;",
            "score": 99.45540364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new String( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.41284790039063,
            "correctness": "uncompilable",
            "tokenized_patch": "return new String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : searchStr ;",
            "score": 99.537744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } if( str.toUpperCase( ) ==",
            "score": 99.51649983723958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } if ( str . to CaMeL Upper CaMeL Case ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.substring( searchStr.length( ) ) ) ;",
            "score": 99.49628155048077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . substring ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toLowerCase( ) ) ;",
            "score": 99.47621783088235,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toUpperCase( ) , searchStr ) ;",
            "score": 99.46037212171052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) ) ; }",
            "score": 99.45534939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) ) ; }",
            "score": 99.45534939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) ) ; }",
            "score": 99.45534939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) ) ; }",
            "score": 99.45534939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) ) ; }",
            "score": 99.45534939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( l , searchStr.toUpperCase( ) ) ;",
            "score": 99.41279682360198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( l , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [ -1] , searchStr.toUpperCase( ) ) ;",
            "score": 99.5164104959239,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ - 1 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! Character.isLowerCase( str.charAt(0) ) ;",
            "score": 99.50869605654762,
            "correctness": "wrong",
            "tokenized_patch": "return ! Character . is CaMeL Lower CaMeL Case ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.length( ) -1, searchStr.length( ) ) ;",
            "score": 99.47621372767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) - 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ].toUpperCase( ) ) ) ;",
            "score": 99.46104939778645,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ] . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(2, searchStr.toUpperCase( ) ) ;",
            "score": 99.45438425164474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(4, searchStr.toUpperCase( ) ) ;",
            "score": 99.45438425164474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(3, searchStr.toUpperCase( ) ) ;",
            "score": 99.45438425164474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(8, searchStr.toUpperCase( ) ) ;",
            "score": 99.45438425164474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(7, searchStr.toUpperCase( ) ) ;",
            "score": 99.45438425164474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.trim( ) ) ;",
            "score": 99.41252585018383,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).size( ) ==0;",
            "score": 99.53185096153847,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . size ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return true ; } return true ;",
            "score": 99.50864479758523,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return searchStr.length( ) ==0;",
            "score": 99.495849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toArray( ) ) ;",
            "score": 99.47608139935662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).length( ) >=0;",
            "score": 99.46037153764205,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; }",
            "score": 99.45945909288194,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) , false ) ;",
            "score": 99.45426218133224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) , false ) ;",
            "score": 99.45426218133224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) , false ) ;",
            "score": 99.45426218133224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) , false ) ;",
            "score": 99.45426218133224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) , false ) ;",
            "score": 99.45426218133224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return add( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.41242418791118,
            "correctness": "uncompilable",
            "tokenized_patch": "return add ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase = contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.53734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case = contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.TRUE ) ;",
            "score": 99.53182319972827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . TRUE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ).contains( searchStr ) ;",
            "score": 99.51627604166667,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.50828247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Integer.toString( searchStr.length( ) ) ) ;",
            "score": 99.47569691051136,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , Integer . to CaMeL String ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return contains( str , searchStr ) ;",
            "score": 99.412158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).size( ) ==0;",
            "score": 99.531455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . size ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,( String ) searchStr ) ;",
            "score": 99.51606889204545,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , ( String ) search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return !( str.charAt(0) == searchStr.length( ) ) ;",
            "score": 99.5077237215909,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( contains( str.substring(0, searchStr.length( ) ) ) ) ;",
            "score": 99.4752530184659,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.45330200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.45330200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.45330200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.45330200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.45330200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ;",
            "score": 99.41190831801471,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str.toUpperCase( ) ).toUpperCase( ) != null ;",
            "score": 99.53086118344908,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , toUpperCase( ) ) ;",
            "score": 99.45995032269022,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) +0) ;",
            "score": 99.4521716889881,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.clone( ) ) ;",
            "score": 99.4118588096217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . clone ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.trim( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.53072265625,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str . trim ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str == null ) ||( searchStr.toUpperCase( ) == false ) ;",
            "score": 99.51552327473958,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null ) || ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).length( ) +1) ;",
            "score": 99.47493489583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . length ( ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.size( ) && searchStr == null ) ;",
            "score": 99.45850771949405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ; return true ;",
            "score": 99.45191539417614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.trim( ) ) ;",
            "score": 99.41138413373162,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str == null && searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.536259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) != length( ) ;",
            "score": 99.53035481770833,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) != length ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) { return false ;",
            "score": 99.51551310221355,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length , searchStr.length ) ;",
            "score": 99.50672978940217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.49552408854167,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , searchStr.length( ) ) ;",
            "score": 99.4743884858631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( str.toUpperCase( ) ) ) ;",
            "score": 99.45951915922619,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . starts CaMeL With ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str - ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.45164853050595,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str - $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str - 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.45164853050595,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str - $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str - 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.45164853050595,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str - $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str - 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.45164853050595,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str - $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str - 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.45164853050595,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str - $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.clear( ) ) ;",
            "score": 99.40998920641448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . clear ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) : contains ;",
            "score": 99.53607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.52980324074075,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ', '.equals( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50665838068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'ABCDEF'.equals( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50665838068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'cde'.equals( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50665838068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'def'.equals( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50665838068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'abcdef'.equals( str.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.50665838068181,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ).startsWith( ', ') ) ;",
            "score": 99.47377707741477,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.47377707741477,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ).startsWith( 'cde') ) ;",
            "score": 99.47377707741477,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ).startsWith( 'def') ) ;",
            "score": 99.47377707741477,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.47377707741477,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.45948327105978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.45948327105978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.45948327105978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.45948327105978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.45948327105978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return add( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.45803993626645,
            "correctness": "uncompilable",
            "tokenized_patch": "return add ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,",
            "score": 99.45151192801339,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( name.toUpperCase( ) == null ) { return false ;",
            "score": 99.40949450041118,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( name . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return containsIgnoreCase( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.5360107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.529267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return searchStr.length( ) ==0;",
            "score": 99.494853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return search CaMeL Str . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).startsWith( ', ') ) ;",
            "score": 99.47357732599431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.47357732599431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).startsWith( 'cde') ) ;",
            "score": 99.47357732599431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).startsWith( 'def') ) ;",
            "score": 99.47357732599431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.47357732599431,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( searchStr ) , searchStr ) ;",
            "score": 99.45946155894886,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , contains ) ;",
            "score": 99.45801943824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , contains ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) , true ) ;",
            "score": 99.45094058388158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) , true ) ;",
            "score": 99.45094058388158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) , true ) ;",
            "score": 99.45094058388158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) , true ) ;",
            "score": 99.45094058388158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) , true ) ;",
            "score": 99.45094058388158,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr.toString( ) ) ;",
            "score": 99.40872353001645,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str , searchStr.toUpperCase( ) ).toUpperCase( ) ;",
            "score": 99.52913411458333,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == ', ') ;",
            "score": 99.51384735107422,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'ABCDEF') ;",
            "score": 99.51384735107422,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'cde') ;",
            "score": 99.51384735107422,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'def') ;",
            "score": 99.51384735107422,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == 'abcdef') ;",
            "score": 99.51384735107422,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).length( ) , true ) ;",
            "score": 99.47356305803571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . length ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( toUpperCase( ) ) ) ;",
            "score": 99.45946155894886,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ==0) ;",
            "score": 99.4573615579044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str.toUpperCase( ) ) ) ;",
            "score": 99.45087348090277,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == searchStr ;",
            "score": 99.40833875868056,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : searchStr ;",
            "score": 99.535419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) , toUpperCase( ) ) ;",
            "score": 99.528857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == ', ') ;",
            "score": 99.51350541548295,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == 'ABCDEF') ;",
            "score": 99.51350541548295,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == 'cde') ;",
            "score": 99.51350541548295,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == 'def') ;",
            "score": 99.51350541548295,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == 'abcdef') ;",
            "score": 99.51350541548295,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toLowerCase( ).startsWith( ', ') ) ;",
            "score": 99.5059124490489,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toLowerCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.5059124490489,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toLowerCase( ).startsWith( 'cde') ) ;",
            "score": 99.5059124490489,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toLowerCase( ).startsWith( 'def') ) ;",
            "score": 99.5059124490489,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toLowerCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.5059124490489,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).startsWith( ', ') ;",
            "score": 99.49431046195652,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).startsWith( 'ABCDEF') ;",
            "score": 99.49431046195652,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).startsWith( 'cde') ;",
            "score": 99.49431046195652,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).startsWith( 'def') ;",
            "score": 99.49431046195652,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).startsWith( 'abcdef') ;",
            "score": 99.49431046195652,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.substring(0, searchStr.length( ) ) ==0;",
            "score": 99.45857747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(2, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.45064871651786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(4, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.45064871651786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(3, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.45064871651786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(8, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.45064871651786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(7, str , searchStr.toUpperCase( ) ) ;",
            "score": 99.45064871651786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ).toUpperCase( ) ) != null ;",
            "score": 99.528681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ).toUpperCase( ) ) ;",
            "score": 99.47304173519737,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , name ) ;",
            "score": 99.45029994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , name ) ;",
            "score": 99.45029994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , name ) ;",
            "score": 99.45029994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , name ) ;",
            "score": 99.45029994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , name ) ;",
            "score": 99.45029994419643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , true ) ;",
            "score": 99.40790872012867,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) *",
            "score": 99.53507133152173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.50453587582237,
            "correctness": "wrong",
            "tokenized_patch": "return equals ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return get( str.toUpperCase( ).equals( searchStr ) ) ;",
            "score": 99.47276722301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ).trim( ) ;",
            "score": 99.45779551630434,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,0, false ) ;",
            "score": 99.45687705592105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , 0 , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,1) ;",
            "score": 99.4501091452206,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.getValue( ) == null ) { return false ;",
            "score": 99.40733578330592,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . get CaMeL Value ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , this.searchStr.toUpperCase( ) ) ;",
            "score": 99.51299758184524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , this . search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.lastIndexOf( ) ) ;",
            "score": 99.5043308423913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . last CaMeL Index CaMeL Of ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).length( ) >0) ;",
            "score": 99.45757501775569,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Character.isLowerCase( str.toUpperCase( ) ) ;",
            "score": 99.44985816592262,
            "correctness": "uncompilable",
            "tokenized_patch": "return Character . is CaMeL Lower CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name.toString( ) ) ;",
            "score": 99.40711734169408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.length( ) ) )",
            "score": 99.53438136888587,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.trim( ) ) ;",
            "score": 99.52794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toLowerCase( ).equals( searchStr ) ) ;",
            "score": 99.50368430397727,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . to CaMeL Lower CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + true ;",
            "score": 99.44983491443452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , value.toString( ) ) ;",
            "score": 99.40644916735198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , value . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr.toString( ) ) ) ;",
            "score": 99.50340735394022,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).contains( searchStr ) ;",
            "score": 99.49331778067129,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.charAt( str.length( ) -1) ) ;",
            "score": 99.47178955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.substring(0, searchStr.length( ) ) ==0) ;",
            "score": 99.45705247961956,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) ==0;",
            "score": 99.44951837713069,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ) ;",
            "score": 99.40605163574219,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.51188858695652,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return false ; } return true ;",
            "score": 99.5033291903409,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return contains( str.toString( ) , searchStr ) ;",
            "score": 99.40572959498355,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( searchStr , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.5265625,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , toUpperCase( ) , searchStr ) ;",
            "score": 99.51132600203805,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0).toUpperCase( ) ) ;",
            "score": 99.50278542258523,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , str.toUpperCase( ) ) ; }",
            "score": 99.49282836914062,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Character.isLowerCase( str.charAt(0) ) ;",
            "score": 99.47117919921875,
            "correctness": "wrong",
            "tokenized_patch": "return Character . is CaMeL Lower CaMeL Case ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ).trim( ) ) ;",
            "score": 99.45671735491071,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) ==0) ;",
            "score": 99.45445033482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', str.toUpperCase( ) ) ; }",
            "score": 99.44936301491477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', str.toUpperCase( ) ) ; }",
            "score": 99.44936301491477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', str.toUpperCase( ) ) ; }",
            "score": 99.44936301491477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', str.toUpperCase( ) ) ; }",
            "score": 99.44936301491477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', str.toUpperCase( ) ) ; }",
            "score": 99.44936301491477,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.valueOf( searchStr ) ) ;",
            "score": 99.53353881835938,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . value CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.indexOf( ', ') == -1) ;",
            "score": 99.47081801470588,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') == -1) ;",
            "score": 99.47081801470588,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') == -1) ;",
            "score": 99.47081801470588,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') == -1) ;",
            "score": 99.47081801470588,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') == -1) ;",
            "score": 99.47081801470588,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , null ) ; }",
            "score": 99.44932972301136,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) == true ) ;",
            "score": 99.51088645241477,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) - ) ) ;",
            "score": 99.50251116071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , searchStr.trim( ) ) ; }",
            "score": 99.49267578125,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.length( ) ==0) { return true ; } return false ;",
            "score": 99.47074809827302,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null || searchStr.toUpperCase( ) == null )",
            "score": 99.44912574404762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null || searchStr.trim( ) == null ;",
            "score": 99.40520562065973,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null || search CaMeL Str . trim ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) : contains( searchStr ) ;",
            "score": 99.5333584872159,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) : contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Character.isUpperCase( str.charAt(0) ) ;",
            "score": 99.47064208984375,
            "correctness": "wrong",
            "tokenized_patch": "return Character . is CaMeL Upper CaMeL Case ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase(( String ) searchStr ) ;",
            "score": 99.40509033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) : true ;",
            "score": 99.53278459821429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! Character.isWhitespace( str.charAt(0) ) ;",
            "score": 99.5021908408717,
            "correctness": "wrong",
            "tokenized_patch": "return ! Character . is CaMeL Whitespace ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.replace( ) ) ;",
            "score": 99.4550144361413,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . replace ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , str ) ;",
            "score": 99.40508626302083,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( Locale.US ) ) ;",
            "score": 99.50181995738636,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( Locale . US ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "return contains( new String [ ] { str } , searchStr.length ) ;",
            "score": 99.47010562294408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str } , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null ) { return ) ;",
            "score": 99.40456671463816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != ) ;",
            "score": 99.52464758831522,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return false ; } return false ;",
            "score": 99.50142211914063,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0, true ) ) ;",
            "score": 99.49184945913461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , true ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , searchStr.length ) ;",
            "score": 99.46991257440476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) == null ) ;",
            "score": 99.45343889508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.44775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.44775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.44775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.44775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.44775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toLowerCase( ) == null ) { return false ;",
            "score": 99.40427760074013,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Lower CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.trim( ) false ) ;",
            "score": 99.53160603841145,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return true ; } return false ;",
            "score": 99.50858738111413,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).length( ) !=0) ;",
            "score": 99.45466918945313,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( name , searchStr ) ;",
            "score": 99.4041415127841,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) == ) ;",
            "score": 99.5315653483073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toLowerCase( ).equals( searchStr ) ) ;",
            "score": 99.50080672554348,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( ', '+ ', ') ;",
            "score": 99.4912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'ABCDEF'+ 'ABCDEF') ;",
            "score": 99.4912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'cde'+ 'cde') ;",
            "score": 99.4912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'def'+ 'def') ;",
            "score": 99.4912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { throw new IllegalArgumentException( 'abcdef'+ 'abcdef') ;",
            "score": 99.4912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( searchStr ) ) ;",
            "score": 99.45453491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + ', ') ;",
            "score": 99.40309053308823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + 'ABCDEF') ;",
            "score": 99.40309053308823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + 'cde') ;",
            "score": 99.40309053308823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + 'def') ;",
            "score": 99.40309053308823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + 'abcdef') ;",
            "score": 99.40309053308823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) -1;",
            "score": 99.53156389508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) != null ;",
            "score": 99.52411443536931,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) != null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).endsWith( ', ') ) ;",
            "score": 99.49985139266305,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).endsWith( 'ABCDEF') ) ;",
            "score": 99.49985139266305,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).endsWith( 'cde') ) ;",
            "score": 99.49985139266305,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).endsWith( 'def') ) ;",
            "score": 99.49985139266305,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ).endsWith( 'abcdef') ) ;",
            "score": 99.49985139266305,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( ', ', ', ') , searchStr ) ;",
            "score": 99.46903686523437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'ABCDEF', 'ABCDEF') , searchStr ) ;",
            "score": 99.46903686523437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'cde', 'cde') , searchStr ) ;",
            "score": 99.46903686523437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'def', 'def') , searchStr ) ;",
            "score": 99.46903686523437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'abcdef', 'abcdef') , searchStr ) ;",
            "score": 99.46903686523437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == false ;",
            "score": 99.44705200195312,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.append( str.toUpperCase( ) ) ;",
            "score": 99.40304404810855,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . append ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ! str.toUpperCase( ) , searchStr ) ;",
            "score": 99.5314432779948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ! str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! containsIgnoreCase( str , searchStr ) ;",
            "score": 99.49958801269531,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , trim ) ;",
            "score": 99.45315987723214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , trim ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) +2) ;",
            "score": 99.44700985863095,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) +4) ;",
            "score": 99.44700985863095,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) +3) ;",
            "score": 99.44700985863095,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) +8) ;",
            "score": 99.44700985863095,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) +7) ;",
            "score": 99.44700985863095,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $NUMBER$ ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , value ) ;",
            "score": 99.40218411959134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr.toUpperCase( ) , true ) ; }",
            "score": 99.49024454752605,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , false ) ;",
            "score": 99.46853458180146,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', false , searchStr.toUpperCase( ) ) ;",
            "score": 99.44685872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', false , searchStr.toUpperCase( ) ) ;",
            "score": 99.44685872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', false , searchStr.toUpperCase( ) ) ;",
            "score": 99.44685872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', false , searchStr.toUpperCase( ) ) ;",
            "score": 99.44685872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', false , searchStr.toUpperCase( ) ) ;",
            "score": 99.44685872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , false , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , name.toUpperCase( ) ) ;",
            "score": 99.40199038856908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.length( ) )",
            "score": 99.52947443181819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . length ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else { return contains( str ) ;",
            "score": 99.49022498497597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else { return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.toLowerCase( ) ) ;",
            "score": 99.46809656479779,
            "correctness": "wrong",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toLowerCase( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.45323114809783,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Lower CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , ) ;",
            "score": 99.45294189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) ) + false ;",
            "score": 99.44657970610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) ) + false ;",
            "score": 99.44657970610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) ) + false ;",
            "score": 99.44657970610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) ) + false ;",
            "score": 99.44657970610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) ) + false ;",
            "score": 99.44657970610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.52342688519022,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == true ) ;",
            "score": 99.50634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') >= -1) ;",
            "score": 99.49889458550348,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') >= -1) ;",
            "score": 99.49889458550348,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') >= -1) ;",
            "score": 99.49889458550348,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') >= -1) ;",
            "score": 99.49889458550348,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') >= -1) ;",
            "score": 99.49889458550348,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.trim( ) ) == -1;",
            "score": 99.4679931640625,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . trim ( ) ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ',1, searchStr.toUpperCase( ) ) ;",
            "score": 99.44548688616071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF',1, searchStr.toUpperCase( ) ) ;",
            "score": 99.44548688616071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde',1, searchStr.toUpperCase( ) ) ;",
            "score": 99.44548688616071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def',1, searchStr.toUpperCase( ) ) ;",
            "score": 99.44548688616071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef',1, searchStr.toUpperCase( ) ) ;",
            "score": 99.44548688616071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 1 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toString( ) == null ) { return true ;",
            "score": 99.40123793658088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL String ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return valueOf( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.52328636532738,
            "correctness": "uncompilable",
            "tokenized_patch": "return value CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.equals( searchStr.toUpperCase( ) ) ;",
            "score": 99.4986328125,
            "correctness": "wrong",
            "tokenized_patch": "return ! str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.length -1) ;",
            "score": 99.46683542351974,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . length - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( searchStr ) ) ;",
            "score": 99.4527587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.to",
            "score": 99.4450619346217,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,1) ;",
            "score": 99.40085018382354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) != null ;",
            "score": 99.52923874627976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.52313523065476,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == true ) ;",
            "score": 99.50584411621094,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.substring( str.length( ) -1) ) ;",
            "score": 99.49857954545455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . substring ( str . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) , searchStr ) ;",
            "score": 99.4667904502467,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , trim( ) ) ;",
            "score": 99.45271102241848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , ', ', false ) ;",
            "score": 99.40069901315789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'ABCDEF', false ) ;",
            "score": 99.40069901315789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'cde', false ) ;",
            "score": 99.40069901315789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'def', false ) ;",
            "score": 99.40069901315789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'abcdef', false ) ;",
            "score": 99.40069901315789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) , null )",
            "score": 99.52904256184895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) ) { return true ;",
            "score": 99.50473022460938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr.length( ) -1) ;",
            "score": 99.488603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.length( ) ) ;",
            "score": 99.46661735983456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).charAt(0) == ', ';",
            "score": 99.45263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).charAt(0) == 'ABCDEF';",
            "score": 99.45263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).charAt(0) == 'cde';",
            "score": 99.45263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).charAt(0) == 'def';",
            "score": 99.45263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).charAt(0) == 'abcdef';",
            "score": 99.45263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ) , ) ;",
            "score": 99.44407348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( ) , ) ;",
            "score": 99.44407348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( ) , ) ;",
            "score": 99.44407348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( ) , ) ;",
            "score": 99.44407348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( ) , ) ;",
            "score": 99.44407348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == null || searchStr ;",
            "score": 99.39999871504934,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , indexOf( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.52182006835938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , index CaMeL Of ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) ==0|| searchStr == null ) ;",
            "score": 99.50445001775569,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == 0 || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , filter ) ;",
            "score": 99.46619233630952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , filter ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str.toUpperCase( ) ).length( ) ==0;",
            "score": 99.45260487432066,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str . to CaMeL Upper CaMeL Case ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.Number ) ;",
            "score": 99.45104399181548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . Number ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.44389415922619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.44389415922619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.44389415922619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.44389415922619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.44389415922619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , toString( ) ) ;",
            "score": 99.39989516314338,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) + searchStr ;",
            "score": 99.52858568274456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.52138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) , value ) ;",
            "score": 99.50440514605978,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr.length( ) ) ; }",
            "score": 99.49847966974431,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( ', ', searchStr.toUpperCase( ) ) ;",
            "score": 99.44365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( 'ABCDEF', searchStr.toUpperCase( ) ) ;",
            "score": 99.44365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( 'cde', searchStr.toUpperCase( ) ) ;",
            "score": 99.44365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( 'def', searchStr.toUpperCase( ) ) ;",
            "score": 99.44365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( 'abcdef', searchStr.toUpperCase( ) ) ;",
            "score": 99.44365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.size( ) ==0) { return false ;",
            "score": 99.39988080193015,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . size ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == false ).contains( searchStr ) ;",
            "score": 99.50404424252717,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == false ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( ', ') ) ) ;",
            "score": 99.46537853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'ABCDEF') ) ) ;",
            "score": 99.46537853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'cde') ) ) ;",
            "score": 99.46537853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'def') ) ) ;",
            "score": 99.46537853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.lastIndexOf( 'abcdef') ) ) ;",
            "score": 99.46537853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "str = str.toUpperCase( ) ; return contains( str , searchStr ) ;",
            "score": 99.4522015115489,
            "correctness": "wrong",
            "tokenized_patch": "str = str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , return ) ;",
            "score": 99.44981166294643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( false , str.toUpperCase( ) ) ;",
            "score": 99.44359188988095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( false , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String [ ] { str } ) ;",
            "score": 99.39940688189338,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String [ ] { str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == ', ') ;",
            "score": 99.50381469726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == 'ABCDEF') ;",
            "score": 99.50381469726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == 'cde') ;",
            "score": 99.50381469726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == 'def') ;",
            "score": 99.50381469726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null || searchStr.toUpperCase( ) == 'abcdef') ;",
            "score": 99.50381469726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) , searchStr ) ;",
            "score": 99.49831224524456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) <0;",
            "score": 99.4873046875,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) < 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr == null ;",
            "score": 99.4493408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', null , searchStr.toUpperCase( ) ) ;",
            "score": 99.44342912946429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', null , searchStr.toUpperCase( ) ) ;",
            "score": 99.44342912946429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', null , searchStr.toUpperCase( ) ) ;",
            "score": 99.44342912946429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', null , searchStr.toUpperCase( ) ) ;",
            "score": 99.44342912946429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', null , searchStr.toUpperCase( ) ) ;",
            "score": 99.44342912946429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , -2) ;",
            "score": 99.39900716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , -4) ;",
            "score": 99.39900716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , -3) ;",
            "score": 99.39900716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , -8) ;",
            "score": 99.39900716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , -7) ;",
            "score": 99.39900716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , - $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( ', ') || str.endsWith( ', ') ) ;",
            "score": 99.49793590198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'ABCDEF') || str.endsWith( 'ABCDEF') ) ;",
            "score": 99.49793590198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'cde') || str.endsWith( 'cde') ) ;",
            "score": 99.49793590198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'def') || str.endsWith( 'def') ) ;",
            "score": 99.49793590198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.startsWith( 'abcdef') || str.endsWith( 'abcdef') ) ;",
            "score": 99.49793590198864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . starts CaMeL With ( $STRING$ ) || str . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( lowerCase( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.48717244466145,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( lower CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( searchStr == null ) ||( searchStr == null ) ) {",
            "score": 99.44306030273438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( search CaMeL Str == null ) || ( search CaMeL Str == null ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null.toUpperCase( ) ) ;",
            "score": 99.39887551700367,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( String.toUpperCase( str ) , searchStr ) ;",
            "score": 99.52728271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( String . to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != -2;",
            "score": 99.519287109375,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != -4;",
            "score": 99.519287109375,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != -3;",
            "score": 99.519287109375,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != -8;",
            "score": 99.519287109375,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != -7;",
            "score": 99.519287109375,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != - $NUMBER$ ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim(.length( ) -1) ) ;",
            "score": 99.46428571428571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.contains( str.toUpperCase( ) ) ) ;",
            "score": 99.44299926757813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.contains( str.toUpperCase( ) ) ) ;",
            "score": 99.44299926757813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.contains( str.toUpperCase( ) ) ) ;",
            "score": 99.44299926757813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.contains( str.toUpperCase( ) ) ) ;",
            "score": 99.44299926757813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.contains( str.toUpperCase( ) ) ) ;",
            "score": 99.44299926757813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.iterator( ) ) ;",
            "score": 99.39876516241776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . iterator ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,1) ;",
            "score": 99.52705310639881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.51897638494319,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) == false ) { return false ;",
            "score": 99.50262772409539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == false ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == str.charAt(0) ) ;",
            "score": 99.49782396399456,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.length(.length( ) -1) ) ;",
            "score": 99.46405319940476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( . length ( ) - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( -1) ) ;",
            "score": 99.44291759672619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( - 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String [ ] { searchStr } ) ;",
            "score": 99.39874588815789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String [ ] { search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).contains( searchStr ) ;",
            "score": 99.52695534446023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null ) ? false : searchStr.toUpperCase( ) ;",
            "score": 99.50249689275569,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null ) ? false : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.toLowerCase( ) ) ;",
            "score": 99.4638904389881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; } return contains( str , searchStr.",
            "score": 99.44573102678571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; } return contains ( str , search CaMeL Str .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) ; }",
            "score": 99.44249725341797,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.toString( ) ) ;",
            "score": 99.39810341282895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) ==1) ;",
            "score": 99.50246360085227,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , str.length( ) ) ;",
            "score": 99.49774460565476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).length( ) !=0;",
            "score": 99.451025390625,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str + ', '&& searchStr.toUpperCase( ) ) ;",
            "score": 99.44219680059524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'&& searchStr.toUpperCase( ) ) ;",
            "score": 99.44219680059524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'&& searchStr.toUpperCase( ) ) ;",
            "score": 99.44219680059524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'&& searchStr.toUpperCase( ) ) ;",
            "score": 99.44219680059524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'&& searchStr.toUpperCase( ) ) ;",
            "score": 99.44219680059524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String [ ] { searchStr } , null ) ;",
            "score": 99.3978335731908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { search CaMeL Str } , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ] ) ;",
            "score": 99.52610270182292,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.indexOf( str , searchStr.toUpperCase( ) ) == -1;",
            "score": 99.51848895733173,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( searchStr , searchStr.length( ) ) ) ;",
            "score": 99.49760298295455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( search CaMeL Str , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! ! contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.4846423921131,
            "correctness": "wrong",
            "tokenized_patch": "return ! ! contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).matches( ) ) ;",
            "score": 99.450927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . matches ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.getCaMeL",
            "score": 99.4445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . get CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).toUpperCase( ).length( ) ==0;",
            "score": 99.5184326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null ) ||( str.toUpperCase( ) == null ) ;",
            "score": 99.5019864169034,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null ) || ( str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( Locale.ENGLISH ) ) ;",
            "score": 99.49751420454545,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( Locale . ENGLISH ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.4845458984375,
            "correctness": "wrong",
            "tokenized_patch": "else return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.trim( ).toUpperCase( ) ) ;",
            "score": 99.46278599330357,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr [ length ] ) ;",
            "score": 99.45090553977273,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str [ length ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.format( str ) ) ;",
            "score": 99.4442626953125,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . format ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return contains( str , searchStr.toString( ) ) ;",
            "score": 99.39735171669408,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ? true : false ;",
            "score": 99.5257632606908,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ? true : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.indexOf( str , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.51822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( str ) ) { return true ; } return false ;",
            "score": 99.4969815340909,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( str ) ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsOnly( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.46230933779762,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Only ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) == ) ;",
            "score": 99.44315011160714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', str.toUpperCase( ) ,",
            "score": 99.44110717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', str.toUpperCase( ) ,",
            "score": 99.44110717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', str.toUpperCase( ) ,",
            "score": 99.44110717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', str.toUpperCase( ) ,",
            "score": 99.44110717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', str.toUpperCase( ) ,",
            "score": 99.44110717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str , str.toUpperCase( ) ) ;",
            "score": 99.3968505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) || contains( str ) ;",
            "score": 99.52496337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) || contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') > -1) ;",
            "score": 99.49671766493056,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') > -1) ;",
            "score": 99.49671766493056,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') > -1) ;",
            "score": 99.49671766493056,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') > -1) ;",
            "score": 99.49671766493056,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') > -1) ;",
            "score": 99.49671766493056,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) <=0;",
            "score": 99.48416841947116,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) <= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).toUpperCase( ) , false ) ;",
            "score": 99.46225120907738,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(0, searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.45021654211956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.getName( ) , searchStr ) ;",
            "score": 99.44277774586396,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . get CaMeL Name ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null && searchStr.toUpperCase( ) ) ;",
            "score": 99.44070870535714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr , ', ') ;",
            "score": 99.39658074629934,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr , 'ABCDEF') ;",
            "score": 99.39658074629934,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr , 'cde') ;",
            "score": 99.39658074629934,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr , 'def') ;",
            "score": 99.39658074629934,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr , 'abcdef') ;",
            "score": 99.39658074629934,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr.toString( ) ) ) ;",
            "score": 99.5179912860577,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str . to CaMeL String ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', '+ searchStr.toLowerCase( ) ) ;",
            "score": 99.46192568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'+ searchStr.toLowerCase( ) ) ;",
            "score": 99.46192568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'+ searchStr.toLowerCase( ) ) ;",
            "score": 99.46192568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'+ searchStr.toLowerCase( ) ) ;",
            "score": 99.46192568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'+ searchStr.toLowerCase( ) ) ;",
            "score": 99.46192568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr ) ; }",
            "score": 99.45012872869319,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( searchStr ) , null ) ;",
            "score": 99.4421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( search CaMeL Str ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String == null || searchStr == null ) ;",
            "score": 99.39650591681985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toString( ) )",
            "score": 99.52488403320312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL String ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toString( ) , searchStr ) ;",
            "score": 99.517216796875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || str.length( ) ==0) { return false ; }",
            "score": 99.4964932528409,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || str . length ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) ) ; }",
            "score": 99.4398681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr , null ) ;",
            "score": 99.3963687294408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.50101902173913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).equals( str.toUpperCase( ) ) ;",
            "score": 99.44934663318452,
            "correctness": "wrong",
            "tokenized_patch": "return str . trim ( ) . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) != searchStr ) ;",
            "score": 99.44120065789474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) != search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '+ searchStr.toUpperCase( ) + ', ') ;",
            "score": 99.43951125372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ searchStr.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.43951125372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ searchStr.toUpperCase( ) + 'cde') ;",
            "score": 99.43951125372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ searchStr.toUpperCase( ) + 'def') ;",
            "score": 99.43951125372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ searchStr.toUpperCase( ) + 'abcdef') ;",
            "score": 99.43951125372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.length( ) , searchStr ) ;",
            "score": 99.39589972245066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( searchStr ) == -1) ;",
            "score": 99.49617513020833,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . index CaMeL Of ( search CaMeL Str ) == - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { if( str.toUpperCase( ).length( ) ==0) { return false ; }",
            "score": 99.48292893629808,
            "correctness": "uncompilable",
            "tokenized_patch": "else { if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( ', ') +1) ) ;",
            "score": 99.46051897321429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'ABCDEF') +1) ) ;",
            "score": 99.46051897321429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'cde') +1) ) ;",
            "score": 99.46051897321429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'def') +1) ) ;",
            "score": 99.46051897321429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'abcdef') +1) ) ;",
            "score": 99.46051897321429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.getValue( ) ) ;",
            "score": 99.44109748391544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . get CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ) ; }",
            "score": 99.43882533482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toString( ) ) ;",
            "score": 99.39464518229167,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) && true ;",
            "score": 99.52367001488095,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) && true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "final return contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.48244018554688,
            "correctness": "uncompilable",
            "tokenized_patch": "final return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , ', ') ;",
            "score": 99.43848818824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , 'ABCDEF') ;",
            "score": 99.43848818824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , 'cde') ;",
            "score": 99.43848818824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , 'def') ;",
            "score": 99.43848818824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , 'abcdef') ;",
            "score": 99.43848818824405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toString( ) ) ;",
            "score": 99.39454561121323,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( ', ', searchStr.trim( ) ) ) ;",
            "score": 99.49578247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'ABCDEF', searchStr.trim( ) ) ) ;",
            "score": 99.49578247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'cde', searchStr.trim( ) ) ) ;",
            "score": 99.49578247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'def', searchStr.trim( ) ) ) ;",
            "score": 99.49578247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'abcdef', searchStr.trim( ) ) ) ;",
            "score": 99.49578247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String [ ] { str } , searchStr.trim( ) ) ;",
            "score": 99.46004231770833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str } , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) , searchStr ) ;",
            "score": 99.43935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( l.toUpperCase( ) , searchStr ) ;",
            "score": 99.39437063116776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( l . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) ) )",
            "score": 99.52164359714673,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str ,0, searchStr.length( ) ) <0;",
            "score": 99.45999581473214,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , 0 , search CaMeL Str . length ( ) ) < 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ', '.length( ) ) ) ;",
            "score": 99.43809814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'ABCDEF'.length( ) ) ) ;",
            "score": 99.43809814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'cde'.length( ) ) ) ;",
            "score": 99.43809814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'def'.length( ) ) ) ;",
            "score": 99.43809814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( 'abcdef'.length( ) ) ) ;",
            "score": 99.43809814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $STRING$ . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) )",
            "score": 99.521630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return false ; } return true ;",
            "score": 99.45976177014802,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isLowerCase( str.toUpperCase( ) ) ;",
            "score": 99.448974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Lower CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr ) , false ) ;",
            "score": 99.43873901367188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.valueOf( searchStr ) ) ;",
            "score": 99.39354112413194,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , String . value CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( contains( searchStr ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.515869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( search CaMeL Str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String [ ] { str } , searchStr.length( ) ) ;",
            "score": 99.45965866815476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str } , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr ) ) ;",
            "score": 99.44837297712054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) -1;",
            "score": 99.43780226934524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).size( ) ==0;",
            "score": 99.39352756076389,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . size ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && ! containsIgnoreCase( str ) ;",
            "score": 99.49433826264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && ! contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = matches( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44819568452381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.matches( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.43766276041667,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) true ) ;",
            "score": 99.39350891113281,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ).toString( ) ) ;",
            "score": 99.51574176290761,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.charAt( searchStr.length( ) ) ) ;",
            "score": 99.45856323242188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.length( ) ] ) ) ;",
            "score": 99.44810267857143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . length ( ) ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , true ) ; }",
            "score": 99.43754069010417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , true ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , searchCaMeL",
            "score": 99.43539428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', ', searchStr.toString( ) ) ;",
            "score": 99.3934390419408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', searchStr.toString( ) ) ;",
            "score": 99.3934390419408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', searchStr.toString( ) ) ;",
            "score": 99.3934390419408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', searchStr.toString( ) ) ;",
            "score": 99.3934390419408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', searchStr.toString( ) ) ;",
            "score": 99.3934390419408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , ', ') ;",
            "score": 99.39322060032895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , 'ABCDEF') ;",
            "score": 99.39322060032895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , 'cde') ;",
            "score": 99.39322060032895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , 'def') ;",
            "score": 99.39322060032895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toString( ) , 'abcdef') ;",
            "score": 99.39322060032895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) +0;",
            "score": 99.52006603422619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , charAt( str.toUpperCase( ) ) ) ;",
            "score": 99.51386052911931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char CaMeL At ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( searchStr.length( ) ) ;",
            "score": 99.48058551290761,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.intValue( ) , searchStr.length( ) ) ;",
            "score": 99.45782180059524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . int CaMeL Value ( ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , toUpperCase( ) ) ;",
            "score": 99.44742624383224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr , false ) ;",
            "score": 99.39291221217105,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str ).toUpperCase( ).trim( ) ;",
            "score": 99.51375679347827,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.startsWith( str ) ) { return false ; } return true ;",
            "score": 99.4931307705966,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . starts CaMeL With ( str ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return false ; } else { return true ;",
            "score": 99.48000169836956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return false ; } else { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str , searchStr.length( ) ) ;",
            "score": 99.45707433363971,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ',0, searchStr.toUpperCase( ) ) ;",
            "score": 99.43695359002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF',0, searchStr.toUpperCase( ) ) ;",
            "score": 99.43695359002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde',0, searchStr.toUpperCase( ) ) ;",
            "score": 99.43695359002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def',0, searchStr.toUpperCase( ) ) ;",
            "score": 99.43695359002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef',0, searchStr.toUpperCase( ) ) ;",
            "score": 99.43695359002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , 0 , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr ;",
            "score": 99.43440077039931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == true ;",
            "score": 99.51368248980978,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.equals( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.49299760298295,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . equals ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toUpperCase( ) ) ) ;",
            "score": 99.4789326985677,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(2) , searchStr.length( ) ) ;",
            "score": 99.45702514648437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(4) , searchStr.length( ) ) ;",
            "score": 99.45702514648437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(3) , searchStr.length( ) ) ;",
            "score": 99.45702514648437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(8) , searchStr.length( ) ) ;",
            "score": 99.45702514648437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(7) , searchStr.length( ) ) ;",
            "score": 99.45702514648437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ ) , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.isUpperCase( ) , searchStr ) ;",
            "score": 99.44717009171195,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . is CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , containsIgnoreCase( ) ) ;",
            "score": 99.39217979029605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , contains CaMeL Ignore CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , this ) ;",
            "score": 99.51918247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.51312546502976,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.indexOf( ) ) ;",
            "score": 99.49297805059524,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . index CaMeL Of ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ; } else { return false ;",
            "score": 99.4785793138587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).equals( searchStr ) ;",
            "score": 99.45689633018092,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + ', ') ;",
            "score": 99.43609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.43609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'cde') ;",
            "score": 99.43609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'def') ;",
            "score": 99.43609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'abcdef') ;",
            "score": 99.43609260110294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null && searchStr == null ) ;",
            "score": 99.433837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , searchStr ,0) ;",
            "score": 99.39144094366776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , search CaMeL Str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) ==0) { return false ;",
            "score": 99.49773206208882,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == ', ') ;",
            "score": 99.49275716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'ABCDEF') ;",
            "score": 99.49275716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'cde') ;",
            "score": 99.49275716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'def') ;",
            "score": 99.49275716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) == 'abcdef') ;",
            "score": 99.49275716145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr.toUpperCase( ) , false ) ; }",
            "score": 99.47849527994792,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , false ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(2, searchStr.length( ) ) ) ;",
            "score": 99.45672607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(4, searchStr.length( ) ) ) ;",
            "score": 99.45672607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(3, searchStr.length( ) ) ) ;",
            "score": 99.45672607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(8, searchStr.length( ) ) ) ;",
            "score": 99.45672607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(7, searchStr.length( ) ) ) ;",
            "score": 99.45672607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( $NUMBER$ , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ', '+ searchStr ) ;",
            "score": 99.435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'ABCDEF'+ searchStr ) ;",
            "score": 99.435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'cde'+ searchStr ) ;",
            "score": 99.435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'def'+ searchStr ) ;",
            "score": 99.435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'abcdef'+ searchStr ) ;",
            "score": 99.435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr ) ;",
            "score": 99.4332275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null || searchStr == null ;",
            "score": 99.39103480747768,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null || search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.length( ) ) > -1;",
            "score": 99.45639038085938,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . length ( ) ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', 'str , searchStr.toUpperCase( ) ) ;",
            "score": 99.43550415039063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'str , searchStr.toUpperCase( ) ) ;",
            "score": 99.43550415039063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'str , searchStr.toUpperCase( ) ) ;",
            "score": 99.43550415039063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'str , searchStr.toUpperCase( ) ) ;",
            "score": 99.43550415039063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'str , searchStr.toUpperCase( ) ) ;",
            "score": 99.43550415039063,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( str ) ) ;",
            "score": 99.43315887451172,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.trim( ) == null ) { return ) { return false ;",
            "score": 99.39022488064236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) , searchStr",
            "score": 99.51748511904762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).trim( ).toUpperCase( ) ;",
            "score": 99.51210374098558,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.49711470170455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.38969421386719,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [2] , searchStr.toUpperCase( ) ) ;",
            "score": 99.51186988467262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ $NUMBER$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [4] , searchStr.toUpperCase( ) ) ;",
            "score": 99.51186988467262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ $NUMBER$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [3] , searchStr.toUpperCase( ) ) ;",
            "score": 99.51186988467262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ $NUMBER$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [8] , searchStr.toUpperCase( ) ) ;",
            "score": 99.51186988467262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ $NUMBER$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [7] , searchStr.toUpperCase( ) ) ;",
            "score": 99.51186988467262,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ $NUMBER$ ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == null ).contains( searchStr ) ;",
            "score": 99.49708092730978,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && searchStr.startsWith( ', ') ;",
            "score": 99.49228737571023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && searchStr.startsWith( 'ABCDEF') ;",
            "score": 99.49228737571023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && searchStr.startsWith( 'cde') ;",
            "score": 99.49228737571023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && searchStr.startsWith( 'def') ;",
            "score": 99.49228737571023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) && searchStr.startsWith( 'abcdef') ;",
            "score": 99.49228737571023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , true , true ) ;",
            "score": 99.47794242527173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( str ) ;",
            "score": 99.44608989514802,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , ', ') ;",
            "score": 99.43491908482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.43491908482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , 'cde') ;",
            "score": 99.43491908482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , 'def') ;",
            "score": 99.43491908482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) , 'abcdef') ;",
            "score": 99.43491908482143,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr , null ) ;",
            "score": 99.38929658777573,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.51179305366848,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr.trim( ) ) ; }",
            "score": 99.49225408380681,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isEmpty( str.toLowerCase( ) , searchStr ) ;",
            "score": 99.45513625372024,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ? searchStr : str.toUpperCase( ) ) ;",
            "score": 99.44592866443452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ? search CaMeL Str : str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { if( str == null || searchStr == null ) { return false ; }",
            "score": 99.43464965820313,
            "correctness": "uncompilable",
            "tokenized_patch": "try { if ( str == null || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.append( searchStr ) , searchStr ) ;",
            "score": 99.43155924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . append ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = searchStr.toUpperCase( ) == null ;",
            "score": 99.38793267144098,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : contains ;",
            "score": 99.5170261548913,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( searchStr , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.51163736979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') +1, searchStr ) ;",
            "score": 99.4551025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') +1, searchStr ) ;",
            "score": 99.4551025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') +1, searchStr ) ;",
            "score": 99.4551025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') +1, searchStr ) ;",
            "score": 99.4551025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') +1, searchStr ) ;",
            "score": 99.4551025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.substring(0, searchStr.length( ) ).length( ) ==0;",
            "score": 99.44588569972827,
            "correctness": "wrong",
            "tokenized_patch": "return str . substring ( 0 , search CaMeL Str . length ( ) ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! str.toUpperCase( ).equals( searchStr ) ;",
            "score": 99.49210205078126,
            "correctness": "wrong",
            "tokenized_patch": "return ! str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , Character.toUpperCase( searchStr.trim( ) ) ) ;",
            "score": 99.47691853841145,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . to CaMeL Upper CaMeL Case ( search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceFirst( ', ', ', ') ) ;",
            "score": 99.455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceFirst( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceFirst( 'cde', 'cde') ) ;",
            "score": 99.455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceFirst( 'def', 'def') ) ;",
            "score": 99.455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replaceFirst( 'abcdef', 'abcdef') ) ;",
            "score": 99.455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace CaMeL First ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ,.toUpperCase( ) ) ;",
            "score": 99.44572143554687,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , continue ) ;",
            "score": 99.4343494233631,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , continue ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( ', ') ) ;",
            "score": 99.4310531616211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( 'ABCDEF') ) ;",
            "score": 99.4310531616211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( 'cde') ) ;",
            "score": 99.4310531616211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( 'def') ) ;",
            "score": 99.4310531616211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( 'abcdef') ) ;",
            "score": 99.4310531616211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( ', ') ) ;",
            "score": 99.38711547851562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'ABCDEF') ) ;",
            "score": 99.38711547851562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'cde') ) ;",
            "score": 99.38711547851562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'def') ) ;",
            "score": 99.38711547851562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( 'abcdef') ) ;",
            "score": 99.38711547851562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( str ) >= -1) ;",
            "score": 99.4913330078125,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) >= - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.indexOf( ', ') > -1;",
            "score": 99.45452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'ABCDEF') > -1;",
            "score": 99.45452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'cde') > -1;",
            "score": 99.45452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'def') > -1;",
            "score": 99.45452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'abcdef') > -1;",
            "score": 99.45452880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) ;",
            "score": 99.4342041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , false ) ;",
            "score": 99.43068284254808,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.trim( ) ) ;",
            "score": 99.38617302389706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.max( ) ) ;",
            "score": 99.510634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . max ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( str ) != -1) ;",
            "score": 99.49131944444444,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) != - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.toArray( ) ) ;",
            "score": 99.45417131696429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr == null ;",
            "score": 99.43418579101562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return false ;",
            "score": 99.38606531479779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) { return false ; }",
            "score": 99.51609205163044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.51060419497283,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return false ; } return true ;",
            "score": 99.45393880208333,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).trim( ) ==0;",
            "score": 99.51027610085227,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return false ; } }",
            "score": 99.49497767857143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.49018787202381,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr.toUpperCase( ) ) )",
            "score": 99.4336181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null && searchStr == null ) { return false ; }",
            "score": 99.42980346679687,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null && search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , ', ') ;",
            "score": 99.38486891526442,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , 'ABCDEF') ;",
            "score": 99.38486891526442,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , 'cde') ;",
            "score": 99.38486891526442,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , 'def') ;",
            "score": 99.38486891526442,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , 'abcdef') ;",
            "score": 99.38486891526442,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr != null ? searchStr",
            "score": 99.515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str != null ? search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) ) ;",
            "score": 99.45309244791666,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) ) ; }",
            "score": 99.43349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,( String ) null ) ;",
            "score": 99.3848648071289,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , ( String ) null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str != null || searchStr.toUpperCase( ) ==0) ;",
            "score": 99.49404074928977,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str != null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') <= -1) ;",
            "score": 99.48950873480902,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') <= -1) ;",
            "score": 99.48950873480902,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') <= -1) ;",
            "score": 99.48950873480902,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') <= -1) ;",
            "score": 99.48950873480902,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') <= -1) ;",
            "score": 99.48950873480902,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null ) { return false ; }",
            "score": 99.43330891927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ) ==0;",
            "score": 99.38425021701389,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr +0) ;",
            "score": 99.51533435639881,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( chars.toUpperCase( ) , searchStr.trim( ) ) ;",
            "score": 99.51008406929348,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == true || searchStr == null ) ;",
            "score": 99.49367453835227,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == true || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return StringUtils.containsIgnoreCase( str , searchStr ) ;",
            "score": 99.48921283922698,
            "correctness": "wrong",
            "tokenized_patch": "return String CaMeL Utils . contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ).toString( ) ) ;",
            "score": 99.47374906994048,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , String.trim( ) ) ;",
            "score": 99.38397575827206,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , String . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( null , str.toUpperCase( ) ) ;",
            "score": 99.49344308035714,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( null , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsAll( str.toUpperCase( ) ) ;",
            "score": 99.4733025045956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.substring(0, searchStr.length( ) ) != null ;",
            "score": 99.44318498883929,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) != null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( false , str.toUpperCase( ) ) ;",
            "score": 99.43227251838235,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( false , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null ;",
            "score": 99.38296072823661,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return matches( str.toUpperCase( ) , searchStr.toString( ) ) ;",
            "score": 99.509755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') , true ) ;",
            "score": 99.45147094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') , true ) ;",
            "score": 99.45147094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') , true ) ;",
            "score": 99.45147094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') , true ) ;",
            "score": 99.45147094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') , true ) ;",
            "score": 99.45147094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(1, str.toUpperCase( ) ) ;",
            "score": 99.43217198988971,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 1 , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null || searchStr.length( ) ==0) ;",
            "score": 99.42806203741776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null || search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , null.toUpperCase( ) ) ;",
            "score": 99.45051655016448,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , null . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( name == null || searchStr == null ) { return false ;",
            "score": 99.37847541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( name == null || search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String str , searchStr.toUpperCase( ) ) ;",
            "score": 99.49246651785714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.48797052556819,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) false ;",
            "score": 99.4315673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toArray( ) , searchStr ) ;",
            "score": 99.3782958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Array ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).startsWith( str ) ) ;",
            "score": 99.4872814360119,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).equals( str ) ;",
            "score": 99.47181640625,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . equals ( str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( ', ') ) ;",
            "score": 99.45029703776042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( 'ABCDEF') ) ;",
            "score": 99.45029703776042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( 'cde') ) ;",
            "score": 99.45029703776042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( 'def') ) ;",
            "score": 99.45029703776042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( 'abcdef') ) ;",
            "score": 99.45029703776042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.size( ) ) ) ;",
            "score": 99.44171697443181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . size ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String [ ] { str } , searchStr ) ;",
            "score": 99.37797995174633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str } , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? TRUE : false ;",
            "score": 99.51369310461956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? TRUE : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( [0] , searchStr.toUpperCase( ) ) ;",
            "score": 99.508544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( [ 0 ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null && searchStr.toUpperCase( ) == false ) ;",
            "score": 99.49188787286931,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).toLowerCase( ) ) ;",
            "score": 99.44991262335526,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , return false ) ;",
            "score": 99.43137613932292,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , return false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , searchStr ) ;",
            "score": 99.37781479779412,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : contains ;",
            "score": 99.5134914232337,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == true.toUpperCase( ) ;",
            "score": 99.490966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == true . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str ,0, str.length( ) ) == -1;",
            "score": 99.44986572265626,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , 0 , str . length ( ) ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).charAt(0) == ', ';",
            "score": 99.43954865828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).charAt(0) == 'ABCDEF';",
            "score": 99.43954865828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).charAt(0) == 'cde';",
            "score": 99.43954865828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).charAt(0) == 'def';",
            "score": 99.43954865828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).charAt(0) == 'abcdef';",
            "score": 99.43954865828805,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , null , false ) ;",
            "score": 99.42496744791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , null , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) ) ;",
            "score": 99.37765737680289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr",
            "score": 99.51309024586396,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( str.toUpperCase( ).toUpperCase( ) ) ==0;",
            "score": 99.507802734375,
            "correctness": "wrong",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.trim( ) ) != -1;",
            "score": 99.48632202148437,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . trim ( ) ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( null , str.toUpperCase( ) ) ;",
            "score": 99.4307861328125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( null , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , null , true ) ;",
            "score": 99.42475328947368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , null , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , ', ') ;",
            "score": 99.37762858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , 'ABCDEF') ;",
            "score": 99.37762858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , 'cde') ;",
            "score": 99.37762858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , 'def') ;",
            "score": 99.37762858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , 'abcdef') ;",
            "score": 99.37762858072917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.50761333264802,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( get( str ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.490478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( get ( str ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( ', ') != -1;",
            "score": 99.44860076904297,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'ABCDEF') != -1;",
            "score": 99.44860076904297,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'cde') != -1;",
            "score": 99.44860076904297,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'def') != -1;",
            "score": 99.44860076904297,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'abcdef') != -1;",
            "score": 99.44860076904297,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equalsIgnoreCase( str ) ;",
            "score": 99.43899668817934,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , false ) ; }",
            "score": 99.43020968967014,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , false ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( name ) ) ;",
            "score": 99.37700737847223,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( name ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return false ; } else { return false ;",
            "score": 99.47091542119566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.length( ) >0&& searchStr.length( ) >0;",
            "score": 99.43876509232955,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . length ( ) > 0 && search CaMeL Str . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains(( String ) searchStr.toUpperCase( ) ) ;",
            "score": 99.429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ( String ) search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( name , searchStr ,0) ;",
            "score": 99.37698184742646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( name , search CaMeL Str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? true : ;",
            "score": 99.51111949573864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? true : ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toLowerCase( ).startsWith( ', ') ) ;",
            "score": 99.48572887073864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toLowerCase( ).startsWith( 'ABCDEF') ) ;",
            "score": 99.48572887073864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toLowerCase( ).startsWith( 'cde') ) ;",
            "score": 99.48572887073864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toLowerCase( ).startsWith( 'def') ) ;",
            "score": 99.48572887073864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toLowerCase( ).startsWith( 'abcdef') ) ;",
            "score": 99.48572887073864,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "contains( str , searchStr.toUpperCase( ) ) ; return true ;",
            "score": 99.47081938244048,
            "correctness": "wrong",
            "tokenized_patch": "contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "try { contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.4298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , searchStr == null ;",
            "score": 99.42218017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.trim( ) ) ;",
            "score": 99.37666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null && searchStr.toUpperCase( ) == null ) ;",
            "score": 99.48996803977273,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', '+ str.toUpperCase( ) + ', ') ;",
            "score": 99.42960397820724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'+ str.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.42960397820724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'+ str.toUpperCase( ) + 'cde') ;",
            "score": 99.42960397820724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'+ str.toUpperCase( ) + 'def') ;",
            "score": 99.42960397820724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'+ str.toUpperCase( ) + 'abcdef') ;",
            "score": 99.42960397820724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ + str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ,0) ;",
            "score": 99.42069185697116,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.getName( ) ) ;",
            "score": 99.37620634191177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false : contains ;",
            "score": 99.50987177309783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.toUpperCase( ) ) ;",
            "score": 99.48477935791016,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( matches( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.4379650297619,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! contains( str.toUpperCase( ) ) ) {",
            "score": 99.42920600043402,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr , false ) ;",
            "score": 99.48443312872024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( )1) ) ;",
            "score": 99.46958856997283,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr ) ;",
            "score": 99.42793412642045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr ) ;",
            "score": 99.42793412642045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr ) ;",
            "score": 99.42793412642045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr ) ;",
            "score": 99.42793412642045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr ) ;",
            "score": 99.42793412642045,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return true ;",
            "score": 99.37560317095588,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return valueOf( searchStr , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.5066015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return value CaMeL Of ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.length( ) <= searchStr.length( ) ) ;",
            "score": 99.484423828125,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . length ( ) <= search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.trim( ).startsWith( ', ') ;",
            "score": 99.44530531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).startsWith( 'ABCDEF') ;",
            "score": 99.44530531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).startsWith( 'cde') ;",
            "score": 99.44530531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).startsWith( 'def') ;",
            "score": 99.44530531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).startsWith( 'abcdef') ;",
            "score": 99.44530531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , matches.toUpperCase( ) , searchStr ) ;",
            "score": 99.43729073660714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , matches . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) , ', ') ;",
            "score": 99.42789499383224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) , 'ABCDEF') ;",
            "score": 99.42789499383224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) , 'cde') ;",
            "score": 99.42789499383224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) , 'def') ;",
            "score": 99.42789499383224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) , 'abcdef') ;",
            "score": 99.42789499383224,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( str ) ) { return false ;",
            "score": 99.37496948242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).toUpperCase( ) != null ;",
            "score": 99.5062967936198,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) != null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,( String ) str.toUpperCase( ) ) ;",
            "score": 99.48740844726562,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , ( String ) str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , toUpperCase( str.toString( ) ) ) ;",
            "score": 99.43698952414773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str . to CaMeL String ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) ) ;",
            "score": 99.4270263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ,0) ;",
            "score": 99.41893813189338,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.indexOf( searchStr ) ) ;",
            "score": 99.37485080295139,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.50612474524456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring(0, ) ) ;",
            "score": 99.4683984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( 0 , ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', '+ searchStr.length( ) ) ;",
            "score": 99.4451042624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'+ searchStr.length( ) ) ;",
            "score": 99.4451042624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'+ searchStr.length( ) ) ;",
            "score": 99.4451042624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'+ searchStr.length( ) ) ;",
            "score": 99.4451042624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'+ searchStr.length( ) ) ;",
            "score": 99.4451042624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , null ) ;",
            "score": 99.41750201056985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return searchStr == null ;",
            "score": 99.37482048483456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr.toUpperCase( ) true ) ;",
            "score": 99.50818980823864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , toLowerCase( ) ) ;",
            "score": 99.44472784745066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ] , searchStr.toUpperCase( ) ) ;",
            "score": 99.426025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ] , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null && searchStr == null ;",
            "score": 99.37450299944196,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null && search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).value ;",
            "score": 99.50799851190476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) . value ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return valueOf( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.50570015285327,
            "correctness": "uncompilable",
            "tokenized_patch": "return value CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( searchStr ) >= -1) ;",
            "score": 99.48342895507812,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) >= - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).substring( ).length( ) ==0) ;",
            "score": 99.46759033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . substring ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains contains( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.44443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str., searchStr.toUpperCase( ) ) ;",
            "score": 99.425048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name.toString( ) , searchStr ) ;",
            "score": 99.37384392233456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL String ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.505654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) !=0;",
            "score": 99.486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return startsWith( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.48332868303571,
            "correctness": "wrong",
            "tokenized_patch": "return starts CaMeL With ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.lastIndexOf( ', ') , searchStr ) ;",
            "score": 99.444384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'ABCDEF') , searchStr ) ;",
            "score": 99.444384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'cde') , searchStr ) ;",
            "score": 99.444384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'def') , searchStr ) ;",
            "score": 99.444384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'abcdef') , searchStr ) ;",
            "score": 99.444384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str , str.toUpperCase( ) ) ;",
            "score": 99.43545692845395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr + true ) ;",
            "score": 99.50770786830357,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + true ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).toUpperCase( ) !=0) ;",
            "score": 99.50533040364583,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) != 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + ', ', searchStr ) ;",
            "score": 99.48625837053571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'ABCDEF', searchStr ) ;",
            "score": 99.48625837053571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'cde', searchStr ) ;",
            "score": 99.48625837053571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'def', searchStr ) ;",
            "score": 99.48625837053571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'abcdef', searchStr ) ;",
            "score": 99.48625837053571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).startsWith( searchStr ) ;",
            "score": 99.48254975818452,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) + ', ') ;",
            "score": 99.42347476356908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) + 'ABCDEF') ;",
            "score": 99.42347476356908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) + 'cde') ;",
            "score": 99.42347476356908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) + 'def') ;",
            "score": 99.42347476356908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) + 'abcdef') ;",
            "score": 99.42347476356908,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr ).toUpperCase( ).trim( ) ;",
            "score": 99.5053125,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.trim( ).length( ) ==0) ;",
            "score": 99.48244900173611,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . trim ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toLowerCase( ).endsWith( ', ') ;",
            "score": 99.44321803042763,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).endsWith( 'ABCDEF') ;",
            "score": 99.44321803042763,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).endsWith( 'cde') ;",
            "score": 99.44321803042763,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).endsWith( 'def') ;",
            "score": 99.44321803042763,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).endsWith( 'abcdef') ;",
            "score": 99.44321803042763,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( str ).toUpperCase( ) ) ;",
            "score": 99.43511352539062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( str ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , containsIgnoreCase ) ;",
            "score": 99.37219956341912,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , contains CaMeL Ignore CaMeL Case ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) || contains( str.toUpperCase( ) ) ;",
            "score": 99.48202514648438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) || contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( -1, str.toUpperCase( ) ) ;",
            "score": 99.42244466145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( - 1 , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) , searchStr.trim( ) ) ;",
            "score": 99.41524465460526,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return valueOf( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.5050738790761,
            "correctness": "uncompilable",
            "tokenized_patch": "return value CaMeL Of ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String( str.toUpperCase( ) ) ) ;",
            "score": 99.48503766741071,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , new String ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , null ) ;",
            "score": 99.44215303308823,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str.toLowerCase( ) ) ;",
            "score": 99.42079072840073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toLowerCase( ) ) ;",
            "score": 99.42079072840073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toLowerCase( ) ) ;",
            "score": 99.42079072840073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toLowerCase( ) ) ;",
            "score": 99.42079072840073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toLowerCase( ) ) ;",
            "score": 99.42079072840073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.charValue( ) , false ) ;",
            "score": 99.41488486842105,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL Value ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str , searchStr.toUpperCase( ) ).trim( ) ;",
            "score": 99.505068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = contains( str , searchStr.toUpperCase( ) ) ; return true ;",
            "score": 99.4650242017663,
            "correctness": "uncompilable",
            "tokenized_patch": "result = contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toLowerCase( ) ) ;",
            "score": 99.4205258018092,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.4140689247533,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return ) return false ;",
            "score": 99.37172037760416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return ) return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) +0;",
            "score": 99.48424711681548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) + 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).endsWith( str ) ) ;",
            "score": 99.48106166294643,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( ).toLowerCase( ) ) ;",
            "score": 99.44192023026316,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( searchStr.length( ) ) ) ;",
            "score": 99.43427068536931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toUpperCase( searchStr ) , searchStr ) ;",
            "score": 99.42044677734376,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str ).toUpperCase( ).toUpperCase( ) ;",
            "score": 99.50472359035327,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str ) . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) !=0;",
            "score": 99.48417154947917,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length ) ;",
            "score": 99.48044002757354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( ) ) ;",
            "score": 99.43409830729166,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) , ) ;",
            "score": 99.420263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) ) ;",
            "score": 99.37070599724265,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) && false ;",
            "score": 99.50603376116071,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) && false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != true ;",
            "score": 99.50440514605978,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) <= searchStr.length( ) ) ;",
            "score": 99.48005506727431,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . length ( ) <= search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toLowerCase( ) ,0) ;",
            "score": 99.44135598575367,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.startsWith( str.toUpperCase( ) ) ;",
            "score": 99.43402420847039,
            "correctness": "wrong",
            "tokenized_patch": "return str . starts CaMeL With ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).equals( ', ') ;",
            "score": 99.37042595358456,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'ABCDEF') ;",
            "score": 99.37042595358456,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'cde') ;",
            "score": 99.37042595358456,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'def') ;",
            "score": 99.37042595358456,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).equals( 'abcdef') ;",
            "score": 99.37042595358456,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).booleanValue( ) ;",
            "score": 99.50476655505952,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.5043057528409,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return true ; } return false ;",
            "score": 99.47964477539062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return true ; } return false ;",
            "score": 99.47964477539062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return true ; } return false ;",
            "score": 99.47964477539062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return true ; } return false ;",
            "score": 99.47964477539062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return true ; } return false ;",
            "score": 99.47964477539062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , str.length( ) ) ;",
            "score": 99.46379743303571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( ', ', ', ') , true ) ;",
            "score": 99.44127197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'ABCDEF', 'ABCDEF') , true ) ;",
            "score": 99.44127197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'cde', 'cde') , true ) ;",
            "score": 99.44127197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'def', 'def') , true ) ;",
            "score": 99.44127197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.replace( 'abcdef', 'abcdef') , true ) ;",
            "score": 99.44127197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . replace ( $STRING$ , $STRING$ ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( out , searchStr.toUpperCase( ) ) ;",
            "score": 99.4196841591283,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( out , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,( String ) searchStr ) ;",
            "score": 99.41126166449652,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , ( String ) search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) == true ;",
            "score": 99.50399925595238,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) == true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ).contains( searchStr ) ) ;",
            "score": 99.48374720982143,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return false ; } return true ;",
            "score": 99.47943115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return false ; } return true ;",
            "score": 99.47943115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return false ; } return true ;",
            "score": 99.47943115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return false ; } return true ;",
            "score": 99.47943115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return false ; } return true ;",
            "score": 99.47943115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return false ; } return false ;",
            "score": 99.46373401988636,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.equals( str.toLowerCase( ) ) ;",
            "score": 99.4411556846217,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . equals ( str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , matches( searchStr ) ) ;",
            "score": 99.43369362571023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , matches ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) {",
            "score": 99.41802215576172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ;",
            "score": 99.40907796223958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toInteger( ) , searchStr ) ;",
            "score": 99.37011000689338,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Integer ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ).toUpperCase( ) ) == null ;",
            "score": 99.5037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null ? false : searchStr.toUpperCase( ) ;",
            "score": 99.48345392400569,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str == null ? false : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ).trim( ) ) ;",
            "score": 99.44032046669408,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.equals( searchStr ) ) ;",
            "score": 99.43364868164062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) >0) {",
            "score": 99.41755981445313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) > 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.40903834292763,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == false ) { return true ;",
            "score": 99.48312859786184,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == false ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == ', ';",
            "score": 99.41688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == 'ABCDEF';",
            "score": 99.41688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == 'cde';",
            "score": 99.41688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == 'def';",
            "score": 99.41688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == 'abcdef';",
            "score": 99.41688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? searchStr",
            "score": 99.50297407670455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( searchStr ) != -1;",
            "score": 99.47909206814236,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( search CaMeL Str ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.length( ) == searchStr.length( ) ) ;",
            "score": 99.44002278645833,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . length ( ) == search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).equalsIgnoreCase( str ) ;",
            "score": 99.43326822916667,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , false ) ;",
            "score": 99.40788438585069,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( searchStr ) > -1) ;",
            "score": 99.47890625,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) > - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str return searchStr.toUpperCase( ) ) ;",
            "score": 99.43313759251645,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.toUpperCase( ) ,",
            "score": 99.416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.40769556949013,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( containsIgnoreCase( searchStr ) ) { return false ;",
            "score": 99.36852349175348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ? true : true ;",
            "score": 99.50274979440789,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ? true : true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains.toUpperCase( ).toUpperCase( ).trim( ) ;",
            "score": 99.5025634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , searchStr , true ) ;",
            "score": 99.47882952008929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, str.length( ) ) ) ;",
            "score": 99.43983289930556,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr , searchStr ) ) ;",
            "score": 99.43302408854167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ', ') ; }",
            "score": 99.41599527994792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'ABCDEF') ; }",
            "score": 99.41599527994792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'cde') ; }",
            "score": 99.41599527994792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'def') ; }",
            "score": 99.41599527994792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , 'abcdef') ; }",
            "score": 99.41599527994792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $STRING$ ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null ? false : contains( str , searchStr ) ;",
            "score": 99.40753495065789,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null ? false : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null ) { return containsIgnoreCase( str ) ;",
            "score": 99.36843532986111,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) *2;",
            "score": 99.50215076264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) * $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) *4;",
            "score": 99.50215076264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) * $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) *3;",
            "score": 99.50215076264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) * $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) *8;",
            "score": 99.50215076264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) * $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) *7;",
            "score": 99.50215076264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) * $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null ) { return true ; } }",
            "score": 99.48258463541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return true ; } }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.length( ) -1) ;",
            "score": 99.47803896949405,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).trim( ).trim( ) ;",
            "score": 99.43259499289773,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) ,",
            "score": 99.41542053222656,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) ,",
            "score": 99.41542053222656,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) ,",
            "score": 99.41542053222656,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) ,",
            "score": 99.41542053222656,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) ,",
            "score": 99.41542053222656,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,0, true ) ;",
            "score": 99.40727153577302,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , 0 , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( str ) ) { return false ;",
            "score": 99.36836242675781,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) : contains( str , searchStr ) ;",
            "score": 99.50198974609376,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.append( searchStr ) ) ;",
            "score": 99.5016377766927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . append ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == null || searchStr != null ) ;",
            "score": 99.48247736150569,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == null || search CaMeL Str != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ; } else { return false ;",
            "score": 99.46042798913044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) ) ;",
            "score": 99.438232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '.toUpperCase( ) , false ) ;",
            "score": 99.4072329872533,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'.toUpperCase( ) , false ) ;",
            "score": 99.4072329872533,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'.toUpperCase( ) , false ) ;",
            "score": 99.4072329872533,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'.toUpperCase( ) , false ) ;",
            "score": 99.4072329872533,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'.toUpperCase( ) , false ) ;",
            "score": 99.4072329872533,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , charCount , searchStr.toUpperCase( ) ) ;",
            "score": 99.50154976222827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char CaMeL Count , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) ) , searchStr ) ;",
            "score": 99.43795776367188,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).length( ) >=0;",
            "score": 99.43232421875,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . length ( ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toLowerCase( ) ,",
            "score": 99.41515435112848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( ', ') || searchStr == null ) ;",
            "score": 99.36732313368056,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( $STRING$ ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( 'ABCDEF') || searchStr == null ) ;",
            "score": 99.36732313368056,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( $STRING$ ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( 'cde') || searchStr == null ) ;",
            "score": 99.36732313368056,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( $STRING$ ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( 'def') || searchStr == null ) ;",
            "score": 99.36732313368056,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( $STRING$ ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( 'abcdef') || searchStr == null ) ;",
            "score": 99.36732313368056,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( $STRING$ ) || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( str.toUpperCase( ).toUpperCase( ) ) != null ;",
            "score": 99.501279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) [0] ;",
            "score": 99.4809237393466,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) [ 0 ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str , searchStr.trim( ) ) ;",
            "score": 99.47673483455883,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return true ; } else { return false ;",
            "score": 99.45951511548913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , length( ).toUpperCase( ) ) ;",
            "score": 99.43222527754934,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , length ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toUpperCase( ', ') ) ;",
            "score": 99.413916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toUpperCase( 'ABCDEF') ) ;",
            "score": 99.413916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toUpperCase( 'cde') ) ;",
            "score": 99.413916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toUpperCase( 'def') ) ;",
            "score": 99.413916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toUpperCase( 'abcdef') ) ;",
            "score": 99.413916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.class ) ;",
            "score": 99.36725212545956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) ? false : ;",
            "score": 99.50145374644886,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ? false : ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( return contains( str , searchStr.toUpperCase( ) ) ) ;",
            "score": 99.50099779211956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( contains( str ).booleanValue( ) ) ;",
            "score": 99.4373779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( contains ( str ) . boolean CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) || searchStr.length( ) >0;",
            "score": 99.43196614583333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) || search CaMeL Str . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || searchStr.toUpperCase( )",
            "score": 99.41314086914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , null , null ) ;",
            "score": 99.40504857113487,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , null , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name ) ;",
            "score": 99.36715932992789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && contains( str.toLowerCase( ) ) ;",
            "score": 99.43656005859376,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && contains ( str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).trim( ) ;",
            "score": 99.4319580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '|| str.toUpperCase( ) ) ;",
            "score": 99.41284897748162,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'|| str.toUpperCase( ) ) ;",
            "score": 99.41284897748162,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'|| str.toUpperCase( ) ) ;",
            "score": 99.41284897748162,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'|| str.toUpperCase( ) ) ;",
            "score": 99.41284897748162,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'|| str.toUpperCase( ) ) ;",
            "score": 99.41284897748162,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ || str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.getLength( ) ) ;",
            "score": 99.40469180836396,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . get CaMeL Length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.47993607954545,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == ', ') ;",
            "score": 99.4749984741211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'ABCDEF') ;",
            "score": 99.4749984741211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'cde') ;",
            "score": 99.4749984741211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'def') ;",
            "score": 99.4749984741211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) == 'abcdef') ;",
            "score": 99.4749984741211,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , str.toUpperCase( ) ) ) ;",
            "score": 99.43162231445312,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , searchStr.size( ) ) ;",
            "score": 99.40433542351974,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', ') ;",
            "score": 99.36685519748264,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF') ;",
            "score": 99.36685519748264,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde') ;",
            "score": 99.36685519748264,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def') ;",
            "score": 99.36685519748264,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef') ;",
            "score": 99.36685519748264,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( ) == str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.50020345052083,
            "correctness": "uncompilable",
            "tokenized_patch": "return length ( ) == str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return true ; } return true ;",
            "score": 99.47469482421874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return true ; } return true ;",
            "score": 99.47469482421874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return true ; } return true ;",
            "score": 99.47469482421874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return true ; } return true ;",
            "score": 99.47469482421874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return true ; } return true ;",
            "score": 99.47469482421874,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return false ; } return false ;",
            "score": 99.43585526315789,
            "correctness": "wrong",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ).length( ) ==0) {",
            "score": 99.41261596679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equals( searchStr ) , searchStr ) ;",
            "score": 99.40412055121527,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return contains( str ) ;",
            "score": 99.4580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ).trim( ) ) ;",
            "score": 99.43553873697917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.equals( searchStr ) ) ;",
            "score": 99.430908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return ) ;",
            "score": 99.36652688419117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || str.toUpperCase( ) == false ) ;",
            "score": 99.47919311523438,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( ).length( ) ) ;",
            "score": 99.43523848684211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', ! str.toUpperCase( ) ) ;",
            "score": 99.41105143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', ! str.toUpperCase( ) ) ;",
            "score": 99.41105143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', ! str.toUpperCase( ) ) ;",
            "score": 99.41105143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', ! str.toUpperCase( ) ) ;",
            "score": 99.41105143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', ! str.toUpperCase( ) ) ;",
            "score": 99.41105143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , ! str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( ', ') , searchStr ) ;",
            "score": 99.4018783569336,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'ABCDEF') , searchStr ) ;",
            "score": 99.4018783569336,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'cde') , searchStr ) ;",
            "score": 99.4018783569336,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'def') , searchStr ) ;",
            "score": 99.4018783569336,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( 'abcdef') , searchStr ) ;",
            "score": 99.4018783569336,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.name ) ;",
            "score": 99.36574419806985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ).containsIgnoreCase( ) ;",
            "score": 99.47881525213069,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) . contains CaMeL Ignore CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains contains( str.toLowerCase( ) , searchStr ) ;",
            "score": 99.43423461914062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str . to CaMeL Lower CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( ! contains( str.toUpperCase( ) ) ) ;",
            "score": 99.41090223524306,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ! contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) ==0) { return true ;",
            "score": 99.47816868832237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == 0 ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str.toUpperCase( ) ) ) ;",
            "score": 99.47260974702381,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.substring(0, searchStr.length( ) ) != null ) ;",
            "score": 99.42945498511905,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . substring ( 0 , search CaMeL Str . length ( ) ) != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "try { return contains( str , searchStr.toUpperCase( ) ,",
            "score": 99.41087036132812,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , searchStr ;",
            "score": 99.40049235026042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null && searchStr.trim( ) == null ;",
            "score": 99.3653564453125,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null && search CaMeL Str . trim ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) : contains ;",
            "score": 99.49724469866071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ).charAt(0) ) ;",
            "score": 99.43306477864583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = searchStr.toUpperCase( ).trim( ) ;",
            "score": 99.429296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , true ) ;",
            "score": 99.41049429086539,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return false ;",
            "score": 99.40046243106617,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.trim( ) == null ) { return true ;",
            "score": 99.36529134114583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , charValue( searchStr ) ) ;",
            "score": 99.498291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , char CaMeL Value ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ? false : searchStr.toUpperCase( ) ;",
            "score": 99.47755737304688,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? false : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return endsWith( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.47169131324405,
            "correctness": "wrong",
            "tokenized_patch": "return ends CaMeL With ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str == null && searchStr.toUpperCase( ) == null ;",
            "score": 99.41038208007812,
            "correctness": "wrong",
            "tokenized_patch": "return str == null && search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) ,1) ;",
            "score": 99.4003970497533,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( str , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.497890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( Character.isDigit( str.charAt(0) ) ) ;",
            "score": 99.471630859375,
            "correctness": "wrong",
            "tokenized_patch": "return ( Character . is CaMeL Digit ( str . char CaMeL At ( 0 ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , Boolean.TRUE.toUpperCase( ) ) ;",
            "score": 99.42986096833882,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Boolean . TRUE . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str.toUpperCase( ) ) ,",
            "score": 99.41014268663194,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str . to CaMeL Upper CaMeL Case ( ) ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, searchStr",
            "score": 99.39793485753677,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , name ) ;",
            "score": 99.36381261488971,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.49732506793478,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.equals( searchStr.toLowerCase( ) ) ) ;",
            "score": 99.47151692708333,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . equals ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false : null ;",
            "score": 99.4570949388587,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false : null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( ', ') ;",
            "score": 99.42892295435855,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( 'ABCDEF') ;",
            "score": 99.42892295435855,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( 'cde') ;",
            "score": 99.42892295435855,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( 'def') ;",
            "score": 99.42892295435855,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).equals( 'abcdef') ;",
            "score": 99.42892295435855,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ) , true ) ;",
            "score": 99.42701480263158,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.toCaMeL",
            "score": 99.40955810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . to CaMeL",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || str == null ) { return false ;",
            "score": 99.36349666819854,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.trim( ).toUpperCase( ) ) ;",
            "score": 99.49726795014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . trim ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( ! contains( str.toUpperCase( ) , searchStr ) ) ;",
            "score": 99.42863325639205,
            "correctness": "wrong",
            "tokenized_patch": "return ( ! contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).charAt(0) ) ;",
            "score": 99.42618136935764,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', toUpperCase( searchStr ) ) ;",
            "score": 99.40943060980902,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', toUpperCase( searchStr ) ) ;",
            "score": 99.40943060980902,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', toUpperCase( searchStr ) ) ;",
            "score": 99.40943060980902,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', toUpperCase( searchStr ) ) ;",
            "score": 99.40943060980902,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', toUpperCase( searchStr ) ) ;",
            "score": 99.40943060980902,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , ) ;",
            "score": 99.3966064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ) ;",
            "score": 99.36317661830357,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) : false ;",
            "score": 99.49554734002976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return true ; } return false ;",
            "score": 99.47119140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( ', ') , searchStr ) ;",
            "score": 99.42859996448864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'ABCDEF') , searchStr ) ;",
            "score": 99.42859996448864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'cde') , searchStr ) ;",
            "score": 99.42859996448864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'def') , searchStr ) ;",
            "score": 99.42859996448864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( 'abcdef') , searchStr ) ;",
            "score": 99.42859996448864,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == ) ;",
            "score": 99.40914306640624,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str , searchStr ) ; }",
            "score": 99.39619954427083,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) ==1) { return false ;",
            "score": 99.36233340992646,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 1 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') == -1) ;",
            "score": 99.47114562988281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') == -1) ;",
            "score": 99.47114562988281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') == -1) ;",
            "score": 99.47114562988281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') == -1) ;",
            "score": 99.47114562988281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') == -1) ;",
            "score": 99.47114562988281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.equals( searchStr ) ) { return false ; } return true ;",
            "score": 99.45576808763587,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( search CaMeL Str ) ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.length( ) !=0) ;",
            "score": 99.39585966222427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) != 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return false ;",
            "score": 99.36149088541667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! searchStr.contains( str.toUpperCase( ) ) ;",
            "score": 99.4704345703125,
            "correctness": "wrong",
            "tokenized_patch": "return ! search CaMeL Str . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.length ) ;",
            "score": 99.42332548253677,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ).toUpperCase( ) ;",
            "score": 99.39579264322917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr , ', ') ;",
            "score": 99.36084702435662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr , 'ABCDEF') ;",
            "score": 99.36084702435662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr , 'cde') ;",
            "score": 99.36084702435662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr , 'def') ;",
            "score": 99.36084702435662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr , 'abcdef') ;",
            "score": 99.36084702435662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.49643342391305,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr + false ) ;",
            "score": 99.49376860119048,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + false ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toLowerCase( ).endsWith( ', ') ) ;",
            "score": 99.46906389508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).endsWith( 'ABCDEF') ) ;",
            "score": 99.46906389508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).endsWith( 'cde') ) ;",
            "score": 99.46906389508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).endsWith( 'def') ) ;",
            "score": 99.46906389508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toLowerCase( ).endsWith( 'abcdef') ) ;",
            "score": 99.46906389508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Lower CaMeL Case ( ) . ends CaMeL With ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str( str.toUpperCase( ) ) , searchStr ) ;",
            "score": 99.4265469637784,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ( str . to CaMeL Upper CaMeL Case ( ) ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.size( ) false ) ;",
            "score": 99.39520263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , value ) ;",
            "score": 99.36030847886029,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( length( ) , searchStr.toUpperCase( ) ) ;",
            "score": 99.49622163318452,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( length ( ) , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr != null && searchStr.length( ) >0) ;",
            "score": 99.46854858398437,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str != null && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return name.toUpperCase( ).startsWith( ', ') ;",
            "score": 99.42312782689145,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.toUpperCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.42312782689145,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.toUpperCase( ).startsWith( 'cde') ;",
            "score": 99.42312782689145,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.toUpperCase( ).startsWith( 'def') ;",
            "score": 99.42312782689145,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.toUpperCase( ).startsWith( 'abcdef') ;",
            "score": 99.42312782689145,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr == null || searchStr == null )",
            "score": 99.40646201685855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null || search CaMeL Str == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ).equals( ', ') ) { return false ;",
            "score": 99.36014133029514,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ).equals( 'ABCDEF') ) { return false ;",
            "score": 99.36014133029514,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ).equals( 'cde') ) { return false ;",
            "score": 99.36014133029514,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ).equals( 'def') ) { return false ;",
            "score": 99.36014133029514,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.trim( ).equals( 'abcdef') ) { return false ;",
            "score": 99.36014133029514,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . trim ( ) . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.49621051290761,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) ==1;",
            "score": 99.47467719184027,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 1 ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.substring(0, searchStr.length( ) ) == null ;",
            "score": 99.4260486421131,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . substring ( 0 , search CaMeL Str . length ( ) ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( searchStr ,0, searchStr.length( ) ) ;",
            "score": 99.42231830797698,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ; }",
            "score": 99.40613555908203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.matches( searchStr ) ) ;",
            "score": 99.495849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . matches ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str , str.toUpperCase( ) ) ) ;",
            "score": 99.474609375,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return equals( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.46828099300987,
            "correctness": "uncompilable",
            "tokenized_patch": "return equals ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.equals( str.toUpperCase( ) ) ) ;",
            "score": 99.4540682705966,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) < searchStr.length( ) ) ;",
            "score": 99.42060682508681,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . length ( ) < search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).}",
            "score": 99.40556255139802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return new String( str.toUpperCase( ) ) == null ;",
            "score": 99.35860866970486,
            "correctness": "wrong",
            "tokenized_patch": "return new String ( str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , false.toUpperCase( ) ) ;",
            "score": 99.42002958409927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ).toString( ) ;",
            "score": 99.3917236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) . to CaMeL String ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Integer == null || searchStr == null ) ;",
            "score": 99.3585205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Integer == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ).length( ) ;",
            "score": 99.49573771158855,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . length ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) && true ;",
            "score": 99.48987397693452,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) && true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else {  return( str.toUpperCase( ).length( ) ==0) ; }",
            "score": 99.45347528872283,
            "correctness": "wrong",
            "tokenized_patch": "else { return ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , -1) ;",
            "score": 99.39118109809027,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) *0;",
            "score": 99.48954845610119,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) * 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).length( ) ==0) ;",
            "score": 99.45329938616071,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,0, searchStr.length( ) -1) ;",
            "score": 99.41978695518092,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1) ) ;",
            "score": 99.39115905761719,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', searchStr , searchStr ) ;",
            "score": 99.357958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr , searchStr ) ;",
            "score": 99.357958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr , searchStr ) ;",
            "score": 99.357958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr , searchStr ) ;",
            "score": 99.357958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr , searchStr ) ;",
            "score": 99.357958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,0, searchStr.length( ) false ) ;",
            "score": 99.48923561789773,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 0 , search CaMeL Str . length ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).length( ) ==0;",
            "score": 99.41921997070312,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null || searchStr.length( ) ==0)",
            "score": 99.40297980057566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str . length ( ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(1, searchStr ;",
            "score": 99.39069281684027,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 1 , search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return length( str.toUpperCase( ).toUpperCase( ) ) !=0;",
            "score": 99.494892578125,
            "correctness": "wrong",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( ) +",
            "score": 99.48912464488636,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) +",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replaceAll( ', ', ', ') ) ;",
            "score": 99.46597900390626,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replaceAll( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.46597900390626,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replaceAll( 'cde', 'cde') ) ;",
            "score": 99.46597900390626,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replaceAll( 'def', 'def') ) ;",
            "score": 99.46597900390626,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replaceAll( 'abcdef', 'abcdef') ) ;",
            "score": 99.46597900390626,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) {",
            "score": 99.42341694078948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( str ) > -1;",
            "score": 99.41918182373047,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( str ) > - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( true , str.toUpperCase( ) ) ;",
            "score": 99.40209242876838,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( true , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr ) ) { return false ; }",
            "score": 99.39030905330883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return str.toUpperCase( ) == searchStr ;",
            "score": 99.35758463541667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == - ] ;",
            "score": 99.4946797688802,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == - ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = str.toUpperCase( ).trim( ) ;",
            "score": 99.42264811197917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = str . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ) , searchStr.trim( ) ) ;",
            "score": 99.41787880345395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toUpperCase( ) , null ) ;",
            "score": 99.40191971628289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toUpperCase( ) , null ) ;",
            "score": 99.40191971628289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toUpperCase( ) , null ) ;",
            "score": 99.40191971628289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toUpperCase( ) , null ) ;",
            "score": 99.40191971628289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toUpperCase( ) , null ) ;",
            "score": 99.40191971628289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL Upper CaMeL Case ( ) , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new char [ ] { searchStr } ) ;",
            "score": 99.39017980238971,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new char [ ] { search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , false )",
            "score": 99.48807983398437,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).length( ) >0;",
            "score": 99.41777038574219,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , return true ) ;",
            "score": 99.40131971571181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , return true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( searchStr ) , searchStr ) ;",
            "score": 99.38838704427083,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . format ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return ) { return false ; }",
            "score": 99.35676843979779,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ).trim( ) ==0) ;",
            "score": 99.49411010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) + true ) ;",
            "score": 99.48802548363095,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) + true ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsAll( str , searchStr.length( ) ) ;",
            "score": 99.41768152573529,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( count , searchStr.toUpperCase( ) ) ;",
            "score": 99.40095600328948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( count , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str == null || searchStr == null ) ;",
            "score": 99.35565544577206,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str == null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return valueOf( str , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.49382218070652,
            "correctness": "uncompilable",
            "tokenized_patch": "return value CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , true )",
            "score": 99.48801879882812,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , true )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ).contains( searchStr.toUpperCase( ) ) ;",
            "score": 99.47195870535714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ) . contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( searchStr ) ) { return true ; } else { return false ;",
            "score": 99.4513651529948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( search CaMeL Str ) ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) false ;",
            "score": 99.4218417080966,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null || str.toUpperCase( ) ) ;",
            "score": 99.40031995271382,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null || str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( ) , searchStr ) ;",
            "score": 99.38748372395834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . format ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null ) ;",
            "score": 99.35529920789931,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return indexOf( searchStr , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.493720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,2) ;",
            "score": 99.48775809151786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,4) ;",
            "score": 99.48775809151786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,3) ;",
            "score": 99.48775809151786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,8) ;",
            "score": 99.48775809151786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,7) ;",
            "score": 99.48775809151786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr ).toUpperCase( ) ;",
            "score": 99.47087751116071,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + searchStr.length( ) ) ;",
            "score": 99.46298057154605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase(.toUpperCase( ) ) ) ;",
            "score": 99.45127802309783,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.42107599431819,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr ) ;",
            "score": 99.41678059895834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr ) ;",
            "score": 99.35512131911058,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.toUpperCase( )",
            "score": 99.48761858258929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) > searchStr.length( ) ) ;",
            "score": 99.46238878038194,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . length ( ) > search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str + toUpperCase( ) , searchStr ) ;",
            "score": 99.42083418996711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) == searchStr.length( ) ) ;",
            "score": 99.41661312705592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) == search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "contains( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.38459608289931,
            "correctness": "uncompilable",
            "tokenized_patch": "contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ) ;",
            "score": 99.35396575927734,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + null ;",
            "score": 99.48758370535714,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( str ) <= -1) ;",
            "score": 99.46223280164931,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) <= - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isWhitespace( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.45073009672619,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Whitespace ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).trim( ).trim( ) !=0;",
            "score": 99.49228737571023,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . trim ( ) . trim ( ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || str.toUpperCase( ) ==0) ;",
            "score": 99.469873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || str . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return false ; } return false ;",
            "score": 99.45064871651786,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.toUpperCase( ) == null ) {",
            "score": 99.39950222439236,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, false ) ) ;",
            "score": 99.38360595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , false ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) ) ;",
            "score": 99.35377412683823,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(0, searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.49165675951087,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( 0 , search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.substring( ;",
            "score": 99.46165829613095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . substring ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , Boolean.FALSE ) ;",
            "score": 99.39757015830592,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , Boolean . FALSE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , count ) ;",
            "score": 99.38259708180146,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , count ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr , null ) ;",
            "score": 99.35289091222427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr , null ) ;",
            "score": 99.35289091222427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr , null ) ;",
            "score": 99.35289091222427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr , null ) ;",
            "score": 99.35289091222427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr , null ) ;",
            "score": 99.35289091222427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.substring(0, searchStr.length( ) ) ) ;",
            "score": 99.49147727272727,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , ', ', true ) ;",
            "score": 99.48565995065789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'ABCDEF', true ) ;",
            "score": 99.48565995065789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'cde', true ) ;",
            "score": 99.48565995065789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'def', true ) ;",
            "score": 99.48565995065789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'abcdef', true ) ;",
            "score": 99.48565995065789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , toUpperCase( str ) ) ;",
            "score": 99.42023315429688,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , to CaMeL Upper CaMeL Case ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || str.toUpperCase( ) == null ;",
            "score": 99.39721001519098,
            "correctness": "wrong",
            "tokenized_patch": "return str == null || str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , ', ') ;",
            "score": 99.38181439568015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , 'ABCDEF') ;",
            "score": 99.38181439568015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , 'cde') ;",
            "score": 99.38181439568015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , 'def') ;",
            "score": 99.38181439568015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) , 'abcdef') ;",
            "score": 99.38181439568015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ) ==0) { return false ;",
            "score": 99.35034897748162,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! Character.isDigit( str.toUpperCase( ) ) ;",
            "score": 99.46112060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! Character . is CaMeL Digit ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ).",
            "score": 99.39650472005208,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.trim( ) == null ) { return ) ;",
            "score": 99.34978170955883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . trim ( ) == null ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return compare( str , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.49128069196429,
            "correctness": "uncompilable",
            "tokenized_patch": "return compare ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) : true ;",
            "score": 99.48477027529762,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) : true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.length( ) == searchStr.length( ) ) ;",
            "score": 99.45886840820313,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . length ( ) == search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str ,( String ) false ) ;",
            "score": 99.34893798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , ( String ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.toUpperCase( ).toUpperCase( ).trim( ) ;",
            "score": 99.49119059244792,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.searchStr ) ;",
            "score": 99.48467053865132,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( searchStr ) != -1) ;",
            "score": 99.45875950863487,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( search CaMeL Str ) != - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "contains( str , searchStr.toUpperCase( ) ) ; return false ;",
            "score": 99.44885835193452,
            "correctness": "wrong",
            "tokenized_patch": "contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.contains( str.toUpperCase( ) ) ) ;",
            "score": 99.41885536595395,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', ', '+ str.toUpperCase( ) ) ;",
            "score": 99.39532791940789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', 'ABCDEF'+ str.toUpperCase( ) ) ;",
            "score": 99.39532791940789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', 'cde'+ str.toUpperCase( ) ) ;",
            "score": 99.39532791940789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', 'def'+ str.toUpperCase( ) ) ;",
            "score": 99.39532791940789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', 'abcdef'+ str.toUpperCase( ) ) ;",
            "score": 99.39532791940789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toString( ) == null ) ;",
            "score": 99.34847586495536,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL String ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr [0] ) ;",
            "score": 99.48436821831598,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str [ 0 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( ', ', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.46797107514881,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( 'ABCDEF', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.46797107514881,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( 'cde', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.46797107514881,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( 'def', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.46797107514881,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( 'abcdef', searchStr.toUpperCase( ) ) ) ;",
            "score": 99.46797107514881,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( $STRING$ , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isUpperCase( str.toUpperCase( ) ) ;",
            "score": 99.41874614514802,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( ', ') ) ) ;",
            "score": 99.41440943667763,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'ABCDEF') ) ) ;",
            "score": 99.41440943667763,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'cde') ) ) ;",
            "score": 99.41440943667763,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'def') ) ) ;",
            "score": 99.41440943667763,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.indexOf( 'abcdef') ) ) ;",
            "score": 99.41440943667763,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . index CaMeL Of ( $STRING$ ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ; }",
            "score": 99.38097466362848,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toString( ) ) ;",
            "score": 99.3480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toString( ) ) ;",
            "score": 99.3480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toString( ) ) ;",
            "score": 99.3480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toString( ) ) ;",
            "score": 99.3480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toString( ) ) ;",
            "score": 99.3480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , value ) ;",
            "score": 99.48432849702381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + searchStr.toLowerCase( ) ) ;",
            "score": 99.41404965049342,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.toCharArray( ) ) ;",
            "score": 99.39298288445724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.toCharArray( ) ) ;",
            "score": 99.39298288445724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.toCharArray( ) ) ;",
            "score": 99.39298288445724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.toCharArray( ) ) ;",
            "score": 99.39298288445724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.toCharArray( ) ) ;",
            "score": 99.39298288445724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.getValue( ) , searchStr ) ;",
            "score": 99.3806511374081,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . get CaMeL Value ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , length ) ;",
            "score": 99.48430524553571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.substring(0, searchStr.length( ) ) ==0;",
            "score": 99.4179623252467,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . substring ( 0 , search CaMeL Str . length ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return super.containsIgnoreCase( str , searchStr ) ;",
            "score": 99.34763470818015,
            "correctness": "uncompilable",
            "tokenized_patch": "return super . contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.45793071546052,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).length( ) >=0) ;",
            "score": 99.41596069335938,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) >= 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,0.0) ;",
            "score": 99.41277754934211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , 0 . 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( str == null ) ||( searchStr == null ) ) {",
            "score": 99.39152696397569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( str == null ) || ( search CaMeL Str == null ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) == false ;",
            "score": 99.34706025965073,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) == false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.indexOf( searchStr ) <0) ;",
            "score": 99.4570248252467,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( search CaMeL Str ) < 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( chars , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.41480654761905,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0, count ) ) ;",
            "score": 99.41236707899306,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , count ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , }",
            "score": 99.3897769325658,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , length ) ;",
            "score": 99.37917911305146,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr || searchStr == null ) ;",
            "score": 99.34682329963235,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) || true ;",
            "score": 99.48186383928571,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) || true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ', ') -1) ;",
            "score": 99.4563232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'ABCDEF') -1) ;",
            "score": 99.4563232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'cde') -1) ;",
            "score": 99.4563232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'def') -1) ;",
            "score": 99.4563232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( 'abcdef') -1) ;",
            "score": 99.4563232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true.toUpperCase( ) ) ;",
            "score": 99.4122673483456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) + searchStr.toUpperCase( ) ;",
            "score": 99.38955849095395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) ,1) ;",
            "score": 99.37795840992646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.4893215013587,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr.toUpperCase( ) , searchStr )",
            "score": 99.48162841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ).contains( searchStr ) ;",
            "score": 99.46658761160714,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! contains( str , searchStr.trim( ) ) ;",
            "score": 99.45616149902344,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains = str.toUpperCase( ).equals( searchStr ) ;",
            "score": 99.41360909598214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = str . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str +1, searchStr.length( ) ) ;",
            "score": 99.41203756893383,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return switch( searchStr.toUpperCase( ) ) ;",
            "score": 99.38933967141544,
            "correctness": "uncompilable",
            "tokenized_patch": "return switch ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) ) == null ;",
            "score": 99.34616088867188,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.trim( ).substring(1) ) ;",
            "score": 99.4135498046875,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) . substring ( 1 ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return isEmpty( str.toUpperCase( ) , false ) ;",
            "score": 99.41200657894737,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str.toUpperCase( ) ) ) ;",
            "score": 99.38873650045956,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,0) ;",
            "score": 99.37668081430289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ) ) == null ;",
            "score": 99.34540872012867,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) == length( ) ;",
            "score": 99.48915608723958,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) == length ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.getId( ) ) ;",
            "score": 99.48055013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . get CaMeL Id ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') >=0) ;",
            "score": 99.4555305032169,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') >=0) ;",
            "score": 99.4555305032169,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') >=0) ;",
            "score": 99.4555305032169,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') >=0) ;",
            "score": 99.4555305032169,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') >=0) ;",
            "score": 99.4555305032169,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) >=0;",
            "score": 99.41318766276042,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , false.toUpperCase( ) , true ) ;",
            "score": 99.41094649465461,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , this ) ;",
            "score": 99.38826258042279,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , this ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String == null && searchStr == null ) ;",
            "score": 99.34534409466912,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String == null && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,0)",
            "score": 99.48031005859374,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) ==0) ;",
            "score": 99.46559143066406,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.length( ) > searchStr.length( ) ) ;",
            "score": 99.45502319335938,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . length ( ) > search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "else { return matches( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.44636674360795,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return read( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.3865966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return read ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toInteger( ) ) ;",
            "score": 99.37176154641544,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Integer ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null ) ? false : str.toUpperCase( ) ;",
            "score": 99.46551513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null ) ? false : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return Boolean.valueOf( value ).booleanValue( ) ;",
            "score": 99.45420927159927,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . value CaMeL Of ( value ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , Character.length( ) ) ;",
            "score": 99.44635881696429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , Character . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.length( ) ) <0;",
            "score": 99.41060598273026,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . length ( ) ) < 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = contains( str , str.toUpperCase( ) ) ;",
            "score": 99.4102783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toUpperCase( str.trim( ) ) ) ;",
            "score": 99.40963134765624,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Upper CaMeL Case ( str . trim ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return append( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.38511898643092,
            "correctness": "uncompilable",
            "tokenized_patch": "return append ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ) == null ) ;",
            "score": 99.34425264246323,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return false ; } return false ;",
            "score": 99.453173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return false ; } return false ;",
            "score": 99.453173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return false ; } return false ;",
            "score": 99.453173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return false ; } return false ;",
            "score": 99.453173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return false ; } return false ;",
            "score": 99.453173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.equals( searchStr ) ) { return false ; } return false ;",
            "score": 99.44618291440217,
            "correctness": "wrong",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( search CaMeL Str ) ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toString( ).trim( ) ) ;",
            "score": 99.41049373851104,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( str ) ) ;",
            "score": 99.40907046669408,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( containsIgnoreCase( str ) ) { return false ; }",
            "score": 99.36878877527573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str ) ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , ', ') ;",
            "score": 99.3439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , 'ABCDEF') ;",
            "score": 99.3439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , 'cde') ;",
            "score": 99.3439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , 'def') ;",
            "score": 99.3439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , 'abcdef') ;",
            "score": 99.3439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == ', ') { return false ;",
            "score": 99.46371941817434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'ABCDEF') { return false ;",
            "score": 99.46371941817434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'cde') { return false ;",
            "score": 99.46371941817434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'def') { return false ;",
            "score": 99.46371941817434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'abcdef') { return false ;",
            "score": 99.46371941817434,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return false ; } return true ;",
            "score": 99.44612426757813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return false ; } return true ;",
            "score": 99.44612426757813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return false ; } return true ;",
            "score": 99.44612426757813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return false ; } return true ;",
            "score": 99.44612426757813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return false ; } return true ;",
            "score": 99.44612426757813,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + searchStr.length( ) ) ;",
            "score": 99.409375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.toUpperCase( ) ,",
            "score": 99.38385687934027,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( str ) ) ;",
            "score": 99.34381103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.toUpperCase( ).startsWith( ', ') ;",
            "score": 99.451416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.toUpperCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.451416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.toUpperCase( ).startsWith( 'cde') ;",
            "score": 99.451416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.toUpperCase( ).startsWith( 'def') ;",
            "score": 99.451416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.toUpperCase( ).startsWith( 'abcdef') ;",
            "score": 99.451416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsAll( str.toUpperCase( ) , true ) ;",
            "score": 99.40923108552632,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , null ) ;",
            "score": 99.34154459635417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) && false ;",
            "score": 99.47742280505952,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) && false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str == null ? false : contains( str.toUpperCase( ) ) ;",
            "score": 99.4635997953869,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? false : contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr == null ;",
            "score": 99.34140014648438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.getLength( ) ) ;",
            "score": 99.47641136532738,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . get CaMeL Length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( str ) > -1) ;",
            "score": 99.44852701822917,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) > - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).equals( str ) ;",
            "score": 99.40777228860294,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . equals ( str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String [ ] { str , searchStr } ) ;",
            "score": 99.4072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String [ ] { str , search CaMeL Str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', str ) ;",
            "score": 99.37984525240384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', str ) ;",
            "score": 99.37984525240384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', str ) ;",
            "score": 99.37984525240384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', str ) ;",
            "score": 99.37984525240384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', str ) ;",
            "score": 99.37984525240384,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return true ;",
            "score": 99.34089929917279,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , char.toUpperCase( ) ) ;",
            "score": 99.48589797247024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , char . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) *true ;",
            "score": 99.47562081473214,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toArray( ) , true ) ;",
            "score": 99.40632067228618,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Array ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str.toUpperCase( ) ,",
            "score": 99.37917193244485,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( name ) ) { return false ;",
            "score": 99.33979797363281,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( name ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( searchStr , searchStr.toUpperCase( ) ) ;",
            "score": 99.4848865327381,
            "correctness": "wrong",
            "tokenized_patch": "return equals ( search CaMeL Str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.size( ) true ) ;",
            "score": 99.4756103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . size ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true , searchStr.length( ) ) ;",
            "score": 99.40465590533088,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,2) ;",
            "score": 99.33970731847427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,4) ;",
            "score": 99.33970731847427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,3) ;",
            "score": 99.33970731847427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,8) ;",
            "score": 99.33970731847427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,7) ;",
            "score": 99.33970731847427,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return compareTo( str , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.48351520040761,
            "correctness": "uncompilable",
            "tokenized_patch": "return compare CaMeL To ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase(1) ) ;",
            "score": 99.40701904296876,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , ', ') ;",
            "score": 99.37843951056985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , 'ABCDEF') ;",
            "score": 99.37843951056985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , 'cde') ;",
            "score": 99.37843951056985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , 'def') ;",
            "score": 99.37843951056985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , 'abcdef') ;",
            "score": 99.37843951056985,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( ', ') ) ;",
            "score": 99.33924102783203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( 'ABCDEF') ) ;",
            "score": 99.33924102783203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( 'cde') ) ;",
            "score": 99.33924102783203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( 'def') ) ;",
            "score": 99.33924102783203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( 'abcdef') ) ;",
            "score": 99.33924102783203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( ', ', ', ') ) ;",
            "score": 99.44684600830078,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.44684600830078,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'cde', 'cde') ) ;",
            "score": 99.44684600830078,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'def', 'def') ) ;",
            "score": 99.44684600830078,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replaceAll( 'abcdef', 'abcdef') ) ;",
            "score": 99.44684600830078,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace CaMeL All ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( str.toUpperCase( ) ) ) ;",
            "score": 99.44338156960227,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.equalsIgnoreCase( searchStr ) ) ;",
            "score": 99.40232340494792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . equals CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) ,",
            "score": 99.37737274169922,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.format( ) ) ;",
            "score": 99.35931803385417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . format ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).equals( ', ') ) ;",
            "score": 99.44610595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).equals( 'ABCDEF') ) ;",
            "score": 99.44610595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).equals( 'cde') ) ;",
            "score": 99.44610595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).equals( 'def') ) ;",
            "score": 99.44610595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.toUpperCase( ).equals( 'abcdef') ) ;",
            "score": 99.44610595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . to CaMeL Upper CaMeL Case ( ) . equals ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( searchStr.length( ) - ) ) ;",
            "score": 99.44333814538044,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( search CaMeL Str . length ( ) - ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.contains( searchStr ) ) ;",
            "score": 99.40596516927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && searchStr.startsWith( ', ') ;",
            "score": 99.40230305989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && searchStr.startsWith( 'ABCDEF') ;",
            "score": 99.40230305989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && searchStr.startsWith( 'cde') ;",
            "score": 99.40230305989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && searchStr.startsWith( 'def') ;",
            "score": 99.40230305989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && searchStr.startsWith( 'abcdef') ;",
            "score": 99.40230305989583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , length ) ;",
            "score": 99.37733369715073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,2) ;",
            "score": 99.35899442784927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,4) ;",
            "score": 99.35899442784927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,3) ;",
            "score": 99.35899442784927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,8) ;",
            "score": 99.35899442784927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ,7) ;",
            "score": 99.35899442784927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + ', ', searchStr ) ;",
            "score": 99.3388312844669,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'ABCDEF', searchStr ) ;",
            "score": 99.3388312844669,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'cde', searchStr ) ;",
            "score": 99.3388312844669,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'def', searchStr ) ;",
            "score": 99.3388312844669,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'abcdef', searchStr ) ;",
            "score": 99.3388312844669,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) : contains ;",
            "score": 99.47541155133929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) : contains ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( str ) == -1;",
            "score": 99.40206909179688,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( str ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , null ) ; }",
            "score": 99.37700737847223,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , null ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , String.length( ) ) ;",
            "score": 99.3380485983456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , String . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value( str , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.48207310267857,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { return contains( str , searchStr.toUpperCase( ) ) ; }",
            "score": 99.4417034646739,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) -1) ;",
            "score": 99.40051987591912,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.substring(0, searchStr.length( ) ) ;",
            "score": 99.37634995404412,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . substring ( 0 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str , searchStr ) ) ;",
            "score": 99.3579571063702,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , new String [ ] { str } ) ;",
            "score": 99.33802897135416,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , new String [ ] { str } ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) != false ) ;",
            "score": 99.47408621651786,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) != false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) == true ;",
            "score": 99.45533447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( searchStr.toLowerCase( ) ) ;",
            "score": 99.44524825246711,
            "correctness": "wrong",
            "tokenized_patch": "return str . equals ( search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! searchStr.startsWith( ', ') ) { return false ; } return true ;",
            "score": 99.4415973165761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.startsWith( 'ABCDEF') ) { return false ; } return true ;",
            "score": 99.4415973165761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.startsWith( 'cde') ) { return false ; } return true ;",
            "score": 99.4415973165761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.startsWith( 'def') ) { return false ; } return true ;",
            "score": 99.4415973165761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.startsWith( 'abcdef') ) { return false ; } return true ;",
            "score": 99.4415973165761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . starts CaMeL With ( $STRING$ ) ) { return false ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, str.length( ) ) ;",
            "score": 99.3999755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ) ) ;",
            "score": 99.37242024739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.37242024739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ) ) ;",
            "score": 99.37242024739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ) ) ;",
            "score": 99.37242024739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.37242024739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.clone( ) ) ;",
            "score": 99.356103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . clone ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( ', ') ) { return true ;",
            "score": 99.3377914428711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'ABCDEF') ) { return true ;",
            "score": 99.3377914428711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'cde') ) { return true ;",
            "score": 99.3377914428711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'def') ) { return true ;",
            "score": 99.3377914428711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( 'abcdef') ) { return true ;",
            "score": 99.3377914428711,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , String.length( ) ) ;",
            "score": 99.4811779203869,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , String . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.4548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return true ; } return true ;",
            "score": 99.44133911132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return true ; } return true ;",
            "score": 99.44133911132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return true ; } return true ;",
            "score": 99.44133911132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return true ; } return true ;",
            "score": 99.44133911132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return true ; } return true ;",
            "score": 99.44133911132812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( searchStr ) , searchStr ) ;",
            "score": 99.40239800347223,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , false , searchStr.length( ) ) ;",
            "score": 99.39869600183823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.charCount( ) ) ;",
            "score": 99.35447782628677,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL Count ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , char.toUpperCase( ) ) ;",
            "score": 99.33741670496323,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).toString( )",
            "score": 99.47235717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . to CaMeL String ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == toUpperCase( ) ;",
            "score": 99.45391845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( str , searchStr.toLowerCase( ) ) ;",
            "score": 99.44452225534539,
            "correctness": "wrong",
            "tokenized_patch": "return equals ( str , search CaMeL Str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( ', ') == -1;",
            "score": 99.4413174715909,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'ABCDEF') == -1;",
            "score": 99.4413174715909,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'cde') == -1;",
            "score": 99.4413174715909,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'def') == -1;",
            "score": 99.4413174715909,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'abcdef') == -1;",
            "score": 99.4413174715909,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLowerCase( ) , -1) ;",
            "score": 99.39866807725694,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Lower CaMeL Case ( ) , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( ', ') ==0;",
            "score": 99.44105747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'ABCDEF') ==0;",
            "score": 99.44105747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'cde') ==0;",
            "score": 99.44105747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'def') ==0;",
            "score": 99.44105747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).indexOf( 'abcdef') ==0;",
            "score": 99.44105747767857,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . index CaMeL Of ( $STRING$ ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.trim( ).length( ) >0) ;",
            "score": 99.39730495876736,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . trim ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( ', ', searchStr , false ) ;",
            "score": 99.3539177389706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', searchStr , false ) ;",
            "score": 99.3539177389706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', searchStr , false ) ;",
            "score": 99.3539177389706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', searchStr , false ) ;",
            "score": 99.3539177389706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', searchStr , false ) ;",
            "score": 99.3539177389706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String1( str ) , searchStr ) ;",
            "score": 99.33623504638672,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String 1 ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.getType( ) ) ;",
            "score": 99.47172619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr.length( ) ==0) {",
            "score": 99.36964246961806,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str . length ( ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) +2) ;",
            "score": 99.3538818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) +4) ;",
            "score": 99.3538818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) +3) ;",
            "score": 99.3538818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) +8) ;",
            "score": 99.3538818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) +7) ;",
            "score": 99.3538818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) + $NUMBER$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.next( ) == null ) { return false ;",
            "score": 99.3358513327206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . next ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ).trim( ) ;",
            "score": 99.47136487458882,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.toUpperCase( ) ==0;",
            "score": 99.45179443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.trim( ).length( ) ==0) ;",
            "score": 99.40089416503906,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . trim ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.trim( ).endsWith( ', ') ;",
            "score": 99.39584530101104,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).endsWith( 'ABCDEF') ;",
            "score": 99.39584530101104,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).endsWith( 'cde') ;",
            "score": 99.39584530101104,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).endsWith( 'def') ;",
            "score": 99.39584530101104,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).endsWith( 'abcdef') ;",
            "score": 99.39584530101104,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . ends CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , null , true ) ;",
            "score": 99.3538330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , null , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.size( ) ==0) { return true ;",
            "score": 99.33582979090073,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . size ( ) == 0 ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.trim( str.toUpperCase( ) ) ) ;",
            "score": 99.48002485795455,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . trim ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( searchStr ) == -1;",
            "score": 99.44181315104167,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( search CaMeL Str ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ; } return true ;",
            "score": 99.43949962797619,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! str.equals( str.toUpperCase( ) ) ;",
            "score": 99.40053982204861,
            "correctness": "wrong",
            "tokenized_patch": "return ! str . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ,",
            "score": 99.36756049262152,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.valueOf( ) , searchStr ) ;",
            "score": 99.3536017922794,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . value CaMeL Of ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return containsIgnoreCase( str , searchStr ) ;",
            "score": 99.33570861816406,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) ==1;",
            "score": 99.47984247622283,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) *false ;",
            "score": 99.47013346354167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) * false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , intValue( ) ) ;",
            "score": 99.43917410714286,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , int CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , substring(0, searchStr.length( ) ) ) ;",
            "score": 99.40023193359374,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , substring ( 0 , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.length( ) ) ;",
            "score": 99.39463806152344,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , size ) ;",
            "score": 99.35333610983456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , size ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString( searchStr ) ) ;",
            "score": 99.33480834960938,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) ==0) { return true ; } else { return true ;",
            "score": 99.43910283627717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) == 0 ) { return true ; } else { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.lastIndexOf( ', ') == -1;",
            "score": 99.39451090494792,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.lastIndexOf( 'ABCDEF') == -1;",
            "score": 99.39451090494792,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.lastIndexOf( 'cde') == -1;",
            "score": 99.39451090494792,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.lastIndexOf( 'def') == -1;",
            "score": 99.39451090494792,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.lastIndexOf( 'abcdef') == -1;",
            "score": 99.39451090494792,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . last CaMeL Index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , continue ) ;",
            "score": 99.3668571920956,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , continue ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , searchStr.trim( ) ) ;",
            "score": 99.33406336167279,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ?0: searchStr.toUpperCase( ) ;",
            "score": 99.44981689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? 0 : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && containsIgnoreCase( searchStr ) ;",
            "score": 99.44108751085069,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0,0) ) ;",
            "score": 99.39824083116319,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 , 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ).equalsIgnoreCase( searchStr ) ;",
            "score": 99.39336480034723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) . equals CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , ;",
            "score": 99.36671549479166,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , char( searchStr.toUpperCase( ) ) ) ;",
            "score": 99.47850452769886,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr == null.toUpperCase( ) ;",
            "score": 99.44908447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || search CaMeL Str == null . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) >= searchStr.length( ) ) ;",
            "score": 99.44108751085069,
            "correctness": "plausible",
            "tokenized_patch": "return ( str . length ( ) >= search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "0"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return contains( str ) ;",
            "score": 99.43865411931819,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(0.length( ) ) ) ;",
            "score": 99.3973876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } return true ;",
            "score": 99.35268267463235,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str == null ) ||( searchStr == null ) ;",
            "score": 99.33377838134766,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null ) || ( search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return value.toUpperCase( ).trim( ).toUpperCase( ) ;",
            "score": 99.47698974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . trim ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).charValue( ) ) ;",
            "score": 99.43812779017857,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . char CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( String ) str.toUpperCase( ) ) ;",
            "score": 99.36274549696181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ( String ) str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring(2) ) ;",
            "score": 99.35171508789062,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(4) ) ;",
            "score": 99.35171508789062,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(3) ) ;",
            "score": 99.35171508789062,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(8) ) ;",
            "score": 99.35171508789062,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(7) ) ;",
            "score": 99.35171508789062,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null ) { return true ;",
            "score": 99.33369584517045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , indexOf( str.toUpperCase( ) ) ) ;",
            "score": 99.47646262428977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , index CaMeL Of ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') != -1) ;",
            "score": 99.440185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') != -1) ;",
            "score": 99.440185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') != -1) ;",
            "score": 99.440185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') != -1) ;",
            "score": 99.440185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') != -1) ;",
            "score": 99.440185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toCharArray( ) ) ;",
            "score": 99.36233723958334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Char CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.getType( ) ) ;",
            "score": 99.35069364659927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return null.equals( str.toUpperCase( ) ) ;",
            "score": 99.3335319967831,
            "correctness": "uncompilable",
            "tokenized_patch": "return null . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return getProperty( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.47574515964673,
            "correctness": "uncompilable",
            "tokenized_patch": "return get CaMeL Property ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) == true ) ;",
            "score": 99.46880812872024,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.length( ) ==0) ;",
            "score": 99.43977186414931,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).charCount( ) ==0;",
            "score": 99.39544677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . char CaMeL Count ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.length( ) ==0) ;",
            "score": 99.38917759486607,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( chars , searchStr.toUpperCase( ) ,",
            "score": 99.36158582899306,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null && searchStr == null ) { return true ;",
            "score": 99.33343864889706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null && search CaMeL Str == null ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr -1) ;",
            "score": 99.46879650297619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ? false : str.toUpperCase( ) ;",
            "score": 99.44753011067708,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? false : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.size( ) ) ;",
            "score": 99.39510947779605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str , searchStr.length( ) ) ) ;",
            "score": 99.3885139016544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toUpperCase( searchStr ) ) ;",
            "score": 99.36073811848958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( searchStr ) ) ;",
            "score": 99.36073811848958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( searchStr ) ) ;",
            "score": 99.36073811848958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( searchStr ) ) ;",
            "score": 99.36073811848958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( searchStr ) ) ;",
            "score": 99.36073811848958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return ) { return true ;",
            "score": 99.33155168805804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) /1;",
            "score": 99.46849423363095,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) / 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return true ; } else { return false ;",
            "score": 99.4367145040761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return true ; } else { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr == null )",
            "score": 99.36056315104166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,( String ) searchStr ) ;",
            "score": 99.34872000558036,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , ( String ) search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return length( str.toUpperCase( ).toUpperCase( ) ) ;",
            "score": 99.47509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return length ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == true ) { return false ;",
            "score": 99.44692511307566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == true ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , searchStr.toUpperCase( ) , true ) ;",
            "score": 99.43611653645833,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.matches( searchStr ) ) ;",
            "score": 99.39487033420139,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . matches ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( ', ') ? ', ': ', ') ;",
            "score": 99.38730875651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'ABCDEF') ? 'ABCDEF': 'ABCDEF') ;",
            "score": 99.38730875651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'cde') ? 'cde': 'cde') ;",
            "score": 99.38730875651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'def') ? 'def': 'def') ;",
            "score": 99.38730875651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.startsWith( 'abcdef') ? 'abcdef': 'abcdef') ;",
            "score": 99.38730875651042,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . starts CaMeL With ( $STRING$ ) ? $STRING$ : $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + ) ;",
            "score": 99.36038970947266,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str , searchStr.toString( ) ) ;",
            "score": 99.43850226151316,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str , search CaMeL Str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.indexOf( ) ) ;",
            "score": 99.38617302389706,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . index CaMeL Of ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', ', '.toUpperCase( ) ) ;",
            "score": 99.36032284007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.36032284007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', 'cde'.toUpperCase( ) ) ;",
            "score": 99.36032284007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', 'def'.toUpperCase( ) ) ;",
            "score": 99.36032284007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.36032284007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.getType( ) , searchStr ) ;",
            "score": 99.34837431066177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . get CaMeL Type ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) ) { return false ;",
            "score": 99.33037252987133,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , String.toUpperCase( ) ) ;",
            "score": 99.47448149181548,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str == null && searchStr.length( ) >0) ;",
            "score": 99.46756142064145,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str == null && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') <0) ;",
            "score": 99.4383903952206,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') <0) ;",
            "score": 99.4383903952206,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') <0) ;",
            "score": 99.4383903952206,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') <0) ;",
            "score": 99.4383903952206,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') <0) ;",
            "score": 99.4383903952206,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && searchStr.length( ) >0;",
            "score": 99.38605095358456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . length ( ) > 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name == null || searchStr.toUpperCase( ) ;",
            "score": 99.35958523220486,
            "correctness": "uncompilable",
            "tokenized_patch": "return name == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , ) ;",
            "score": 99.34561157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , l.toUpperCase( ) ) ;",
            "score": 99.3302360983456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , l . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) -2;",
            "score": 99.46735491071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) - $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) -4;",
            "score": 99.46735491071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) - $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) -3;",
            "score": 99.46735491071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) - $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) -8;",
            "score": 99.46735491071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) - $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) -7;",
            "score": 99.46735491071429,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) - $NUMBER$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.substring(0, searchStr.length( ) ) == null ) ;",
            "score": 99.43474469866071,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . substring ( 0 , search CaMeL Str . length ( ) ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( null , searchStr.toUpperCase( ) ,",
            "score": 99.35846625434027,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr ) ; }",
            "score": 99.34535435267857,
            "correctness": "wrong",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str ) ; }",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , ', ', searchStr.trim( ) ) ;",
            "score": 99.33005658318015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', searchStr.trim( ) ) ;",
            "score": 99.33005658318015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', searchStr.trim( ) ) ;",
            "score": 99.33005658318015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', searchStr.trim( ) ) ;",
            "score": 99.33005658318015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', searchStr.trim( ) ) ;",
            "score": 99.33005658318015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return getProperty( str , searchStr.toUpperCase( ) ) != null ;",
            "score": 99.4741847826087,
            "correctness": "uncompilable",
            "tokenized_patch": "return get CaMeL Property ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) )",
            "score": 99.46674547697368,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == ', ') { return true ;",
            "score": 99.44416889391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'ABCDEF') { return true ;",
            "score": 99.44416889391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'cde') { return true ;",
            "score": 99.44416889391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'def') { return true ;",
            "score": 99.44416889391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == 'abcdef') { return true ;",
            "score": 99.44416889391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).startsWith( str ) ;",
            "score": 99.43794973273026,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.length( ) >0) { return false ; } else { return true ;",
            "score": 99.43441109035327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) > 0 ) { return false ; } else { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , Character.toUpperCase( str ) ) ;",
            "score": 99.39152696397569,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , Character . to CaMeL Upper CaMeL Case ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) false ) ;",
            "score": 99.32927703857422,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.contains( str ) ) ;",
            "score": 99.4661865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . contains ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) ;",
            "score": 99.44379625822368,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str , searchStr , searchStr.length( ) ) ;",
            "score": 99.43766061883224,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str , search CaMeL Str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) return false ;",
            "score": 99.43390764508929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, searchStr.size( ) ) ;",
            "score": 99.39055319393383,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , search CaMeL Str . size ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') > -1) ;",
            "score": 99.3824691772461,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') > -1) ;",
            "score": 99.3824691772461,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') > -1) ;",
            "score": 99.3824691772461,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') > -1) ;",
            "score": 99.3824691772461,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') > -1) ;",
            "score": 99.3824691772461,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) > - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(2, str.toUpperCase( ) ) ;",
            "score": 99.35331456801471,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(4, str.toUpperCase( ) ) ;",
            "score": 99.35331456801471,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(3, str.toUpperCase( ) ) ;",
            "score": 99.35331456801471,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(8, str.toUpperCase( ) ) ;",
            "score": 99.35331456801471,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(7, str.toUpperCase( ) ) ;",
            "score": 99.35331456801471,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $NUMBER$ , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.format( str ) , searchStr ) ;",
            "score": 99.34480285644531,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . format ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , ', ')",
            "score": 99.46563720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'ABCDEF')",
            "score": 99.46563720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'cde')",
            "score": 99.46563720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'def')",
            "score": 99.46563720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , 'abcdef')",
            "score": 99.46563720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).substring( ).length( ) ==0;",
            "score": 99.43367143110795,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . substring ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.length( ) >0) ;",
            "score": 99.38153076171875,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ) , true ) ;",
            "score": 99.35261086856617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ) , true ) ;",
            "score": 99.35261086856617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ) , true ) ;",
            "score": 99.35261086856617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ) , true ) ;",
            "score": 99.35261086856617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ) , true ) ;",
            "score": 99.35261086856617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ,0, false ) ;",
            "score": 99.34435221354167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , 0 , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr.trim( ) ) ;",
            "score": 99.328857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) == ] ;",
            "score": 99.47336744225544,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ? false",
            "score": 99.44195556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ? false",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( searchStr.length( ) ) ) ;",
            "score": 99.43612331814236,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return false ; } return false ;",
            "score": 99.43305896577381,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return false ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ;",
            "score": 99.38144259982639,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( searchStr ) , searchStr ) ;",
            "score": 99.3522087545956,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( new String ( search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toObject( ) , searchStr ) ;",
            "score": 99.32866354549633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Object ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , String.FALSE ) ;",
            "score": 99.47327190896739,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , String . FALSE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.contains( searchStr ).toUpperCase( ) ;",
            "score": 99.44121350740132,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . contains ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( str ) <0) ;",
            "score": 99.4358269186581,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) < 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring( str.length( ) +1) ) ;",
            "score": 99.38138156467014,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) + 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) || searchStr == null ;",
            "score": 99.32862764246323,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) || search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.4731212797619,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str.toUpperCase( ) ,",
            "score": 99.46497192382813,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , charCount.toUpperCase( ) ) ;",
            "score": 99.38906378495066,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , char CaMeL Count . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, count ) ) ;",
            "score": 99.38102504185268,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , count ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.valueOf( ) ) ;",
            "score": 99.34131577435662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . value CaMeL Of ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = str.toUpperCase( ) == null ;",
            "score": 99.32813262939453,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , value , searchStr.toUpperCase( ) ) ;",
            "score": 99.47309802827381,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , value , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.charAt( ) ) ;",
            "score": 99.43419692095588,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . char CaMeL At ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return true ; } return false ;",
            "score": 99.43228759765626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return true ; } return false ;",
            "score": 99.43228759765626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return true ; } return false ;",
            "score": 99.43228759765626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return true ; } return false ;",
            "score": 99.43228759765626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return true ; } return false ;",
            "score": 99.43228759765626,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return true ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ', ', ') ;",
            "score": 99.32802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF', 'ABCDEF') ;",
            "score": 99.32802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde', 'cde') ;",
            "score": 99.32802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def', 'def') ;",
            "score": 99.32802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef', 'abcdef') ;",
            "score": 99.32802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim(.length( ) ) ) ;",
            "score": 99.43382504111842,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).matches( searchStr ) ;",
            "score": 99.38739334909539,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . matches ( search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.length( ) == searchStr.length( ) ;",
            "score": 99.38066864013672,
            "correctness": "wrong",
            "tokenized_patch": "return str . length ( ) == search CaMeL Str . length ( ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str ,0, false ) ;",
            "score": 99.34097493489584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 0 , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', '+ searchStr ) ;",
            "score": 99.32795266544117,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF'+ searchStr ) ;",
            "score": 99.32795266544117,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde'+ searchStr ) ;",
            "score": 99.32795266544117,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def'+ searchStr ) ;",
            "score": 99.32795266544117,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef'+ searchStr ) ;",
            "score": 99.32795266544117,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , charCount ) ;",
            "score": 99.47259842722039,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , char CaMeL Count ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , str.toUpperCase( ) ) ;",
            "score": 99.43973999023437,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ) + searchStr.toUpperCase( ) ;",
            "score": 99.38690863715277,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ) + search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( contains( str , searchStr.trim( ) ) ) ;",
            "score": 99.38036391314338,
            "correctness": "wrong",
            "tokenized_patch": "return ( contains ( str , search CaMeL Str . trim ( ) ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr.substring( ) == null ) { return false ;",
            "score": 99.3260857077206,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . substring ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str.charAt(0) ) ;",
            "score": 99.43289947509766,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , length( ) ) ;",
            "score": 99.38643391927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.append( str ) ) ;",
            "score": 99.33760070800781,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , null ) ;",
            "score": 99.32405598958333,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr +1) ;",
            "score": 99.46378580729167,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str + 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.trim( ).length( ) >0) ;",
            "score": 99.38638305664062,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . trim ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str ) , searchStr ) ;",
            "score": 99.34656575520833,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( new String ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.longValue( ) ) ;",
            "score": 99.33740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . long CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '|| searchStr == null ) ;",
            "score": 99.32115071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'|| searchStr == null ) ;",
            "score": 99.32115071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'|| searchStr == null ) ;",
            "score": 99.32115071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'|| searchStr == null ) ;",
            "score": 99.32115071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'|| searchStr == null ) ;",
            "score": 99.32115071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ? true : searchStr.toUpperCase( ) ;",
            "score": 99.4382568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? true : search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( str.length( )1) ) ;",
            "score": 99.43071056547619,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( str . length ( ) 1 ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , length( ) ) ;",
            "score": 99.38370554070724,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toLowerCase( searchStr ) ) ;",
            "score": 99.37831624348958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Lower CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ) , false ) ;",
            "score": 99.34596162683823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ) , false ) ;",
            "score": 99.34596162683823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ) , false ) ;",
            "score": 99.34596162683823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ) , false ) ;",
            "score": 99.34596162683823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ) , false ) ;",
            "score": 99.34596162683823,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toLocale( ) ) ;",
            "score": 99.33738798253677,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Locale ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , null ) ;",
            "score": 99.31934407552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} if( str.toUpperCase( ) == null ) { return false ;",
            "score": 99.43784790039062,
            "correctness": "uncompilable",
            "tokenized_patch": "} if ( str . to CaMeL Upper CaMeL Case ( ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) , length ) ;",
            "score": 99.33659811580883,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + searchStr ) ;",
            "score": 99.31813151041666,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null || searchStr != null ) ;",
            "score": 99.43717041015626,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null || search CaMeL Str != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! Boolean.valueOf( str ).booleanValue( ) ;",
            "score": 99.42876519097223,
            "correctness": "wrong",
            "tokenized_patch": "return ! Boolean . value CaMeL Of ( str ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.indexOf( str ) != -1;",
            "score": 99.37798309326172,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( str ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! contains( str.toUpperCase( ) ) )",
            "score": 99.34545180376838,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! contains ( str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.size( ) true ) ;",
            "score": 99.334716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,.toUpperCase( ) ) ;",
            "score": 99.3163070678711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "contains( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.46915011935764,
            "correctness": "uncompilable",
            "tokenized_patch": "contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) == false ;",
            "score": 99.46239071800595,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.startsWith( ', ') ) { return false ; } return false ;",
            "score": 99.4296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'ABCDEF') ) { return false ; } return false ;",
            "score": 99.4296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'cde') ) { return false ; } return false ;",
            "score": 99.4296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'def') ) { return false ; } return false ;",
            "score": 99.4296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.startsWith( 'abcdef') ) { return false ; } return false ;",
            "score": 99.4296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . starts CaMeL With ( $STRING$ ) ) { return false ; } return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', name.toUpperCase( ) ) ;",
            "score": 99.34443933823529,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', name.toUpperCase( ) ) ;",
            "score": 99.34443933823529,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', name.toUpperCase( ) ) ;",
            "score": 99.34443933823529,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', name.toUpperCase( ) ) ;",
            "score": 99.34443933823529,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', name.toUpperCase( ) ) ;",
            "score": 99.34443933823529,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str , searchStr ) ;",
            "score": 99.3160869891827,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ).contains( searchStr ) ;",
            "score": 99.43631320529514,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) . contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , length( ) ) ;",
            "score": 99.42898077713816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.charAt( ;",
            "score": 99.42788214432566,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . char CaMeL At ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.substring(0, searchStr.length( ) ) != null ;",
            "score": 99.38204795435855,
            "correctness": "wrong",
            "tokenized_patch": "return str . substring ( 0 , search CaMeL Str . length ( ) ) != null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str ) ;",
            "score": 99.34356011284723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str ) ;",
            "score": 99.34356011284723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str ) ;",
            "score": 99.34356011284723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str ) ;",
            "score": 99.34356011284723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str ) ;",
            "score": 99.34356011284723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ', null ) ;",
            "score": 99.31570638020834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF', null ) ;",
            "score": 99.31570638020834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde', null ) ;",
            "score": 99.31570638020834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def', null ) ;",
            "score": 99.31570638020834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef', null ) ;",
            "score": 99.31570638020834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new StringBuffer( str.toUpperCase( ) ) ) ;",
            "score": 99.42816452752976,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String CaMeL Buffer ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && searchStr.equals( searchStr ) ;",
            "score": 99.42717149522569,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && search CaMeL Str . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( ) ) ;",
            "score": 99.38193646599265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ', '.equals( str.toUpperCase( ) ) ;",
            "score": 99.37657255284927,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'ABCDEF'.equals( str.toUpperCase( ) ) ;",
            "score": 99.37657255284927,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'cde'.equals( str.toUpperCase( ) ) ;",
            "score": 99.37657255284927,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'def'.equals( str.toUpperCase( ) ) ;",
            "score": 99.37657255284927,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 'abcdef'.equals( str.toUpperCase( ) ) ;",
            "score": 99.37657255284927,
            "correctness": "uncompilable",
            "tokenized_patch": "return $STRING$ . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr == null && searchStr == null ) ;",
            "score": 99.3150634765625,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str == null && search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return toUpperCase( str.toUpperCase( ) ) ;",
            "score": 99.46512001439145,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.indexOf( ', ') ) ;",
            "score": 99.42709189967105,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.indexOf( 'ABCDEF') ) ;",
            "score": 99.42709189967105,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.indexOf( 'cde') ) ;",
            "score": 99.42709189967105,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.indexOf( 'def') ) ;",
            "score": 99.42709189967105,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr.indexOf( 'abcdef') ) ;",
            "score": 99.42709189967105,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ).trim( ) ;",
            "score": 99.38139905427632,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return str.toUpperCase( ) == null ;",
            "score": 99.31480407714844,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( searchStr ) != -1;",
            "score": 99.42631530761719,
            "correctness": "wrong",
            "tokenized_patch": "return str . index CaMeL Of ( search CaMeL Str ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , matches ) ;",
            "score": 99.37514361213235,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , matches ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , false ) ;",
            "score": 99.31421712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return compare( str , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.46505301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "return compare ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ).toUpperCase( ) == searchStr ;",
            "score": 99.43345133463542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ) . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; return null ;",
            "score": 99.42645818536931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; return null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr ) , searchStr ) ;",
            "score": 99.38018798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( ', ') >=0;",
            "score": 99.37425130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'ABCDEF') >=0;",
            "score": 99.37425130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'cde') >=0;",
            "score": 99.37425130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'def') >=0;",
            "score": 99.37425130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'abcdef') >=0;",
            "score": 99.37425130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) == null ) ;",
            "score": 99.33051614200367,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.toUpperCase( ) ) ;",
            "score": 99.4647575827206,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == false ) ;",
            "score": 99.43324788411458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( str ) >= -1;",
            "score": 99.42587280273438,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( str ) >= - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.trim( ).length( ) ==0;",
            "score": 99.37993512834821,
            "correctness": "wrong",
            "tokenized_patch": "return str . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , false.length( ) ) ;",
            "score": 99.37317612591912,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , false . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', ', searchStr ) ;",
            "score": 99.31219951923077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', searchStr ) ;",
            "score": 99.31219951923077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', searchStr ) ;",
            "score": 99.31219951923077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', searchStr ) ;",
            "score": 99.31219951923077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', searchStr ) ;",
            "score": 99.31219951923077,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( ', ') ) ;",
            "score": 99.37290954589844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'ABCDEF') ) ;",
            "score": 99.37290954589844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'cde') ) ;",
            "score": 99.37290954589844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'def') ) ;",
            "score": 99.37290954589844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.lastIndexOf( 'abcdef') ) ;",
            "score": 99.37290954589844,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . last CaMeL Index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) == false ) ;",
            "score": 99.32736385569854,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) == false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , name.toString( ) ) ;",
            "score": 99.3119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , name . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , chars ) ;",
            "score": 99.46307663690476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , chars ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ,0)",
            "score": 99.45911865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) >0) ;",
            "score": 99.42585305606617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( searchStr ) == -1) ;",
            "score": 99.4256591796875,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( search CaMeL Str ) == - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring( -1) ) ;",
            "score": 99.37965303308823,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( - 1 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Boolean.parseBoolean( str ).booleanValue( ) ;",
            "score": 99.37287454044117,
            "correctness": "uncompilable",
            "tokenized_patch": "return Boolean . parse CaMeL Boolean ( str ) . boolean CaMeL Value ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , list.toUpperCase( ) ) ;",
            "score": 99.32688275505515,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , list . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr.toUpperCase( ) ) true ;",
            "score": 99.4630459872159,
            "correctness": "uncompilable",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , false )",
            "score": 99.45829772949219,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toLowerCase( ).startsWith( str ) ;",
            "score": 99.425048828125,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Lower CaMeL Case ( ) . starts CaMeL With ( str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( ) ) ;",
            "score": 99.37935144761029,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) ==0) ;",
            "score": 99.37241774338942,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) == 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toLocale( ) , searchStr ) ;",
            "score": 99.32666733685662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Locale ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , str.toUpperCase( ) ) == -1;",
            "score": 99.4629794034091,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , str . to CaMeL Upper CaMeL Case ( ) ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , true )",
            "score": 99.45826721191406,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , true )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.substring( ) ) ;",
            "score": 99.42511950041118,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( ', ') <=0) ;",
            "score": 99.42479750689338,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'ABCDEF') <=0) ;",
            "score": 99.42479750689338,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'cde') <=0) ;",
            "score": 99.42479750689338,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'def') <=0) ;",
            "score": 99.42479750689338,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( 'abcdef') <=0) ;",
            "score": 99.42479750689338,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( $STRING$ ) <= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , contains( str , searchStr ) ) ;",
            "score": 99.37930297851562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) ==1) ;",
            "score": 99.37099322150735,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) == 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true ) ;",
            "score": 99.32636854383681,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.append( ', ') == null ) { return false ;",
            "score": 99.31110382080078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . append ( $STRING$ ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.append( 'ABCDEF') == null ) { return false ;",
            "score": 99.31110382080078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . append ( $STRING$ ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.append( 'cde') == null ) { return false ;",
            "score": 99.31110382080078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . append ( $STRING$ ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.append( 'def') == null ) { return false ;",
            "score": 99.31110382080078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . append ( $STRING$ ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.append( 'abcdef') == null ) { return false ;",
            "score": 99.31110382080078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . append ( $STRING$ ) == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).toString( ) != null ) ;",
            "score": 99.461669921875,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . to CaMeL String ( ) != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str.toUpperCase( ) == true ) { return true ;",
            "score": 99.42636590254934,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == true ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.trim( ).trim( ) ) ;",
            "score": 99.42476613898026,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . trim ( ) . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toString( ).length( ) ==0) ;",
            "score": 99.37925889756944,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL String ( ) . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.length -1) ;",
            "score": 99.37097981770833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null + ', ';",
            "score": 99.33267974853516,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null + 'ABCDEF';",
            "score": 99.33267974853516,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null + 'cde';",
            "score": 99.33267974853516,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null + 'def';",
            "score": 99.33267974853516,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null + 'abcdef';",
            "score": 99.33267974853516,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr.trim( ) ) ;",
            "score": 99.30992838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( searchStr ) >= -1) ;",
            "score": 99.42451985677083,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . index CaMeL Of ( search CaMeL Str ) >= - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.substring(0) ) ;",
            "score": 99.37869262695312,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.indexOf( ', ') == -1;",
            "score": 99.37050955636161,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'ABCDEF') == -1;",
            "score": 99.37050955636161,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'cde') == -1;",
            "score": 99.37050955636161,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'def') == -1;",
            "score": 99.37050955636161,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'abcdef') == -1;",
            "score": 99.37050955636161,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , -1) ;",
            "score": 99.30931745256696,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true && searchStr.length( ) >0) ;",
            "score": 99.37857216282895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) ? false :0;",
            "score": 99.37819952713816,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ? false : 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str.toUpperCase( ) ) ) {",
            "score": 99.33115521599265,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.iterator( ) ) ;",
            "score": 99.3078369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . iterator ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toUpperCase( searchStr.toUpperCase( ) ) ;",
            "score": 99.46139090401786,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL Upper CaMeL Case ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) : contains( str ) ;",
            "score": 99.45448608398438,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) : contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.length( ) == searchStr.length( ) ) ;",
            "score": 99.42055792557566,
            "correctness": "wrong",
            "tokenized_patch": "return ! ( str . length ( ) == search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! searchStr.equals( searchStr ) ) {",
            "score": 99.32660675048828,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . equals ( search CaMeL Str ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.matches( ', ') ) ;",
            "score": 99.32386016845703,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.matches( 'ABCDEF') ) ;",
            "score": 99.32386016845703,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.matches( 'cde') ) ;",
            "score": 99.32386016845703,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.matches( 'def') ) ;",
            "score": 99.32386016845703,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.matches( 'abcdef') ) ;",
            "score": 99.32386016845703,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . matches ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return list.equals( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.46129789806548,
            "correctness": "uncompilable",
            "tokenized_patch": "return list . equals ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == ', ') ;",
            "score": 99.42403157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == 'ABCDEF') ;",
            "score": 99.42403157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == 'cde') ;",
            "score": 99.42403157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == 'def') ;",
            "score": 99.42403157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == 'abcdef') ;",
            "score": 99.42403157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ).length( ) +1) ;",
            "score": 99.36897547104779,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , false , false ) ;",
            "score": 99.322119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , false , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [0] , searchStr ) ;",
            "score": 99.30723353794643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 0 ] , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.toUpperCase( searchStr ) ) ;",
            "score": 99.46119995117188,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return contains( str.toUpperCase( ) , searchStr )",
            "score": 99.4536376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.startsWith( str ) ) ;",
            "score": 99.37480333116319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . starts CaMeL With ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( str.length( ) ) ) ;",
            "score": 99.36787414550781,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', 'toUpperCase( searchStr ) ) ;",
            "score": 99.32584874770221,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'toUpperCase( searchStr ) ) ;",
            "score": 99.32584874770221,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'toUpperCase( searchStr ) ) ;",
            "score": 99.32584874770221,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'toUpperCase( searchStr ) ) ;",
            "score": 99.32584874770221,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'toUpperCase( searchStr ) ) ;",
            "score": 99.32584874770221,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).trim( ) ==0;",
            "score": 99.30546569824219,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . trim ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(2) ) ;",
            "score": 99.45250854492187,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(4) ) ;",
            "score": 99.45250854492187,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(3) ) ;",
            "score": 99.45250854492187,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(8) ) ;",
            "score": 99.45250854492187,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring(7) ) ;",
            "score": 99.45250854492187,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( $NUMBER$ ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', searchStr ).toUpperCase( ) ;",
            "score": 99.42365465666118,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr ).toUpperCase( ) ;",
            "score": 99.42365465666118,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr ).toUpperCase( ) ;",
            "score": 99.42365465666118,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr ).toUpperCase( ) ;",
            "score": 99.42365465666118,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr ).toUpperCase( ) ;",
            "score": 99.42365465666118,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str [0].toUpperCase( ) ) ;",
            "score": 99.41682264539931,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str [ 0 ] . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).length( ) >0;",
            "score": 99.37448556082589,
            "correctness": "wrong",
            "tokenized_patch": "return str . trim ( ) . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null || searchStr == null )",
            "score": 99.32538311298077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , null , null ) ;",
            "score": 99.321044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , null , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return contains( str ) ;",
            "score": 99.30522918701172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return contains ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) *",
            "score": 99.4520263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) *",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ? false : false ;",
            "score": 99.42330129523026,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ? false : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return Character.isDigit( str.charAt(0) ) ;",
            "score": 99.41669379340277,
            "correctness": "wrong",
            "tokenized_patch": "return Character . is CaMeL Digit ( str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toCharArray( ) , true ) ;",
            "score": 99.36665613511029,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Char CaMeL Array ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toUpperCase( ) == null ;",
            "score": 99.30480194091797,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( charValue , searchStr.toUpperCase( ) ) ;",
            "score": 99.46063523065476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( char CaMeL Value , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , ', ') ;",
            "score": 99.41545867919922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , 'ABCDEF') ;",
            "score": 99.41545867919922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , 'cde') ;",
            "score": 99.41545867919922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , 'def') ;",
            "score": 99.41545867919922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charAt(0) , 'abcdef') ;",
            "score": 99.41545867919922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL At ( 0 ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , isUpperCase( searchStr ) ) ;",
            "score": 99.37384711371527,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , is CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( ', ') >= -1;",
            "score": 99.36627960205078,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'ABCDEF') >= -1;",
            "score": 99.36627960205078,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'cde') >= -1;",
            "score": 99.36627960205078,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'def') >= -1;",
            "score": 99.36627960205078,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'abcdef') >= -1;",
            "score": 99.36627960205078,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) >= - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ', false ) ;",
            "score": 99.3035888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF', false ) ;",
            "score": 99.3035888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde', false ) ;",
            "score": 99.3035888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def', false ) ;",
            "score": 99.3035888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef', false ) ;",
            "score": 99.3035888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return load( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.41962633634868,
            "correctness": "uncompilable",
            "tokenized_patch": "return load ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.substring( ;",
            "score": 99.41505342371323,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . substring ( ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ==1) ;",
            "score": 99.36587344898896,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) == 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str.toUpperCase( ) ,",
            "score": 99.32137298583984,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , false ) ;",
            "score": 99.31698404947916,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,( String ) true ) ;",
            "score": 99.30091094970703,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , ( String ) true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + $STRING$",
            "score": 99.45123291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + $STRING$",
            "score": 99.45123291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + $STRING$",
            "score": 99.45123291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + $STRING$",
            "score": 99.45123291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ) + $STRING$",
            "score": 99.45123291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) + $STRING$",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.length( ) !=0) { return true ; } return true ;",
            "score": 99.41957310267857,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str . length ( ) != 0 ) { return true ; } return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , false && searchStr.length( ) >0) ;",
            "score": 99.37361225328948,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.charAt(0) == ', ';",
            "score": 99.365869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.charAt(0) == 'ABCDEF';",
            "score": 99.365869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.charAt(0) == 'cde';",
            "score": 99.365869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.charAt(0) == 'def';",
            "score": 99.365869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.charAt(0) == 'abcdef';",
            "score": 99.365869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , containsIgnoreCase( str ) ) ;",
            "score": 99.31620025634766,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , contains CaMeL Ignore CaMeL Case ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr.trim( ) == null ;",
            "score": 99.30058288574219,
            "correctness": "wrong",
            "tokenized_patch": "return str == null || search CaMeL Str . trim ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.toUpperCase( ) == true ) ;",
            "score": 99.42091878255208,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . to CaMeL Upper CaMeL Case ( ) == true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,1, searchStr.length( ) ) ;",
            "score": 99.36359719669117,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 1 , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return switch( str.toUpperCase( ) ) ;",
            "score": 99.31815592447917,
            "correctness": "uncompilable",
            "tokenized_patch": "return switch ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ? true : false ;",
            "score": 99.31429036458333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ? true : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , chars.toUpperCase( ) , searchStr ) ;",
            "score": 99.45810081845238,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , chars . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , ', ')",
            "score": 99.45040283203124,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'ABCDEF')",
            "score": 99.45040283203124,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'cde')",
            "score": 99.45040283203124,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'def')",
            "score": 99.45040283203124,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , 'abcdef')",
            "score": 99.45040283203124,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr.toUpperCase( ) ==",
            "score": 99.42067999588816,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ==",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , return ) ;",
            "score": 99.31540814568015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.size( ) , searchStr ) ;",
            "score": 99.31424967447917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . size ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == searchStr [0] ;",
            "score": 99.41855340254934,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str [ 0 ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEmpty( str ) && containsIgnoreCase( str ) ;",
            "score": 99.41363525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Empty ( str ) && contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) || contains( searchStr ) ;",
            "score": 99.37183295355902,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) || contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length ) ;",
            "score": 99.3124530498798,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , null , searchStr ) ;",
            "score": 99.29958871694711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') >= -1) ;",
            "score": 99.41360473632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') >= -1) ;",
            "score": 99.41360473632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') >= -1) ;",
            "score": 99.41360473632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') >= -1) ;",
            "score": 99.41360473632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') >= -1) ;",
            "score": 99.41360473632812,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isWhitespace( str.toUpperCase( ) ) ;",
            "score": 99.3623046875,
            "correctness": "wrong",
            "tokenized_patch": "return is CaMeL Whitespace ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) + ', ';",
            "score": 99.31308880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) + 'ABCDEF';",
            "score": 99.31308880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) + 'cde';",
            "score": 99.31308880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) + 'def';",
            "score": 99.31308880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) + 'abcdef';",
            "score": 99.31308880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) == ) ;",
            "score": 99.31233215332031,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( null , searchStr ) ;",
            "score": 99.29886881510417,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( null , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ) ? searchStr : contains( str , searchStr ) ;",
            "score": 99.447900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) ? search CaMeL Str : contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains.contains( str.toUpperCase( ) ) ;",
            "score": 99.4134521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') ) ;",
            "score": 99.3616943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') ) ;",
            "score": 99.3616943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') ) ;",
            "score": 99.3616943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') ) ;",
            "score": 99.3616943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') ) ;",
            "score": 99.3616943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return false ; }",
            "score": 99.31097412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( String ) str.toUpperCase( ) ,",
            "score": 99.3109130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ( String ) str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(0, searchStr ) ;",
            "score": 99.297900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( 0 , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replace( ', ', ', ') ) ;",
            "score": 99.41343180338542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replace( 'ABCDEF', 'ABCDEF') ) ;",
            "score": 99.41343180338542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replace( 'cde', 'cde') ) ;",
            "score": 99.41343180338542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replace( 'def', 'def') ) ;",
            "score": 99.41343180338542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.replace( 'abcdef', 'abcdef') ) ;",
            "score": 99.41343180338542,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . replace ( $STRING$ , $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).equals( ) ) ;",
            "score": 99.36876763237848,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . equals ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr , false ) ;",
            "score": 99.31004920372597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr , false ) ;",
            "score": 99.31004920372597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr , false ) ;",
            "score": 99.31004920372597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr , false ) ;",
            "score": 99.31004920372597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr , false ) ;",
            "score": 99.31004920372597,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! searchStr.length( ) ==0) {",
            "score": 99.30966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . length ( ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , ', ') ;",
            "score": 99.29645182291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , 'ABCDEF') ;",
            "score": 99.29645182291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , 'cde') ;",
            "score": 99.29645182291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , 'def') ;",
            "score": 99.29645182291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , 'abcdef') ;",
            "score": 99.29645182291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( directory.toUpperCase( ) , searchStr ) ;",
            "score": 99.4564208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( directory . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( Locale.US ) ) ;",
            "score": 99.41280788845486,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( Locale . US ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') +1) ;",
            "score": 99.36077880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') +1) ;",
            "score": 99.36077880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') +1) ;",
            "score": 99.36077880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') +1) ;",
            "score": 99.36077880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') +1) ;",
            "score": 99.36077880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.toUpperCase( ) == null )",
            "score": 99.30629069010416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . to CaMeL Upper CaMeL Case ( ) == null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , ', ', ) ;",
            "score": 99.2952880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'ABCDEF', ) ;",
            "score": 99.2952880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'cde', ) ;",
            "score": 99.2952880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'def', ) ;",
            "score": 99.2952880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , 'abcdef', ) ;",
            "score": 99.2952880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , $STRING$ , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) ? true : ) ;",
            "score": 99.44406609786184,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ? true : ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( searchStr ) > -1) ;",
            "score": 99.41243489583333,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . index CaMeL Of ( search CaMeL Str ) > - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.length( ) ) ;",
            "score": 99.36013559194711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ', ') ) ;",
            "score": 99.3033218383789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'ABCDEF') ) ;",
            "score": 99.3033218383789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'cde') ) ;",
            "score": 99.3033218383789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'def') ) ;",
            "score": 99.3033218383789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'abcdef') ) ;",
            "score": 99.3033218383789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , value.toString( ) ) ;",
            "score": 99.29456380208333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , value . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr , null )",
            "score": 99.44298095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str , null )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).length( ) <0) ;",
            "score": 99.41322631835938,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) < 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return !( str.indexOf( ', ') == -1) ;",
            "score": 99.4119514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'ABCDEF') == -1) ;",
            "score": 99.4119514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'cde') == -1) ;",
            "score": 99.4119514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'def') == -1) ;",
            "score": 99.4119514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'abcdef') == -1) ;",
            "score": 99.4119514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = contains( str.toUpperCase( ) ) ;",
            "score": 99.36725930606617,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , true , false ) ;",
            "score": 99.3066162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , true , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( ', ') ) { return false ;",
            "score": 99.29387555803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'ABCDEF') ) { return false ;",
            "score": 99.29387555803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'cde') ) { return false ;",
            "score": 99.29387555803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'def') ) { return false ;",
            "score": 99.29387555803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'abcdef') ) { return false ;",
            "score": 99.29387555803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ?0: str.toUpperCase( ) ;",
            "score": 99.41400146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? 0 : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).endsWith( str ) ;",
            "score": 99.36713610197368,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . ends CaMeL With ( str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( containsIgnoreCase( str ) ) { return true ;",
            "score": 99.29200744628906,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains CaMeL Ignore CaMeL Case ( str ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ! searchStr.toUpperCase( ) , searchStr ) ;",
            "score": 99.4555996981534,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ! search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.trim( ) )",
            "score": 99.44113498263889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr.}",
            "score": 99.4407894736842,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str . }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.charAt(0) == ', ') ;",
            "score": 99.4109748391544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.charAt(0) == 'ABCDEF') ;",
            "score": 99.4109748391544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.charAt(0) == 'cde') ;",
            "score": 99.4109748391544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.charAt(0) == 'def') ;",
            "score": 99.4109748391544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.charAt(0) == 'abcdef') ;",
            "score": 99.4109748391544,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( search CaMeL Str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr , false ) ;",
            "score": 99.35842715992646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr == null ) ;",
            "score": 99.30361703725961,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.trim( ) == null ) ;",
            "score": 99.291748046875,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . trim ( ) == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , chars.toUpperCase( ) ) ;",
            "score": 99.45428825827206,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , chars . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , new String [ ] { searchStr",
            "score": 99.43975830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , new String [ ] { search CaMeL Str",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) || searchStr.equals( searchStr ) ;",
            "score": 99.41012912326389,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) || search CaMeL Str . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.trim( ).length( ) ) ;",
            "score": 99.35737879136029,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . trim ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( str.toUpperCase( ) ) ;",
            "score": 99.29945373535156,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , value ) ;",
            "score": 99.2917236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.endsWith( str ) ) ;",
            "score": 99.36528184678819,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ends CaMeL With ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(1) , searchStr ) ;",
            "score": 99.30126190185547,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . substring ( 1 ) , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( new String( str , searchStr ) ) ;",
            "score": 99.29702962239584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ).toUpperCase( )",
            "score": 99.43788655598958,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) . to CaMeL Upper CaMeL Case ( )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', '.toUpperCase( ) ) ;",
            "score": 99.4097541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.4097541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'.toUpperCase( ) ) ;",
            "score": 99.4097541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'.toUpperCase( ) ) ;",
            "score": 99.4097541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.4097541360294,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( searchStr.indexOf( str ) >=0) ;",
            "score": 99.4096320657169,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) >= 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.trim( ).length( ) >0) ;",
            "score": 99.35690487132354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.toUpperCase( ) ,",
            "score": 99.29690755208334,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name.toUpperCase( ) ) ;",
            "score": 99.29146321614583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || str.length( ) ==0) ;",
            "score": 99.40931701660156,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null || str . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.indexOf( ', ') <0;",
            "score": 99.35616048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'ABCDEF') <0;",
            "score": 99.35616048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'cde') <0;",
            "score": 99.35616048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'def') <0;",
            "score": 99.35616048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( 'abcdef') <0;",
            "score": 99.35616048177083,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( $STRING$ ) < 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr , false ) ; }",
            "score": 99.300537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str , false ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null || searchStr != null ) {",
            "score": 99.29314422607422,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null || search CaMeL Str != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( in.toUpperCase( ) , searchStr ) ;",
            "score": 99.45321494654605,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( in . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ] ) ) ;",
            "score": 99.36180284288194,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.startsWith( str.length( ) ) ;",
            "score": 99.35584214154412,
            "correctness": "uncompilable",
            "tokenized_patch": "return search CaMeL Str . starts CaMeL With ( str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { { return false ;",
            "score": 99.28792027064732,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , str.toUpperCase( ) ) != -1;",
            "score": 99.45290305397727,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , str . to CaMeL Upper CaMeL Case ( ) ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return ! isEmpty( str.toUpperCase( ) ) ;",
            "score": 99.40891520182292,
            "correctness": "wrong",
            "tokenized_patch": "return ! is CaMeL Empty ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str != null || searchStr == null ) ;",
            "score": 99.30052897135417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str != null || search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains( str , searchStr ) ) ;",
            "score": 99.29212297712054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.length( ) ==0) { return true ;",
            "score": 99.28772786458333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . length ( ) == 0 ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) , )",
            "score": 99.43392141241776,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) , )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) ) ; ;",
            "score": 99.40635375976562,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ; ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( chars , str.toUpperCase( ) ) ;",
            "score": 99.36027257582721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( chars , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; }",
            "score": 99.29635184151786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return contains( str.toUpperCase( ) ,",
            "score": 99.28966471354167,
            "correctness": "uncompilable",
            "tokenized_patch": "return return contains ( str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str , searchStr ) ) { return false ;",
            "score": 99.2876205444336,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str , search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return count( str , searchStr.toUpperCase( ) ) ==0;",
            "score": 99.45203218005952,
            "correctness": "uncompilable",
            "tokenized_patch": "return count ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ) ? false : true ;",
            "score": 99.40616005345395,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ) ? false : true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains = length( str.toUpperCase( ) ) ;",
            "score": 99.35981301700367,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains = length ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toUpperCase( searchStr ) ) ;",
            "score": 99.28904724121094,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ', '.equals( searchStr ) ) { return false ;",
            "score": 99.28683471679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . equals ( search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'ABCDEF'.equals( searchStr ) ) { return false ;",
            "score": 99.28683471679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . equals ( search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'cde'.equals( searchStr ) ) { return false ;",
            "score": 99.28683471679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . equals ( search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'def'.equals( searchStr ) ) { return false ;",
            "score": 99.28683471679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . equals ( search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'abcdef'.equals( searchStr ) ) { return false ;",
            "score": 99.28683471679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ . equals ( search CaMeL Str ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ? null : str.toUpperCase( ) ;",
            "score": 99.40348307291667,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? null : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) <0;",
            "score": 99.35792371961806,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) < 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ).equals( searchStr ) ;",
            "score": 99.35237339564732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + searchStr , searchStr ) ;",
            "score": 99.293115234375,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str + search CaMeL Str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( str == null ) { return ) { return ) ;",
            "score": 99.28578404017857,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return ) { return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( this ) ) ;",
            "score": 99.40581665039062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( this ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ? true : str.toUpperCase( ) ;",
            "score": 99.40334065755208,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ? true : str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains contains( str , searchStr.length( ) ) ;",
            "score": 99.35164642333984,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0) ;",
            "score": 99.29259575737848,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return ) return true ;",
            "score": 99.28438313802083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return ) return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).trim( ).length( ) ==0;",
            "score": 99.45103870738636,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr.trim( ) ) ;",
            "score": 99.40342203776042,
            "correctness": "uncompilable",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) >1;",
            "score": 99.40287272135417,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) > 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return false ; } break ;",
            "score": 99.29124450683594,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return false ; } break ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( contains( str.toUpperCase( ) ) )",
            "score": 99.27973175048828,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( contains ( str . to CaMeL Upper CaMeL Case ( ) ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).length( ) ) ;",
            "score": 99.40470805921052,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( searchStr ) > -1;",
            "score": 99.40250651041667,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( search CaMeL Str ) > - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) !=1;",
            "score": 99.40151638454861,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) != 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toUpperCase( ] ) ) ;",
            "score": 99.35535430908203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ] ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.split( ', ') ) ;",
            "score": 99.35008239746094,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.split( 'ABCDEF') ) ;",
            "score": 99.35008239746094,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.split( 'cde') ) ;",
            "score": 99.35008239746094,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.split( 'def') ) ;",
            "score": 99.35008239746094,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.split( 'abcdef') ) ;",
            "score": 99.35008239746094,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . split ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( searchStr == null ) { return false ;",
            "score": 99.28242710658482,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || str.toUpperCase( ) ;",
            "score": 99.27938842773438,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null || str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return replace( str.toUpperCase( ) , searchStr ) ;",
            "score": 99.4508120888158,
            "correctness": "uncompilable",
            "tokenized_patch": "return replace ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) : contains( searchStr ) ;",
            "score": 99.43064371744792,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) : contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( ', ') != -1) ;",
            "score": 99.34852510340073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'ABCDEF') != -1) ;",
            "score": 99.34852510340073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'cde') != -1) ;",
            "score": 99.34852510340073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'def') != -1) ;",
            "score": 99.34852510340073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( 'abcdef') != -1) ;",
            "score": 99.34852510340073,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) ,",
            "score": 99.28953552246094,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , name ) ;",
            "score": 99.28241373697917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , name ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , new String( searchStr ) ) ;",
            "score": 99.2783203125,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , new String ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return value( str , searchStr.toUpperCase( ) ) == null ;",
            "score": 99.44947451636905,
            "correctness": "uncompilable",
            "tokenized_patch": "return value ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , searchStr ).",
            "score": 99.42900005139802,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isBlank( str.toUpperCase( ) ) ;",
            "score": 99.40187701056985,
            "correctness": "wrong",
            "tokenized_patch": "return is CaMeL Blank ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , str.length( ) ) ;",
            "score": 99.34811580882354,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) ,0) ;",
            "score": 99.28876139322917,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return ) return ) ;",
            "score": 99.2808837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return ) return ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + ', ';",
            "score": 99.27787780761719,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'ABCDEF';",
            "score": 99.27787780761719,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'cde';",
            "score": 99.27787780761719,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'def';",
            "score": 99.27787780761719,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) + 'abcdef';",
            "score": 99.27787780761719,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) + $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.equals( str.toUpperCase( ) ) ;",
            "score": 99.34792911305146,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ;",
            "score": 99.28850446428571,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ! str.toUpperCase( ) ) ;",
            "score": 99.27603149414062,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ! str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return name.toUpperCase( ).trim( ).length( ) ==0;",
            "score": 99.4481534090909,
            "correctness": "uncompilable",
            "tokenized_patch": "return name . to CaMeL Upper CaMeL Case ( ) . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + searchStr ) ;",
            "score": 99.42811986019737,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.length( ) != searchStr.length( ) ) ;",
            "score": 99.401123046875,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . length ( ) != search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return System.getProperty( ', ').equals( str ) ;",
            "score": 99.34734344482422,
            "correctness": "uncompilable",
            "tokenized_patch": "return System . get CaMeL Property ( $STRING$ ) . equals ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return System.getProperty( 'ABCDEF').equals( str ) ;",
            "score": 99.34734344482422,
            "correctness": "uncompilable",
            "tokenized_patch": "return System . get CaMeL Property ( $STRING$ ) . equals ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return System.getProperty( 'cde').equals( str ) ;",
            "score": 99.34734344482422,
            "correctness": "uncompilable",
            "tokenized_patch": "return System . get CaMeL Property ( $STRING$ ) . equals ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return System.getProperty( 'def').equals( str ) ;",
            "score": 99.34734344482422,
            "correctness": "uncompilable",
            "tokenized_patch": "return System . get CaMeL Property ( $STRING$ ) . equals ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return System.getProperty( 'abcdef').equals( str ) ;",
            "score": 99.34734344482422,
            "correctness": "uncompilable",
            "tokenized_patch": "return System . get CaMeL Property ( $STRING$ ) . equals ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ,0, true ) ;",
            "score": 99.28795572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , 0 , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( l , searchStr ) ;",
            "score": 99.27932942708334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( l , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , str.toUpperCase( ) ) ;",
            "score": 99.40372043185764,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str != null && searchStr == null ) ;",
            "score": 99.28792317708333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str != null && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , false ) ;",
            "score": 99.27914663461539,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) -0) ;",
            "score": 99.44745163690476,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) - 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) false )",
            "score": 99.42741956208882,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) false )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( String.valueOf( str ) ) ;",
            "score": 99.40029568142361,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( String . value CaMeL Of ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', '+ searchStr.trim( ) ) ;",
            "score": 99.34318273207721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'+ searchStr.trim( ) ) ;",
            "score": 99.34318273207721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'+ searchStr.trim( ) ) ;",
            "score": 99.34318273207721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'+ searchStr.trim( ) ) ;",
            "score": 99.34318273207721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'+ searchStr.trim( ) ) ;",
            "score": 99.34318273207721,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , true ) ;",
            "score": 99.27870279947916,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return 0!= str.toUpperCase( ).toUpperCase( ) ;",
            "score": 99.4469327059659,
            "correctness": "uncompilable",
            "tokenized_patch": "return 0 != str . to CaMeL Upper CaMeL Case ( ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.equals( ', '.toUpperCase( ) ) ;",
            "score": 99.40022108289931,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.equals( 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.40022108289931,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.equals( 'cde'.toUpperCase( ) ) ;",
            "score": 99.40022108289931,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.equals( 'def'.toUpperCase( ) ) ;",
            "score": 99.40022108289931,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! str.equals( 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.40022108289931,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( ', '.toUpperCase( ) ) ;",
            "score": 99.35062902113971,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( 'ABCDEF'.toUpperCase( ) ) ;",
            "score": 99.35062902113971,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( 'cde'.toUpperCase( ) ) ;",
            "score": 99.35062902113971,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( 'def'.toUpperCase( ) ) ;",
            "score": 99.35062902113971,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.equals( 'abcdef'.toUpperCase( ) ) ;",
            "score": 99.35062902113971,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . equals ( $STRING$ . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr , null ) ; }",
            "score": 99.28689575195312,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str , null ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + true ) ;",
            "score": 99.42472570082721,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + true ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) == ', '+ searchStr ;",
            "score": 99.39365641276042,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'ABCDEF'+ searchStr ;",
            "score": 99.39365641276042,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'cde'+ searchStr ;",
            "score": 99.39365641276042,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'def'+ searchStr ;",
            "score": 99.39365641276042,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == 'abcdef'+ searchStr ;",
            "score": 99.39365641276042,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == $STRING$ + search CaMeL Str ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.next( ) ) ;",
            "score": 99.35030924479166,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . next ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length , false ) ;",
            "score": 99.28594563802083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , ', ') ;",
            "score": 99.27679850260417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , 'ABCDEF') ;",
            "score": 99.27679850260417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , 'cde') ;",
            "score": 99.27679850260417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , 'def') ;",
            "score": 99.27679850260417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , 'abcdef') ;",
            "score": 99.27679850260417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == ) ;",
            "score": 99.26690266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) *1;",
            "score": 99.4231316061581,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) * 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.length( ) ==0) ;",
            "score": 99.39994303385417,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . length ( ) == 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) == null.length( ) ;",
            "score": 99.39305284288194,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null . length ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , filter.toUpperCase( ) ) ;",
            "score": 99.35020536534927,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , filter . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,0, true ) ;",
            "score": 99.28568522135417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 0 , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( value.toUpperCase( ) ) ;",
            "score": 99.27649739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( value . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( null , str.toUpperCase( ) ,",
            "score": 99.2655258178711,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( null , str . to CaMeL Upper CaMeL Case ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str.toUpperCase( ) , true ) ; }",
            "score": 99.399560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str . to CaMeL Upper CaMeL Case ( ) , true ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( str ) >=0;",
            "score": 99.3412109375,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( str ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr , false , false ) ;",
            "score": 99.28490397135417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , false , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr +0) ;",
            "score": 99.42270795036765,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) == null.trim( ) ;",
            "score": 99.391357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains contains( str.toUpperCase( ) ) ;",
            "score": 99.33988952636719,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.trim( ) ) ;",
            "score": 99.27550330528847,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toArray( ) ) ;",
            "score": 99.26340895432692,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Array ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str.toUpperCase( ) , searchStr ) != null ;",
            "score": 99.4426502046131,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', '+ str.toUpperCase( ) ) ;",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'+ str.toUpperCase( ) ) ;",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'+ str.toUpperCase( ) ) ;",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'+ str.toUpperCase( ) ) ;",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'+ str.toUpperCase( ) ) ;",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ + str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr , false ) ;",
            "score": 99.28309733072916,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return if( searchStr == null ) { return false ;",
            "score": 99.27536446707589,
            "correctness": "uncompilable",
            "tokenized_patch": "return if ( search CaMeL Str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return count( str , searchStr.toUpperCase( ) ) !=0;",
            "score": 99.44261532738095,
            "correctness": "uncompilable",
            "tokenized_patch": "return count ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) != 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( containsIgnoreCase( str , searchStr ) ) ;",
            "score": 99.38994683159723,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , true , false ) ;",
            "score": 99.283056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , true , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( new String( str ) ) ;",
            "score": 99.25746256510416,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( new String ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null ].toUpperCase( ) ;",
            "score": 99.38887532552083,
            "correctness": "uncompilable",
            "tokenized_patch": "return str == null ] . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.trim( ).length( ) >=0;",
            "score": 99.34752655029297,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . length ( ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.substring(0, searchStr ) ) ;",
            "score": 99.33806610107422,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toUpperCase( ) true )",
            "score": 99.42020456414474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) true )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.searchStr ) ;",
            "score": 99.34505208333333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr ) != -1;",
            "score": 99.33805084228516,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str ) != - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str , null , ) ;",
            "score": 99.2725830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null ; }",
            "score": 99.25396321614583,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( toUpperCase( str ) , searchStr ) ;",
            "score": 99.38616943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( to CaMeL Upper CaMeL Case ( str ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).trim( ).length( ) ==0;",
            "score": 99.34418402777777,
            "correctness": "wrong",
            "tokenized_patch": "return str . trim ( ) . trim ( ) . length ( ) == 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.equalsIgnoreCase( searchStr ) ) ;",
            "score": 99.33783318014706,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . equals CaMeL Ignore CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "0/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.clear( ) ) ;",
            "score": 99.27217610677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . clear ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isEnum( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44174339657738,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Enum ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return true ;",
            "score": 99.39580977590461,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.substring( length( ) ) ) ;",
            "score": 99.34383816189236,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . substring ( length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.length( ) < searchStr.length( ) ;",
            "score": 99.33748626708984,
            "correctness": "wrong",
            "tokenized_patch": "return str . length ( ) < search CaMeL Str . length ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.clone( ) , searchStr ) ;",
            "score": 99.28014322916667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . clone ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ', '== searchStr ) { return false ;",
            "score": 99.27072378305289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'ABCDEF'== searchStr ) { return false ;",
            "score": 99.27072378305289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'cde'== searchStr ) { return false ;",
            "score": 99.27072378305289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'def'== searchStr ) { return false ;",
            "score": 99.27072378305289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( 'abcdef'== searchStr ) { return false ;",
            "score": 99.27072378305289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( $STRING$ == search CaMeL Str ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ; }",
            "score": 99.2534891764323,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) == ) ;",
            "score": 99.39515516493056,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( char ) str.charAt(0) == ', ') ;",
            "score": 99.39369710286458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( char ) str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( char ) str.charAt(0) == 'ABCDEF') ;",
            "score": 99.39369710286458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( char ) str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( char ) str.charAt(0) == 'cde') ;",
            "score": 99.39369710286458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( char ) str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( char ) str.charAt(0) == 'def') ;",
            "score": 99.39369710286458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( char ) str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return(( char ) str.charAt(0) == 'abcdef') ;",
            "score": 99.39369710286458,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( ( char ) str . char CaMeL At ( 0 ) == $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + searchStr.length( ) +1) ;",
            "score": 99.33725873161765,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + search CaMeL Str . length ( ) + 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr , false ) ;",
            "score": 99.28006184895834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,( String ) null ) ;",
            "score": 99.2668965657552,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , ( String ) null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', str , searchStr ) ;",
            "score": 99.25306114783653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str , searchStr ) ;",
            "score": 99.25306114783653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str , searchStr ) ;",
            "score": 99.25306114783653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str , searchStr ) ;",
            "score": 99.25306114783653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str , searchStr ) ;",
            "score": 99.25306114783653,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).size( ) >0;",
            "score": 99.38170030381944,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . size ( ) > 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return equals( str , str.toUpperCase( ) ) ;",
            "score": 99.34274471507354,
            "correctness": "wrong",
            "tokenized_patch": "return equals ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( contains( str.toLowerCase( ) ) ) ;",
            "score": 99.3370361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains ( str . to CaMeL Lower CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.size( ) ==0) { return false ;",
            "score": 99.26463216145834,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . size ( ) == 0 ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! str.length( ) ==0) {",
            "score": 99.24899526742789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! str . length ( ) == 0 ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains2length( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44124348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains $NUMBER$ length ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains4length( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44124348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains $NUMBER$ length ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains3length( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44124348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains $NUMBER$ length ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains8length( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44124348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains $NUMBER$ length ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains7length( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44124348958333,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains $NUMBER$ length ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( searchStr ) <0) ;",
            "score": 99.39194623161765,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . index CaMeL Of ( search CaMeL Str ) < 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , null ).toUpperCase( ) ;",
            "score": 99.38116096047794,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , null ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , matches( searchStr , searchStr ) ) ;",
            "score": 99.34192572699652,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , matches ( search CaMeL Str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr , null ) ;",
            "score": 99.2774658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr , null ) ;",
            "score": 99.2774658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr , null ) ;",
            "score": 99.2774658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr , null ) ;",
            "score": 99.2774658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr , null ) ;",
            "score": 99.2774658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == false ) { return false ;",
            "score": 99.26361553485577,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == false ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( this , str , searchStr.toUpperCase( ) ) ;",
            "score": 99.44102260044643,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( this , str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ,0)",
            "score": 99.41642761230469,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) ) ) ;",
            "score": 99.39197540283203,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring(0, searchStr.) ) ;",
            "score": 99.39145076976104,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( 0 , search CaMeL Str . ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return indexOf( str , searchStr ) == -1;",
            "score": 99.33524322509766,
            "correctness": "wrong",
            "tokenized_patch": "return index CaMeL Of ( str , search CaMeL Str ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.append( ) ) ;",
            "score": 99.27408854166667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . append ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str ,0) ;",
            "score": 99.26304524739584,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( ', ') , searchStr ) ;",
            "score": 99.24527994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'ABCDEF') , searchStr ) ;",
            "score": 99.24527994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'cde') , searchStr ) ;",
            "score": 99.24527994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'def') , searchStr ) ;",
            "score": 99.24527994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( 'abcdef') , searchStr ) ;",
            "score": 99.24527994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( $STRING$ ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.length( ) , searchStr ) ;",
            "score": 99.33519071691177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , searchStr , null ) ;",
            "score": 99.27244466145834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || str == null ) { return false ;",
            "score": 99.26138509114584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || str == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).startsWith( ', ') ;",
            "score": 99.39060572574013,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).startsWith( 'ABCDEF') ;",
            "score": 99.39060572574013,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).startsWith( 'cde') ;",
            "score": 99.39060572574013,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).startsWith( 'def') ;",
            "score": 99.39060572574013,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).startsWith( 'abcdef') ;",
            "score": 99.39060572574013,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( )( ) ) ;",
            "score": 99.34038229549633,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.charAt(0) ) ;",
            "score": 99.33358001708984,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , str . char CaMeL At ( 0 ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.trim( ) , false ) ;",
            "score": 99.269482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . trim ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) return ) { return false ;",
            "score": 99.259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + ', '&& searchStr == null ) ;",
            "score": 99.23858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'ABCDEF'&& searchStr == null ) ;",
            "score": 99.23858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'cde'&& searchStr == null ) ;",
            "score": 99.23858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'def'&& searchStr == null ) ;",
            "score": 99.23858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + 'abcdef'&& searchStr == null ) ;",
            "score": 99.23858235677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + $STRING$ && search CaMeL Str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , String.substring( ).toUpperCase( ) ) ;",
            "score": 99.4384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , String . substring ( ) . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , isLowerCase( searchStr ) ) ;",
            "score": 99.33888075086806,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , is CaMeL Lower CaMeL Case ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str != null || searchStr == null ) {",
            "score": 99.23784528459821,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str != null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ) ? false : false ;",
            "score": 99.38986045435855,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ) ? false : false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && containsIgnoreCase( str ) ;",
            "score": 99.38981628417969,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , str.toUpperCase( ) ) ;",
            "score": 99.33821375229779,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toString( ) , true ) ;",
            "score": 99.26761881510417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr.equals( ) ) { return false ;",
            "score": 99.25863444010416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str . equals ( ) ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ', ') ,",
            "score": 99.237109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'ABCDEF') ,",
            "score": 99.237109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'cde') ,",
            "score": 99.237109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'def') ,",
            "score": 99.237109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( 'abcdef') ,",
            "score": 99.237109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( $STRING$ ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return matches( str , str.toUpperCase( ) , searchStr ) ;",
            "score": 99.43779064360119,
            "correctness": "uncompilable",
            "tokenized_patch": "return matches ( str , str . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , toUpperCase( ) ) ;",
            "score": 99.3769890280331,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains.equals( str.toUpperCase( ) ) ;",
            "score": 99.3380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains . equals ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ) ) ;",
            "score": 99.33277130126953,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str + searchStr ) ;",
            "score": 99.26747824928977,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return searchStr == null ;",
            "score": 99.25806477864583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return search CaMeL Str == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else if( str == null || searchStr == null ) {",
            "score": 99.23633626302083,
            "correctness": "uncompilable",
            "tokenized_patch": "else if ( str == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).length( ) == ) ;",
            "score": 99.3895327919408,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . length ( ) == ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') <= -1) ;",
            "score": 99.38770294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') <= -1) ;",
            "score": 99.38770294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') <= -1) ;",
            "score": 99.38770294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') <= -1) ;",
            "score": 99.38770294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') <= -1) ;",
            "score": 99.38770294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) <= - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.trim( ).length( ) >=0) ;",
            "score": 99.33566284179688,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . trim ( ) . length ( ) >= 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.indexOf( ', ') != -1;",
            "score": 99.33233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'ABCDEF') != -1;",
            "score": 99.33233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'cde') != -1;",
            "score": 99.33233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'def') != -1;",
            "score": 99.33233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'abcdef') != -1;",
            "score": 99.33233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) != - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) == false ;",
            "score": 99.26657339242789,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) == false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( in , searchStr ) ;",
            "score": 99.2573974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( in , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( searchStr ) ) ;",
            "score": 99.2349102313702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return toString( str ).toUpperCase( ).trim( ) ;",
            "score": 99.43633742559524,
            "correctness": "uncompilable",
            "tokenized_patch": "return to CaMeL String ( str ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ).substring( ) ) ;",
            "score": 99.38908948396382,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) . substring ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str.charAt( ) ) ;",
            "score": 99.38650333180146,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str . char CaMeL At ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ) ;",
            "score": 99.26634724934895,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , null , false ) ;",
            "score": 99.2551513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , null , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.toUpperCase( ) , charValue ) ;",
            "score": 99.43610582853618,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . to CaMeL Upper CaMeL Case ( ) , char CaMeL Value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr + false ) ;",
            "score": 99.407958984375,
            "correctness": "wrong",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str + false ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.indexOf( searchStr ) == -1;",
            "score": 99.38536071777344,
            "correctness": "wrong",
            "tokenized_patch": "return str . index CaMeL Of ( search CaMeL Str ) == - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.trim( ).length( ) !=0) ;",
            "score": 99.33246612548828,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . trim ( ) . length ( ) != 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str.toString( ) , null ) ;",
            "score": 99.26398111979167,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str . to CaMeL String ( ) , null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( name , searchStr , ', ') ;",
            "score": 99.25357759915866,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , 'ABCDEF') ;",
            "score": 99.25357759915866,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , 'cde') ;",
            "score": 99.25357759915866,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , 'def') ;",
            "score": 99.25357759915866,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , 'abcdef') ;",
            "score": 99.25357759915866,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', str.toString( ) ) ;",
            "score": 99.232958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', str.toString( ) ) ;",
            "score": 99.232958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', str.toString( ) ) ;",
            "score": 99.232958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', str.toString( ) ) ;",
            "score": 99.232958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', str.toString( ) ) ;",
            "score": 99.232958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , str . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return true ;",
            "score": 99.38881548713235,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( ', ') != -1) ;",
            "score": 99.38376034007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'ABCDEF') != -1) ;",
            "score": 99.38376034007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'cde') != -1) ;",
            "score": 99.38376034007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'def') != -1) ;",
            "score": 99.38376034007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.indexOf( 'abcdef') != -1) ;",
            "score": 99.38376034007354,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . index CaMeL Of ( $STRING$ ) != - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr ).toUpperCase( ) ;",
            "score": 99.37112247242646,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str ) . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.equals( ) ) ;",
            "score": 99.26392415364583,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . equals ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name , ', ') ;",
            "score": 99.2534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name , 'ABCDEF') ;",
            "score": 99.2534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name , 'cde') ;",
            "score": 99.2534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name , 'def') ;",
            "score": 99.2534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , name , 'abcdef') ;",
            "score": 99.2534423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , name , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr [1] ) ;",
            "score": 99.40603976779514,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str [ 1 ] ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toLowerCase( ) ) ;",
            "score": 99.32884114583334,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ,0,0) ;",
            "score": 99.263623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , 0 , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , true ) ;",
            "score": 99.25326772836539,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return if( str == null || searchStr == null ) {",
            "score": 99.23059895833333,
            "correctness": "uncompilable",
            "tokenized_patch": "return if ( str == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.size( ) -1) ;",
            "score": 99.33128446691177,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . size ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.charAt(0) == ', ';",
            "score": 99.32857572115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.charAt(0) == 'ABCDEF';",
            "score": 99.32857572115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.charAt(0) == 'cde';",
            "score": 99.32857572115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.charAt(0) == 'def';",
            "score": 99.32857572115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.charAt(0) == 'abcdef';",
            "score": 99.32857572115384,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . char CaMeL At ( 0 ) == $STRING$ ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', '+ searchStr ) ;",
            "score": 99.25301419771634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF'+ searchStr ) ;",
            "score": 99.25301419771634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde'+ searchStr ) ;",
            "score": 99.25301419771634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def'+ searchStr ) ;",
            "score": 99.25301419771634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef'+ searchStr ) ;",
            "score": 99.25301419771634,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ + search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', contains( str ) ) ;",
            "score": 99.2299296061198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', contains( str ) ) ;",
            "score": 99.2299296061198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', contains( str ) ) ;",
            "score": 99.2299296061198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', contains( str ) ) ;",
            "score": 99.2299296061198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', contains( str ) ) ;",
            "score": 99.2299296061198,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) +0;",
            "score": 99.40574017693015,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) + 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "containsIgnoreCase( str , searchStr ) ; return true ;",
            "score": 99.38129739200367,
            "correctness": "wrong",
            "tokenized_patch": "contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) ; return true ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , false , false ) ;",
            "score": 99.2623623934659,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , false , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', searchStr.trim( ) ) ;",
            "score": 99.25218912760417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr.trim( ) ) ;",
            "score": 99.25218912760417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr.trim( ) ) ;",
            "score": 99.25218912760417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr.trim( ) ) ;",
            "score": 99.25218912760417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr.trim( ) ) ;",
            "score": 99.25218912760417,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return str.toUpperCase( ).length( ) ==0;",
            "score": 99.38548583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return str . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , this.searchStr ) ;",
            "score": 99.36475327435662,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , this . search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ! searchStr.length( ) ) ;",
            "score": 99.33036041259766,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , ! search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr , false ) ;",
            "score": 99.26234537760416,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) ) == null ;",
            "score": 99.251708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', ', ') ;",
            "score": 99.22580190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', 'ABCDEF') ;",
            "score": 99.22580190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', 'cde') ;",
            "score": 99.22580190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', 'def') ;",
            "score": 99.22580190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', 'abcdef') ;",
            "score": 99.22580190805289,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).startsWith( ', ') ;",
            "score": 99.32686360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).startsWith( 'ABCDEF') ;",
            "score": 99.32686360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).startsWith( 'cde') ;",
            "score": 99.32686360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).startsWith( 'def') ;",
            "score": 99.32686360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).startsWith( 'abcdef') ;",
            "score": 99.32686360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . trim ( ) . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return contains( str , searchStr , null ) ;",
            "score": 99.259912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains ( str , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return ) return false ;",
            "score": 99.2508075420673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return ) return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + ', ') ;",
            "score": 99.22360464242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'ABCDEF') ;",
            "score": 99.22360464242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'cde') ;",
            "score": 99.22360464242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'def') ;",
            "score": 99.22360464242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str + 'abcdef') ;",
            "score": 99.22360464242789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str + $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) == -1) ;",
            "score": 99.3624626608456,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).length( ) >=0;",
            "score": 99.32935442243304,
            "correctness": "wrong",
            "tokenized_patch": "return str . trim ( ) . length ( ) >= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.indexOf( ', ') > -1;",
            "score": 99.32521275111607,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'ABCDEF') > -1;",
            "score": 99.32521275111607,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'cde') > -1;",
            "score": 99.32521275111607,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'def') > -1;",
            "score": 99.32521275111607,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.indexOf( 'abcdef') > -1;",
            "score": 99.32521275111607,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . index CaMeL Of ( $STRING$ ) > - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr ,0) ;",
            "score": 99.25056966145833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str , 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( searchStr == null ) { return true ; } return false ;",
            "score": 99.36201028262867,
            "correctness": "wrong",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return true ; } return false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', '.toUpperCase( ) , str ) ;",
            "score": 99.3266960592831,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF'.toUpperCase( ) , str ) ;",
            "score": 99.3266960592831,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde'.toUpperCase( ) , str ) ;",
            "score": 99.3266960592831,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def'.toUpperCase( ) , str ) ;",
            "score": 99.3266960592831,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef'.toUpperCase( ) , str ) ;",
            "score": 99.3266960592831,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ . to CaMeL Upper CaMeL Case ( ) , str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase(( String ) str ) ;",
            "score": 99.25056675502232,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( ( String ) str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! str.equals( searchStr ) ) {",
            "score": 99.22010149274554,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! str . equals ( search CaMeL Str ) ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return delete( str , searchStr.toUpperCase( ) ) ;",
            "score": 99.42916709498355,
            "correctness": "uncompilable",
            "tokenized_patch": "return delete ( str , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == -1;",
            "score": 99.3617919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ) + str.toUpperCase( ) ;",
            "score": 99.32533264160156,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ) + str . to CaMeL Upper CaMeL Case ( ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.indexOf( searchStr ) ) ;",
            "score": 99.3249282836914,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . index CaMeL Of ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return containsIgnoreCase( str ) ;",
            "score": 99.24715482271634,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( name == null || searchStr == null ) {",
            "score": 99.21697998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( name == null || search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , lowerCase.toUpperCase( ) ) ;",
            "score": 99.38116776315789,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , lower CaMeL Case . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == searchStr ;",
            "score": 99.3601303100586,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == search CaMeL Str ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , ', ', ', ') ;",
            "score": 99.24535023082386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', 'ABCDEF') ;",
            "score": 99.24535023082386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', 'cde') ;",
            "score": 99.24535023082386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', 'def') ;",
            "score": 99.24535023082386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', 'abcdef') ;",
            "score": 99.24535023082386,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ) + false ;",
            "score": 99.36005401611328,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( )1) ;",
            "score": 99.32450103759766,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , ', ', false ) ;",
            "score": 99.24445134943181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', false ) ;",
            "score": 99.24445134943181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', false ) ;",
            "score": 99.24445134943181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', false ) ;",
            "score": 99.24445134943181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', false ) ;",
            "score": 99.24445134943181,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( ', ', contains( searchStr ) ) ;",
            "score": 99.20862688337054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', contains( searchStr ) ) ;",
            "score": 99.20862688337054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', contains( searchStr ) ) ;",
            "score": 99.20862688337054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', contains( searchStr ) ) ;",
            "score": 99.20862688337054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', contains( searchStr ) ) ;",
            "score": 99.20862688337054,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr.length( ) )",
            "score": 99.39892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str . length ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).length( ) <=0;",
            "score": 99.38016764322917,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . length ( ) <= 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( searchStr.indexOf( str ) <=0) ;",
            "score": 99.37556726792279,
            "correctness": "wrong",
            "tokenized_patch": "return ( search CaMeL Str . index CaMeL Of ( str ) <= 0 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) == null [0] ;",
            "score": 99.35851332720588,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null [ 0 ] ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') <0) ;",
            "score": 99.32063802083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') <0) ;",
            "score": 99.32063802083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') <0) ;",
            "score": 99.32063802083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') <0) ;",
            "score": 99.32063802083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') <0) ;",
            "score": 99.32063802083333,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) < 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , str , ) ;",
            "score": 99.24405343191964,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , str , ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , searchStr.",
            "score": 99.20826067243304,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , search CaMeL Str .",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , ', ')",
            "score": 99.39737701416016,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'ABCDEF')",
            "score": 99.39737701416016,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'cde')",
            "score": 99.39737701416016,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'def')",
            "score": 99.39737701416016,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr , 'abcdef')",
            "score": 99.39737701416016,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str , $STRING$ )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( str ) == -1) ;",
            "score": 99.3738784790039,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . index CaMeL Of ( str ) == - 1 ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , searchStr.( ) ) ;",
            "score": 99.32258823939732,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ,0, false ) ;",
            "score": 99.2529629794034,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , 0 , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str ) ;",
            "score": 99.24390758167614,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str == null || searchStr == null ;",
            "score": 99.20531209309895,
            "correctness": "wrong",
            "tokenized_patch": "return str == null || search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( command , searchStr.toUpperCase( ) ) ;",
            "score": 99.37625925164474,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( command , search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.indexOf( str ) <= -1;",
            "score": 99.3733901977539,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( str ) <= - 1 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , ', ', searchStr.length( ) ) ;",
            "score": 99.32187787224265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'ABCDEF', searchStr.length( ) ) ;",
            "score": 99.32187787224265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'cde', searchStr.length( ) ) ;",
            "score": 99.32187787224265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'def', searchStr.length( ) ) ;",
            "score": 99.32187787224265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , 'abcdef', searchStr.length( ) ) ;",
            "score": 99.32187787224265,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , $STRING$ , search CaMeL Str . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null ) { return false ; }",
            "score": 99.25276692708333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null ) { return false ; }",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.contains( searchStr ) ) ;",
            "score": 99.20241873604911,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . contains ( search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ) != null ) ;",
            "score": 99.3551025390625,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( searchStr == null ) { return null ;",
            "score": 99.24215932992789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( search CaMeL Str == null ) { return null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( contains.toUpperCase( ) , searchStr ) ;",
            "score": 99.42058362458882,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( contains . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) -1;",
            "score": 99.39435173483456,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return this.contains( str.toUpperCase( ) ) ;",
            "score": 99.37474867876838,
            "correctness": "uncompilable",
            "tokenized_patch": "return this . contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ).contains( str ) ;",
            "score": 99.35352998621323,
            "correctness": "wrong",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) . contains ( str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str && searchStr.length( ) >0) ;",
            "score": 99.31805778952206,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str && search CaMeL Str . length ( ) > 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.length( ) -1) ;",
            "score": 99.31693209134616,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . length ( ) - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , length ) ;",
            "score": 99.2515117938702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , length ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , toString( ) ) ;",
            "score": 99.24175555889423,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , to CaMeL String ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.indexOf( ', ') ) ;",
            "score": 99.31607818603516,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.indexOf( 'ABCDEF') ) ;",
            "score": 99.31607818603516,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.indexOf( 'cde') ) ;",
            "score": 99.31607818603516,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.indexOf( 'def') ) ;",
            "score": 99.31607818603516,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , str.indexOf( 'abcdef') ) ;",
            "score": 99.31607818603516,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . index CaMeL Of ( $STRING$ ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = str.toUpperCase( ) ; return false ;",
            "score": 99.31547277113971,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = str . to CaMeL Upper CaMeL Case ( ) ; return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.toUpperCase( ).trim( ) != null ) ;",
            "score": 99.41621704101563,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) . trim ( ) != null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , str.toUpperCase( ) )",
            "score": 99.39379119873047,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , str . to CaMeL Upper CaMeL Case ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return contains( str.toUpperCase( ) ) ;",
            "score": 99.37367248535156,
            "correctness": "uncompilable",
            "tokenized_patch": "} return contains ( str . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.length( ) > searchStr.length( ) ;",
            "score": 99.31599426269531,
            "correctness": "wrong",
            "tokenized_patch": "return str . length ( ) > search CaMeL Str . length ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsAll( str , searchStr ) ;",
            "score": 99.31527005709134,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL All ( str , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str , searchStr ) ;",
            "score": 99.24468994140625,
            "correctness": "wrong",
            "tokenized_patch": "return ! contains ( str , search CaMeL Str ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str , name , searchStr ) ;",
            "score": 99.236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , name , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , -1) ;",
            "score": 99.19594900948661,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , - 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name.toUpperCase( ) , searchStr )",
            "score": 99.39286973741319,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String str = searchStr.toUpperCase( ) ; return false ;",
            "score": 99.37346448396382,
            "correctness": "uncompilable",
            "tokenized_patch": "String str = search CaMeL Str . to CaMeL Upper CaMeL Case ( ) ; return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.equals( searchStr ) ) ;",
            "score": 99.37171349158653,
            "correctness": "wrong",
            "tokenized_patch": "return ( str . equals ( search CaMeL Str ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return( str.toUpperCase( ) ==1) ;",
            "score": 99.35005187988281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . to CaMeL Upper CaMeL Case ( ) == 1 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return get( str , searchStr ) == null ;",
            "score": 99.2438495342548,
            "correctness": "uncompilable",
            "tokenized_patch": "return get ( str , search CaMeL Str ) == null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( searchStr ) ;",
            "score": 99.23544546274039,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( new String( str ) ) ;",
            "score": 99.1936922940341,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( new String ( str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return ! contains( str.toLowerCase( ) ) ;",
            "score": 99.37154388427734,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! contains ( str . to CaMeL Lower CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.EMPTY ) ;",
            "score": 99.24242225060097,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . EMPTY ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null ) || searchStr == null ;",
            "score": 99.23348563058036,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null ) || search CaMeL Str == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( list.toUpperCase( ) , searchStr ) ;",
            "score": 99.41403037623355,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( list . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) != null ;",
            "score": 99.39037367876838,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) != null ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( ', ') ) { return true ; } return true ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'ABCDEF') ) { return true ; } return true ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'cde') ) { return true ; } return true ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'def') ) { return true ; } return true ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'abcdef') ) { return true ; } return true ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ; } return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr ) ? false : false ;",
            "score": 99.34583333333333,
            "correctness": "wrong",
            "tokenized_patch": "return contains ( str , search CaMeL Str ) ? false : false ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( str ,( char ) searchStr ) ;",
            "score": 99.24049595424107,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , ( char ) search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( name , searchStr , null ) ;",
            "score": 99.2294452373798,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( name , search CaMeL Str , null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null && searchStr == null ) ;",
            "score": 99.19150216238839,
            "correctness": "wrong",
            "tokenized_patch": "return ( str == null && search CaMeL Str == null ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( command.toUpperCase( ) , searchStr ) ;",
            "score": 99.41362561677632,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( command . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str toUpperCase( ) , searchStr ) ;",
            "score": 99.39035373263889,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.length( ) ) ? true : true ;",
            "score": 99.37291195518092,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . length ( ) ) ? true : true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return startsWith( str , searchStr.trim( ) ) ;",
            "score": 99.37047621783088,
            "correctness": "wrong",
            "tokenized_patch": "return starts CaMeL With ( str , search CaMeL Str . trim ( ) ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.indexOf( str ) <0;",
            "score": 99.31075846354166,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . index CaMeL Of ( str ) < 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return searchStr.trim( ).length( ) !=0;",
            "score": 99.30411529541016,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . trim ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return containsIgnoreCase( str == null ) ;",
            "score": 99.239990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str == null ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( searchStr , String.toUpperCase( ) ) ;",
            "score": 99.41261050575658,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( search CaMeL Str , String . to CaMeL Upper CaMeL Case ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( containsIgnoreCase( str , searchStr ) false ) ;",
            "score": 99.39000786675348,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) != ', ') ;",
            "score": 99.37007141113281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) != 'ABCDEF') ;",
            "score": 99.37007141113281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) != 'cde') ;",
            "score": 99.37007141113281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) != 'def') ;",
            "score": 99.37007141113281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return !( str.charAt(0) != 'abcdef') ;",
            "score": 99.37007141113281,
            "correctness": "uncompilable",
            "tokenized_patch": "return ! ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , true , false ) ;",
            "score": 99.23740456321023,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , true , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains(( String ) searchStr ) ;",
            "score": 99.19051106770833,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( ( String ) search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr )",
            "score": 99.38996233258929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str ) && contains( searchStr ) ;",
            "score": 99.30543736049107,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str ) && contains ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.trim( ) , false ) ;",
            "score": 99.23683518629808,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . trim ( ) , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr.toString( ) == null ;",
            "score": 99.22096470424107,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str . to CaMeL String ( ) == null ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! searchStr.length( ) ==0)",
            "score": 99.19017682756696,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! search CaMeL Str . length ( ) == 0 )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( out.toUpperCase( ) , searchStr ) ;",
            "score": 99.41166606702302,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( out . to CaMeL Upper CaMeL Case ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.class ) ;",
            "score": 99.23639385516827,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . class ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( value , searchStr ) ;",
            "score": 99.2196377840909,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( value , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).equals( searchStr ) ;",
            "score": 99.4111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . equals ( search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( str , searchStr ) + true ;",
            "score": 99.38701315487133,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( str , search CaMeL Str ) + true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( ', ') >=0) ;",
            "score": 99.36866861979166,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'ABCDEF') >=0) ;",
            "score": 99.36866861979166,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'cde') >=0) ;",
            "score": 99.36866861979166,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'def') >=0) ;",
            "score": 99.36866861979166,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.indexOf( 'abcdef') >=0) ;",
            "score": 99.36866861979166,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . index CaMeL Of ( $STRING$ ) >= 0 ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return value.toUpperCase( ).length( ) ==0;",
            "score": 99.36636691623264,
            "correctness": "uncompilable",
            "tokenized_patch": "return value . to CaMeL Upper CaMeL Case ( ) . length ( ) == 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ) + true ;",
            "score": 99.33967590332031,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) + true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , length( ) , searchStr ) ;",
            "score": 99.30125325520834,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , length ( ) , search CaMeL Str ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( ', ') ) { return true ;",
            "score": 99.21818324497768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'ABCDEF') ) { return true ;",
            "score": 99.21818324497768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'cde') ) { return true ;",
            "score": 99.21818324497768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'def') ) { return true ;",
            "score": 99.21818324497768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str.equals( 'abcdef') ) { return true ;",
            "score": 99.21818324497768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str . equals ( $STRING$ ) ) { return true ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( ', ', false ) ;",
            "score": 99.18459848257211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'ABCDEF', false ) ;",
            "score": 99.18459848257211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'cde', false ) ;",
            "score": 99.18459848257211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'def', false ) ;",
            "score": 99.18459848257211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return containsIgnoreCase( 'abcdef', false ) ;",
            "score": 99.18459848257211,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains CaMeL Ignore CaMeL Case ( $STRING$ , false ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return searchStr == null && searchStr.length( ) >0;",
            "score": 99.38635932074652,
            "correctness": "wrong",
            "tokenized_patch": "return search CaMeL Str == null && search CaMeL Str . length ( ) > 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return str.toUpperCase( ) == null + false ;",
            "score": 99.33859252929688,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null + false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.length( ) != searchStr.length( ) ;",
            "score": 99.301025390625,
            "correctness": "wrong",
            "tokenized_patch": "return str . length ( ) != search CaMeL Str . length ( ) ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return contains( ', ', searchStr , true ) ;",
            "score": 99.2339336688702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'ABCDEF', searchStr , true ) ;",
            "score": 99.2339336688702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'cde', searchStr , true ) ;",
            "score": 99.2339336688702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'def', searchStr , true ) ;",
            "score": 99.2339336688702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( 'abcdef', searchStr , true ) ;",
            "score": 99.2339336688702,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( $STRING$ , search CaMeL Str , true ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr , Boolean.TRUE ) ;",
            "score": 99.29720865885416,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str , Boolean . TRUE ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.trim( ) ,",
            "score": 99.23273577008929,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . trim ( ) ,",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( name == null ) { return ) { return false ;",
            "score": 99.21653529575893,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( name == null ) { return ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( ', ', searchStr ) ) ;",
            "score": 99.36809539794922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'ABCDEF', searchStr ) ) ;",
            "score": 99.36809539794922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'cde', searchStr ) ) ;",
            "score": 99.36809539794922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'def', searchStr ) ) ;",
            "score": 99.36809539794922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.replace( 'abcdef', searchStr ) ) ;",
            "score": 99.36809539794922,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . replace ( $STRING$ , search CaMeL Str ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == null -1;",
            "score": 99.33509826660156,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == null - 1 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.substring( ).length( ) ) ;",
            "score": 99.29454752604167,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . substring ( ) . length ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , value ) ;",
            "score": 99.21548122829861,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , value ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null && searchStr == null ) {",
            "score": 99.18177141462054,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null && search CaMeL Str == null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.toUpperCase( ) == false ;",
            "score": 99.33467320033482,
            "correctness": "uncompilable",
            "tokenized_patch": "return str . to CaMeL Upper CaMeL Case ( ) == false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return str.trim( ).length( ) !=0;",
            "score": 99.29814801897321,
            "correctness": "wrong",
            "tokenized_patch": "return str . trim ( ) . length ( ) != 0 ;",
            "failed_triggering": "1/1",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( value == null ) { return false ;",
            "score": 99.21527654474431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( value == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str.charValue( ) ) ;",
            "score": 99.18059833233173,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str . char CaMeL Value ( ) ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return contains( str , searchStr.toString( ) )",
            "score": 99.38411712646484,
            "correctness": "uncompilable",
            "tokenized_patch": "return contains ( str , search CaMeL Str . to CaMeL String ( ) )",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != ', ') ;",
            "score": 99.36640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'ABCDEF') ;",
            "score": 99.36640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'cde') ;",
            "score": 99.36640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'def') ;",
            "score": 99.36640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str.charAt(0) != 'abcdef') ;",
            "score": 99.36640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str . char CaMeL At ( 0 ) != $STRING$ ) ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return( str == null || searchStr == null ) +0;",
            "score": 99.33319854736328,
            "correctness": "uncompilable",
            "tokenized_patch": "return ( str == null || search CaMeL Str == null ) + 0 ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( name == null ) { return false ;",
            "score": 99.20916193181819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( name == null ) { return false ;",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( str == null || searchStr != null ) {",
            "score": 99.17912074497768,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( str == null || search CaMeL Str != null ) {",
            "failed_triggering": "None/1",
            "failed_non_triggering": "None"
        }
    ]
}