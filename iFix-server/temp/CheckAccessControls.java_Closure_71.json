{
    "src": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
    "patches": [
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 100.08311244419643,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.99209449404762,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.93605443050987,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.92041778564453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( )",
            "score": 99.9192123413086,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.90655517578125,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.87228054470486,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.96187918526786,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.94816080729167,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.94087146577381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.93599853515624,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.86932014016544,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.83196057771382,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.81494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.95246233258929,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.91838727678571,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.8672119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( )",
            "score": 99.86141204833984,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.83168431332237,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.81716021369485,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.8143669577206,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.84005301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.83905029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &",
            "score": 99.79652235243056,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.78881157769098,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.77420479910714,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.75081140854779,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.89104614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.88173130580357,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.82245163690476,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.81588745117188,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.74838096217105,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.73869054457721,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope(",
            "score": 99.70210484095982,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.88585205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node getprop , Node parent ) {",
            "score": 99.81400981702302,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.74565972222223,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( )",
            "score": 99.7305679321289,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( )",
            "score": 99.72548014322916,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.71443445542279,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.6968132467831,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.8813720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.811572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.74394395616319,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.71929253472223,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.68937413832721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this ) ;",
            "score": 99.67970186121323,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.84102957589286,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.79880242598684,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.7091423483456,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.80765206473214,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.79460906982422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.76450482536765,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.7346255653783,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.69448513454861,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ) &&",
            "score": 99.68724822998047,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.85101609002976,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.78601792279412,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.72972412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.68838161892361,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) &&",
            "score": 99.6816177368164,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ;",
            "score": 99.64762660435268,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.80122455797698,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , Node parent ) {",
            "score": 99.77587212456598,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.72515869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.68503146701389,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) &&",
            "score": 99.67119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( ) ;",
            "score": 99.64551499310662,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) != null &&",
            "score": 99.61945134943181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) != null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.79296875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node getprop ) {",
            "score": 99.75724487304687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.74677477384868,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.71652061060855,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && t.inGlobalScope( ) &&",
            "score": 99.66726345486111,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.inGlobalScope( ) ;",
            "score": 99.61789772727273,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.81068638392857,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.78445870535714,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.7556884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.74212937127976,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.66544596354167,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.66398351332721,
            "correctness": "wrong",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.62009564568015,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true ) ;",
            "score": 99.61623247931985,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.80950055803571,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent )",
            "score": 99.77593703497024,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node node , Node parent ) {",
            "score": 99.72546968005952,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.70273951480263,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.65869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t.inGlobalScope( ) ;",
            "score": 99.61583116319444,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.61526309742646,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.75309448242187,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent )",
            "score": 99.6945556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.65115017361111,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t.inGlobalScope( ) &&",
            "score": 99.62708875868056,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "boolean isOverride = false.isOverride = t.inGlobalScope( ) ;",
            "score": 99.614501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t.inGlobalScope( ) ;",
            "score": 99.6062744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.78181966145833,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.76571800595238,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) throws",
            "score": 99.7221447172619,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.6811459189967,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) && &",
            "score": 99.64837646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) ;",
            "score": 99.63934326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ) && & &",
            "score": 99.62219916449652,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( this ) ;",
            "score": 99.611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) ;",
            "score": 99.60289764404297,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.7432373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.718701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.68063693576389,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( )",
            "score": 99.63645935058594,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( ) ;",
            "score": 99.62745576746323,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & scope !=0;",
            "score": 99.60252743675595,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & scope != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop , Node parent ) {",
            "score": 99.7752197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , boolean parent )",
            "score": 99.75741722470238,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) throws",
            "score": 99.63609403722427,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope ) &&",
            "score": 99.62380801930146,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) && & &",
            "score": 99.61212158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & &",
            "score": 99.60233989514802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop )",
            "score": 99.76472981770833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.75655691964286,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.73805067274306,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent +",
            "score": 99.71248372395833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) && &",
            "score": 99.61878159466912,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.61033720128677,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ) !=0;",
            "score": 99.6072110262784,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ) != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.59671359592014,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.75590587797619,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.73415655838816,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.71087937127976,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String property , Node parent )",
            "score": 99.67706909179688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope(",
            "score": 99.60913899739583,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this ) &&",
            "score": 99.60319249770221,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope( ) ;",
            "score": 99.59127987132354,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node getprop ) {",
            "score": 99.76206752232143,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent )",
            "score": 99.7553943452381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.7335205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ,",
            "score": 99.66284790039063,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope ) ;",
            "score": 99.61676384420956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( ) && &",
            "score": 99.60581461588542,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & &",
            "score": 99.59787166819854,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node parent , Node parent ) {",
            "score": 99.73016357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws Exception {",
            "score": 99.69246419270833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws Exception {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object parent , NodeTraversal t , Node parent )",
            "score": 99.65974731445313,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object parent , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( ) &&",
            "score": 99.61310173483456,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "0/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) ;",
            "score": 99.6055908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.75360398065476,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.72359466552734,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node node , Node parent )",
            "score": 99.65819702148437,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) !=0&&",
            "score": 99.60118519176136,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( &&",
            "score": 99.5978012084961,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.58571490119485,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && *",
            "score": 99.58211023667279,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.75619506835938,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.69119698660714,
            "correctness": "uncompilable",
            "tokenized_patch": "private check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.65812602796052,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ) !=0&&",
            "score": 99.59905450994319,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ||",
            "score": 99.5921401977539,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( ) ;",
            "score": 99.58527374267578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isOverride = t.inGlobalScope( ) &&",
            "score": 99.57884216308594,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.71837768554687,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.69076377467105,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.65559692382813,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( ) && &",
            "score": 99.60561794704861,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? ) ;",
            "score": 99.58638509114583,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ).isOverride =",
            "score": 99.58101196289063,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) && & &",
            "score": 99.57646348741319,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.74820556640626,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object parent , Node parent ) {",
            "score": 99.7171142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , T parent , Node parent )",
            "score": 99.65375366210938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.6017074584961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ) != null &&",
            "score": 99.59655230978261,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ) != null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && =",
            "score": 99.58213297526042,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) &&",
            "score": 99.57006072998047,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node getprop , Node parent ) {",
            "score": 99.70889282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.69056919642857,
            "correctness": "uncompilable",
            "tokenized_patch": "Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.652587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&( &",
            "score": 99.59996202256944,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ( &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ) !=0&&",
            "score": 99.59377122961956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) && &",
            "score": 99.58093979779412,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & |",
            "score": 99.57661518297698,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.5694580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Token parent )",
            "score": 99.74018787202381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.70041375411184,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent ) {",
            "score": 99.68183826264881,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.64671020507812,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) && &",
            "score": 99.59468587239583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && t.inGlobalScope( ) ;",
            "score": 99.59039306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && t",
            "score": 99.57988424862133,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.57359483506944,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override isOverride = t.inGlobalScope( ) &&",
            "score": 99.56759643554688,
            "correctness": "uncompilable",
            "tokenized_patch": "Override is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.74513753255208,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String property , Node parent ,",
            "score": 99.64493408203126,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ||",
            "score": 99.5791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & |",
            "score": 99.57203504774306,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node getprop )",
            "score": 99.74453590029762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.7345958891369,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.69292249177632,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.67898995535714,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = t.inGlobalScope( ) ;",
            "score": 99.5886563387784,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope )",
            "score": 99.58300018310547,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).isOverride =",
            "score": 99.56915283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && t.inGlobalScope( ) &&",
            "score": 99.55776638454861,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop ,",
            "score": 99.74317568824405,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.69177924262152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.67430962456598,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.6396728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = type.inGlobalScope( ) ;",
            "score": 99.5883560180664,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; isOverride =",
            "score": 99.5686767578125,
            "correctness": "plausible",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; is CaMeL Override =",
            "failed_triggering": "1/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( / ?",
            "score": 99.55745697021484,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int parent )",
            "score": 99.72505115327381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.68763643152573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Property checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.67236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.63909912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ||",
            "score": 99.58404541015625,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.57671440972223,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) ;",
            "score": 99.56692325367646,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && *",
            "score": 99.55554962158203,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node getprop )",
            "score": 99.73648071289062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.68463134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.67081705729167,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.63449578536184,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & ) !=0&&",
            "score": 99.58345363451087,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = = t.inGlobalScope( ) ;",
            "score": 99.5666862936581,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ||",
            "score": 99.55206705729167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node getprop , Node parent ) {",
            "score": 99.72958519345238,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object parent ) {",
            "score": 99.67901290090461,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.66795712425595,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=1&&",
            "score": 99.58179321289063,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) || &",
            "score": 99.57777315027573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = & t.inGlobalScope( )",
            "score": 99.57233025045956,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && !",
            "score": 99.56541532628677,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && !",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node getprop , Node parent ) {",
            "score": 99.72616577148438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object getprop , Node parent )",
            "score": 99.71705264136905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , void parent ) {",
            "score": 99.67547286184211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent &&",
            "score": 99.66346958705357,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.62599690755208,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope(",
            "score": 99.58113606770833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) /",
            "score": 99.57056382123162,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.56475151909723,
            "correctness": "uncompilable",
            "tokenized_patch": "public final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && inGlobalScope( ) &&",
            "score": 99.55125427246094,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , NodeTraversal t , Node parent )",
            "score": 99.72398158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.708740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node getprop , Node parent )",
            "score": 99.67460552014802,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.66243489583333,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = t.inGlobalScope( ) ;",
            "score": 99.5772121263587,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( &&",
            "score": 99.57006072998047,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) &&",
            "score": 99.56903435202206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = ).inGlobalScope( ) &&",
            "score": 99.54548914292279,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private long checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.70668247767857,
            "correctness": "uncompilable",
            "tokenized_patch": "private long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.6715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.66148158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=1&& */",
            "score": 99.57715953480114,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 && * /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) throws",
            "score": 99.5666862936581,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride = t.inGlobalScope( ) ;",
            "score": 99.5613025483631,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & &",
            "score": 99.54536268446181,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.72112678079044,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.70399693080357,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Object parent ) {",
            "score": 99.67100830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node node , Node parent ,",
            "score": 99.62191162109374,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( ) &&",
            "score": 99.57709503173828,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.56545122931985,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && |",
            "score": 99.56153061810662,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ?",
            "score": 99.5609130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ).inGlobalScope( ) &&",
            "score": 99.54221478630515,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop , Node parent )",
            "score": 99.7191097861842,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.65767728365384,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.61798967633929,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this )",
            "score": 99.55952004825367,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).isOverride ;",
            "score": 99.55850219726562,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) . is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( *?",
            "score": 99.54037475585938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.71865362870066,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.6999279203869,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.61685983758224,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false ) ;",
            "score": 99.57680376838235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope ) && &",
            "score": 99.56060112847223,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? t ;",
            "score": 99.55560302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t.inGlobalScope( ) &&",
            "score": 99.55552978515625,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this ) &&",
            "score": 99.54018147786458,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ) ;",
            "score": 99.66463430304276,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent ,",
            "score": 99.61433715820313,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=1;",
            "score": 99.57662963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( this )",
            "score": 99.5550537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null && t.inGlobalScope( ) ;",
            "score": 99.5549083891369,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false ) &&",
            "score": 99.53919893152573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node getprop ,",
            "score": 99.717041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.69719587053571,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node id , Node parent ) {",
            "score": 99.65412248883929,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.61283794202302,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ||",
            "score": 99.57537482766544,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isOverride = t.inGlobalScope( ) && &",
            "score": 99.5548454733456,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &3&&",
            "score": 99.5546939247533,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2&&",
            "score": 99.5546939247533,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2008&&",
            "score": 99.5546939247533,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.69592866443452,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) ;",
            "score": 99.66438598632813,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node getprop , Node parent )",
            "score": 99.61268310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( type ) &&",
            "score": 99.55430692784927,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && true ;",
            "score": 99.55393473307292,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && boolean",
            "score": 99.55256483289931,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && inGlobalScope( ) &&",
            "score": 99.53497673483456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.66002699908088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , Node getprop , Node parent ) {",
            "score": 99.65384521484376,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.61229790581598,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.isOverride ;",
            "score": 99.55409071180556,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ~",
            "score": 99.55287679036458,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? t ;",
            "score": 99.55164252387152,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null ) &&",
            "score": 99.53207576976104,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node getprop , Node parent ) {",
            "score": 99.71505301339286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Style parent )",
            "score": 99.69041806175595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Style parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Token getprop , Node parent , Node parent ) {",
            "score": 99.65889057360198,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Type checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.65313430059524,
            "correctness": "uncompilable",
            "tokenized_patch": "Type check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.60625256990132,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & ) != null &&",
            "score": 99.5676800271739,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) != null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & Boolean.TRUE ;",
            "score": 99.5527576264881,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & Boolean . TRUE ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( this ) &&",
            "score": 99.53040907118056,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent ,",
            "score": 99.71277465820313,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node node , Node parent ) {",
            "score": 99.65848388671876,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.65193684895833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object parent , Node getprop , Node parent )",
            "score": 99.60615619860198,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ,",
            "score": 99.54920959472656,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( ) ;",
            "score": 99.54710477941177,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ) ;",
            "score": 99.5301284790039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , String parent )",
            "score": 99.6863025483631,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , String parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.65806178042763,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , Node getprop , Node parent )",
            "score": 99.60397178248355,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ||(",
            "score": 99.54613539751838,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Object checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.685302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , void parent ) {",
            "score": 99.65700073242188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node dereference , Node getprop , Node parent ) {",
            "score": 99.65142822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.60255737304688,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Scope",
            "score": 99.54497528076172,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && inGlobalScope( ) &&",
            "score": 99.52932739257812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.6545051125919,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node getprop , Node parent )",
            "score": 99.6024105674342,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) == null &&",
            "score": 99.5621670809659,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) == null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ?",
            "score": 99.5434341430664,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = ! t.inGlobalScope( ) ;",
            "score": 99.54054090711806,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; )",
            "score": 99.54048426011029,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this ) ;",
            "score": 99.52887641059027,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.71033296130952,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node name , Node parent )",
            "score": 99.68323974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.65421977796052,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.6506580171131,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.60034857855902,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride =",
            "score": 99.54027303059895,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.t.inGlobalScope( ) ;",
            "score": 99.53852674696181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node type , Node parent ) {",
            "score": 99.70769391741071,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent )",
            "score": 99.68129185267857,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.65263061523437,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , final Node getprop , final",
            "score": 99.64982096354167,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.59735717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = type.inGlobalScope( ) &&",
            "score": 99.5608139038086,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && =",
            "score": 99.53911675347223,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ).isOverride ;",
            "score": 99.53795776367187,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) . is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && / *",
            "score": 99.53782823350694,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && / *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this &&",
            "score": 99.52870178222656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node name , Node parent ) {",
            "score": 99.70750790550595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Context parent )",
            "score": 99.67952473958333,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Context parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node getprop )",
            "score": 99.65177001953126,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent ,",
            "score": 99.64822823660714,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public , Node parent )",
            "score": 99.59640502929688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope( ) ;",
            "score": 99.5606460571289,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && &&",
            "score": 99.53820122612848,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.53729926215277,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.t.inGlobalScope( ) &&",
            "score": 99.53715006510417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.70610119047619,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent ) {",
            "score": 99.67737397693452,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , final Node parent ) {",
            "score": 99.65034790039063,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.64636840820313,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , Node getprop , Node parent )",
            "score": 99.59505422491776,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( )",
            "score": 99.53718566894531,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).isOverride",
            "score": 99.53672388980263,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) . is CaMeL Override",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && | &",
            "score": 99.53587510850694,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.64860229492187,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.64454287574405,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String property , Node parent )",
            "score": 99.59440307617187,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = t.inGlobalScope( ) &&",
            "score": 99.55588600852273,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ,",
            "score": 99.53685760498047,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && false ;",
            "score": 99.53606499565973,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( type ) ;",
            "score": 99.53584558823529,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && *",
            "score": 99.52090115017361,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.70397367931548,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Symbol parent )",
            "score": 99.67229352678571,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Symbol parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.64221772693452,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Object parent ) {",
            "score": 99.64161987304688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.59270163143383,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ==1;",
            "score": 99.555712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? ) &&",
            "score": 99.53641086154514,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & false ;",
            "score": 99.53573447779605,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) +",
            "score": 99.5340576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isOverride = t.inGlobalScope( ) && & &",
            "score": 99.51999918619792,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , Node getprop , Node parent ) {",
            "score": 99.7018310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Class getprop , Node parent )",
            "score": 99.671630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , boolean parent ) {",
            "score": 99.64071800595238,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.63816923253677,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node parent , Node parent )",
            "score": 99.59195749383224,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &&",
            "score": 99.55520290798611,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && &",
            "score": 99.53555297851562,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && isOverride ;",
            "score": 99.53429565429687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = ! t.inGlobalScope( ) &&",
            "score": 99.53129747178819,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false.inGlobalScope( ) &&",
            "score": 99.5185187844669,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.70167178199405,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Property checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.67061941964286,
            "correctness": "uncompilable",
            "tokenized_patch": "public Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean getprop , Node getprop , Node parent ) {",
            "score": 99.63696899414063,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && t.inGlobalScope( ) ;",
            "score": 99.55491879111842,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = type.inGlobalScope( )",
            "score": 99.53483581542969,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &(",
            "score": 99.52882215711806,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && inGlobalScope( ) && & &",
            "score": 99.51687282986111,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ? checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.66907319568452,
            "correctness": "uncompilable",
            "tokenized_patch": "private ? check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , void parent , Node parent ) {",
            "score": 99.6361572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , final Node getprop ,",
            "score": 99.59061472039474,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.inGlobalScope( ) ;",
            "score": 99.55490112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.53420003255208,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) || &",
            "score": 99.5284423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && *",
            "score": 99.51634385850694,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Object parent ) {",
            "score": 99.69990466889881,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.66895693824405,
            "correctness": "uncompilable",
            "tokenized_patch": "private Boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent )",
            "score": 99.58936157226563,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.55457899305556,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ?",
            "score": 99.53291401110198,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ? &",
            "score": 99.52804744944854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.66818237304688,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , final Node getprop ) {",
            "score": 99.638427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Object parent , Node parent ) {",
            "score": 99.6297543174342,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( ) &&",
            "score": 99.55430692784927,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ?",
            "score": 99.53376007080078,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ~",
            "score": 99.53162231445313,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ~",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( &&",
            "score": 99.51341959635417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String propertyName , Node getprop , Node parent )",
            "score": 99.69717261904762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , void parent )",
            "score": 99.66808500744048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.63828638980263,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int t , Node getprop , Node parent ) {",
            "score": 99.62919536389802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.5875244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ).inGlobalScope( ) ;",
            "score": 99.55333362926136,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void isOverride = t.inGlobalScope( ) ;",
            "score": 99.5309699563419,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Type parent ) {",
            "score": 99.69641694568452,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Type parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.63784644717262,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName , Node parent , Node parent )",
            "score": 99.62889404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , NodeTraversal t , Node parent )",
            "score": 99.58695068359376,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.55099826388889,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || )",
            "score": 99.53232709099265,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.inGlobalScope( ) ;",
            "score": 99.5303955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ;",
            "score": 99.63676525297619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.62489013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Object parent )",
            "score": 99.58526611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope( )",
            "score": 99.55068072150735,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ?",
            "score": 99.53225528492646,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & ;",
            "score": 99.50907389322917,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type getprop , Node parent )",
            "score": 99.69497535342262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , short parent )",
            "score": 99.6669689360119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , short parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.63665450246711,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.62459716796874,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , NodeTraversal t , Node parent )",
            "score": 99.58427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & && !=0&&",
            "score": 99.55049272017045,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & && != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object isOverride = t.inGlobalScope( ) && &",
            "score": 99.52978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "Object is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ! t.inGlobalScope( ) ;",
            "score": 99.52762179904514,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ! &",
            "score": 99.5146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ! &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( '') &&",
            "score": 99.50758272058823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') &&",
            "score": 99.50758272058823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a') &&",
            "score": 99.50758272058823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...') &&",
            "score": 99.50758272058823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b') &&",
            "score": 99.50758272058823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.69467342601104,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.66662016369048,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node check , Node getprop , Node parent ) {",
            "score": 99.63280029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node check , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent ) ;",
            "score": 99.62424926757812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent )",
            "score": 99.58413696289062,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Scope",
            "score": 99.52864074707031,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & true ;",
            "score": 99.52744654605263,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) != null ;",
            "score": 99.51216634114583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) != null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( / ?",
            "score": 99.5067497702206,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , final Node parent ) {",
            "score": 99.62856573807566,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.62242296006944,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.58393690321181,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope( ) &&",
            "score": 99.54557800292969,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( )",
            "score": 99.52845001220703,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null && t.inGlobalScope( ) &&",
            "score": 99.50495741102431,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal parent , Node getprop , Node parent )",
            "score": 99.66556222098214,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean parent , Node getprop , Node parent ) {",
            "score": 99.62221808182566,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object parent , NodeTraversal t , Node parent ,",
            "score": 99.58319702148438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object parent , Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null ? t.inGlobalScope( ) : true &&",
            "score": 99.54417883831522,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null ? t . in CaMeL Global CaMeL Scope ( ) : true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && *",
            "score": 99.52763097426471,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && t.inGlobalScope( ) ;",
            "score": 99.525830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) ;",
            "score": 99.5113884420956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && inGlobalScope( ) &&",
            "score": 99.5017951516544,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.692138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private double checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.66553896949405,
            "correctness": "uncompilable",
            "tokenized_patch": "private double check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node key , Node parent ) {",
            "score": 99.62826683407738,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node key , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.62072143554687,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void parent , Node parent )",
            "score": 99.58018188476562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && true &&",
            "score": 99.54416232638889,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && true &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ||(",
            "score": 99.52741555606617,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object isOverride = t.inGlobalScope( ) ;",
            "score": 99.52328491210938,
            "correctness": "uncompilable",
            "tokenized_patch": "Object is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( type )",
            "score": 99.50914764404297,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.50125461154514,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int getprop , Node parent )",
            "score": 99.69097609747024,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.61968994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.5801025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & &",
            "score": 99.54391961348684,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.t.inGlobalScope( )",
            "score": 99.52405463324652,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && t.&",
            "score": 99.521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t . &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this ) && &",
            "score": 99.50729709201389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Property checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.65922619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node module , Node parent ) {",
            "score": 99.62593005952381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node module , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean getprop , Node parent , Node parent ) {",
            "score": 99.61847887541118,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node ref , Node parent )",
            "score": 99.5796875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node ref , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & && ) !=0&&",
            "score": 99.54387872869319,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & && ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) &&",
            "score": 99.52303059895833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ==0&&",
            "score": 99.52142944335938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true.inGlobalScope( ) &&",
            "score": 99.49997845818015,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , NodeTraversal t , Node parent ) {",
            "score": 99.68960425967262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token getprop , Node parent )",
            "score": 99.65922619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.61748657226562,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( boolean",
            "score": 99.5222396850586,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.49871148003473,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean t , Node getprop , Node parent ) {",
            "score": 99.61673776726974,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Integer property , Node parent )",
            "score": 99.57722778320313,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Integer property , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | & ) &&",
            "score": 99.54160378196023,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && boolean",
            "score": 99.52130805121527,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & true ;",
            "score": 99.52032470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && */",
            "score": 99.50337049696181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope( ) &&",
            "score": 99.49796788832721,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.68906947544643,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node node )",
            "score": 99.6545177641369,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent ) {",
            "score": 99.61571451822917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , String property , Node parent )",
            "score": 99.5759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &3;",
            "score": 99.51946411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &2;",
            "score": 99.51946411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &2008;",
            "score": 99.51946411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( &&(",
            "score": 99.5181525735294,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = super.inGlobalScope( ) && & &",
            "score": 99.49559868706598,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.68841843377976,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.62217494419643,
            "correctness": "uncompilable",
            "tokenized_patch": "public check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.57569644325658,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = true.inGlobalScope( ) ;",
            "score": 99.54118208451705,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & false ;",
            "score": 99.5193603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.51723904079861,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope ;",
            "score": 99.49842936197916,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) ;",
            "score": 99.4928466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.68616303943452,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent )",
            "score": 99.65415736607143,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node node ) {",
            "score": 99.61549682617188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public Node parent , final",
            "score": 99.57433471679687,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public Node parent , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & *",
            "score": 99.51458062065973,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent )",
            "score": 99.6540294828869,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.61917724609376,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ,",
            "score": 99.61442260742187,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.57430227179276,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ==1&& */",
            "score": 99.54047185724431,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == 1 && * /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && true )",
            "score": 99.51279025607639,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) || & &",
            "score": 99.49571397569444,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) || & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true ) &&",
            "score": 99.49246036305146,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , boolean parent )",
            "score": 99.6538318452381,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object getprop , Node parent ,",
            "score": 99.61869884672619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.61301783511513,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , T parent , Node parent ,",
            "score": 99.57109375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || ) ;",
            "score": 99.53942153033088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ==0;",
            "score": 99.51842041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) throws",
            "score": 99.51273345947266,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; &&",
            "score": 99.49470789292279,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && inGlobalScope( ) &&",
            "score": 99.49220275878906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.68225678943452,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Context getprop , Node parent )",
            "score": 99.65371558779762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Context get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.61224975585938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object check , NodeTraversal t , Node parent )",
            "score": 99.5702392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object check , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.inGlobalScope( )",
            "score": 99.51150512695312,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).",
            "score": 99.49199676513672,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node parent , Node parent ) {",
            "score": 99.68191528320312,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , static getprop , Node parent )",
            "score": 99.65339006696429,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , static get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.61813193873355,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node node ) {",
            "score": 99.61177785773026,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & &&",
            "score": 99.53714149876645,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & -1&&",
            "score": 99.51591186523437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & - 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String isOverride = t.inGlobalScope( ) && &",
            "score": 99.51146024816177,
            "correctness": "uncompilable",
            "tokenized_patch": "String is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = true ;",
            "score": 99.49446323939732,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( ) &&",
            "score": 99.49162741268383,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , NodeTraversal t , Node parent )",
            "score": 99.56737060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && true &&",
            "score": 99.5369873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | &",
            "score": 99.51326904296874,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( false ) &&",
            "score": 99.50878228081598,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && }",
            "score": 99.4929558249081,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ;",
            "score": 99.49158432904412,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.65276227678571,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws ? Exception",
            "score": 99.61552501860119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws ? Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.61024780273438,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , T parent , Node parent )",
            "score": 99.56732788085938,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ||",
            "score": 99.53603108723958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & true &&",
            "score": 99.51298442639802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || )",
            "score": 99.50712316176471,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && *",
            "score": 99.49016256893383,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.65123901367187,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Object getprop , Node parent ) {",
            "score": 99.61174665178571,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , String property , Node parent ) {",
            "score": 99.609765625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.56728644120066,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.53452555338542,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) /",
            "score": 99.50657743566177,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( type ) && &",
            "score": 99.49092610677083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node [ ] t , Node parent , Node parent ) {",
            "score": 99.6760021391369,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node [ ] t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) ;",
            "score": 99.61153738839286,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Type parent , Node parent ) {",
            "score": 99.60862426757812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.56724146792763,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.inGlobalScope( ) &&",
            "score": 99.53443492542614,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.inGlobalScope( ) ;",
            "score": 99.5120490579044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && inGlobalScope( ) && & &",
            "score": 99.48868136935764,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.67579287574405,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node node , Node parent ) {",
            "score": 99.61129324776786,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isOverride , Node parent , Node parent ) {",
            "score": 99.60831298828126,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context null , NodeTraversal t , Node parent ,",
            "score": 99.56715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context null , Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = = t.inGlobalScope( ) ;",
            "score": 99.51170518663194,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? )",
            "score": 99.50529210707721,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override isOverride = t.inGlobalScope( ) && & &",
            "score": 99.48850504557292,
            "correctness": "uncompilable",
            "tokenized_patch": "Override is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( '') ;",
            "score": 99.4881591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') ;",
            "score": 99.4881591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a') ;",
            "score": 99.4881591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...') ;",
            "score": 99.4881591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b') ;",
            "score": 99.4881591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.6757583618164,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private float checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.64844912574405,
            "correctness": "uncompilable",
            "tokenized_patch": "private float check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String property , Node parent ) {",
            "score": 99.61092122395833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , boolean isOverride ) {",
            "score": 99.60796508789062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.56597290039062,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=0;",
            "score": 99.53386840820312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.getGlobalScope( ) && &",
            "score": 99.50381130642361,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope ;",
            "score": 99.48719075520833,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object getprop , Node parent ) {",
            "score": 99.67452566964286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node ref , Node parent ) {",
            "score": 99.61015392485119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node ref , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int getprop , Node parent , Node parent ) {",
            "score": 99.60758249383224,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , protected Node getprop ,",
            "score": 99.56478271484374,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , protected Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.inGlobalScope( ) &&",
            "score": 99.53330993652344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & -1;",
            "score": 99.511376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & - 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && t.inGlobalScope( )",
            "score": 99.50199381510417,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( scope ) &&",
            "score": 99.48708089192708,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.6084216889881,
            "correctness": "uncompilable",
            "tokenized_patch": "static check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & && !=0&&",
            "score": 99.53187144886364,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & && != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && is",
            "score": 99.50129250919117,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && is",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & ?",
            "score": 99.48316786024306,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop )",
            "score": 99.67199125744048,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws Exception {",
            "score": 99.60780552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws Exception {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean isOverride ) {",
            "score": 99.6046078330592,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object property , Node parent )",
            "score": 99.5641357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object property , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) ==0&&",
            "score": 99.53059525923295,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) == 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node n , Node parent ) {",
            "score": 99.6711193266369,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int ) {",
            "score": 99.60707310267857,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Token getprop , Node getprop , Node parent ) {",
            "score": 99.60411376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.56412760416667,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && isOverride &&",
            "score": 99.50751342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && true )",
            "score": 99.49875895182292,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ?",
            "score": 99.48347473144531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Object parent ) {",
            "score": 99.67066592261905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node source , Node parent ) {",
            "score": 99.60686383928571,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node source , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.6039794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.56277465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride( ) ;",
            "score": 99.50637381417411,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( false ) &&",
            "score": 99.49630398220486,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) &&",
            "score": 99.48028205422794,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node source , Node getprop , Node parent ) {",
            "score": 99.6697509765625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node source , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent {",
            "score": 99.64551943824405,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Class checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.60648018973214,
            "correctness": "uncompilable",
            "tokenized_patch": "Class check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node scope , Node getprop , Node parent ) {",
            "score": 99.60371479235198,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node scope , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , private Node getprop ,",
            "score": 99.56221923828124,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | & | ||",
            "score": 99.5260342684659,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & | ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &3;",
            "score": 99.50483141447368,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2;",
            "score": 99.50483141447368,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2008;",
            "score": 99.50483141447368,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && )",
            "score": 99.49554802389706,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || ) &&",
            "score": 99.47890337775735,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ? &",
            "score": 99.47878011067708,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node getprop , Node parent )",
            "score": 99.66904907226562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.64507765997024,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.60643920898437,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.60332641601562,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.55794270833333,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isGlobal = t.inGlobalScope( ) ;",
            "score": 99.5257901278409,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int isOverride = t.inGlobalScope( ) ;",
            "score": 99.5035041360294,
            "correctness": "uncompilable",
            "tokenized_patch": "public int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( ) &&(",
            "score": 99.47783745659723,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node node , Node parent ) {",
            "score": 99.60639880952381,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent )",
            "score": 99.60274047851563,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.55680338541667,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &3|",
            "score": 99.50279476768092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2|",
            "score": 99.50279476768092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2008|",
            "score": 99.50279476768092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override isOverride = t.inGlobalScope( ) && &",
            "score": 99.49498075597427,
            "correctness": "uncompilable",
            "tokenized_patch": "Override is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this &&",
            "score": 99.47855870863971,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) }",
            "score": 99.66524832589286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Token parent )",
            "score": 99.64360119047619,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.6025634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.55622301603618,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && )",
            "score": 99.52501723345588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ;",
            "score": 99.50096299913194,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( null ) &&",
            "score": 99.47841389973958,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( scope )",
            "score": 99.47595932904412,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , node ) {",
            "score": 99.66513206845238,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , long parent )",
            "score": 99.64319428943452,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , long parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int currentClass , Node parent , Node parent ) {",
            "score": 99.60216064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int current CaMeL Class , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.60127185639881,
            "correctness": "uncompilable",
            "tokenized_patch": "final check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node current , Node getprop , Node parent )",
            "score": 99.5551822060033,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node current , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ==1&&",
            "score": 99.524853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride.inGlobalScope( ) ;",
            "score": 99.50041760896382,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && &&",
            "score": 99.49278428819444,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && inGlobalScope( ) &&",
            "score": 99.47593778722427,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ?",
            "score": 99.47528435202206,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String getprop , Node parent )",
            "score": 99.64306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object property , Node parent ) {",
            "score": 99.60109252929688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object property , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object check , Node getprop , Node parent ) {",
            "score": 99.60015258789062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object check , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.55265045166016,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = true.inGlobalScope( ) ;",
            "score": 99.5247802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & false &&",
            "score": 99.49991005345395,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) return",
            "score": 99.4922234030331,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) return",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.inGlobalScope( ) &&",
            "score": 99.47514792049633,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void getprop , Node parent )",
            "score": 99.64225260416667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Object parent )",
            "score": 99.55170641447368,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.inGlobalScope ;",
            "score": 99.498486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( false )",
            "score": 99.49181410845588,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( '') &&",
            "score": 99.47362603081598,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') &&",
            "score": 99.47362603081598,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a') &&",
            "score": 99.47362603081598,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a = ...') &&",
            "score": 99.47362603081598,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a.b') &&",
            "score": 99.47362603081598,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Type parent ) {",
            "score": 99.66470191592262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Type parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node parent , Node getprop , Node parent ) {",
            "score": 99.60023257606908,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node index , Node parent ) {",
            "score": 99.59945824032738,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node index , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && true ;",
            "score": 99.52447188527961,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.inGlobalScope( ) ;",
            "score": 99.49747960707721,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || true )",
            "score": 99.49102783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node parent , Node parent ) {",
            "score": 99.66449295847039,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Class parent )",
            "score": 99.64170619419643,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Class parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.59917922247024,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object current , Node getprop , Node parent )",
            "score": 99.55026084498355,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object current , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & t.inGlobalScope( ) ;",
            "score": 99.52431126644737,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.49671088324652,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) boolean",
            "score": 99.49040670955883,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object getprop ) {",
            "score": 99.59952392578126,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context t , Node getprop , Node parent )",
            "score": 99.54866750616776,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &3| &",
            "score": 99.49581298828124,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2| &",
            "score": 99.49581298828124,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2008| &",
            "score": 99.49581298828124,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || true )",
            "score": 99.48965115017361,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =0&& t.inGlobalScope( ) &&",
            "score": 99.47092013888889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = 0 && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( )",
            "score": 99.47006225585938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node getprop ) {",
            "score": 99.66392299107143,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected int checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.63934616815476,
            "correctness": "uncompilable",
            "tokenized_patch": "protected int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.59951346261161,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.54781301398026,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & || ) !=0&&",
            "score": 99.52271569293478,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & || ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &0) &&",
            "score": 99.49578857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & 0 ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long isOverride = t.inGlobalScope( ) && &",
            "score": 99.48948041130515,
            "correctness": "uncompilable",
            "tokenized_patch": "long is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ||",
            "score": 99.47068876378677,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null ? Boolean.TRUE : & & & &",
            "score": 99.46780056423611,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null ? Boolean . TRUE : & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Ref parent )",
            "score": 99.63932291666667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Ref parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.5994384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.58704833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &3&&",
            "score": 99.49576416015626,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &2&&",
            "score": 99.49576416015626,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &2008&&",
            "score": 99.49576416015626,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? t ;",
            "score": 99.48935834099265,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null ) ;",
            "score": 99.47028664981617,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ] checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.66207449776786,
            "correctness": "uncompilable",
            "tokenized_patch": "private ] check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Reference parent )",
            "score": 99.63906715029762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Reference parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t , final Node parent ) {",
            "score": 99.59912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , T getprop ,",
            "score": 99.54326714409723,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = t.inGlobalScope( ) &&",
            "score": 99.52074085582386,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && isOverride =",
            "score": 99.49564819335937,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( true ) &&",
            "score": 99.48802354600694,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = super.inGlobalScope( ) &&",
            "score": 99.46963500976562,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.66143188476562,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Factory checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.63903227306548,
            "correctness": "uncompilable",
            "tokenized_patch": "private Factory check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , String propertyName , Node parent ) {",
            "score": 99.598583984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , String property CaMeL Name , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.54172650505515,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t3.inGlobalScope( ) ;",
            "score": 99.49537568933823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t2.inGlobalScope( ) ;",
            "score": 99.49537568933823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t2008.inGlobalScope( ) ;",
            "score": 99.49537568933823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( true ) &&",
            "score": 99.48774549696181,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( / ?",
            "score": 99.46941061580883,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this )",
            "score": 99.4666519165039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , int getprop , Node parent ) {",
            "score": 99.66117931547619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , int get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node module , Node parent ,",
            "score": 99.58077392578124,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node module , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.54034745065789,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & t.inGlobalScope( ) ;",
            "score": 99.51850328947368,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &3&& &",
            "score": 99.49383544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2&& &",
            "score": 99.49383544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2008&& &",
            "score": 99.49383544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || *",
            "score": 99.48771398207721,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( *?",
            "score": 99.46738568474265,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ! t.inGlobalScope( ) &&",
            "score": 99.46638319227431,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Object validator ) {",
            "score": 99.59703979492187,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object getprop ,",
            "score": 99.53868272569444,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.isOverride = t.inGlobalScope( ) ;",
            "score": 99.51732288707386,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >=0;",
            "score": 99.4933837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & >= 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.46554904513889,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.isOverride =",
            "score": 99.46525743272569,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.66105143229167,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Name checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.63626534598214,
            "correctness": "uncompilable",
            "tokenized_patch": "private Name check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node parent , Node getprop , Node parent ) {",
            "score": 99.595654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean check , Node getprop , Node parent ) {",
            "score": 99.57872924804687,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean check , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && t.inGlobalScope( ) ;",
            "score": 99.51725688733552,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride.inGlobalScope( ) ;",
            "score": 99.49290635850694,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this ||",
            "score": 99.46541595458984,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.59559936523438,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.57816569010417,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.53620990953948,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ).isOverride",
            "score": 99.49252158717105,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) . is CaMeL Override",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && t.inGlobalScope( )",
            "score": 99.48634847005208,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , if parent )",
            "score": 99.63054547991071,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , if parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.53589545355902,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ?",
            "score": 99.51708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & scope ;",
            "score": 99.49156429893092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && boolean",
            "score": 99.48595473345588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride.inGlobalScope( ) &&",
            "score": 99.46402994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( )",
            "score": 99.46347045898438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , boolean parent )",
            "score": 99.62991768973214,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node getprop , Node parent )",
            "score": 99.59442138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , final Node getprop ) {",
            "score": 99.57650146484374,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.5350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / *&",
            "score": 99.4914794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / * &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? t",
            "score": 99.48564596737133,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object validator ) {",
            "score": 99.59401341488487,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Factory t , Node getprop , Node parent )",
            "score": 99.53487356085526,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Factory t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & | &",
            "score": 99.49015727796052,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) throws",
            "score": 99.48558134191177,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( '') &&",
            "score": 99.46255154079861,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') &&",
            "score": 99.46255154079861,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a') &&",
            "score": 99.46255154079861,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a = ...') &&",
            "score": 99.46255154079861,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a.b') &&",
            "score": 99.46255154079861,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&3&&",
            "score": 99.46033393012152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2&&",
            "score": 99.46033393012152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2008&&",
            "score": 99.46033393012152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node type , Node parent )",
            "score": 99.65657958984374,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.6290771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop )",
            "score": 99.59356079101562,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean dereference , Node getprop , Node parent ) {",
            "score": 99.57410888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object check , Node getprop , Node parent )",
            "score": 99.53262489720395,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object check , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & !=1&&",
            "score": 99.51569475446429,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != t.inGlobalScope( ) ;",
            "score": 99.48989529079861,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = & t.inGlobalScope( )",
            "score": 99.48420266544117,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = ).inGlobalScope( ) &&",
            "score": 99.46216538373162,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop ,",
            "score": 99.65561058407738,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private T checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.62852260044643,
            "correctness": "uncompilable",
            "tokenized_patch": "private T check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node parent , Node parent ) {",
            "score": 99.5931460731908,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context null , Node getprop , Node parent )",
            "score": 99.5320980674342,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context null , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & !=1&&",
            "score": 99.51427112926136,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & != 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & scope &&",
            "score": 99.48981034128289,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & scope &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) &&(",
            "score": 99.48419867621527,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( false ) ;",
            "score": 99.46200222439236,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) &&(",
            "score": 99.45591905381944,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String propertyName , Node parent , Node parent ) {",
            "score": 99.65556408110119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected String checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.62811569940476,
            "correctness": "uncompilable",
            "tokenized_patch": "protected String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.57161712646484,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node dereference , Node getprop , Node parent )",
            "score": 99.53128854851974,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node dereference , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) : null &&",
            "score": 99.51371626420455,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) : null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String isOverride = t.inGlobalScope( ) ;",
            "score": 99.48850384880515,
            "correctness": "uncompilable",
            "tokenized_patch": "public String is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && false )",
            "score": 99.48389350043402,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.inGlobalScope( ) && & &",
            "score": 99.46010335286458,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node key , Node parent )",
            "score": 99.628076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node key , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object( ) {",
            "score": 99.59159128289474,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node node , Node parent ) {",
            "score": 99.57117919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T t , Node getprop , Node parent )",
            "score": 99.52884071751645,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = = t.inGlobalScope( ) &&",
            "score": 99.48825970818015,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? t ,",
            "score": 99.48238118489583,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && |",
            "score": 99.45477294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , Node getprop , Node parent )",
            "score": 99.65532483552632,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Object getprop , Node parent , Node parent ) {",
            "score": 99.59117367393092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Context ) ;",
            "score": 99.48780732996323,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && inGlobalScope( ) ;",
            "score": 99.45977424172794,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope == &",
            "score": 99.4547607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope == &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node getprop ,",
            "score": 99.65474853515624,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node source , Node parent )",
            "score": 99.627392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node source , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.58974737870066,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.52629009046052,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isGlobal = t.inGlobalScope( ) ;",
            "score": 99.51284790039062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; Override =",
            "score": 99.48764377170139,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node [ ] t , Node getprop , Node parent )",
            "score": 99.65420386904762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node [ ] t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent )",
            "score": 99.6267322358631,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal node , Node parent , Node parent ) {",
            "score": 99.58849487304687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal node , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( void check , Node getprop , Node parent ) {",
            "score": 99.56851806640626,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( void check , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=1&& & &",
            "score": 99.51263982599431,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "@ Override boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.48741319444444,
            "correctness": "uncompilable",
            "tokenized_patch": "@ Override boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) *",
            "score": 99.48032513786765,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ) ;",
            "score": 99.45208381204044,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node t , Node getprop , Node parent ) {",
            "score": 99.65250244140626,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.58812866210937,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node getprop , Node parent ,",
            "score": 99.52426629317434,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = type.inGlobalScope( ) && &",
            "score": 99.47939724392361,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & ) ;",
            "score": 99.45885552300348,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type parent , Node parent ) {",
            "score": 99.6518787202381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) ;",
            "score": 99.62572079613095,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.58754272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.56678873697916,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.52423416940789,
            "correctness": "uncompilable",
            "tokenized_patch": "protected final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && & &",
            "score": 99.512451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.isOverride( ) ;",
            "score": 99.4868896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && )",
            "score": 99.47915469898896,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & *",
            "score": 99.45813666449652,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.65173921130952,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , final Node parent )",
            "score": 99.58607884457237,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , final Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , final Node getprop ,",
            "score": 99.56586303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.52287854646382,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = t.inGlobalScope(",
            "score": 99.51232299804687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ~ &",
            "score": 99.48619320518092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~ &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & false",
            "score": 99.47867838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = null.inGlobalScope( ) &&",
            "score": 99.45797909007354,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isOverride = t.inGlobalScope( ) ;",
            "score": 99.45022583007812,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop , Node getprop )",
            "score": 99.65166945684524,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.62518920898438,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , String property ) {",
            "score": 99.58605346679687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , String property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & && !=1&&",
            "score": 99.51130814985795,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & && != 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >=0&&",
            "score": 99.48486938476563,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & >= 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && inGlobalScope( ) && & &",
            "score": 99.455810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) == &",
            "score": 99.44999425551471,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) == &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.65115792410714,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Builder checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.6244884672619,
            "correctness": "uncompilable",
            "tokenized_patch": "private Builder check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node node , Node parent ) {",
            "score": 99.58542351973684,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , Node getprop , Node parent ,",
            "score": 99.52139442845395,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | & | |",
            "score": 99.50974343039773,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & | |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? ) && &",
            "score": 99.47781032986111,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.45541561351104,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.58521118164063,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.56101684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean isOverride )",
            "score": 99.52033434416118,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=0&&",
            "score": 99.5091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; ) ;",
            "score": 99.48307291666667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = type.inGlobalScope( ) && &",
            "score": 99.47755342371323,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( null ) &&",
            "score": 99.45414225260417,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) + &",
            "score": 99.44858685661765,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) + &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Token getprop , Node parent , Node parent ) {",
            "score": 99.58519897460937,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( '', Node getprop , Node parent ) {",
            "score": 99.56071391858552,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 't find a visibility modifier; assume it', Node getprop , Node parent ) {",
            "score": 99.56071391858552,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a', Node getprop , Node parent ) {",
            "score": 99.56071391858552,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a = ...', Node getprop , Node parent ) {",
            "score": 99.56071391858552,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a.b', Node getprop , Node parent ) {",
            "score": 99.56071391858552,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.51776801215277,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ) == null &&",
            "score": 99.50879967730978,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ) == null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / && &",
            "score": 99.48282470703126,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( scope )",
            "score": 99.47714412913604,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = false && t.inGlobalScope( ) &&",
            "score": 99.45282660590277,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope( ) && &",
            "score": 99.4482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , node parent )",
            "score": 99.62051246279762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.58477461965461,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , String property , Node parent ) {",
            "score": 99.55968017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t ,",
            "score": 99.5160888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = type.inGlobalScope( ) ;",
            "score": 99.50679285386029,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( ) &&(",
            "score": 99.47564019097223,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope( ) && &",
            "score": 99.44801839192708,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.64887927827381,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Property getprop , Node parent )",
            "score": 99.62030319940476,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Property get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.58444213867188,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.51602975945724,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isGlobal = t.inGlobalScope( ) ;",
            "score": 99.50649192116477,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & |",
            "score": 99.48222045898437,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || false )",
            "score": 99.47532145182292,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) }",
            "score": 99.64858863467262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , int parent )",
            "score": 99.62022181919643,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , boolean validator ) {",
            "score": 99.5839599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , boolean validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.5546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope t.inGlobalScope( ) ;",
            "score": 99.5062839673913,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.47488064236111,
            "correctness": "uncompilable",
            "tokenized_patch": "/ boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = ).inGlobalScope( ) &&",
            "score": 99.4515609741211,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = ! t.inGlobalScope( )",
            "score": 99.44756721047794,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Visibility checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.64822823660714,
            "correctness": "uncompilable",
            "tokenized_patch": "Visibility check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , String property ) {",
            "score": 99.58321340460526,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , String property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.55467393663194,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.51472981770833,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ).inGlobalScope( ) &&",
            "score": 99.50617009943181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & |",
            "score": 99.48084716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( true )",
            "score": 99.47442985983456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope( ) && & &",
            "score": 99.45090060763889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean isOverride = t.inGlobalScope( )",
            "score": 99.44741641773896,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent ,",
            "score": 99.64782133556548,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int getprop , Node getprop , Node parent ) {",
            "score": 99.581298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node id , Node parent ,",
            "score": 99.55433959960938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.51259894120066,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ) ==0&&",
            "score": 99.50609290081522,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ) == 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = in.inGlobalScope( ) ;",
            "score": 99.48065185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = t.in && & & & &",
            "score": 99.44961886935764,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = t . in && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; && &",
            "score": 99.44731987847223,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node id , Node parent )",
            "score": 99.64754638671874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Object parent , Node getprop , Node parent ) {",
            "score": 99.58102256373355,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.51201428865132,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t.inGlobalScope( ) && & !=1&&",
            "score": 99.50489390980114,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) && & != 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( t ) ;",
            "score": 99.47982967601104,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & true",
            "score": 99.47382269965277,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || *",
            "score": 99.44828796386719,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = System.inGlobalScope( ) && &",
            "score": 99.44469496783088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node type , Node getprop , Node parent ) {",
            "score": 99.64747924804688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node type , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Token parent )",
            "score": 99.61564127604167,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node getprop )",
            "score": 99.57981471011513,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context null , Node getprop , Node parent ,",
            "score": 99.51058156866776,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context null , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( true ) ;",
            "score": 99.50482855902777,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( false ) ;",
            "score": 99.44810655381944,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean [ ] isOverride = t.inGlobalScope( ) ;",
            "score": 99.44456651475694,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean [ ] is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.64517066592262,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , boolean validator )",
            "score": 99.61558314732143,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean validator )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Object getprop , Node parent ) {",
            "score": 99.5793701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws Exception",
            "score": 99.55263061523438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.5090396278783,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & & | ||",
            "score": 99.50437233664773,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & & | ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && t.inGlobalScope( ) &&",
            "score": 99.47930297851562,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t != null && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "public boolean isOverride = true.inGlobalScope( )",
            "score": 99.47135162353516,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = type.inGlobalScope( ) && & &",
            "score": 99.44802517361111,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && if(",
            "score": 99.4442138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , String property )",
            "score": 99.64490327380952,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , String property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal ref , Node getprop , Node parent )",
            "score": 99.61522274925595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal ref , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object dereference , Node getprop , Node parent ) {",
            "score": 99.55111694335938,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , Node getprop , Node parent ,",
            "score": 99.5087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.47833251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = Scope.inGlobalScope( )",
            "score": 99.4700927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) | &",
            "score": 99.44381893382354,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.57834986636513,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.50830756293402,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.50341118706598,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.46967629825367,
            "correctness": "uncompilable",
            "tokenized_patch": "Boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = System.inGlobalScope( ) ;",
            "score": 99.44348907470703,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.61402529761905,
            "correctness": "uncompilable",
            "tokenized_patch": "private static check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node parent ) ;",
            "score": 99.57673950195313,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parent ) throws",
            "score": 99.54854125976563,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , private getprop ,",
            "score": 99.50643117804276,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & | & ) !=0&&",
            "score": 99.50321628736413,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & | & ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "@ Override public boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.4764340049342,
            "correctness": "uncompilable",
            "tokenized_patch": "@ Override public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t = t.inGlobalScope( ) &&",
            "score": 99.44716389973958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.64271763392857,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Scope parent )",
            "score": 99.6135486421131,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Scope parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , boolean isConstructor ) {",
            "score": 99.57666625976563,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , NodeTraversal t , Node getprop ,",
            "score": 99.50417608963816,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( &&(",
            "score": 99.46947524126838,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = System.inGlobalScope( ) &&",
            "score": 99.44213104248047,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , T parent )",
            "score": 99.61280459449405,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , T parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.5763003700658,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( void dereference , Node getprop , Node parent ) {",
            "score": 99.54747924804687,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( void dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ) !=0;",
            "score": 99.50176711309524,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ) != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node getprop ,",
            "score": 99.57617797851563,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context t , Node getprop , Node parent ) {",
            "score": 99.54728393554687,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal parent ,",
            "score": 99.50209446957237,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) || &",
            "score": 99.46744791666667,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , if getprop , Node parent )",
            "score": 99.61176990327381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , if get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node validator ) {",
            "score": 99.5760498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.50205993652344,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && t.inGlobalScope( ) ;",
            "score": 99.50138549804687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) :",
            "score": 99.46722771139706,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object property ) {",
            "score": 99.57599840666118,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , Node getprop , Node parent ) {",
            "score": 99.5449462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.50190815172698,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( boolean",
            "score": 99.46678161621094,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.63992745535714,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token parent , Node parent )",
            "score": 99.61046142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node n , Node parent ) {",
            "score": 99.57445678710937,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.50184461805556,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ||",
            "score": 99.50030196340461,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( *",
            "score": 99.46668243408203,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & ;",
            "score": 99.4420166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.57329711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.54372687088816,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node node ,",
            "score": 99.50103400735294,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope.inGlobalScope( ) ;",
            "score": 99.4974032315341,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && t.",
            "score": 99.46649848090277,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.44149959788604,
            "correctness": "wrong",
            "tokenized_patch": "CaMeL boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( scope ) &&",
            "score": 99.43842909071181,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , static parent )",
            "score": 99.60880533854167,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , static parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Type getprop , Node parent ) {",
            "score": 99.57288208007813,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final Node getprop , final Node parent ) {",
            "score": 99.54361765008224,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private public void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.50082236842105,
            "correctness": "uncompilable",
            "tokenized_patch": "private public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride = t.inGlobalScope( ) ;",
            "score": 99.49691109035327,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / ) &&",
            "score": 99.47251586914062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || false )",
            "score": 99.46645100911458,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ?",
            "score": 99.44121955422794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent , ;",
            "score": 99.63886951264881,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent , ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public long checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.60858444940476,
            "correctness": "uncompilable",
            "tokenized_patch": "public long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.57255249023437,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Object parent ) {",
            "score": 99.54278564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object parent ,",
            "score": 99.50032312729779,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( scope ) ;",
            "score": 99.49684651692708,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && t.) &&",
            "score": 99.47177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t . ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.44108751085069,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && if &",
            "score": 99.43702528211806,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && if &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , T getprop , Node parent )",
            "score": 99.60792178199405,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , Node parent , Node parent )",
            "score": 99.57194213867187,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node scope , Node getprop , Node parent ) {",
            "score": 99.5419189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node scope , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.49958881578948,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & | & ) &&",
            "score": 99.4967730978261,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & false && &",
            "score": 99.46878662109376,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & false && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true && inGlobalScope( ) &&",
            "score": 99.44080307904412,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node parent , Node parent ) {",
            "score": 99.63725200452302,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Object parent , Node parent )",
            "score": 99.60772414434524,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( int t , Node getprop , Node parent ) {",
            "score": 99.57180786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( int t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent , Node getprop ) {",
            "score": 99.54154663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.49881784539474,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ) !=0||",
            "score": 99.49660326086956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ) != 0 ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || *",
            "score": 99.46514533547794,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Type parent )",
            "score": 99.63716430664063,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , double parent )",
            "score": 99.60741024925595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , double parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.4976806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & & ) &&",
            "score": 99.49592729048295,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.46825493706598,
            "correctness": "uncompilable",
            "tokenized_patch": "private final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "@ boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.46392144097223,
            "correctness": "uncompilable",
            "tokenized_patch": "@ boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || false ) &&",
            "score": 99.43948703342014,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true( t.inGlobalScope( ) &&",
            "score": 99.435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ( t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean getprop , Node getprop , Node parent )",
            "score": 99.57122802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.49762926603618,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.isOverride = t.inGlobalScope( ) ;",
            "score": 99.49582837975544,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride( ) ;",
            "score": 99.46817220052084,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.inGlobalScope( ) && &",
            "score": 99.46386040581598,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( t ) &&",
            "score": 99.43948184742646,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( name ) &&",
            "score": 99.43538172104779,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object getprop , Node parent )",
            "score": 99.63602294921876,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Object property ) {",
            "score": 99.57103271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , final Node getprop , final",
            "score": 99.5379638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node get@@ prop , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.49630576685855,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && =",
            "score": 99.46327718098958,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.43920220269098,
            "correctness": "uncompilable",
            "tokenized_patch": "public private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public Node parent ,",
            "score": 99.49626721833882,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.46689181857639,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & }",
            "score": 99.46284315321181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( ) && & &",
            "score": 99.43905300564236,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object parent , Node parent ) {",
            "score": 99.635107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , String propertyName ) {",
            "score": 99.57073010896382,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.53663465711806,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.49565686677632,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && **& &",
            "score": 99.49462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * * & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &1&&",
            "score": 99.46650133634868,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.43842230902777,
            "correctness": "uncompilable",
            "tokenized_patch": "private private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.63510277157738,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node validator ) {",
            "score": 99.57042236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , final Node parent , final",
            "score": 99.53609426398026,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true t.inGlobalScope( )",
            "score": 99.46230899586396,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( this ) &&",
            "score": 99.43788655598958,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && return",
            "score": 99.43429744944854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && return",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node scope , Node parent ) {",
            "score": 99.634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node scope , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , char parent )",
            "score": 99.60521298363095,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , char parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.57014465332031,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.53558708639706,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = true.inGlobalScope( ) &&",
            "score": 99.49390758167614,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Class getprop ,",
            "score": 99.49058702256944,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ?",
            "score": 99.46527099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.inGlobalScope( ) &&",
            "score": 99.43769387637867,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope( )",
            "score": 99.433837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , NodeTraversal t , Node parent )",
            "score": 99.63396344866071,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node get , Node parent )",
            "score": 99.60492553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean validator , Node getprop , Node parent ) {",
            "score": 99.56866133840461,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean validator , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node dereference , Node getprop , Node parent ) {",
            "score": 99.53535766601563,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || true ) &&",
            "score": 99.49386257595486,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.48921421595982,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Boolean parent )",
            "score": 99.60415504092262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Object getprop , Node getprop , Node parent ) {",
            "score": 99.5677001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node dereference , Node getprop , Node parent ) {",
            "score": 99.53494873046876,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && | &",
            "score": 99.49234169407895,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , try",
            "score": 99.48857678865132,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , try",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & |",
            "score": 99.46480520148026,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( )",
            "score": 99.4615478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( locale ) &&",
            "score": 99.43293313419117,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( locale ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node parent , Node parent , Node parent )",
            "score": 99.63328915550595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , E parent )",
            "score": 99.60356212797619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , E parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node t , Node getprop , Node parent ) {",
            "score": 99.56758197985198,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = getGlobalScope( ).inGlobalScope( ) ;",
            "score": 99.4922511888587,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.48661081414474,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & true && &",
            "score": 99.46398315429687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & true && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( )",
            "score": 99.46058654785156,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && /",
            "score": 99.43660242417279,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope( ) {",
            "score": 99.43261000689338,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node node ) {",
            "score": 99.63325427827381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.56732177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Object dereference , Node getprop , Node parent ) {",
            "score": 99.5342529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String propertyName ,",
            "score": 99.48440069901316,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & scope ;",
            "score": 99.46392211914062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false ) && &",
            "score": 99.46058485243056,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object isOverride = t.inGlobalScope( ) &&",
            "score": 99.4356918334961,
            "correctness": "uncompilable",
            "tokenized_patch": "Object is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String parent , Node getprop , Node parent )",
            "score": 99.60298237047698,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int propertyName , Node parent , Node parent ) {",
            "score": 99.56712646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int property CaMeL Name , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node next , Node parent ,",
            "score": 99.5330810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node next , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && != true ;",
            "score": 99.4910824424342,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && != true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , static getprop ,",
            "score": 99.4838931435033,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , static get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ;",
            "score": 99.46361083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( *",
            "score": 99.45974731445312,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false.inGlobalScope( ) ;",
            "score": 99.4355109719669,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node current , Node parent )",
            "score": 99.6028564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node current , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object parent ) {",
            "score": 99.56664321001838,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isGlobal = t.inGlobalScope( ) ;",
            "score": 99.49048961292614,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.4820620888158,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope ;",
            "score": 99.43190104166666,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Class checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.6028064546131,
            "correctness": "uncompilable",
            "tokenized_patch": "private Class check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean parent , Node getprop , Node parent ) {",
            "score": 99.56654052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node property ) {",
            "score": 99.5317626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & !=1;",
            "score": 99.4902111235119,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.48187577097039,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) ) &&",
            "score": 99.43171522352431,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , NodeTraversal t )",
            "score": 99.63261486235119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Symbol getprop , Node parent )",
            "score": 99.60272507440476,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Symbol get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = t.inGlobalScope( ) &&",
            "score": 99.48994777513587,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.48091205797698,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = this.t.inGlobalScope( )",
            "score": 99.45882161458333,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null.inGlobalScope( ) && & &",
            "score": 99.43495008680556,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.t.inGlobalScope( ) ;",
            "score": 99.43168809678819,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop , Node getprop ) {",
            "score": 99.63211495535714,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String getprop , Node parent , Node parent ) {",
            "score": 99.56570595189145,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void property , Node parent ) {",
            "score": 99.53035278320313,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void property , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ) !=0&&",
            "score": 99.48946707589286,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , final Node getprop )",
            "score": 99.47833573190789,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / /",
            "score": 99.46187551398026,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( true ) ;",
            "score": 99.45777723524306,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( *?",
            "score": 99.43438361672794,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node source , Node getprop , Node parent )",
            "score": 99.63204152960526,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node source , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , E getprop , Node parent )",
            "score": 99.600830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , E get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean isConstructor ) {",
            "score": 99.56563527960526,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || true ) ;",
            "score": 99.48854573567708,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || true ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , private",
            "score": 99.47789764404297,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &0Override ;",
            "score": 99.46103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & 0 Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = get.inGlobalScope( )",
            "score": 99.45760345458984,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = ! t.inGlobalScope( ) ;",
            "score": 99.43126085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Object parent )",
            "score": 99.63172607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Name parent )",
            "score": 99.60042317708333,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Name parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.565478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.isOverride = t.inGlobalScope( ) ;",
            "score": 99.48827063519022,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.47757297092014,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope(( )",
            "score": 99.45729693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.inGlobalScope( ) &&",
            "score": 99.4342041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) +",
            "score": 99.4311164407169,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop )",
            "score": 99.63171968005952,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Integer checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.6000744047619,
            "correctness": "uncompilable",
            "tokenized_patch": "private Integer check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , NodeTraversal t , Node parent ) {",
            "score": 99.56517333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >1&&",
            "score": 99.48822021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & > 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int objectType ,",
            "score": 99.47494988692434,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & true &&",
            "score": 99.4601806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ).",
            "score": 99.4341179342831,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true ;",
            "score": 99.43092346191406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Result parent )",
            "score": 99.59923735119048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Result parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , String propertyName ) {",
            "score": 99.56452026367188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node namespace , Node parent ,",
            "score": 99.52877807617188,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node namespace , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t.inGlobalScope(",
            "score": 99.48810492621527,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.47466681985294,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & scope ==",
            "score": 99.46017937911184,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & scope ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( false )",
            "score": 99.45580336626838,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) throws",
            "score": 99.63078962053571,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "check checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.59898158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "check check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.5643374794408,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node dereference , Node getprop , Node parent ) {",
            "score": 99.52818539268092,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope.inGlobalScope( ) ;",
            "score": 99.48772638494319,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , final Node getprop ,",
            "score": 99.4735171669408,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && false )",
            "score": 99.45526801215277,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String isOverride = t.inGlobalScope( ) &&",
            "score": 99.43395233154297,
            "correctness": "uncompilable",
            "tokenized_patch": "String is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent , Node parent , Node parent )",
            "score": 99.63053385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Enum parent )",
            "score": 99.59850492931548,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Enum parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Style parent ) {",
            "score": 99.56278686523437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Style parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Object dereference , Node getprop , Node parent ) {",
            "score": 99.52805689761513,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = scope.inGlobalScope( ) ;",
            "score": 99.48717498779297,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String property ,",
            "score": 99.47341739430146,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true.inGlobalScope( ) ;",
            "score": 99.4591064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.45516628689236,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( null ) ;",
            "score": 99.43370225694444,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ==",
            "score": 99.42892456054688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , ;",
            "score": 99.63041759672619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private char checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.59753999255952,
            "correctness": "uncompilable",
            "tokenized_patch": "private char check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String propertyName , Node parent , Node parent )",
            "score": 99.56258544921874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = t.inGlobalScope &&",
            "score": 99.48699396306819,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = t . in CaMeL Global CaMeL Scope &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.47334369860198,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = t.isOverride ;",
            "score": 99.45833547491776,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true t.inGlobalScope( )",
            "score": 99.4548698874081,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( )(",
            "score": 99.42864990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , String property ) {",
            "score": 99.63033621651786,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , String property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean isOverride )",
            "score": 99.56188286675348,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.5234619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && *&",
            "score": 99.48676500822368,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.47317023026316,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null t.inGlobalScope( ) ;",
            "score": 99.45711059570313,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && ;",
            "score": 99.432861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope , ) ;",
            "score": 99.42817518446181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope , ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node id , Node getprop , Node parent ) {",
            "score": 99.6301513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node id , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node module , Node parent )",
            "score": 99.59724731445313,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node module , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node parent ) {",
            "score": 99.56165986902573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.47236713610198,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t3.inGlobalScope( ) ;",
            "score": 99.45638699001736,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t2.inGlobalScope( ) ;",
            "score": 99.45638699001736,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t2008.inGlobalScope( ) ;",
            "score": 99.45638699001736,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) /",
            "score": 99.45309109157986,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & ? ) && & & & &",
            "score": 99.43258327907986,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & ? ) && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope ) &&(",
            "score": 99.427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal n , Node getprop , Node parent )",
            "score": 99.5971447172619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal n , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node parent , Node getprop , Node parent )",
            "score": 99.56136281866776,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node has , Node getprop , Node parent ) {",
            "score": 99.52283935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node has , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = super.inGlobalScope( ) ;",
            "score": 99.48646545410156,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.46991288034539,
            "correctness": "uncompilable",
            "tokenized_patch": "protected private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && & & |",
            "score": 99.45635375976562,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Module",
            "score": 99.4521713256836,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Module",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( t &&",
            "score": 99.43190002441406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope && &",
            "score": 99.42674153645834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Type getprop , Node parent )",
            "score": 99.62897600446429,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void parent , Node parent ) {",
            "score": 99.59706333705357,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Token getprop , Node parent , Node parent )",
            "score": 99.56133069490132,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >1;",
            "score": 99.485986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & > 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop )",
            "score": 99.46918083639706,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & L &&",
            "score": 99.45635022615132,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & L &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.inGlobalScope( ) && &",
            "score": 99.45205349392361,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || false ) ;",
            "score": 99.43123372395833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private = checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.59698195684524,
            "correctness": "uncompilable",
            "tokenized_patch": "private = check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node getprop , Node parent )",
            "score": 99.5610107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.52244873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = scope.inGlobalScope( ) &&",
            "score": 99.48526763916016,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.4685302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && t.) ;",
            "score": 99.4561767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t . ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && is",
            "score": 99.451904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && is",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double isOverride = t.inGlobalScope( ) &&",
            "score": 99.43087005615234,
            "correctness": "uncompilable",
            "tokenized_patch": "double is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.42540825737848,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Function parent )",
            "score": 99.59583100818452,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Function parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , final Node parent )",
            "score": 99.56024169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , final Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node name , Node parent ,",
            "score": 99.52167358398438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , final Node getprop ,",
            "score": 99.468505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t.inGlobalScope ;",
            "score": 99.45609537760417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = & t.inGlobalScope( ) && &",
            "score": 99.45122612847223,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = ).inGlobalScope( ) ;",
            "score": 99.43072868795956,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) || &",
            "score": 99.42444525824652,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent , Node getprop ) {",
            "score": 99.62799944196429,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int t , Node parent , Node parent ) {",
            "score": 99.56021457248264,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.52161254882813,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope.inGlobalScope( ) &&",
            "score": 99.48403098366477,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false ;",
            "score": 99.45504421657986,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Context )",
            "score": 99.450439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = false && inGlobalScope( ) &&",
            "score": 99.43021886488971,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && == &",
            "score": 99.42403157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && == &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object getprop , Node getprop , Node parent ) {",
            "score": 99.62762741815476,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( ObjectType t , Node getprop , Node parent )",
            "score": 99.59468005952381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object CaMeL Type t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , boolean isOverride ) {",
            "score": 99.55973510742187,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final Node getprop , final Node getprop ) {",
            "score": 99.51976928710937,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop ,",
            "score": 99.46706918569711,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && false &&",
            "score": 99.45496283637152,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && false &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( t )",
            "score": 99.45020967371323,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null.inGlobalScope( ) &&",
            "score": 99.43011474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true = t.inGlobalScope( ) ;",
            "score": 99.42392306857639,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int parent ,",
            "score": 99.59449404761905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node node , Node parent , Node parent ) {",
            "score": 99.55877007378473,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node node , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent ) {",
            "score": 99.51962280273438,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.t.inGlobalScope( ) ;",
            "score": 99.48336631373355,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.isOverride",
            "score": 99.45461138556985,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = get.inGlobalScope( ) && &",
            "score": 99.44906955295139,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) |",
            "score": 99.42361450195312,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) |",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.59414527529762,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node node , Node getprop , Node parent ) {",
            "score": 99.55831106085526,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , NodeTraversal t ) {",
            "score": 99.51953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope t.inGlobalScope( ) &&",
            "score": 99.4827297044837,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.46678402549342,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ''&& &",
            "score": 99.45421142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 't find a visibility modifier; assume it'&& &",
            "score": 99.45421142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 'a'&& &",
            "score": 99.45421142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 'a = ...'&& &",
            "score": 99.45421142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 'a.b'&& &",
            "score": 99.45421142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? t &&",
            "score": 99.44851345486111,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t3.inGlobalScope( ) && &",
            "score": 99.42274983723958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t2.inGlobalScope( ) && &",
            "score": 99.42274983723958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t2008.inGlobalScope( ) && &",
            "score": 99.42274983723958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Object getprop , Node parent )",
            "score": 99.59364536830357,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop ,",
            "score": 99.55816040039062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.51904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.46453857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &1&& &",
            "score": 99.45416870117188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & 1 && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true ) && &",
            "score": 99.44803195529514,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = ) && inGlobalScope( ) &&",
            "score": 99.42796415441177,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ) && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node parent , Node parent ) {",
            "score": 99.62717895507812,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , boolean validator ) {",
            "score": 99.5573666221217,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , boolean validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) throws",
            "score": 99.51898193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | & true &&",
            "score": 99.48237748579545,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.46348812705592,
            "correctness": "uncompilable",
            "tokenized_patch": "public private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & &&",
            "score": 99.45352333470395,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( scope ,",
            "score": 99.44761747472427,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && t.inGlobalScope( ) ;",
            "score": 99.42792426215277,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) &&(",
            "score": 99.42217658547794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node n , Node getprop , Node parent ) {",
            "score": 99.62708740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node n , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Style parent )",
            "score": 99.59334309895833,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Style parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.55736019736842,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node check , Node getprop , Node parent ) {",
            "score": 99.51786499023437,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node check , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & <<1;",
            "score": 99.48236374627976,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & << 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object parent )",
            "score": 99.46131089154412,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / &&",
            "score": 99.45294510690789,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && boolean",
            "score": 99.44750298394098,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long isOverride = t.inGlobalScope( ) &&",
            "score": 99.42748260498047,
            "correctness": "uncompilable",
            "tokenized_patch": "long is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object getprop , Node parent )",
            "score": 99.62667410714286,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node property , Node parent )",
            "score": 99.59277954101563,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node property , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ) throws",
            "score": 99.55696186266448,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.51715409128289,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token getprop ,",
            "score": 99.46084933810764,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != t.inGlobalScope( ) ;",
            "score": 99.45290013363487,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( '')",
            "score": 99.44659782858456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it')",
            "score": 99.44659782858456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a')",
            "score": 99.44659782858456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a = ...')",
            "score": 99.44659782858456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a.b')",
            "score": 99.44659782858456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.62651134672619,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.59270368303571,
            "correctness": "uncompilable",
            "tokenized_patch": "null void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.55692138671876,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.51633172286184,
            "correctness": "uncompilable",
            "tokenized_patch": "static private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.4605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( true )",
            "score": 99.44530531939338,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && *&",
            "score": 99.42185465494792,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , NodeTraversal t , Node parent ,",
            "score": 99.62625558035714,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Reference getprop , Node parent )",
            "score": 99.59134347098214,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Reference get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.55646715666118,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node index , Node parent ,",
            "score": 99.51515502929688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node index , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final boolean isOverride = t.inGlobalScope( )",
            "score": 99.48089240579044,
            "correctness": "uncompilable",
            "tokenized_patch": "public final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( private NodeTraversal t , Node getprop ,",
            "score": 99.46030144942434,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( private Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && return &",
            "score": 99.42156304253473,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && return &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node type )",
            "score": 99.62593005952381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.5547234030331,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.51315307617188,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & && ) ==0&&",
            "score": 99.48032448508523,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & && ) == 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.46001838235294,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List isOverride = t.inGlobalScope( ) && &",
            "score": 99.44514734604779,
            "correctness": "uncompilable",
            "tokenized_patch": "List is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false( t.inGlobalScope( ) &&",
            "score": 99.42140706380208,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false ( t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) ;",
            "score": 99.62566266741071,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) throws )",
            "score": 99.59112258184524,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) throws )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Type parent , Node parent ) {",
            "score": 99.55435341282895,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Node getprop ,",
            "score": 99.51251541940789,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isOverride = t.inGlobalScope( ) ;",
            "score": 99.47998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility(( NodeTraversal t , Node getprop ,",
            "score": 99.45809133429276,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Scope scope ) ;",
            "score": 99.45161268446181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) )",
            "score": 99.44343118106617,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ).inGlobalScope( ) ;",
            "score": 99.42457490808823,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ? &",
            "score": 99.42110188802083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.55393676757812,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void parent , Node parent ) {",
            "score": 99.51124267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Object checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.45785183376736,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ~",
            "score": 99.45120399876645,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ~",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && =",
            "score": 99.44284955193015,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false && false",
            "score": 99.42451746323529,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false && false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Type checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.59018089657738,
            "correctness": "uncompilable",
            "tokenized_patch": "private Type check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.55374348958334,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = t.inGlobalScope(",
            "score": 99.4785400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.45659722222223,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & |=",
            "score": 99.45118543836806,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & |=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? t &&",
            "score": 99.4427490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; ) {",
            "score": 99.42041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node n )",
            "score": 99.62537202380952,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node n )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent , Node getprop )",
            "score": 99.5526611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.509716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal parent )",
            "score": 99.45547645970395,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride =",
            "score": 99.4511249248798,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( / *",
            "score": 99.44200224034927,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && ;",
            "score": 99.42405192057292,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( name ) ;",
            "score": 99.41987161075367,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.62446521577381,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , int parent )",
            "score": 99.59002976190476,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node parent , Node parent , Node parent ) {",
            "score": 99.55217827690973,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.45487253289474,
            "correctness": "uncompilable",
            "tokenized_patch": "protected abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ''&&",
            "score": 99.45097270764802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 't find a visibility modifier; assume it'&&",
            "score": 99.45097270764802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 'a'&&",
            "score": 99.45097270764802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 'a = ...'&&",
            "score": 99.45097270764802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & 'a.b'&&",
            "score": 99.45097270764802,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( t ) &&",
            "score": 99.44101291232639,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && *",
            "score": 99.4239501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope && & & &",
            "score": 99.41827033547794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Exception checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.62444196428571,
            "correctness": "uncompilable",
            "tokenized_patch": "private Exception check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeUtil t , Node getprop , Node parent )",
            "score": 99.58992513020833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Util t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , boolean set ) {",
            "score": 99.5516421669408,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , boolean set ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.50535753038194,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.45463053385417,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Context ) ;",
            "score": 99.44988335503473,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? true :",
            "score": 99.44059922960069,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = this.inGlobalScope( ) &&",
            "score": 99.42323931525735,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope & &",
            "score": 99.41826985677083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node getprop , Object parent ) {",
            "score": 99.54966334292763,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( null , Node getprop , Node parent ) {",
            "score": 99.5047607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( null , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = parent.inGlobalScope( ) ;",
            "score": 99.4761962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility(",
            "score": 99.45060221354167,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.inGlobalScope( ) ;",
            "score": 99.44933363970588,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? t ,",
            "score": 99.43954128689236,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = false.inGlobalScope( ) &&",
            "score": 99.423095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null ? false : & & & &",
            "score": 99.41816711425781,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null ? false : & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.62347702752976,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean isOverride , Node parent , Node parent )",
            "score": 99.5494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node property , Node parent ,",
            "score": 99.5044189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node property , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true t.inGlobalScope( ) ;",
            "score": 99.44757758246527,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & &&",
            "score": 99.42243787977431,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &",
            "score": 99.41761016845703,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node t , Node parent , Node parent ) {",
            "score": 99.54924858940973,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.44919305098684,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & scope && &",
            "score": 99.4474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & scope && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) , &",
            "score": 99.43879968979779,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this ,",
            "score": 99.42225646972656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node name , Node parent ) {",
            "score": 99.62223307291667,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.5487124794408,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.50380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean isOverride , NodeTraversal t ,",
            "score": 99.44729132401316,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) &",
            "score": 99.43869916130515,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&.&",
            "score": 99.41541205512152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && . &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node n , Node parent )",
            "score": 99.62213745117188,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && */",
            "score": 99.47554096422698,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == t.inGlobalScope( ) ;",
            "score": 99.44673665364583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , }",
            "score": 99.44586502878289,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ,",
            "score": 99.4386474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( this &&",
            "score": 99.42111385569854,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ||",
            "score": 99.41521139705883,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal TYPE , Node getprop , Node parent )",
            "score": 99.58756510416667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal TYPE , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean isOverride ) {",
            "score": 99.54855346679688,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object getprop ) {",
            "score": 99.50222296463816,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ).inGlobalScope( ) ;",
            "score": 99.47519753196023,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ; )",
            "score": 99.44666883680556,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int objectType )",
            "score": 99.44386693050987,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int object CaMeL Type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = & t.inGlobalScope( ) &&",
            "score": 99.42057531020221,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ) &&",
            "score": 99.41517549402573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node node ) {",
            "score": 99.62140764508929,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private.checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.58676292782738,
            "correctness": "uncompilable",
            "tokenized_patch": "private . check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.54827202690973,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & <=1&&",
            "score": 99.4749267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & <= 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true t.inGlobalScope( ) ;",
            "score": 99.44659064797794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Context getprop ,",
            "score": 99.44357638888889,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Context get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( '')",
            "score": 99.4385124655331,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it')",
            "score": 99.4385124655331,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a')",
            "score": 99.4385124655331,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a = ...')",
            "score": 99.4385124655331,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a.b')",
            "score": 99.4385124655331,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & &&",
            "score": 99.41990033318015,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , boolean isOverride )",
            "score": 99.62115187872024,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , -1)",
            "score": 99.58675130208333,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , - 1 )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , boolean isOverride )",
            "score": 99.54825439453126,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws",
            "score": 99.50066174958882,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ;",
            "score": 99.44484991776316,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean isOverride ,",
            "score": 99.44341077302632,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( t ) &&",
            "score": 99.43815782335069,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = System.inGlobalScope( ) && & &",
            "score": 99.41967095269098,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && type !=",
            "score": 99.41497124565973,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && type !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Token parent ) {",
            "score": 99.62079148065476,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Token parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.54742431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.499462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.isOverride = t.inGlobalScope( ) &&",
            "score": 99.47479802911931,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &3|",
            "score": 99.44480590820312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &2|",
            "score": 99.44480590820312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &2008|",
            "score": 99.44480590820312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , )",
            "score": 99.44290964226974,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && type ==",
            "score": 99.41482883029514,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && type ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , int getprop , Node parent )",
            "score": 99.620263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , int get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object getprop , Node parent )",
            "score": 99.54691162109376,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Scope scope ) ;",
            "score": 99.44462505139802,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.44220934416118,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.43815104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.getGlobalScope( ) && &",
            "score": 99.414794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.61959402901786,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.54664916992188,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.498828125,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & & ) &&",
            "score": 99.47438742897727,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = = t.inGlobalScope( ) && &",
            "score": 99.44405110677083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int )",
            "score": 99.44181823730469,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = in.in.inGlobalScope( ) &&",
            "score": 99.41768391927083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in . in . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && || &",
            "score": 99.41458468967014,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node name , Node getprop , Node parent ) {",
            "score": 99.61934204101563,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node name , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node node , Node parent )",
            "score": 99.54602661132813,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node dereference , Node getprop , Node parent ,",
            "score": 99.4984130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node dereference , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & >>1;",
            "score": 99.4740978422619,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & >> 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & false &&",
            "score": 99.4440185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected int checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.44171142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? t",
            "score": 99.43762925091912,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( )( &",
            "score": 99.41448615579044,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ( &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node type , Node parent ) {",
            "score": 99.61895461309524,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( int t , Node getprop , Node parent )",
            "score": 99.54584061472039,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( int t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ~ & |",
            "score": 99.44384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~ & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object getprop )",
            "score": 99.44092475043402,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && inGlobalScope( ) ;",
            "score": 99.4168701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( type ,",
            "score": 99.41438293457031,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.58541434151786,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.54502516526442,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean isOverride ) {",
            "score": 99.49658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && t &&",
            "score": 99.44378662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.44003777754934,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false && ) &&",
            "score": 99.416259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false && ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope == & & &",
            "score": 99.41404095818015,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope == & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Context parent ) {",
            "score": 99.61798967633929,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Context parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Package parent )",
            "score": 99.58533296130952,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Package parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.54493408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && **& &",
            "score": 99.47271118164062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * * & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ||",
            "score": 99.44301886307566,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , T parent ,",
            "score": 99.43911563648896,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ) && &",
            "score": 99.41616641773896,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.54379754317434,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = get.inGlobalScope( ) ;",
            "score": 99.47270965576172,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = t.isOverride =",
            "score": 99.44287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private protected void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.43901624177632,
            "correctness": "uncompilable",
            "tokenized_patch": "private protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && t",
            "score": 99.43613688151042,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = type.inGlobalScope( ) &&",
            "score": 99.4161017922794,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) )",
            "score": 99.41387176513672,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Class getprop , Node parent )",
            "score": 99.58440290178571,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean isSubtype ) {",
            "score": 99.54262823807566,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.4942138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = get.inGlobalScope( ) &&",
            "score": 99.4724349975586,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal <",
            "score": 99.43897840711806,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal <",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Class",
            "score": 99.43556213378906,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Class",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , void parent )",
            "score": 99.58437965029762,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean isOverride ) {",
            "score": 99.5419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) ;",
            "score": 99.47233363560268,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null t.inGlobalScope( ) ;",
            "score": 99.44260125411184,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.43830023871527,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Type parent )",
            "score": 99.61658935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal node , Node getprop , Node parent )",
            "score": 99.58234514508929,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal node , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node check , Node getprop , Node parent ) {",
            "score": 99.49394145764802,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node check , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = parent.inGlobalScope( ) &&",
            "score": 99.47101593017578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , protected Node parent ,",
            "score": 99.43808465254934,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , protected Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( &&",
            "score": 99.43466186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this ||",
            "score": 99.41559914981617,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) ;",
            "score": 99.61592029389881,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object parent ) {",
            "score": 99.493896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !",
            "score": 99.44173177083333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & !",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.43703741776316,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( /",
            "score": 99.43462371826172,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = super.inGlobalScope( ) &&",
            "score": 99.41532628676471,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Symbol scope ) &&",
            "score": 99.41095648871527,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Symbol scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parent ) { }",
            "score": 99.61585053943452,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) { }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Short getprop , Node parent )",
            "score": 99.58206612723214,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Short get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.54032175164474,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & <=1;",
            "score": 99.47011108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & <= 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.getprop , Node getprop ,",
            "score": 99.43686930338542,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ? ) ;",
            "score": 99.43456353081598,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = true && t.inGlobalScope( ) &&",
            "score": 99.41501193576389,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , int getprop , Node parent )",
            "score": 99.61580403645833,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Context parent )",
            "score": 99.5820079985119,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Context parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.53990478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.49045138888889,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = true && t.inGlobalScope( ) ;",
            "score": 99.469482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & ||",
            "score": 99.4407470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node parent )",
            "score": 99.43672180175781,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || & ) ;",
            "score": 99.41488308376736,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || & ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Token getprop , Node getprop , Node parent )",
            "score": 99.53880004882812,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node source , Node parent ,",
            "score": 99.489892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node source , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && false ;",
            "score": 99.44071237664474,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( node , NodeTraversal t , Node parent )",
            "score": 99.43661338404605,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( node , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.getGlobalScope( ) && & &",
            "score": 99.41346571180556,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = ! t.inGlobalScope( ) &&",
            "score": 99.41000705295139,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , String parent )",
            "score": 99.58042689732143,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , String parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) throws",
            "score": 99.538330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , ) {",
            "score": 99.48988647460938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) ==0||",
            "score": 99.4689608487216,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) == 0 ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object parent , NodeTraversal t ,",
            "score": 99.436279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object parent , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && & ;",
            "score": 99.41273328993056,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) )",
            "score": 99.40892836626838,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected long checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.58024088541667,
            "correctness": "uncompilable",
            "tokenized_patch": "protected long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( int getprop , Node getprop , Node parent )",
            "score": 99.53822021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , if(",
            "score": 99.48973388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , private getprop )",
            "score": 99.43527703536184,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? ) &&",
            "score": 99.43261000689338,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false &&",
            "score": 99.41231536865234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ? &",
            "score": 99.40892740885417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop , Node getprop )",
            "score": 99.61540876116071,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = true.inGlobalScope( ) &&",
            "score": 99.46842817826705,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & &&",
            "score": 99.4401123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , ?",
            "score": 99.43484657689145,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = type.inGlobalScope( )",
            "score": 99.43213653564453,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( this ) &&",
            "score": 99.41192267922794,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object getprop , Node getprop , Node parent )",
            "score": 99.53582153320312,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final Node getprop , final Node parent ) {",
            "score": 99.4885318153783,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & != true &&",
            "score": 99.46827392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.43430873325893,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && inGlobalScope( ) && &",
            "score": 99.43168809678819,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( scope ) ;",
            "score": 99.40825059678819,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Token getprop , Node getprop , Node parent ) {",
            "score": 99.61503673735119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Long checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.57896205357143,
            "correctness": "uncompilable",
            "tokenized_patch": "private Long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.53551567925348,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node getprop , Node parent ) throws",
            "score": 99.48819580078126,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isGlobal = t.inGlobalScope( ) &&",
            "score": 99.46825062144886,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != t.inGlobalScope( ) &&",
            "score": 99.43920220269098,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.43390856291118,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.t.inGlobalScope( )",
            "score": 99.43168809678819,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = null.inGlobalScope( ) &&",
            "score": 99.41179342830883,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ) }",
            "score": 99.61502511160714,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws ) {",
            "score": 99.57878766741071,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.48728637695312,
            "correctness": "uncompilable",
            "tokenized_patch": "private static synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=1&& & *",
            "score": 99.46759588068181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 && & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( ) && & &",
            "score": 99.43856008429276,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Object checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.43352950246711,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & ||",
            "score": 99.41122616038604,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ,",
            "score": 99.4076919555664,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , int parent ) {",
            "score": 99.6145252046131,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , int parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.53534294577206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String propertyName ,",
            "score": 99.48453561883224,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & & || ||",
            "score": 99.46751819957386,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & & || ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & t.inGlobalScope( ) && &",
            "score": 99.4376708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private long checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.43349880642361,
            "correctness": "uncompilable",
            "tokenized_patch": "private long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ).",
            "score": 99.4105583639706,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride =( t.inGlobalScope( ) &&",
            "score": 99.40730794270833,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , NodeTraversal t , Node parent )",
            "score": 99.61416480654762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , boolean isSubtype )",
            "score": 99.53509521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , boolean is CaMeL Subtype )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.48452419704861,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope.inGlobalScope( ) &&",
            "score": 99.46745161576705,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &(",
            "score": 99.43710809004934,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.43344598067434,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ?(",
            "score": 99.4296515969669,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ) && inGlobalScope( ) &&",
            "score": 99.41001263786765,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ) && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride( ) && &",
            "score": 99.4068115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node ) {",
            "score": 99.6135486421131,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal type , Node getprop , Node parent )",
            "score": 99.57786923363095,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal type , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node parent , Node parent )",
            "score": 99.53411187065973,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.48432006835938,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ==1;",
            "score": 99.46698288690476,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node parent ,",
            "score": 99.43123626708984,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) return",
            "score": 99.4296013327206,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) return",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) ) ;",
            "score": 99.40574137369792,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node current , Node parent ) {",
            "score": 99.61347888764881,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node current , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal list , Node getprop , Node parent )",
            "score": 99.57784598214286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal list , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t )",
            "score": 99.53267728365384,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & |=",
            "score": 99.4366519325658,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & |=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , static getprop )",
            "score": 99.43110737047698,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , static get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &&",
            "score": 99.40685317095588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) && & |",
            "score": 99.40564643012152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node id , Node parent ) {",
            "score": 99.61282784598214,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkNameVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.57782273065476,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Name CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ,",
            "score": 99.53212376644737,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.48258056640626,
            "correctness": "uncompilable",
            "tokenized_patch": "private static static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = false.inGlobalScope( ) ;",
            "score": 99.4668856534091,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.getGlobalScope( ) ;",
            "score": 99.43644445082721,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static String checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.43068333675987,
            "correctness": "uncompilable",
            "tokenized_patch": "private static String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.in.inGlobalScope( )",
            "score": 99.42742919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.t.inGlobalScope( ) &&",
            "score": 99.40653483072917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String getprop , Node getprop , Node parent ) {",
            "score": 99.61245582217262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.53169330797698,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & !=1&& &",
            "score": 99.466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 1 && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) ?",
            "score": 99.42609719669117,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.40629069010417,
            "correctness": "uncompilable",
            "tokenized_patch": "private final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this , &",
            "score": 99.40475643382354,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node parent , Node parent , Node parent )",
            "score": 99.61224655877976,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Symbol parent )",
            "score": 99.57763671875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Symbol parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) throws ) {",
            "score": 99.48237047697368,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) throws ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.getGlobalScope( )",
            "score": 99.426025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( this ) &&",
            "score": 99.40597534179688,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ==",
            "score": 99.40467026654412,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , NodeTraversal t , Node parent ) {",
            "score": 99.61207217261905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Style parent )",
            "score": 99.53096923828124,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Style parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ) && t.inGlobalScope( ) ;",
            "score": 99.46650776110198,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & true |",
            "score": 99.4355532997533,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & true |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String getprop ,",
            "score": 99.42832438151042,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ||",
            "score": 99.4256820678711,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( this ) ;",
            "score": 99.40573459201389,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isGlobal = t.isGlobal ;",
            "score": 99.40412733289931,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Global = t . is CaMeL Global ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.61194428943452,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , boolean validator )",
            "score": 99.53082885742188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean validator )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static Object checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.42822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private static Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && &&",
            "score": 99.42561848958333,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = = t.inGlobalScope( ) ;",
            "score": 99.40397135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.6118408203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Type( )",
            "score": 99.57719494047619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , String propertyName ) {",
            "score": 99.53031616210937,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride = t.inGlobalScope( ) &&",
            "score": 99.46547154017857,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride( ) &&",
            "score": 99.43477085658482,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal ,",
            "score": 99.42793104383681,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.40534803602431,
            "correctness": "uncompilable",
            "tokenized_patch": "public final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t3.inGlobalScope( ) &&",
            "score": 99.40379423253677,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t2.inGlobalScope( ) &&",
            "score": 99.40379423253677,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t2008.inGlobalScope( ) &&",
            "score": 99.40379423253677,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Type getprop , Node parent ) {",
            "score": 99.61129324776786,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal l , Node getprop , Node parent )",
            "score": 99.57646251860119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal l , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , String propertyName )",
            "score": 99.53023274739583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.47809801603618,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && & &",
            "score": 99.46526135896382,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / / &&",
            "score": 99.43453369140624,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / / &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.4277407997533,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && )",
            "score": 99.42423502604167,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null &&",
            "score": 99.40476989746094,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean parent , Node getprop , Node parent )",
            "score": 99.5275943153783,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , NodeTraversal t ) {",
            "score": 99.47795952690973,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ***& & &",
            "score": 99.46464399857955,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * * * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected final boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.43412272135417,
            "correctness": "uncompilable",
            "tokenized_patch": "protected final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.42729749177632,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ! t.inGlobalScope( )",
            "score": 99.4236701516544,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope(",
            "score": 99.4045166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Symbol scope )",
            "score": 99.40324132582721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Symbol scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void parent , Node parent )",
            "score": 99.57608032226562,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node check , Node getprop , Node parent ,",
            "score": 99.47712145353618,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node check , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & scope ) &&",
            "score": 99.43404541015624,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , private",
            "score": 99.42689915707237,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , private",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( false ,",
            "score": 99.42300235523896,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override isOverride = t.inGlobalScope( ) ;",
            "score": 99.40351867675781,
            "correctness": "uncompilable",
            "tokenized_patch": "Override is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( locale )",
            "score": 99.4031753540039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( locale )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.61044456845238,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean getprop , Node parent , Node parent )",
            "score": 99.52629009046052,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & *",
            "score": 99.46406635485198,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean [ ] isOverride = t.inGlobalScope( ) ;",
            "score": 99.43313116776316,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean [ ] is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.42670641447368,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Scope",
            "score": 99.42294108072916,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean [ ] isOverride = t.inGlobalScope( ) &&",
            "score": 99.40308973524306,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean [ ] is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop ,",
            "score": 99.61031668526786,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Factory parent )",
            "score": 99.57589285714286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Factory parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , boolean isConstructor )",
            "score": 99.52503662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , boolean is CaMeL Constructor )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && & &&",
            "score": 99.46405350534539,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.42649439761513,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? true ,",
            "score": 99.42273627387152,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( null ) ;",
            "score": 99.40276421440973,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.61001441592262,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( int getprop , Node parent , Node parent )",
            "score": 99.52496659128289,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "instanceof void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.47630479600694,
            "correctness": "uncompilable",
            "tokenized_patch": "instanceof void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &",
            "score": 99.43243877704327,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.42645584909539,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ?(",
            "score": 99.4227294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && type.",
            "score": 99.40300835503473,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && type .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Scope.inGlobalScope( ) && &",
            "score": 99.40253762637867,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Class parent ) {",
            "score": 99.60999116443452,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Class parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , list parent )",
            "score": 99.5756603422619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , list parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope(",
            "score": 99.46387590680804,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( ) && & & &",
            "score": 99.43232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.40235731336806,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.60985165550595,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Number parent )",
            "score": 99.57563709077381,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Number parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent )",
            "score": 99.52416381835937,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) { {",
            "score": 99.4746826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & <= ) &&",
            "score": 99.46320134943181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & <= ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & | & |",
            "score": 99.43179931640626,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & | & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean isConstructor ,",
            "score": 99.42544073807566,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Constructor ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? )",
            "score": 99.42221966911765,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = type.inGlobalScope( ) &&",
            "score": 99.4021857766544,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.60920061383929,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent ) {",
            "score": 99.57552083333333,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean isConstructor )",
            "score": 99.5240478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Constructor )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.47383840460526,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , protected getprop ,",
            "score": 99.4244449013158,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , protected get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ? t.inGlobalScope( ) :",
            "score": 99.40140787760417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ? t . in CaMeL Global CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.6089099702381,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop.getJSType( ) )",
            "score": 99.52379150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop . get CaMeL JS CaMeL Type ( ) )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.47088012695312,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &3&&(",
            "score": 99.43114624023437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2&&(",
            "score": 99.43114624023437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &2008&&(",
            "score": 99.43114624023437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.42441134982639,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = parent.inGlobalScope( )",
            "score": 99.42198181152344,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node current , Node getprop , Node parent ) {",
            "score": 99.60875854492187,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node current , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , float parent )",
            "score": 99.57513718377976,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , float parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.46997680664063,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( inGlobalScope ) ;",
            "score": 99.46283249627976,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( in CaMeL Global CaMeL Scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t == t.inGlobalScope( ) ;",
            "score": 99.43111379523026,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t == t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.42359076605902,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) :",
            "score": 99.42195892333984,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( scope ) ;",
            "score": 99.40168313419117,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( *",
            "score": 99.40013834635417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ,",
            "score": 99.60853271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean t , Node getprop , Node parent )",
            "score": 99.52275005139802,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Node getprop ,",
            "score": 99.46883994654605,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Context ) ;",
            "score": 99.43092176649306,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public ,",
            "score": 99.42343319163604,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parent ) }",
            "score": 99.608154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal id , Node getprop , Node parent )",
            "score": 99.5749744233631,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal id , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.522412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node key , Node parent ,",
            "score": 99.46812133789062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node key , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && != false ;",
            "score": 99.4620425575658,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && != false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t1.inGlobalScope( ) ;",
            "score": 99.43035529641544,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t 1 . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public Node parent )",
            "score": 99.42315352590461,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Module",
            "score": 99.4216537475586,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Module",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) &&(",
            "score": 99.40065630744485,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = true.inGlobalScope( ) &&",
            "score": 99.39956485523896,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop , Node getprop ,",
            "score": 99.60797991071429,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.57484741210938,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( public NodeTraversal t , Node getprop ,",
            "score": 99.42293508429276,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( public Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Context",
            "score": 99.42129516601562,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & false",
            "score": 99.39937337239583,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean t.inGlobalScope( ) &&",
            "score": 99.39925130208333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , void parent ) {",
            "score": 99.60757300967262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Location parent )",
            "score": 99.57477678571429,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Location parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String propertyName ) {",
            "score": 99.52156982421874,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.46562194824219,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ; )",
            "score": 99.43003336588542,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.42268880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.42074245876736,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && :",
            "score": 99.39894014246323,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false ? t.inGlobalScope( ) &&",
            "score": 99.39893934461806,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false ? t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ] checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.60709635416667,
            "correctness": "uncompilable",
            "tokenized_patch": "private ] check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName ) {",
            "score": 99.52119663783482,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws Exception",
            "score": 99.46492919921874,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ==1&&",
            "score": 99.45985630580357,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( ) &&(",
            "score": 99.42968071831598,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.42258588005515,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? ) ;",
            "score": 99.4205681295956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null ) && &",
            "score": 99.39889865451389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( this ) ;",
            "score": 99.39870318244485,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Enum getprop , Node parent )",
            "score": 99.57384672619048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Enum get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object getprop , Node parent , Node parent )",
            "score": 99.52091257195724,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node node ) {",
            "score": 99.46473524305556,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = type.inGlobalScope( ) ;",
            "score": 99.45967240767045,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope.inGlobalScope ;",
            "score": 99.42958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected String checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.42118326822917,
            "correctness": "uncompilable",
            "tokenized_patch": "protected String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , int getprop )",
            "score": 99.60696847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , int get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Character parent )",
            "score": 99.5727306547619,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Character parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean checkPropertyVisibility , Node parent ) {",
            "score": 99.51846474095395,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.46384791324013,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = super.isOverride = t.inGlobalScope( ) ;",
            "score": 99.4593838778409,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = super . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , final",
            "score": 99.42108475534539,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) /",
            "score": 99.41947667738971,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = filter.inGlobalScope( ) &&",
            "score": 99.39846801757812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = filter . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = super.inGlobalScope( ) &&",
            "score": 99.39720243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Object parent ) {",
            "score": 99.60681733630952,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node scope , Node getprop )",
            "score": 99.57269577752976,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node scope , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent ) throws",
            "score": 99.51665649414062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.46094970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && & ?",
            "score": 99.45859246504934,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true ;",
            "score": 99.42830403645833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.42059647409539,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t t.inGlobalScope( ) && &",
            "score": 99.41946072048611,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope == & &",
            "score": 99.3984146118164,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope == & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && inGlobalScope( ) ;",
            "score": 99.39707318474265,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public ? checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.57262602306548,
            "correctness": "uncompilable",
            "tokenized_patch": "public ? check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.46010131835938,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & !=0;",
            "score": 99.4584728422619,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Method",
            "score": 99.41943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Method",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "@ Override boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.39817301432292,
            "correctness": "uncompilable",
            "tokenized_patch": "@ Override boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , boolean current )",
            "score": 99.57203311011905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean current )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object parent , Node getprop , Node parent )",
            "score": 99.51595908717105,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) { }",
            "score": 99.46002197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = t.inGlobalScope ;",
            "score": 99.45831853693181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , short getprop ,",
            "score": 99.41989474826389,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , short get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( |",
            "score": 99.41911315917969,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) && *",
            "score": 99.39643690321181,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.60608491443452,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.572021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , boolean isConstructor ) {",
            "score": 99.515234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.45932345920139,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || true ) &&",
            "score": 99.45815558182566,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&3&& &",
            "score": 99.42630807976974,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2&& &",
            "score": 99.42630807976974,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2008&& &",
            "score": 99.42630807976974,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , / *",
            "score": 99.41958438648896,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , / *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( / *",
            "score": 99.41900275735294,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( type ) &&",
            "score": 99.39791531032986,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( this ) && & &",
            "score": 99.39607069227431,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal false , Node getprop , Node parent )",
            "score": 99.57192847842262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal false , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop ) {",
            "score": 99.51523061899039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent",
            "score": 99.45906982421874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && **& & && &",
            "score": 99.4580965909091,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * * & & && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true t.inGlobalScope( ) && &",
            "score": 99.41895209418402,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true t.inGlobalScope( ) &&",
            "score": 99.3978271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && /",
            "score": 99.39600287543402,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.6056396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , XML getprop , Node parent )",
            "score": 99.57187034970238,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , XML get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , boolean isOverride )",
            "score": 99.51495040090461,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = true.inGlobalScope(",
            "score": 99.458056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = true . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.41845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = & t.inGlobalScope( ) {",
            "score": 99.41838243272569,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this && *",
            "score": 99.39487033420139,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node t , Node getprop , Node parent )",
            "score": 99.60562936883224,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , boolean true )",
            "score": 99.51494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object parent ) {",
            "score": 99.45470513237848,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && inGlobalScope( ) && &",
            "score": 99.41834852430556,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public getprop ,",
            "score": 99.41751259251645,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( type , &",
            "score": 99.39700137867646,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( '') ;",
            "score": 99.39476860894098,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') ;",
            "score": 99.39476860894098,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a') ;",
            "score": 99.39476860894098,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a = ...') ;",
            "score": 99.39476860894098,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a.b') ;",
            "score": 99.39476860894098,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Scope getprop , Node parent )",
            "score": 99.57146344866071,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Scope get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , final Node parent ) {",
            "score": 99.51362047697368,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.45467979029605,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ~",
            "score": 99.42550498560855,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) /",
            "score": 99.41828918457031,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( null , Node getprop , Node parent )",
            "score": 99.41712103949652,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( null , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope && & &",
            "score": 99.39679718017578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , int parent ) {",
            "score": 99.60532924107143,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , int parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ) &&",
            "score": 99.45770941840277,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t , final Node getprop ,",
            "score": 99.4544189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.isOverride( ) &&",
            "score": 99.42543334960938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this ,",
            "score": 99.41760971966912,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && global",
            "score": 99.39633358226104,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && global",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && ?",
            "score": 99.39472113715277,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public ] checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.60521298363095,
            "correctness": "uncompilable",
            "tokenized_patch": "public ] check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent )",
            "score": 99.56964983258929,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object isOverride = t.inGlobalScope( ) ;",
            "score": 99.42524270450367,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? true /",
            "score": 99.41752115885417,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , static getprop ,",
            "score": 99.41683620876736,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , static get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&.",
            "score": 99.39613252527573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( **",
            "score": 99.39470672607422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node parent , Node getprop ) {",
            "score": 99.60509672619048,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node null , Node getprop , Node parent )",
            "score": 99.56963147615132,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node null , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent , Node",
            "score": 99.51211065995066,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , Node",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.45418972439236,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / *&&",
            "score": 99.42508544921876,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / * &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Context )",
            "score": 99.41742302389706,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , T getprop ,",
            "score": 99.41650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isOverride = true ;",
            "score": 99.39578450520834,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.51199001736111,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & | | |",
            "score": 99.45749733664773,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & | | |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.45377604166667,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) :",
            "score": 99.41736518012152,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.41627261513158,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && |",
            "score": 99.39566379123264,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope(",
            "score": 99.39454868861607,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , scope ) {",
            "score": 99.60377139136905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , scope ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node next , Node parent )",
            "score": 99.56936645507812,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node next , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , Node parent )",
            "score": 99.51134535845588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & !=1;",
            "score": 99.45694986979167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & != 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.453564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && & |",
            "score": 99.4234683388158,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , T getprop )",
            "score": 99.41573079427083,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t = t.inGlobalScope( ) ;",
            "score": 99.39395480685764,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , NodeTraversal t , Node parent ) {",
            "score": 99.60362025669643,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Property parent )",
            "score": 99.56927780877976,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Property parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( JSDocInfo docInfo ) {",
            "score": 99.51132541232639,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( JS CaMeL Doc CaMeL Info doc CaMeL Info ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( this ) ;",
            "score": 99.4569091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.45325991981908,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & false |",
            "score": 99.42342336554276,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & false |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) & &",
            "score": 99.41679551866319,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.41569438733552,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( '') && &",
            "score": 99.39548068576389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') && &",
            "score": 99.39548068576389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a') && &",
            "score": 99.39548068576389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...') && &",
            "score": 99.39548068576389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b') && &",
            "score": 99.39548068576389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope(",
            "score": 99.3935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Type parent ) {",
            "score": 99.60341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Type parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , node getprop , Node parent )",
            "score": 99.56924293154762,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean isOverride )",
            "score": 99.51128186677632,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.45303505345395,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & &",
            "score": 99.42221069335938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) boolean",
            "score": 99.41614487591912,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.41565659466912,
            "correctness": "uncompilable",
            "tokenized_patch": "private check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = scope.inGlobalScope( ) && &",
            "score": 99.39530675551471,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ''&&",
            "score": 99.39324188232422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it'&&",
            "score": 99.39324188232422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a'&&",
            "score": 99.39324188232422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...'&&",
            "score": 99.39324188232422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b'&&",
            "score": 99.39324188232422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Integer parent )",
            "score": 99.56919642857143,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Integer parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node node )",
            "score": 99.5112060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >=1&&",
            "score": 99.4565185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & >= 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ) ;",
            "score": 99.42185465494792,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true.inGlobalScope( )",
            "score": 99.4160385131836,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.41541883680556,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) == null ?",
            "score": 99.39522298177083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) == null ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( '') ;",
            "score": 99.39307996961806,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') ;",
            "score": 99.39307996961806,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a') ;",
            "score": 99.39307996961806,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a = ...') ;",
            "score": 99.39307996961806,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( 'a.b') ;",
            "score": 99.39307996961806,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node parent , Node parent )",
            "score": 99.60166422526042,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , short parent )",
            "score": 99.56902204241071,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , short parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , final Node parent , Node parent )",
            "score": 99.51050415039063,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >0;",
            "score": 99.45643310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & > 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.45229204963235,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & :",
            "score": 99.42111545138889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal class ,",
            "score": 99.414794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal class ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( type( ) &&",
            "score": 99.39515516493056,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && & ;",
            "score": 99.39286295572917,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node index , Node parent )",
            "score": 99.6015869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node index , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal true , Node getprop , Node parent )",
            "score": 99.56896391369048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal true , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.510400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & >1&&",
            "score": 99.45612127130681,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & > 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.45135091145833,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = t.inGlobalScope ;",
            "score": 99.42060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && is",
            "score": 99.41522216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && is",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) / *",
            "score": 99.3948615579044,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) / *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & ?",
            "score": 99.39171645220588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , Node parent , Node parent ) {",
            "score": 99.60138260690789,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal options , Node getprop , Node parent )",
            "score": 99.56874302455357,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal options , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & !=0&&",
            "score": 99.4560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) { private",
            "score": 99.45126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { private",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && {",
            "score": 99.42043169806985,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.41453642003677,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.41277204241071,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & & *& & &",
            "score": 99.39165496826172,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & & * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node node , Node getprop , Node parent ) {",
            "score": 99.6011962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public double checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.56871977306548,
            "correctness": "uncompilable",
            "tokenized_patch": "public double check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean checkPropertyVisibility )",
            "score": 99.50679931640624,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && ) {",
            "score": 99.45575272409539,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = & t.inGlobalScope( ) &&",
            "score": 99.41435411241319,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type getprop ,",
            "score": 99.41264512803819,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( scope ) &&",
            "score": 99.39349724264706,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Scope.inGlobalScope( ) &&",
            "score": 99.3913803100586,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ] checkPropertyVisibility( Node getprop , Node getprop , Node parent ) {",
            "score": 99.60091145833333,
            "correctness": "uncompilable",
            "tokenized_patch": "private ] check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.56856863839286,
            "correctness": "uncompilable",
            "tokenized_patch": "public Boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.isOverride = t.inGlobalScope( ) ;",
            "score": 99.45521129261364,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Object parent ) {",
            "score": 99.45068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false t.inGlobalScope( ) ;",
            "score": 99.41977945963542,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.getGlobalScope( ) && &",
            "score": 99.41307915581598,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Object getprop ,",
            "score": 99.41202121310764,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & false",
            "score": 99.39073988970588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node node , Node parent ) {",
            "score": 99.59989013671876,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node get , Node parent ) {",
            "score": 99.56851050967262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , String propertyName )",
            "score": 99.50616455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , String property CaMeL Name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( boolean isOverride ) &&",
            "score": 99.45477294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean is CaMeL Override ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null = t.inGlobalScope( ) ;",
            "score": 99.41961669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? t /",
            "score": 99.41292995876736,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.41196803042763,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) !=0;",
            "score": 99.39271375868056,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private short checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.56812686011905,
            "correctness": "uncompilable",
            "tokenized_patch": "private short check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.50591077302632,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & == ) ;",
            "score": 99.45471801757813,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.44908854166667,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( false ,",
            "score": 99.41271254595588,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( ObjectType objectType ,",
            "score": 99.41126251220703,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope ) {",
            "score": 99.39244169347427,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Token parent ) {",
            "score": 99.59944661458333,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Token parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || ) ;",
            "score": 99.45461697048611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.44803659539474,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & t !=0;",
            "score": 99.41895294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & t != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) ,",
            "score": 99.41241455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Object checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.41094006990132,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && type &",
            "score": 99.39238823784723,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && type &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & && ;",
            "score": 99.39050971137152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node parent , Node parent )",
            "score": 99.50580797697368,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && true ) &&",
            "score": 99.45450168185764,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.44792094983552,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ? &",
            "score": 99.41881039268092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , protected",
            "score": 99.41043853759766,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , protected",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( type )",
            "score": 99.39225499770221,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & &",
            "score": 99.38936767578124,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( int getprop , Node getprop , Node parent ) {",
            "score": 99.59880719866071,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal command , Node getprop , Node parent )",
            "score": 99.56767345610119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal command , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean isSubtype )",
            "score": 99.50512017144098,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Subtype )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) ==0?",
            "score": 99.45435680042614,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) == 0 ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.44777221679688,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ; Override =",
            "score": 99.41855340254934,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( t )",
            "score": 99.41218118106617,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , boolean isOverride )",
            "score": 99.40926320929276,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ? & &",
            "score": 99.39224582248264,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ? & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void isOverride = t.inGlobalScope( ) &&",
            "score": 99.38918169806985,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.59857468377976,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Short parent )",
            "score": 99.56761532738095,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Short parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object parent , Node parent )",
            "score": 99.50457442434211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.44773463199013,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & ?",
            "score": 99.41851196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in inGlobalScope( )",
            "score": 99.41114717371323,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static Node checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40925035978618,
            "correctness": "uncompilable",
            "tokenized_patch": "private static Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && ;",
            "score": 99.38898468017578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , NodeTraversal t , Node parent )",
            "score": 99.59842354910714,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean checkPropertyVisibility ) {",
            "score": 99.50440216064453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) &&",
            "score": 99.45346069335938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? true :",
            "score": 99.41107177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected int checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.40908974095395,
            "correctness": "uncompilable",
            "tokenized_patch": "protected int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = filter.inGlobalScope( ) ;",
            "score": 99.39045715332031,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = filter . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & true",
            "score": 99.38876003689236,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.56737118675595,
            "correctness": "uncompilable",
            "tokenized_patch": "public static check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop , Node parent ,",
            "score": 99.50366821289063,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null && t.inGlobalScope( ) ;",
            "score": 99.45317247178819,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.4474853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & false ;",
            "score": 99.4181396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & /",
            "score": 99.41103108723958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride =( t.inGlobalScope( ) &&",
            "score": 99.39027913411458,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ) && *",
            "score": 99.3887077780331,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node type , Node getprop , Node parent )",
            "score": 99.5978939658717,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node type , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Object parent ) {",
            "score": 99.50349426269531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , Node getprop , Node parent ) {",
            "score": 99.44739447699652,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ? t ;",
            "score": 99.41018337673611,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( node , NodeTraversal t , Node parent ,",
            "score": 99.4089291221217,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( node , Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) != null ;",
            "score": 99.39014350043402,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) != null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && & & ==",
            "score": 99.38844807942708,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.59698195684524,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , int true )",
            "score": 99.5028076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & != ) ;",
            "score": 99.45277622767857,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & != ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ) ;",
            "score": 99.44710083007813,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.41762966579861,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? true /",
            "score": 99.41018337673611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.t , NodeTraversal t ,",
            "score": 99.40877278645833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && ?",
            "score": 99.38783772786458,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal key , Node getprop , Node parent )",
            "score": 99.56683640252976,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal key , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , boolean parent )",
            "score": 99.50216674804688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >1&& & *",
            "score": 99.4526700106534,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & > 1 && & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws Exception",
            "score": 99.44676513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ? ) &&",
            "score": 99.40987820095486,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.40864643297698,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( module ) &&",
            "score": 99.39003619025735,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( module ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & ) !=",
            "score": 99.38770209418402,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ) !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName , Node getprop , Node parent )",
            "score": 99.59687732514881,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , null ) {",
            "score": 99.56630161830357,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , null ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop )",
            "score": 99.5018081665039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isGlobal = t.inGlobalScope( ) ;",
            "score": 99.45243908110119,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws Exception",
            "score": 99.4461669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ! & &",
            "score": 99.41714638157895,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ! & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? t /",
            "score": 99.40970865885417,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean isConstructor )",
            "score": 99.4085757606908,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Constructor )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) || &",
            "score": 99.38966878255208,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false ,",
            "score": 99.38764190673828,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop , Node getprop ,",
            "score": 99.59642333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ,",
            "score": 99.56554594494048,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.4453125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? true ;",
            "score": 99.40966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , E getprop ,",
            "score": 99.40780978732639,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , E get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.38959099264706,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & &",
            "score": 99.38742244944854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type parent , Node parent )",
            "score": 99.59630737304687,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String getprop , Node parent , Node parent )",
            "score": 99.56528834292763,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & **& &",
            "score": 99.4516268643466,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & * * & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( if( NodeTraversal t , Node getprop ,",
            "score": 99.44517211914062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( if ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? t",
            "score": 99.40925598144531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int getprop ,",
            "score": 99.40762668185764,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) & &",
            "score": 99.38893755744485,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ==",
            "score": 99.38739372702206,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node t , Node getprop , Node parent ) {",
            "score": 99.5960693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object parent , Node getprop )",
            "score": 99.56497628348214,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , void getprop , Node parent )",
            "score": 99.4998291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | & | ?",
            "score": 99.45136052911931,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & | ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.4444091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "private final synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( ) && &",
            "score": 99.40875603170956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.40730116102431,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null ? true : & & & &",
            "score": 99.38851928710938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null ? true : & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false && ) ;",
            "score": 99.38730197482639,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false && ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( Node getprop , Node parent , Node parent ) {",
            "score": 99.59551391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node node , Node parent )",
            "score": 99.56492309570312,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean isConstructor ) {",
            "score": 99.4997802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & scope ) ;",
            "score": 99.41600952148437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( abstract NodeTraversal t , Node getprop ,",
            "score": 99.40647486636513,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( abstract Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false = t.inGlobalScope( ) ;",
            "score": 99.38828531901042,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && /",
            "score": 99.38695610894098,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.594873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Style parent )",
            "score": 99.56489490327381,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Style parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.4997329711914,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && ) ;",
            "score": 99.4488884420956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int isOverride = t.inGlobalScope( ) ;",
            "score": 99.41538373161765,
            "correctness": "uncompilable",
            "tokenized_patch": "private int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? true",
            "score": 99.40829647288604,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Collection isOverride = t.inGlobalScope( ) &&",
            "score": 99.38655090332031,
            "correctness": "uncompilable",
            "tokenized_patch": "Collection is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node scope )",
            "score": 99.59404064360119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.49965948807566,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = check.inGlobalScope( ) ;",
            "score": 99.4483413696289,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = check . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.44396362304687,
            "correctness": "uncompilable",
            "tokenized_patch": "public static synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void isOverride = t.inGlobalScope( ) ;",
            "score": 99.4147087545956,
            "correctness": "uncompilable",
            "tokenized_patch": "static void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) *",
            "score": 99.40826056985294,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( )",
            "score": 99.387353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( t &&",
            "score": 99.38654641544117,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , int getprop )",
            "score": 99.59355236235119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , int get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean isSubtype ) {",
            "score": 99.49960666232639,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && t.inGlobalScope( ) &&",
            "score": 99.44772178248355,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.4437744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = this.inGlobalScope( )",
            "score": 99.40817260742188,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node scope ,",
            "score": 99.40562528722427,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) *",
            "score": 99.38713073730469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = || t.inGlobalScope( ) &&",
            "score": 99.38625201056985,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = || t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.49945389597039,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && inGlobalScope( ) ;",
            "score": 99.44764709472656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.40560752467105,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = false ;",
            "score": 99.38700648716518,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null && inGlobalScope( ) &&",
            "score": 99.38601684570312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , String propertyName , Node parent )",
            "score": 99.59326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , String property CaMeL Name , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String parent , Node getprop , Node parent ) {",
            "score": 99.56329956054688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String parent , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Token getprop , Node parent ) {",
            "score": 99.4982681274414,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | & false &&",
            "score": 99.4475985440341,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility1( NodeTraversal t , Node getprop ,",
            "score": 99.44212582236842,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility 1 ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.inGlobalScope( )",
            "score": 99.40731811523438,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride =( t.inGlobalScope( ) ;",
            "score": 99.38699001736111,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.38578965928819,
            "correctness": "uncompilable",
            "tokenized_patch": "public private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Result getprop , Node parent )",
            "score": 99.56319754464286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Result get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node getprop ,",
            "score": 99.4979312294408,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isGlobal = t.inGlobalScope( ) &&",
            "score": 99.44710083007813,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws",
            "score": 99.44188232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope.isOverride( ) ;",
            "score": 99.4129638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Property checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40226915147569,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope , ) &&",
            "score": 99.38640679253473,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope , ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.getGlobalScope( ) &&",
            "score": 99.38505284926471,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private byte checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.56318591889881,
            "correctness": "uncompilable",
            "tokenized_patch": "private byte check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Type getprop , Node parent )",
            "score": 99.49611206054688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & true ||",
            "score": 99.44536389802632,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & true ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.44093951056985,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ? t",
            "score": 99.40650092230902,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ? t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private > void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40226665296052,
            "correctness": "uncompilable",
            "tokenized_patch": "private > void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = options.inGlobalScope( ) ;",
            "score": 99.38619995117188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = options . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && && *",
            "score": 99.38481588924633,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , final NodeTraversal t )",
            "score": 99.56263950892857,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , Node",
            "score": 99.49545288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , Node",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || false ) &&",
            "score": 99.44515830592105,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object getprop ) {",
            "score": 99.43983218544408,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&3&& & &",
            "score": 99.41259155273437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2&& & &",
            "score": 99.41259155273437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2008&& & &",
            "score": 99.41259155273437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = Override.inGlobalScope( )",
            "score": 99.40614318847656,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = Override . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.4019775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = t.in &&",
            "score": 99.3843994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = t . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token parent , Node parent ) {",
            "score": 99.56259300595238,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isOverride , Node getprop , Node parent )",
            "score": 99.49537963867188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && != true &&",
            "score": 99.44514545641448,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && != true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.43931820518092,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &1| &",
            "score": 99.41248779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & 1 | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final isOverride = t.inGlobalScope( ) && &",
            "score": 99.4060417624081,
            "correctness": "uncompilable",
            "tokenized_patch": "final is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40188759251645,
            "correctness": "uncompilable",
            "tokenized_patch": "private final boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ).inGlobalScope( ) &&",
            "score": 99.38423426011029,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , long getprop , Node parent )",
            "score": 99.59039015997024,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , long get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.49425455729167,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.inGlobalScope(",
            "score": 99.44489135742188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.43901909722223,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ~3&&",
            "score": 99.4123779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~ $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ~2&&",
            "score": 99.4123779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~ $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ~2008&&",
            "score": 99.4123779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~ $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( name )",
            "score": 99.4054314108456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , NodeTraversal t , Node getprop )",
            "score": 99.4018618935033,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( name )",
            "score": 99.38524627685547,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( / ?",
            "score": 99.3837028952206,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Ref getprop , Node parent )",
            "score": 99.56129092261905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Ref get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) { if( getprop",
            "score": 99.49342041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { if ( get@@ prop",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & >1&&",
            "score": 99.4448009672619,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & > 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node getprop , Node parent ) throws",
            "score": 99.43876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || ) &&",
            "score": 99.40464274088542,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ,(",
            "score": 99.40185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( scope ) &&",
            "score": 99.38503011067708,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop , Node getprop )",
            "score": 99.5889404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent )",
            "score": 99.49269321986607,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.44449191623264,
            "correctness": "uncompilable",
            "tokenized_patch": "public final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.43869018554688,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & TRUE &&",
            "score": 99.41147332442434,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & TRUE &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , T getprop ,",
            "score": 99.40183512369792,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( this ) &&",
            "score": 99.3832146139706,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , String property )",
            "score": 99.58793334960937,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , String property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void getprop , Node parent )",
            "score": 99.56113978794643,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.49267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && & &&",
            "score": 99.44435521175987,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.43864171645221,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Scope.) ;",
            "score": 99.41118028428819,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope . ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( true ,",
            "score": 99.40296128216912,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected String checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.40177194695724,
            "correctness": "uncompilable",
            "tokenized_patch": "protected String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = inGlobalScope( ) ;",
            "score": 99.38455636160714,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && ;",
            "score": 99.38302791819854,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal class , Node getprop , Node parent )",
            "score": 99.56100027901786,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal class , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop ,",
            "score": 99.49235026041667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && *& & & && &",
            "score": 99.4442138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * & & & && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.43809407552084,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; Scope ) ;",
            "score": 99.41092079564145,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; Scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && &",
            "score": 99.4027961282169,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.40149603949652,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ) && &",
            "score": 99.38452962239583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? Boolean.",
            "score": 99.38270479090073,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? Boolean .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node [ ] t ) {",
            "score": 99.5878173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node [ ] t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , ObjectType objectType )",
            "score": 99.49091186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object CaMeL Type object CaMeL Type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.43643188476562,
            "correctness": "uncompilable",
            "tokenized_patch": "private final static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Method",
            "score": 99.40216064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Method",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public public void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40147640830592,
            "correctness": "uncompilable",
            "tokenized_patch": "public public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Scope scope ) &&",
            "score": 99.38441975911458,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.38225959329044,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean current , Node getprop , Node parent )",
            "score": 99.56061112253289,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean current , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isOverride ) {",
            "score": 99.4908447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.43475952148438,
            "correctness": "uncompilable",
            "tokenized_patch": "public static static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & |(",
            "score": 99.410595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object getprop ,",
            "score": 99.40094672309027,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && inGlobalScope( ) ;",
            "score": 99.38172912597656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Class getprop , Node parent )",
            "score": 99.56041899181548,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) { if( t",
            "score": 99.4906005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { if ( t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! isOverride = t.inGlobalScope( ) ;",
            "score": 99.44374302455357,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.43428762335526,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false t.inGlobalScope( ) ;",
            "score": 99.41058708639706,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && inGlobalScope( )",
            "score": 99.40189361572266,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.39988080193015,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal filter , Node getprop , Node parent )",
            "score": 99.56022135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal filter , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean isSubtype ) {",
            "score": 99.48980102539062,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Property checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.43397352430556,
            "correctness": "uncompilable",
            "tokenized_patch": "public Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = match.inGlobalScope( )",
            "score": 99.40138244628906,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = match . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context NodeTraversal t , Node getprop ,",
            "score": 99.39986379523026,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( key ) &&",
            "score": 99.38288430606617,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( key ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & true",
            "score": 99.38139073988971,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , while( )",
            "score": 99.56002371651786,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , while ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean isOverride )",
            "score": 99.48949477251838,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; ) &&",
            "score": 99.41004096137152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = check.inGlobalScope( )",
            "score": 99.4012680053711,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = check . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( extends NodeTraversal t , Node getprop ,",
            "score": 99.3996517783717,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( extends Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = in.inGlobalScope( ) &&",
            "score": 99.38273620605469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true && false",
            "score": 99.38125430836396,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true && false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , short getprop , Node parent )",
            "score": 99.55993071056548,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , short get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent , Node parent ) throws",
            "score": 99.48839721679687,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & *& & &",
            "score": 99.44347034801136,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.4318911903783,
            "correctness": "uncompilable",
            "tokenized_patch": "static static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ).isOverride &&",
            "score": 99.4100341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) . is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.39929877387152,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = inGlobalScope( ) &&",
            "score": 99.38272530691964,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & &",
            "score": 99.38057454427083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Type parent , Node parent ) {",
            "score": 99.58486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.55991908482143,
            "correctness": "uncompilable",
            "tokenized_patch": "static Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = node.inGlobalScope( ) ;",
            "score": 99.44290924072266,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = node . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.43173217773438,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.39899088541667,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&3+",
            "score": 99.38189697265625,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ +",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2+",
            "score": 99.38189697265625,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ +",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2008+",
            "score": 99.38189697265625,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ +",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( options ) &&",
            "score": 99.380126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( options ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Node node )",
            "score": 99.58479817708333,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean isConstructor ) {",
            "score": 99.48671468098958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && false ) &&",
            "score": 99.44285753038194,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ; Override =",
            "score": 99.40998278166118,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ||(",
            "score": 99.39996696920956,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && && ;",
            "score": 99.38008386948529,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , int",
            "score": 99.58443777901786,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Token getprop , Node parent )",
            "score": 99.55964006696429,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.48598904079861,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isGlobal = t.inGlobalScope(",
            "score": 99.4428466796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Global = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ~ &",
            "score": 99.40941162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ~ &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? '';",
            "score": 99.39922417534723,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 't find a visibility modifier; assume it';",
            "score": 99.39922417534723,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a';",
            "score": 99.39922417534723,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a = ...';",
            "score": 99.39922417534723,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a.b';",
            "score": 99.39922417534723,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( scope , Node getprop , Node parent )",
            "score": 99.39861382378473,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( scope , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = options.inGlobalScope( ) &&",
            "score": 99.38163757324219,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = options . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ==",
            "score": 99.37912884880515,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node parent , Node parent )",
            "score": 99.4852294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & == ) ;",
            "score": 99.44275483630952,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & == ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).isOverride &&",
            "score": 99.40936279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) . is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) throws",
            "score": 99.39872472426471,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal scope ,",
            "score": 99.39847604851974,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope != null ;",
            "score": 99.38055419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope != null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( this ||",
            "score": 99.37903550091912,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , void parent )",
            "score": 99.55908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.48499298095703,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final NodeTraversal t , final Node getprop ,",
            "score": 99.43109130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; Scope scope )",
            "score": 99.40909616570724,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; Scope scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.39812268708882,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && }",
            "score": 99.38031684027777,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int isOverride = t.inGlobalScope( ) &&",
            "score": 99.37896369485294,
            "correctness": "uncompilable",
            "tokenized_patch": "public int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node [ ] t , Node parent , Node parent )",
            "score": 99.58295288085938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node [ ] t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node node , Node parent )",
            "score": 99.55897739955357,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & != ) &&",
            "score": 99.4416271391369,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & != ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.4310791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ) &&",
            "score": 99.40858861019737,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && ;",
            "score": 99.39829388786765,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void getprop ,",
            "score": 99.39734564887152,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = in.inGlobalScope( ) && &",
            "score": 99.38027774586396,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( this ) ;",
            "score": 99.3782958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , boolean isOverride ) {",
            "score": 99.48434287623355,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ) ;",
            "score": 99.43079833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = true.inGlobalScope( ) ;",
            "score": 99.40831083409927,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope(( )",
            "score": 99.39781278722427,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.getprop , Node getprop )",
            "score": 99.39619954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node name )",
            "score": 99.58217075892857,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Integer getprop , Node parent )",
            "score": 99.55862862723214,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Integer get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String propertyName )",
            "score": 99.48391884251645,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = current.inGlobalScope( ) &&",
            "score": 99.44139862060547,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = current . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? boolean",
            "score": 99.39769789751838,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} private void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.39509020353618,
            "correctness": "uncompilable",
            "tokenized_patch": "} private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && / &&",
            "score": 99.37966579861111,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && / &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int isOverride = t.inGlobalScope( ) &&",
            "score": 99.37657973345588,
            "correctness": "uncompilable",
            "tokenized_patch": "private int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node node ) {",
            "score": 99.58197021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.48306274414062,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.43043919613487,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized boolean isOverride = t.inGlobalScope( ) &&(",
            "score": 99.40817100123355,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( |",
            "score": 99.39732360839844,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal node ,",
            "score": 99.39507092927632,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal node ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , long parent , Node parent )",
            "score": 99.55860595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , long parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.48256548713235,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node module ,",
            "score": 99.42927820542279,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node module ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && &3&&",
            "score": 99.40798950195312,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && &2&&",
            "score": 99.40798950195312,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && &2008&&",
            "score": 99.40798950195312,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ?",
            "score": 99.39695638020834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , NodeTraversal t ,",
            "score": 99.39486490885416,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( ) && &",
            "score": 99.37957085503473,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = null.inGlobalScope( ) ;",
            "score": 99.375,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Object property )",
            "score": 99.58139183407738,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.55810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "void void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , String propertyName )",
            "score": 99.48216488486842,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , String property CaMeL Name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.equals = t.inGlobalScope( ) ;",
            "score": 99.44088745117188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . equals = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop ,",
            "score": 99.4290301983173,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && / *&& &",
            "score": 99.40755004882813,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && / * && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? ) /",
            "score": 99.39693196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.39473470052083,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & ==",
            "score": 99.37465533088235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.58104248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parentCaMeL",
            "score": 99.48207493832237,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ) && & t.inGlobalScope( ) ;",
            "score": 99.44081420898438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) && & t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , NodeTraversal t ) {",
            "score": 99.42900647615132,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = = t.inGlobalScope( ) &&",
            "score": 99.40667046440973,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) & &",
            "score": 99.39680311414931,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token parent ,",
            "score": 99.39470358455883,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false ;",
            "score": 99.37838745117188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & *",
            "score": 99.37396599264706,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object parent , Node parent )",
            "score": 99.58104183799342,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Runnable checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.55777994791667,
            "correctness": "uncompilable",
            "tokenized_patch": "private Runnable check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , boolean isSubtype ) {",
            "score": 99.48182983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & &3;",
            "score": 99.44047619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & &2;",
            "score": 99.44047619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & &2008;",
            "score": 99.44047619047619,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.4288330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = t.isOverride &&",
            "score": 99.4066097861842,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( Scope",
            "score": 99.39639282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private long checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.39388234991776,
            "correctness": "uncompilable",
            "tokenized_patch": "private long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( ) && |",
            "score": 99.37834337022569,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) && |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node index )",
            "score": 99.58088030133929,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node index )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Throwable checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.55768694196429,
            "correctness": "uncompilable",
            "tokenized_patch": "private Throwable check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.48175407858456,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=3&&",
            "score": 99.44027709960938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=2&&",
            "score": 99.44027709960938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=2008&&",
            "score": 99.44027709960938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , String propertyName ,",
            "score": 99.42856174045139,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.t.inGlobalScope( ) ;",
            "score": 99.40656195746527,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Class",
            "score": 99.395751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Class",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.39129959909539,
            "correctness": "uncompilable",
            "tokenized_patch": "private void void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( locale ) ;",
            "score": 99.37823127297794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( locale ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = false && t.inGlobalScope( ) &&",
            "score": 99.37352797564338,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node id )",
            "score": 99.58075241815476,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node id )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.48142603824013,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t.inGlobalScope( ) && &",
            "score": 99.44001207853618,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.42767333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & L ) &&",
            "score": 99.40598754882812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & L ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) :",
            "score": 99.39556525735294,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean isSubtype )",
            "score": 99.39113898026316,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Subtype )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = true && inGlobalScope( ) &&",
            "score": 99.37305405560662,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , static getprop , Node parent )",
            "score": 99.55729166666667,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , static get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t , NodeCaMeL",
            "score": 99.4810791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t , Node CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isGlobal = t.inGlobalScope( ) &&",
            "score": 99.43996360085227,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.42722039473684,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & &1&&",
            "score": 99.40596923828124,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? false ,",
            "score": 99.3939208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? false ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t1.inGlobalScope( ) && &",
            "score": 99.37720404730902,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t 1 . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false || false",
            "score": 99.3722282858456,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false || false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) { if(",
            "score": 99.58068266369048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void parent , Node getprop )",
            "score": 99.55711728050595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName , Node parent ) {",
            "score": 99.48042805989583,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public protected boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.43996175130208,
            "correctness": "uncompilable",
            "tokenized_patch": "public protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( key ) ;",
            "score": 99.40563246783088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( key ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.getGlobalScope( )",
            "score": 99.39386749267578,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( '', Node getprop , Node parent )",
            "score": 99.39010959201389,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 't find a visibility modifier; assume it', Node getprop , Node parent )",
            "score": 99.39010959201389,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a', Node getprop , Node parent )",
            "score": 99.39010959201389,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a = ...', Node getprop , Node parent )",
            "score": 99.39010959201389,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a.b', Node getprop , Node parent )",
            "score": 99.39010959201389,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( && *",
            "score": 99.37212057674633,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , final Node parent )",
            "score": 99.58024088541667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , final Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal source , Node getprop , Node parent )",
            "score": 99.55702427455357,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal source , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent , Node getprop ,",
            "score": 99.47926025390625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >=1;",
            "score": 99.43995361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & >= 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , final",
            "score": 99.42631530761719,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true || t.inGlobalScope( )",
            "score": 99.39382595486111,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true || t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = t.in.in &&",
            "score": 99.37059783935547,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = t . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ,",
            "score": 99.57993861607143,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , for getprop , Node parent )",
            "score": 99.55693126860119,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , for get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=3;",
            "score": 99.43988037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=2;",
            "score": 99.43988037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=2008;",
            "score": 99.43988037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & & ==0;",
            "score": 99.4052963256836,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & & == 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node isOverride = t.inGlobalScope( ) && &",
            "score": 99.39364803538604,
            "correctness": "uncompilable",
            "tokenized_patch": "Node is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( , NodeTraversal t , Node getprop ,",
            "score": 99.38983475534539,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) {",
            "score": 99.37622788373162,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) ||",
            "score": 99.37042595358456,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop , Node getprop ,",
            "score": 99.57960146949405,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , parent ) {",
            "score": 99.55678013392857,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & <<3;",
            "score": 99.43955775669643,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & << $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & <<2;",
            "score": 99.43955775669643,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & << $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & <<2008;",
            "score": 99.43955775669643,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & << $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.425439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & null && &",
            "score": 99.40521240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & null && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? ''/",
            "score": 99.39338514539931,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 't find a visibility modifier; assume it'/",
            "score": 99.39338514539931,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a'/",
            "score": 99.39338514539931,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a = ...'/",
            "score": 99.39338514539931,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a.b'/",
            "score": 99.39338514539931,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( getprop , Node getprop , Node parent )",
            "score": 99.38905093544408,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ,",
            "score": 99.3761848000919,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) && *",
            "score": 99.36972225413604,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node name , Node parent )",
            "score": 99.55661010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) { if( parent",
            "score": 99.47738647460938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { if ( parent",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >=1&& & &",
            "score": 99.43944202769886,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & >= 1 && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.42524719238281,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & t.inGlobalScope( ) &&",
            "score": 99.40413625616776,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope = ) && &",
            "score": 99.39268663194444,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.38887746710526,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( false ) ;",
            "score": 99.3687385110294,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.5788818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , names parent )",
            "score": 99.55658249627976,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , names parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , int parent )",
            "score": 99.4766845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & ;",
            "score": 99.43922825863487,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) throws",
            "score": 99.42495727539062,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = type.inGlobalScope( ) && &",
            "score": 99.39265272352431,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object parent )",
            "score": 99.38880830652573,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Module",
            "score": 99.36707356770833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Module",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node id , Node getprop , Node parent )",
            "score": 99.57869037828948,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node id , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Double checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.55653599330357,
            "correctness": "uncompilable",
            "tokenized_patch": "private Double check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ) ,",
            "score": 99.47660747327302,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ) ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & ) ;",
            "score": 99.43907470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&( & |",
            "score": 99.40342953330592,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ( & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( /",
            "score": 99.39229583740234,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node getprop )",
            "score": 99.38874368106617,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = filter.inGlobalScope( ) && &",
            "score": 99.37596220128677,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = filter . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope(",
            "score": 99.3663799579327,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int type )",
            "score": 99.57868303571429,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal scope , Node getprop , Node parent )",
            "score": 99.55626860119048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal scope , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , int",
            "score": 99.475830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( , ) ;",
            "score": 99.43885713465073,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( , ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Scope ) ;",
            "score": 99.4034064797794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Context",
            "score": 99.3921890258789,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( scope ) &&",
            "score": 99.37588840060764,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? t &&",
            "score": 99.36598833869485,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Object getprop )",
            "score": 99.57850864955357,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , Node parent , Node parentCaMeL",
            "score": 99.47545776367187,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent , Node parent CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & != false &&",
            "score": 99.43875122070312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.getGlobalScope( ) && &",
            "score": 99.39215087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility0( NodeTraversal t , Node getprop ,",
            "score": 99.38836991159539,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility 0 ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).t &",
            "score": 99.37559678819444,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) . t &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) && *",
            "score": 99.36592102050781,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node type , Node parent , Node parent ) {",
            "score": 99.57827919407895,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node type , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , String parent )",
            "score": 99.5556873139881,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , String parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = current.inGlobalScope( ) ;",
            "score": 99.43840789794922,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = current . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , final Node getprop ,",
            "score": 99.42174008018092,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Scope scope ) ;",
            "score": 99.40299907483552,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( global",
            "score": 99.39186096191406,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( global",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected String checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.38808722245066,
            "correctness": "uncompilable",
            "tokenized_patch": "protected String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( '') == -1;",
            "score": 99.37521701388889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 't find a visibility modifier; assume it') == -1;",
            "score": 99.37521701388889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a') == -1;",
            "score": 99.37521701388889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a = ...') == -1;",
            "score": 99.37521701388889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a.b') == -1;",
            "score": 99.37521701388889,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) == - 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = super.isOverride = t.inGlobalScope( ) &&",
            "score": 99.43766645951705,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = super . is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.42166748046876,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & NULL &&",
            "score": 99.40278705797698,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & NULL &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Factory checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.38808186848958,
            "correctness": "uncompilable",
            "tokenized_patch": "private Factory check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( scope ) ;",
            "score": 99.37497287326389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) !=",
            "score": 99.36576080322266,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node scope , Node getprop , Node parent )",
            "score": 99.57698139391448,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node scope , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal input , Node getprop , Node parent )",
            "score": 99.5556873139881,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal input , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.47495404411765,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.t.inGlobalScope( ) ;",
            "score": 99.40260823567708,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( false ) &&",
            "score": 99.39168972439236,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void parent ,",
            "score": 99.38800407858456,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&3==",
            "score": 99.37479654947917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2==",
            "score": 99.37479654947917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2008==",
            "score": 99.37479654947917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = null.inGlobalScope( ) &&",
            "score": 99.36545697380515,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , name parent )",
            "score": 99.55552455357143,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , name parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object parent )",
            "score": 99.47412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ).inGlobalScope(",
            "score": 99.43708939985795,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = = t.inGlobalScope( ) &&(",
            "score": 99.40232340494792,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && inGlobalScope( )",
            "score": 99.39158630371094,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , , Node getprop ,",
            "score": 99.387939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope & & &",
            "score": 99.37477111816406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this && *",
            "score": 99.36488970588235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , final Node parent ) {",
            "score": 99.47359212239583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.42039184570312,
            "correctness": "uncompilable",
            "tokenized_patch": "private static final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null && & & & & |",
            "score": 99.40223693847656,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null && & & & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object isOverride = t.inGlobalScope( ) && & &",
            "score": 99.39059787326389,
            "correctness": "uncompilable",
            "tokenized_patch": "Object is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object check , NodeTraversal t ,",
            "score": 99.38747271369485,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object check , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).equals(",
            "score": 99.37439643012152,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) . equals (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( this ) ;",
            "score": 99.36439424402573,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.47332442434211,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.42038981119792,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & L ;",
            "score": 99.40181049547698,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & L ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) ?",
            "score": 99.39040958180146,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , NodeTraversal t ,",
            "score": 99.38718548943015,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) ? &",
            "score": 99.37427435980902,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && t.",
            "score": 99.36358283547794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && t .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.57588500976563,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Style getprop , Node parent )",
            "score": 99.55526878720238,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Style get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Context getprop , Node parent )",
            "score": 99.4728271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Context get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.t.inGlobalScope( ) &&",
            "score": 99.43634354440789,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.42008463541667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Global",
            "score": 99.38994598388672,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Global",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( module ) ;",
            "score": 99.37416704963235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( module ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Context parent )",
            "score": 99.55421084449405,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Context parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Context parent )",
            "score": 99.47247314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Context parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & != ) &&",
            "score": 99.43627319335937,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected final void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.41998291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = this.inGlobalScope( ) && &",
            "score": 99.38991292317708,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( , NodeTraversal t , Node getprop ,",
            "score": 99.38689221833882,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) !=",
            "score": 99.36295812270221,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node source , Node parent , Node parent ) {",
            "score": 99.57573499177632,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node source , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.55408935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node instanceof NodeTraversal t , Node getprop ,",
            "score": 99.41972045898437,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node instanceof Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && &",
            "score": 99.38989975873162,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.38650851779514,
            "correctness": "uncompilable",
            "tokenized_patch": "private Boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( )( ) ;",
            "score": 99.37400987413194,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & *",
            "score": 99.362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.471923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String isOverride = t.inGlobalScope( ) ;",
            "score": 99.40055847167969,
            "correctness": "uncompilable",
            "tokenized_patch": "String is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , String propertyName ,",
            "score": 99.386474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( ) || &",
            "score": 99.37346055772569,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && t.inGlobalScope( &&",
            "score": 99.36158662683823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t , boolean isOverride )",
            "score": 99.4703857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && true ) ;",
            "score": 99.43580457899306,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && true ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node index ) {",
            "score": 99.41919623480902,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node index ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? true *",
            "score": 99.38980441623264,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.38644205729166,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( name ) && &",
            "score": 99.37344021267361,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = && t.inGlobalScope( ) &&",
            "score": 99.36139993106617,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type getprop , Node parent ,",
            "score": 99.57491629464286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal main , Node getprop , Node parent )",
            "score": 99.55272274925595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal main , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , void",
            "score": 99.47031860351562,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , void",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal [ ] t , Node getprop ,",
            "score": 99.41874389648437,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal [ ] t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ! inGlobalScope( ) ;",
            "score": 99.40003204345703,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ! in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected final void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.38619834498355,
            "correctness": "uncompilable",
            "tokenized_patch": "protected final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( '') ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 't find a visibility modifier; assume it') ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a') ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a = ...') ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a.b') ;",
            "score": 99.37333170572917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , XML parent )",
            "score": 99.55261811755952,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , XML parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , void parent ) {",
            "score": 99.46979836856617,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & != null &&",
            "score": 99.43539428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void getprop ) {",
            "score": 99.4184634560033,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.39951685855263,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ?(",
            "score": 99.3895263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ? (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , final Node parent ,",
            "score": 99.38616265190973,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && & !=",
            "score": 99.36040900735294,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && & !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.57459077380952,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.46970728824013,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | & | &&",
            "score": 99.43536931818181,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | & | &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride = t.inGlobalScope ;",
            "score": 99.39921489514802,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = parent.inGlobalScope( ) && &",
            "score": 99.38951918658088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.38554831112133,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( / && *",
            "score": 99.35954733455883,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node name , Node getprop , Node parent )",
            "score": 99.57425087376645,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node name , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName ) {",
            "score": 99.46944986979166,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = node.inGlobalScope( ) &&",
            "score": 99.43522644042969,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = node . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.41750759548611,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? false /",
            "score": 99.38950602213542,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? false /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context null , NodeTraversal t ,",
            "score": 99.38505284926471,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context null , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || && *",
            "score": 99.35948270909927,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node n , Node getprop , Node parent )",
            "score": 99.57420590049342,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node n , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && t.inGlobalScope( ) && &",
            "score": 99.43497507195724,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , NodeTraversal t ) {",
            "score": 99.41717850534539,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( false &&",
            "score": 99.38918887867646,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object parent ,",
            "score": 99.38457892922794,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Scope scope )",
            "score": 99.37274528952206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = code.inGlobalScope( ) &&",
            "score": 99.35935974121094,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = code . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal resolve , Node getprop , Node parent )",
            "score": 99.55209495907738,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal resolve , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) ;",
            "score": 99.46826934814453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) /",
            "score": 99.38910271139706,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , final Node parent )",
            "score": 99.38439263237848,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( this &&",
            "score": 99.35893698299633,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent )",
            "score": 99.5517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parentCaMeL",
            "score": 99.41698608398437,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && t && &",
            "score": 99.39769222861842,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = current.inGlobalScope( )",
            "score": 99.38893127441406,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = current . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.38430786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Context ) &&",
            "score": 99.37176872702206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Token",
            "score": 99.3586669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Token",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal NAME , Node getprop , Node parent )",
            "score": 99.55143229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal NAME , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , boolean isConstructor )",
            "score": 99.46711811266448,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Constructor )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && false &&",
            "score": 99.43485942639802,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws",
            "score": 99.41688939144737,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&3;",
            "score": 99.39739990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2;",
            "score": 99.39739990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&2008;",
            "score": 99.39739990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ''/",
            "score": 99.38869900173611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? 't find a visibility modifier; assume it'/",
            "score": 99.38869900173611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? 'a'/",
            "score": 99.38869900173611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? 'a = ...'/",
            "score": 99.38869900173611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? 'a.b'/",
            "score": 99.38869900173611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String property ,",
            "score": 99.3835090188419,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( / ?",
            "score": 99.35753631591797,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node scope , Node parent )",
            "score": 99.57320556640624,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node scope , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , Object",
            "score": 99.46693115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , Object",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ) { {",
            "score": 99.41674194335937,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & ~ |",
            "score": 99.39719109786184,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ~ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? false :",
            "score": 99.38866509331598,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? false :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , T parent )",
            "score": 99.38261144301471,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List isOverride = t.inGlobalScope( ) ;",
            "score": 99.37108612060547,
            "correctness": "uncompilable",
            "tokenized_patch": "List is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null ,",
            "score": 99.35722351074219,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node t , Node parent , Node parent ) {",
            "score": 99.57315224095395,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope( this ) ;",
            "score": 99.43449321546052,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) throws",
            "score": 99.4157779091283,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void isOverride = t.inGlobalScope( ) ;",
            "score": 99.39659288194444,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? '',",
            "score": 99.38861762152777,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 't find a visibility modifier; assume it',",
            "score": 99.38861762152777,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a',",
            "score": 99.38861762152777,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a = ...',",
            "score": 99.38861762152777,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? 'a.b',",
            "score": 99.38861762152777,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node getprop ,",
            "score": 99.38233139935662,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( scope ) {",
            "score": 99.37105984157986,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && !=",
            "score": 99.35605755974265,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node next )",
            "score": 99.57276553199405,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node next )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Package getprop , Node parent )",
            "score": 99.55060686383929,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Package get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & >>1;",
            "score": 99.43410034179688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & >> 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws Exception {",
            "score": 99.41558837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws Exception {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( final",
            "score": 99.38823699951172,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean t , NodeTraversal t ,",
            "score": 99.38218060661765,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.getGlobalScope( ) ;",
            "score": 99.37059020996094,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( this &&",
            "score": 99.35530090332031,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Type getprop , Node parent )",
            "score": 99.57217261904762,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) ;",
            "score": 99.46554744944854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String objectType ) {",
            "score": 99.41514282226562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & |(",
            "score": 99.39576480263158,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & | (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) && t",
            "score": 99.38808865017361,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.3818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.getGlobalScope( ) &&",
            "score": 99.35446166992188,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Context checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.55045572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "private Context check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , boolean",
            "score": 99.46553344726563,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && & & | | &",
            "score": 99.4337491122159,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.41513543379934,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ) &&",
            "score": 99.38717990451389,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( node , NodeTraversal t ,",
            "score": 99.37984466552734,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( node , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope & & & &",
            "score": 99.36873133042279,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope(",
            "score": 99.35367838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node node )",
            "score": 99.5718017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.55039672851562,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( JSDocInfo docInfo , Node parent )",
            "score": 99.46525268554687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( JS CaMeL Doc CaMeL Info doc CaMeL Info , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( boolean isOverride ) ;",
            "score": 99.43351440429687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean is CaMeL Override ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || ) &&",
            "score": 99.38717312282986,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.37918429904514,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Context getprop , Node parent )",
            "score": 99.55021158854167,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Context get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , boolean } )",
            "score": 99.46499633789062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean } )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t.inGlobalScope( ) && & &",
            "score": 99.43284912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized static void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.41483154296876,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ,",
            "score": 99.38713836669922,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ).&",
            "score": 99.36792710248162,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) . &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void isOverride = t.inGlobalScope( ) &&",
            "score": 99.35335047104779,
            "correctness": "uncompilable",
            "tokenized_patch": "static void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , int parent )",
            "score": 99.57158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , int parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public float checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.54988606770833,
            "correctness": "uncompilable",
            "tokenized_patch": "public float check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean checkPropertyVisibility , Node parent ) {",
            "score": 99.46477661132812,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( type ) ;",
            "score": 99.43279351128473,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , boolean isOverride ) {",
            "score": 99.4146728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false )",
            "score": 99.386962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , NodeTraversal t , Node parent ,",
            "score": 99.37824842664931,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope ;",
            "score": 99.36787632533482,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "float isOverride = t.inGlobalScope( ) &&",
            "score": 99.35321807861328,
            "correctness": "uncompilable",
            "tokenized_patch": "float is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Object getprop ,",
            "score": 99.57140531994048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.46455891927083,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =0.0&& t.inGlobalScope( ) ;",
            "score": 99.4326416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = 0 . 0 && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop getprop ,",
            "score": 99.41464233398438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! inGlobalScope( ) ;",
            "score": 99.39417317708333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? boolean",
            "score": 99.3867546530331,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node name ,",
            "score": 99.37805893841912,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( '')",
            "score": 99.36744689941406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it')",
            "score": 99.36744689941406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a')",
            "score": 99.36744689941406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...')",
            "score": 99.36744689941406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b')",
            "score": 99.36744689941406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || && ;",
            "score": 99.35317095588235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean getprop , Node parent ) {",
            "score": 99.46417999267578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null.inGlobalScope( ) ;",
            "score": 99.43223571777344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.4146240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void isOverride = t.inGlobalScope( ) ;",
            "score": 99.39410041360294,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.38665093315973,
            "correctness": "uncompilable",
            "tokenized_patch": "t boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Class getprop )",
            "score": 99.37763807508681,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ? & & &",
            "score": 99.36701516544117,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ? & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( && *",
            "score": 99.3530502319336,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node getprop , boolean parent )",
            "score": 99.54964192708333,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) throws Exception",
            "score": 99.41461791992188,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) throws Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & null ==",
            "score": 99.39383737664474,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & null ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , Node getprop , Node parent )",
            "score": 99.37598374310662,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) : &",
            "score": 99.36687155330883,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) : &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true && inGlobalScope( ) ;",
            "score": 99.35296271829044,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node column , Node parent )",
            "score": 99.54951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node column , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) { Node getprop =",
            "score": 99.46316528320312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { Node get@@ prop =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & != true ;",
            "score": 99.4321044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & != true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) throws",
            "score": 99.41419067382813,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; Scope )",
            "score": 99.39364284939236,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; Scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.t.inGlobalScope( )",
            "score": 99.38648817274306,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( null , Node getprop , Node parent ,",
            "score": 99.37478298611111,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( null , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = t.in && & &",
            "score": 99.3519515991211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = t . in && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal parent , Node getprop , Node parent )",
            "score": 99.54926990327381,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Token getprop , Node parent , Node parent )",
            "score": 99.46156141493056,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & & | ||",
            "score": 99.43191964285714,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & & | ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Property getprop ,",
            "score": 99.41370985243056,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Property get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t1.inGlobalScope( ) ;",
            "score": 99.39334445529514,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t 1 . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t isOverride = t.inGlobalScope( ) && &",
            "score": 99.38623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "t is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = System.inGlobalScope( ) &&",
            "score": 99.36655560661765,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true &&",
            "score": 99.3514175415039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int current )",
            "score": 99.57007998511905,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int current )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , resolve getprop , Node parent )",
            "score": 99.54920014880952,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , resolve get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node parent )",
            "score": 99.46017456054688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = scope.inGlobalScope( ) ;",
            "score": 99.43169088924633,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean dereference ) {",
            "score": 99.41346571180556,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean dereference ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &1|",
            "score": 99.39262309827302,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & 1 |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Variable",
            "score": 99.38595581054688,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Variable",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , SimpleCaMeL",
            "score": 99.37317657470703,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Simple CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || & false",
            "score": 99.35102395450367,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || & false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent ?",
            "score": 99.56998697916667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node State parent , Node parent )",
            "score": 99.54890950520833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node State parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean isConstructor )",
            "score": 99.46010228207237,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Constructor )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & Boolean.TRUE &&",
            "score": 99.43133835565476,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & Boolean . TRUE &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.41277465820312,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = & t.inGlobalScope( ) ;",
            "score": 99.39258530560662,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.37214211856617,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( parent ) &&",
            "score": 99.36608168658088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( parent ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & ?",
            "score": 99.35043334960938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , long parent )",
            "score": 99.54883975074405,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , long parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.46002197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = true.inGlobalScope(",
            "score": 99.43116455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = true . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.41239624023437,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? true",
            "score": 99.38557703354779,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( )",
            "score": 99.37202758789063,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = inGlobalScope( ) && &",
            "score": 99.36595052083334,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & & & *& & &",
            "score": 99.35043334960938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & & & * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , int getprop ,",
            "score": 99.56956845238095,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , int get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Object parent , Node parent )",
            "score": 99.54801432291667,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal n , Node getprop , Node parent )",
            "score": 99.45978393554688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal n , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & == true &&",
            "score": 99.43115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) { ;",
            "score": 99.41224365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t ==.inGlobalScope( ) ;",
            "score": 99.39177389705883,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) :",
            "score": 99.38526108685662,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , final Node getprop ,",
            "score": 99.37165662977431,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = isOverride && &",
            "score": 99.36566521139706,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = is CaMeL Override && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && t.inGlobalScope( ||",
            "score": 99.34971708409927,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent ,",
            "score": 99.56898716517857,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node namespace , Node parent )",
            "score": 99.54774169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node namespace , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean isSubtype )",
            "score": 99.45930750229779,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Subtype )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && t.inGlobalScope( ) &&",
            "score": 99.4306884765625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.412158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( this )",
            "score": 99.38518210018383,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , if(",
            "score": 99.37055969238281,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , Symbol parent )",
            "score": 99.54752604166667,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Symbol parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && t.inGlobalScope( ) && & &",
            "score": 99.42992553710937,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ?",
            "score": 99.38482666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal1",
            "score": 99.37025282118056,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal 1",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.getGlobalScope( ) &&",
            "score": 99.36533490349265,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Token",
            "score": 99.34903717041016,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Token",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , class getprop , Node parent )",
            "score": 99.54752604166667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , class get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.45881483289931,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & | t.inGlobalScope( ) ;",
            "score": 99.42991943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & | t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , NodeTraversal t ) {",
            "score": 99.41163940429688,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( true &&",
            "score": 99.3846435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.36986432756696,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) && |",
            "score": 99.36418600643383,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = ).inGlobalScope( ) &&",
            "score": 99.34894157858456,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop , Node parent ,",
            "score": 99.5684878700658,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Token getprop , Node parent )",
            "score": 99.54736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , E parent )",
            "score": 99.45862426757813,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , E parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && *& | &",
            "score": 99.42940848214286,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * & | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ) { private",
            "score": 99.41143798828125,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { private",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & else",
            "score": 99.38357204861111,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & else",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Object parent ,",
            "score": 99.36965762867646,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) )",
            "score": 99.36354693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = ) && inGlobalScope( ) &&",
            "score": 99.3487189797794,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = ) && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean isOverride , Node getprop , Node parent )",
            "score": 99.56806873139881,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal null , Node getprop , Node parent )",
            "score": 99.54706101190476,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal null , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , Type",
            "score": 99.45784912109374,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , Type",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & && ) &&",
            "score": 99.42938232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & && ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node <",
            "score": 99.41107788085938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node <",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? false ;",
            "score": 99.38339572482639,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , NodeTraversal t , Node parent )",
            "score": 99.36814371744792,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( options ) ;",
            "score": 99.34862563189338,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( options ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.54704204358552,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , void parent )",
            "score": 99.45751274956598,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? true *",
            "score": 99.38326687282986,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( null , NodeTraversal t ,",
            "score": 99.36766815185547,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( null , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( value ) &&",
            "score": 99.3625129250919,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( value ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void isOverride = t.inGlobalScope( ) &&",
            "score": 99.34797219669117,
            "correctness": "uncompilable",
            "tokenized_patch": "final void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal in , Node getprop , Node parent )",
            "score": 99.54702613467262,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal in , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent , void",
            "score": 99.45697342722039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , void",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void parent ) {",
            "score": 99.41102510340073,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Class getprop ,",
            "score": 99.36737738715277,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.t.inGlobalScope ;",
            "score": 99.36248779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , NodeTraversal t , Node parent )",
            "score": 99.56744094122024,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop )",
            "score": 99.45655314127605,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & && !=0&&",
            "score": 99.42799014136905,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & && != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , final Node getprop ,",
            "score": 99.41065673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) /3;",
            "score": 99.38770887586806,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) / $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) /2;",
            "score": 99.38770887586806,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) / $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) /2008;",
            "score": 99.38770887586806,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) / $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Vector isOverride = t.inGlobalScope( ) && &",
            "score": 99.38215906479779,
            "correctness": "uncompilable",
            "tokenized_patch": "Vector is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.36719428168402,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & & & & &",
            "score": 99.36200714111328,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( null &&",
            "score": 99.34658633961396,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node parent , int",
            "score": 99.56737118675595,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Symbol parent , Node parent )",
            "score": 99.54584350585938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Symbol parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) { if( parent",
            "score": 99.45614463404605,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { if ( parent",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && != true ;",
            "score": 99.42732543945313,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && != true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token getprop )",
            "score": 99.36686876085069,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ).inGlobalScope( ) ;",
            "score": 99.36144301470588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && inGlobalScope( ) ;",
            "score": 99.3465347290039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Type getprop , Node parent )",
            "score": 99.56736450195312,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node function , Node parent )",
            "score": 99.5439208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node function , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) { try {",
            "score": 99.45474403782895,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { try {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ) {",
            "score": 99.42696126302083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private instanceof void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.41031044407895,
            "correctness": "uncompilable",
            "tokenized_patch": "private instanceof void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) && t",
            "score": 99.38182915581598,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.36647251674107,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( / *",
            "score": 99.34645080566406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop , Node parent ,",
            "score": 99.56729736328126,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) { if( object",
            "score": 99.45440063476562,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { if ( object",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) throws",
            "score": 99.41014188878677,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) {",
            "score": 99.38175695082721,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || *?",
            "score": 99.34600471047794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int n )",
            "score": 99.56683640252976,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int n )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , final Node getprop )",
            "score": 99.54360961914062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , boolean isOverride ) {",
            "score": 99.45379317434211,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent +",
            "score": 99.40975341796874,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , private ,",
            "score": 99.36585190716912,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this ) {",
            "score": 99.36091164981617,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( false ) &&",
            "score": 99.34597598805146,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.56675318667763,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.54229125976562,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && / /",
            "score": 99.38576931423611,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && / /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , static getprop )",
            "score": 99.36582438151042,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , static get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isOverride( ) ;",
            "score": 99.36053059895833,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.34591854319854,
            "correctness": "uncompilable",
            "tokenized_patch": "/ boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , int getprop , Node parent )",
            "score": 99.56660388764881,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node name , Node parent )",
            "score": 99.54131469726562,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int currentClass , Node getprop , Node parent )",
            "score": 99.45352783203126,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int current CaMeL Class , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String objectType ,",
            "score": 99.4086978310033,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) int",
            "score": 99.38068704044117,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.36573893229166,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Node source )",
            "score": 99.56652250744048,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node source )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void check( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.54069249770221,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean checkPropertyVisibility ) {",
            "score": 99.45324096679687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean check CaMeL Property CaMeL Visibility ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Object parent ) {",
            "score": 99.40863358347039,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & t !=0&& &",
            "score": 99.38365936279297,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & t != 0 && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = Scope.inGlobalScope( ) && &",
            "score": 99.38025580512152,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.36539035373264,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) && & &",
            "score": 99.34548950195312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Node getprop )",
            "score": 99.56626674107143,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) ;",
            "score": 99.54061889648438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.45320852179276,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && & ||",
            "score": 99.42515162417763,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.40861241957721,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.37981818704044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.37981818704044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.37981818704044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.37981818704044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.37981818704044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) +",
            "score": 99.36008588005515,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( / :",
            "score": 99.34542083740234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int current , Node getprop , Node parent )",
            "score": 99.54033460115132,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int current , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean isOverride ) {",
            "score": 99.45318196614583,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & & | ||",
            "score": 99.42511596679688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & & | ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40855006167763,
            "correctness": "uncompilable",
            "tokenized_patch": "static synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && is",
            "score": 99.37965223524306,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && is",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.36473891314338,
            "correctness": "uncompilable",
            "tokenized_patch": "Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isOverride = ).inGlobalScope( ) &&",
            "score": 99.34512329101562,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node type , Node parent )",
            "score": 99.56578369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context NodeTraversal t , NodeTraversal t )",
            "score": 99.53626708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , final Node parent ) {",
            "score": 99.45296902126736,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.4084716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( )",
            "score": 99.38249969482422,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.t , Node getprop ,",
            "score": 99.3637336282169,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && if",
            "score": 99.34446806066177,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && if",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) { if(",
            "score": 99.56452379728618,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node list , Node parent )",
            "score": 99.53557739257812,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node list , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , short getprop ) {",
            "score": 99.40794613486842,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , short get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( name )",
            "score": 99.37891343060662,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.36359320746527,
            "correctness": "uncompilable",
            "tokenized_patch": "null void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope ) ;",
            "score": 99.3592758178711,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true || false",
            "score": 99.3442023782169,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true || false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static void checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.564208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isConstructor ) {",
            "score": 99.45176478794643,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & || ) &&",
            "score": 99.42432250976563,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & || ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void getprop ) {",
            "score": 99.4074642783717,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && t",
            "score": 99.3787841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private float checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.36343044704861,
            "correctness": "uncompilable",
            "tokenized_patch": "private float check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) |",
            "score": 99.35813275505515,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , String property ,",
            "score": 99.56368582589286,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , String property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , ) {",
            "score": 99.4070556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( scope",
            "score": 99.37877655029297,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.36223687065973,
            "correctness": "uncompilable",
            "tokenized_patch": "private check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ) ;",
            "score": 99.35801478794643,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & &",
            "score": 99.34415893554687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node parent , Node parent )",
            "score": 99.56224300986842,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private / *NodeTraversal( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.53310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private / * Node CaMeL Traversal ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parentCaMeL",
            "score": 99.45140923394098,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private.void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.4066162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "private . void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = = t.inGlobalScope( ) ;",
            "score": 99.38111707899306,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( true ,",
            "score": 99.37876263786765,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , protected ,",
            "score": 99.3619743795956,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , protected ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & & & & |",
            "score": 99.35773468017578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & & & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( / ?",
            "score": 99.34405924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node node )",
            "score": 99.56142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.406298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static synchronized boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.38077799479167,
            "correctness": "uncompilable",
            "tokenized_patch": "static synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Set isOverride = t.inGlobalScope( ) && &",
            "score": 99.37871955422794,
            "correctness": "uncompilable",
            "tokenized_patch": "Set is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , null ,",
            "score": 99.36165125229779,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , null ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String getprop , Node getprop , Node parent )",
            "score": 99.56090698242187,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop.getFirstChild( ) )",
            "score": 99.45078735351562,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop . get CaMeL First CaMeL Child ( ) )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = scope.inGlobalScope( ) &&",
            "score": 99.42407944623162,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String objectType ) {",
            "score": 99.40616455078126,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ; )",
            "score": 99.38065592447917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ; )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.36089215959821,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , int parent )",
            "score": 99.56038818359374,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , int parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String property , Node getprop , Node parent )",
            "score": 99.5308773643092,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , NodeTraversal t ) {",
            "score": 99.45073499177632,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & return",
            "score": 99.42365858289931,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & return",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40574951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private static abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? false /",
            "score": 99.37830946180556,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? false /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isGlobal = true ;",
            "score": 99.35667201450893,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Global = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override isOverride = t.inGlobalScope( ) &&",
            "score": 99.34375,
            "correctness": "uncompilable",
            "tokenized_patch": "CaMeL Override is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean isSubtype )",
            "score": 99.45069644325658,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Subtype )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = check.inGlobalScope( ) &&",
            "score": 99.42146301269531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = check . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws",
            "score": 99.40513780381944,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return isOverride = t.inGlobalScope( ) && &",
            "score": 99.37819536994485,
            "correctness": "uncompilable",
            "tokenized_patch": "return is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( void check , NodeTraversal t ,",
            "score": 99.36050235523896,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( void check , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ) &&",
            "score": 99.35597446986607,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && ) &&",
            "score": 99.34331916360294,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ] checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.55892944335938,
            "correctness": "uncompilable",
            "tokenized_patch": "private ] check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent , String",
            "score": 99.4502017372533,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , String",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop ) { }",
            "score": 99.40468139648438,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = false.inGlobalScope( ) ;",
            "score": 99.37994743795956,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.in inGlobalScope( )",
            "score": 99.37805893841912,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node node ,",
            "score": 99.36034438189338,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( scope )",
            "score": 99.355224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( / ||",
            "score": 99.3432846069336,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int t , Node getprop , Node parent )",
            "score": 99.52957313939145,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent , String",
            "score": 99.44952392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent , String",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) &&",
            "score": 99.42045375279018,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40455322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( Context ) ;",
            "score": 99.37881130642361,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) || &",
            "score": 99.37795681423611,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final NodeTraversal t ,",
            "score": 99.3602783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Token & Token",
            "score": 99.3550163717831,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Token & Token",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Token getprop , Node getprop , Node parent )",
            "score": 99.55819091796874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) != null && & &",
            "score": 99.4204345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) != null && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = t.isOverride &&",
            "score": 99.37870279947917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = t . is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "VM boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.37742784288194,
            "correctness": "uncompilable",
            "tokenized_patch": "VM boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private T checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.35939534505208,
            "correctness": "uncompilable",
            "tokenized_patch": "private T check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.t.inGlobalScope( )",
            "score": 99.35358025045956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( *?",
            "score": 99.3428955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node id , Node parent )",
            "score": 99.5579833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( boolean isOverride )",
            "score": 99.42037353515624,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop ) { if(",
            "score": 99.40430908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) { if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , String property ,",
            "score": 99.35850614659927,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ''&&",
            "score": 99.34279497931985,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it'&&",
            "score": 99.34279497931985,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a'&&",
            "score": 99.34279497931985,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a = ...'&&",
            "score": 99.34279497931985,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( 'a.b'&&",
            "score": 99.34279497931985,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node id , Node parent , Node parent ) {",
            "score": 99.55770070929276,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node id , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String parent , Node parent )",
            "score": 99.52781982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.44934760199652,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && ) ;",
            "score": 99.37693277994792,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.35762532552083,
            "correctness": "uncompilable",
            "tokenized_patch": "private check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( parent ) ;",
            "score": 99.35295553768383,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) !=",
            "score": 99.34263700597427,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , NodeTraversal t , Node parent )",
            "score": 99.55762939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , void parent , Node parent )",
            "score": 99.52743530273438,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.44922553168402,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( final NodeTraversal t , final Node getprop ,",
            "score": 99.40262643914474,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = Scope.inGlobalScope( ) && t",
            "score": 99.37679714626736,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( ) && t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , NodeTraversal t ,",
            "score": 99.35739315257354,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = ! t.inGlobalScope( ) ;",
            "score": 99.35288373161765,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = false && inGlobalScope( ) ;",
            "score": 99.34220616957721,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node n , Node parent , Node parent ) {",
            "score": 99.55731522409539,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node n , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node main , Node parent )",
            "score": 99.52705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node main , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object parent )",
            "score": 99.44907633463542,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isGlobal = t.inGlobalScope(",
            "score": 99.41893853081598,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Global = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private public void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.40223999023438,
            "correctness": "uncompilable",
            "tokenized_patch": "private public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String isOverride = t.inGlobalScope( ) ;",
            "score": 99.37832462086396,
            "correctness": "uncompilable",
            "tokenized_patch": "private String is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? true ,",
            "score": 99.37677001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.35725620814732,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true( t.inGlobalScope( )",
            "score": 99.35279756433823,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ( t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Scope ) &&",
            "score": 99.342041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Location parent )",
            "score": 99.44901123046876,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Location parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.4021240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( final",
            "score": 99.3766098022461,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , Node getprop , Node parent ,",
            "score": 99.35686178768383,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = match.inGlobalScope( ) ;",
            "score": 99.35253143310547,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = match . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.34198760986328,
            "correctness": "wrong",
            "tokenized_patch": "Boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && if( true )",
            "score": 99.41827392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && if ( true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.40190044202302,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( ? t ;",
            "score": 99.37653944227431,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = options.inGlobalScope( ) && &",
            "score": 99.3520866842831,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = options . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node [ ] t , Node parent ) {",
            "score": 99.55634901258681,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node [ ] t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Token parent )",
            "score": 99.44810180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.41826714409723,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , ,",
            "score": 99.40052554481908,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & Boolean.TRUE ;",
            "score": 99.37780043658088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & Boolean . TRUE ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) ?",
            "score": 99.37620713975694,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Type checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.35616726345486,
            "correctness": "uncompilable",
            "tokenized_patch": "private Type check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ^ &",
            "score": 99.35175637637867,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ^ &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) && ;",
            "score": 99.34159581801471,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean checkPropertyVisibility ) {",
            "score": 99.44783289292279,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && false ) ;",
            "score": 99.41805013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) &&0&&",
            "score": 99.37766520182292,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( true ) &&",
            "score": 99.37611897786458,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String property )",
            "score": 99.35606474034927,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = scope.inGlobalScope( ) &&",
            "score": 99.35010483685662,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) && & & ;",
            "score": 99.34133731617646,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node node , Node parent )",
            "score": 99.55467465049342,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node node , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.52510375976563,
            "correctness": "uncompilable",
            "tokenized_patch": "private check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , Object parent ) {",
            "score": 99.44773356119792,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.40018503289474,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) ,",
            "score": 99.34958065257354,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || t.",
            "score": 99.34127987132354,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || t .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Token parent )",
            "score": 99.55464477539063,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.52487182617188,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Style getprop , Node parent )",
            "score": 99.44761352539062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Style get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && == true ;",
            "score": 99.4175961143092,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && == true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Node getprop ) {",
            "score": 99.4001708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t !=.inGlobalScope( ) ;",
            "score": 99.37561753216912,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "new void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.35560438368056,
            "correctness": "uncompilable",
            "tokenized_patch": "new void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( value ) ;",
            "score": 99.34945858226104,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( value ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node get , Node getprop , Node parent )",
            "score": 99.52402215254934,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Node getprop )",
            "score": 99.44735717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && & ?",
            "score": 99.41748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? false",
            "score": 99.37562471277573,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.35528564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) ,",
            "score": 99.34877642463235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( *?",
            "score": 99.34000890395221,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node node , Node getprop , Node parent )",
            "score": 99.55440481085526,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.44696723090277,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && ) &&",
            "score": 99.41732627467105,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && &",
            "score": 99.3756103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "CaMeL boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , NodeTraversal t )",
            "score": 99.355224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ||(",
            "score": 99.34820915670956,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) || (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( null ) &&",
            "score": 99.33969295726104,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Token getprop , Node parent )",
            "score": 99.4466064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( boolean isOverride )",
            "score": 99.41694078947368,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node getprop ,",
            "score": 99.35504150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = this.inGlobalScope( ) {",
            "score": 99.34820915670956,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Context parent )",
            "score": 99.553857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Context parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , void parent )",
            "score": 99.4460693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( ) {",
            "score": 99.41667624080883,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.39897717927632,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.35458553538604,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride =( t.inGlobalScope( )",
            "score": 99.3481086282169,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( / && ?",
            "score": 99.33810604319854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( / && ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean getprop , Node getprop , Node parent )",
            "score": 99.44597424958882,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized abstract void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.3977294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? true ;",
            "score": 99.37523057725694,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean isOverride , Node getprop ,",
            "score": 99.35382758246527,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in = t.in.in &&",
            "score": 99.33810604319854,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in = t . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String parent , NodeTraversal t , Node parent )",
            "score": 99.52186889648438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String parent , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal node , Node getprop , Node parent )",
            "score": 99.44591674804687,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal node , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int objectType ) {",
            "score": 99.39718627929688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) throws",
            "score": 99.37514361213235,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , Node getprop ,",
            "score": 99.3537826538086,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope( )",
            "score": 99.3480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , void parent )",
            "score": 99.55215454101562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t , String propertyName )",
            "score": 99.44581909179688,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , String property CaMeL Name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.39705200195313,
            "correctness": "uncompilable",
            "tokenized_patch": "public private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in inGlobalScope( ) && &",
            "score": 99.37499321831598,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & false ;",
            "score": 99.3736083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Reference getprop ,",
            "score": 99.35283067491319,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Reference get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false t.inGlobalScope( ) &&",
            "score": 99.34800091911765,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , final NodeTraversal t )",
            "score": 99.5212646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , int( )",
            "score": 99.44558715820312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.39703369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = true.inGlobalScope( ) ;",
            "score": 99.37322639016544,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Integer property ,",
            "score": 99.35265395220588,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Integer property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.getGlobalScope( ) && &",
            "score": 99.3479865579044,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) throws Exception {",
            "score": 99.55159719366776,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) throws Exception {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName , NodeTraversal t ) {",
            "score": 99.44393310546874,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.39689555921052,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected int isOverride = t.inGlobalScope( ) ;",
            "score": 99.37288172104779,
            "correctness": "uncompilable",
            "tokenized_patch": "protected int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( scope , NodeTraversal t ,",
            "score": 99.35257720947266,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( scope , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( node ) &&",
            "score": 99.34788602941177,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( node ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ''||",
            "score": 99.33760833740234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it'||",
            "score": 99.33760833740234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a'||",
            "score": 99.33760833740234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...'||",
            "score": 99.33760833740234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b'||",
            "score": 99.33760833740234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent , Object",
            "score": 99.44378340871711,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , Object",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && }",
            "score": 99.41501871744792,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , final Node getprop ) {",
            "score": 99.39688720703126,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope(0) &&",
            "score": 99.37396240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 0 ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t ; inGlobalScope( ) ;",
            "score": 99.37248992919922,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ; in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public )",
            "score": 99.3525031594669,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = System.inGlobalScope( )",
            "score": 99.34783935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null && false",
            "score": 99.3372802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null && false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Node validator )",
            "score": 99.55037841796874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node validator )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isGlobal = t.inGlobalScope(",
            "score": 99.41495361328126,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Global = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null ? & t !=0: &",
            "score": 99.37248992919922,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null ? & t != 0 : &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node node )",
            "score": 99.35203642003677,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t != null && & & & & &",
            "score": 99.34715270996094,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t != null && & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ] checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.5502197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private ] check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope(0)",
            "score": 99.373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 0 )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope",
            "score": 99.37247408353366,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void parent )",
            "score": 99.35160558363971,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope , & &",
            "score": 99.34711770450367,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope , & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , int getprop )",
            "score": 99.54942016601562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , int get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , NodeTraversal t )",
            "score": 99.51450805664062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Token getprop , Node parent )",
            "score": 99.44336751302083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & == ) &&",
            "score": 99.41477661132812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & == ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true.t.inGlobalScope( )",
            "score": 99.37258572048611,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true . t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , final",
            "score": 99.35148111979167,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = ).inGlobalScope( ) ;",
            "score": 99.33693560431985,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , NodeTraversal t , Node parent ,",
            "score": 99.54846801757813,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.44303624770221,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop ) { {",
            "score": 99.39591899671052,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( key )",
            "score": 99.37252987132354,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( key )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t3.inGlobalScope( ) ;",
            "score": 99.37144639756944,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t2.inGlobalScope( ) ;",
            "score": 99.37144639756944,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t2008.inGlobalScope( ) ;",
            "score": 99.37144639756944,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t $NUMBER$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private double checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.35087754991319,
            "correctness": "uncompilable",
            "tokenized_patch": "private double check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = match.inGlobalScope( ) &&",
            "score": 99.34695434570312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = match . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.51214278371711,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , Node n )",
            "score": 99.44291381835937,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node n )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String getprop ) {",
            "score": 99.39510305304276,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context true , NodeTraversal t ,",
            "score": 99.3502556295956,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context true , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this ) ||",
            "score": 99.3364616842831,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Class getprop , Node getprop , Node parent )",
            "score": 99.54767456054688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Class get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Object parent )",
            "score": 99.44280684621711,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true )",
            "score": 99.37220764160156,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal )",
            "score": 99.35017225477431,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = null.inGlobalScope( ) ;",
            "score": 99.33623908547794,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Type parent )",
            "score": 99.54753032483552,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.44275620404412,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || true ) ;",
            "score": 99.4124820106908,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || true ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.in.inGlobalScope( )",
            "score": 99.37217881944444,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true ; inGlobalScope( ) ;",
            "score": 99.37110137939453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ; in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Token getprop , Node parent )",
            "score": 99.3501205444336,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = this.inGlobalScope( ) &&",
            "score": 99.33612419577206,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node type , Node parent ,",
            "score": 99.54713134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean checkPropertyVisibility , Node parent )",
            "score": 99.44264051649306,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true && t.inGlobalScope( ) ;",
            "score": 99.4123470908717,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = match.inGlobalScope( ) && &",
            "score": 99.34569594439338,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = match . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ).",
            "score": 99.33594512939453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Object getprop , Node getprop , Node parent )",
            "score": 99.54675903320313,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws",
            "score": 99.39451904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? this ;",
            "score": 99.37083604600694,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? this ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Token &",
            "score": 99.34564971923828,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Token &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node node ) {",
            "score": 99.44257668887867,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public public boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.41229248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "public public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private NodeTraversal checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.3941162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node CaMeL Traversal check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false ; inGlobalScope( ) ;",
            "score": 99.37004089355469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false ; in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean validator )",
            "score": 99.34922880284927,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean validator )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.in = t.in.in &&",
            "score": 99.33559283088235,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in = t . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.54623413085938,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node NodeTraversal t )",
            "score": 99.50855102539063,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , String propertyName ,",
            "score": 99.44249810112848,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) && *&&",
            "score": 99.41192305715461,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node getprop , if(",
            "score": 99.39384155273437,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.inGlobalScope( )",
            "score": 99.3704833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope( ) &&(",
            "score": 99.36969672309027,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , NodeTraversal t ,",
            "score": 99.34864717371323,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope(0) &&",
            "score": 99.33517635569854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 0 ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node t , Node getprop , Node parent )",
            "score": 99.54611687911184,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) { if( object",
            "score": 99.44208727384868,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { if ( object",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( , ) ;",
            "score": 99.41151258680556,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( , ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal [ ] dereference , Node getprop ,",
            "score": 99.3937744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal [ ] dereference , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) *",
            "score": 99.36943901909723,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean check , NodeTraversal t ,",
            "score": 99.3484245749081,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean check , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node check , Node getprop , Node parent )",
            "score": 99.50520405016448,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node check , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , void parent )",
            "score": 99.44183028371711,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && true &&",
            "score": 99.41142835115132,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node node ) {",
            "score": 99.39368353949652,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == t.inGlobalScope( ) &&",
            "score": 99.36952718098958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( , Node getprop , Node parent )",
            "score": 99.34820556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = false && inGlobalScope( ) &&",
            "score": 99.33429718017578,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( long getprop , Node getprop , Node parent )",
            "score": 99.544873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( long get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Token getprop , Node parent , Node parent )",
            "score": 99.50410541735198,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Object getprop ) {",
            "score": 99.39313065378289,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope( Context ) ;",
            "score": 99.36801486545139,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Token getprop , Node parent ,",
            "score": 99.3473892211914,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & *& & & & ?",
            "score": 99.3333740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & * & & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Object parent )",
            "score": 99.54391479492188,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) { try {",
            "score": 99.44145372178819,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { try {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal [ ] current , Node getprop ,",
            "score": 99.39296875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal [ ] current , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = & t.inGlobalScope( )",
            "score": 99.36915498621323,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Object parent )",
            "score": 99.3473762063419,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || || false",
            "score": 99.333251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || || false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean t , Node getprop , Node parent )",
            "score": 99.50278191817434,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isOverride , Node parent ) {",
            "score": 99.44040814568015,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Name getprop ,",
            "score": 99.39287366365132,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Name get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public isOverride = t.inGlobalScope( ) && &",
            "score": 99.36906881893383,
            "correctness": "uncompilable",
            "tokenized_patch": "public is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) ; )",
            "score": 99.36764865451389,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Integer getprop ,",
            "score": 99.34709337022569,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Integer get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( null ) &&",
            "score": 99.333251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( null ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , null ) {",
            "score": 99.43873901367188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , null ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = true && t.inGlobalScope( ) ;",
            "score": 99.41083084909539,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? ) +",
            "score": 99.36880154079861,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node node ,",
            "score": 99.34666532628677,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = isOverride ;",
            "score": 99.34368133544922,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && && &",
            "score": 99.33273494944854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Exception checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.54267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private Exception check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Token parent )",
            "score": 99.50014134457237,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) { if( null",
            "score": 99.4385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { if ( null",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this",
            "score": 99.41045735677083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop , if(",
            "score": 99.39213256835937,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t == getGlobalScope( ) && &",
            "score": 99.36879475911458,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t == get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t.isOverride( ) ;",
            "score": 99.367431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.34640842013889,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = isOverride &&",
            "score": 99.34364318847656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ||",
            "score": 99.33158365885417,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , NodeTraversal t , Node parent )",
            "score": 99.54220581054688,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.49788818359374,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node node , Node parent )",
            "score": 99.43824527138158,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) && & ) !=0&&",
            "score": 99.40988641036184,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) && & ) != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void dereference ) {",
            "score": 99.39207628038194,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void dereference ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) |",
            "score": 99.36662023207721,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( ObjectType objectType )",
            "score": 99.3461685180664,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.inGlobalScope( ) &&",
            "score": 99.34352111816406,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( short getprop , Node getprop , Node parent )",
            "score": 99.54189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( short get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent ) { if(",
            "score": 99.43787841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static private void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.39204711914063,
            "correctness": "uncompilable",
            "tokenized_patch": "static private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && in",
            "score": 99.3681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && in",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope.( ) ;",
            "score": 99.36509076286765,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope . ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = super.inGlobalScope( ) && &",
            "score": 99.34334070542279,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & *& & & & &",
            "score": 99.33136749267578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & * & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Type getprop , Node getprop , Node parent )",
            "score": 99.54169311523438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Type get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName )",
            "score": 99.43750939002403,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.40939510569854,
            "correctness": "uncompilable",
            "tokenized_patch": "Override boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop ) throws",
            "score": 99.39189317491319,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.inGlobalScope( ) {",
            "score": 99.3681281594669,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ; Override",
            "score": 99.36475327435662,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ; Override",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =3.inGlobalScope( ) &&",
            "score": 99.33135223388672,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $NUMBER$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =2.inGlobalScope( ) &&",
            "score": 99.33135223388672,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $NUMBER$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =2008.inGlobalScope( ) &&",
            "score": 99.33135223388672,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $NUMBER$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean parent , Node getprop , Node parent )",
            "score": 99.4961001747533,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.43694747121711,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void parent ) {",
            "score": 99.39187282986111,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && inGlobalScope( ) && &",
            "score": 99.36625402113971,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && |=",
            "score": 99.36337459788604,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && |=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean cast )",
            "score": 99.3443962545956,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean cast )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( t &&",
            "score": 99.33134191176471,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , Node parent , Node parent )",
            "score": 99.54014756944444,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , boolean isSubtype )",
            "score": 99.4362728721217,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Subtype )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null && & t.inGlobalScope( ) ;",
            "score": 99.408935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null && & t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( L",
            "score": 99.36622619628906,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( L",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( node , Node getprop , Node parent )",
            "score": 99.34391276041667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( node , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null )",
            "score": 99.34305572509766,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in = t.in &&",
            "score": 99.3312744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in = t . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Token parent )",
            "score": 99.53974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T getprop , Node parent , Node parent )",
            "score": 99.4945132606908,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , boolean isOverride )",
            "score": 99.43613688151042,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && != false &&",
            "score": 99.40890984786184,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && != false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( false &&",
            "score": 99.36601706112133,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String getprop )",
            "score": 99.34388563368056,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope &",
            "score": 99.34266880580357,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( t ) &&",
            "score": 99.33116239659927,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( t ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Class parent )",
            "score": 99.53909912109376,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Class parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected final void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.49417114257812,
            "correctness": "uncompilable",
            "tokenized_patch": "protected final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent ) throws Exception {",
            "score": 99.43603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) throws Exception {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.39132690429688,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.inGlobalScope( ) {",
            "score": 99.365478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public long checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.34384494357639,
            "correctness": "uncompilable",
            "tokenized_patch": "public long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope ) &&",
            "score": 99.34256744384766,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = value.inGlobalScope( ) &&",
            "score": 99.33106231689453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = value . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node source , Node getprop , Node parent )",
            "score": 99.53823370682566,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node source , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String dereference , Node getprop , Node parent )",
            "score": 99.4921939247533,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String dereference , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Object parent )",
            "score": 99.43359375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , boolean isOverride ) {",
            "score": 99.3910400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = in.inGlobalScope( )",
            "score": 99.36470794677734,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = in . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , T parent ,",
            "score": 99.3436279296875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( node ) ;",
            "score": 99.34248621323529,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( node ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , String property )",
            "score": 99.53817138671874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , String property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean isConstructor )",
            "score": 99.43273207720588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Constructor )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( this ) ;",
            "score": 99.40859805836396,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Node getprop ) {",
            "score": 99.39093017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ; Scope( )",
            "score": 99.36107680376838,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ; Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( type , Node getprop , Node parent )",
            "score": 99.34318712022569,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( type , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = | t.inGlobalScope( ) &&",
            "score": 99.33086081112133,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = | t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node value , Node parent )",
            "score": 99.53792724609374,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node value , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "check checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.48970947265624,
            "correctness": "uncompilable",
            "tokenized_patch": "check check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.43220350477431,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = super.inGlobalScope( ) ;",
            "score": 99.40813849954044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String property ) {",
            "score": 99.39059787326389,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ||(",
            "score": 99.36431121826172,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & true ;",
            "score": 99.36044108072916,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.34290228949652,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) *&",
            "score": 99.34180405560662,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) * &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( false ) ;",
            "score": 99.33076746323529,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent ,",
            "score": 99.43186549136513,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & / ;",
            "score": 99.40792686060855,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & / ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Map isOverride = t.inGlobalScope( ) && &",
            "score": 99.36374080882354,
            "correctness": "uncompilable",
            "tokenized_patch": "Map is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = this.inGlobalScope( ) ;",
            "score": 99.36024385340073,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Class getprop ,",
            "score": 99.34271240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = scope.inGlobalScope( ) ;",
            "score": 99.34156709558823,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride =( boolean inGlobalScope( ) {",
            "score": 99.33073874080883,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Class parent )",
            "score": 99.53695068359374,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Class parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( JSDocInfo docInfo ) {",
            "score": 99.431396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( JS CaMeL Doc CaMeL Info doc CaMeL Info ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) ,",
            "score": 99.36370490579044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public long isOverride = t.inGlobalScope( ) ;",
            "score": 99.36013614430146,
            "correctness": "uncompilable",
            "tokenized_patch": "public long is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean dereference )",
            "score": 99.34161735983456,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean dereference )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =0&& inGlobalScope( ) &&",
            "score": 99.33035278320312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = 0 && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean validator ) {",
            "score": 99.4311164407169,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope(1)",
            "score": 99.36302992876838,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 1 )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , this )",
            "score": 99.34136962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , this )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private public void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.48760986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "private public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.36281451056985,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( code ) ;",
            "score": 99.3594109030331,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( code ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token parent )",
            "score": 99.34097110523896,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null , &",
            "score": 99.34093520220588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( null &&",
            "score": 99.32981244255515,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node vars , Node parent )",
            "score": 99.5359130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node vars , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String property , Node parent , Node parent )",
            "score": 99.48592800564236,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.42999626608456,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) && & ||",
            "score": 99.40683465254934,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , ;",
            "score": 99.3896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = ! t.inGlobalScope( ) &&",
            "score": 99.34088493795956,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.33992222377232,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "List isOverride = t.inGlobalScope( ) &&",
            "score": 99.32975006103516,
            "correctness": "uncompilable",
            "tokenized_patch": "List is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , final Node parent )",
            "score": 99.42977566189236,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( &&(",
            "score": 99.36249856387867,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && &",
            "score": 99.32946014404297,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , NodeTraversal t , Node parent )",
            "score": 99.53533935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( ObjectType objectType , Node parent ) {",
            "score": 99.42936626233552,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t [0] != null && & &",
            "score": 99.40664672851562,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t [ 0 ] != null && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String objectType ,",
            "score": 99.38893528988487,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ]",
            "score": 99.36225891113281,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ]",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope( ) ||",
            "score": 99.34018841911765,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context false , NodeTraversal t ,",
            "score": 99.33901079963235,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context false , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = true && t.inGlobalScope( ) &&",
            "score": 99.32915900735294,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int t , Node getprop , Node parent )",
            "score": 99.42803276909723,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && t.inGlobalScope( ) &&",
            "score": 99.40603155838816,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void parent ) {",
            "score": 99.38888888888889,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( global",
            "score": 99.36222839355469,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( global",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String isOverride = t.inGlobalScope( ) &&",
            "score": 99.35749368106617,
            "correctness": "uncompilable",
            "tokenized_patch": "public String is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope ;",
            "score": 99.3400634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean current , NodeTraversal t ,",
            "score": 99.33885282628677,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean current , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) ||",
            "score": 99.32827758789062,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.481982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node parent ) {",
            "score": 99.4280014038086,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( , ) &&",
            "score": 99.40599149816177,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( , ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , else {",
            "score": 99.3887939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , else {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = get.inGlobalScope( ) &&",
            "score": 99.36218979779412,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.33665556066177,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( this &&",
            "score": 99.32819680606617,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && != ) &&",
            "score": 99.40590306332237,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && != ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop ,",
            "score": 99.38871256510417,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || |",
            "score": 99.36179486443015,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.getGlobalScope( ) ;",
            "score": 99.3564094094669,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Class parent ,",
            "score": 99.33540613511029,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ) && ;",
            "score": 99.32809627757354,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parameter , Node parent )",
            "score": 99.532958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parameter , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void check( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.48165554470486,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.42704772949219,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.38814086914063,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || ;",
            "score": 99.3617302389706,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void isOverride = t.inGlobalScope( ) ;",
            "score": 99.35536104090073,
            "correctness": "uncompilable",
            "tokenized_patch": "final void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ? & &",
            "score": 99.33956146240234,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ? & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t ,",
            "score": 99.33447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( null ) ;",
            "score": 99.32773724724265,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( null ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Type parent , Node parent )",
            "score": 99.53281121504934,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , node )",
            "score": 99.48097534179688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent , int",
            "score": 99.42686060855263,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) / &",
            "score": 99.3553107766544,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) / &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false( t.inGlobalScope( )",
            "score": 99.33937701056985,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false ( t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , int )",
            "score": 99.3341064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract void isOverride = t.inGlobalScope( ) &&",
            "score": 99.32768698299633,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private else if( NodeTraversal t , Node getprop , Node parent ) {",
            "score": 99.53160264756944,
            "correctness": "uncompilable",
            "tokenized_patch": "private else if ( Node CaMeL Traversal t , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Token getprop , Node getprop , Node parent )",
            "score": 99.42653294613487,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.40407986111111,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "@ static boolean isOverride = t.inGlobalScope( )",
            "score": 99.36154354319854,
            "correctness": "uncompilable",
            "tokenized_patch": "@ static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = true && &",
            "score": 99.33907877604166,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = true && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , T parent )",
            "score": 99.33392693014706,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope(0&&",
            "score": 99.32766723632812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T getprop , Node getprop , Node parent )",
            "score": 99.53156127929688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.42639838324652,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) { )",
            "score": 99.38677368164062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || &",
            "score": 99.36144301470588,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && +",
            "score": 99.35261086856617,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && +",
            "failed_triggering": "2/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "private void checkPropertyVisibility( this.getprop , Node parent ,",
            "score": 99.33376895680146,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void isOverride = t.inGlobalScope( ) &&",
            "score": 99.32753619025735,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t , )",
            "score": 99.47860107421874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t , )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( t ) ;",
            "score": 99.40385606553819,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Property checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.38551958869485,
            "correctness": "uncompilable",
            "tokenized_patch": "Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && <=",
            "score": 99.34970272288604,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && <=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( '', &",
            "score": 99.33878820082721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it', &",
            "score": 99.33878820082721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a', &",
            "score": 99.33878820082721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...', &",
            "score": 99.33878820082721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b', &",
            "score": 99.33878820082721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , NodeTraversal t )",
            "score": 99.33339556525735,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ).",
            "score": 99.32750746783088,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node l , Node parent )",
            "score": 99.52858276367188,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node l , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.42600504557292,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.385498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = static.inGlobalScope( ) ;",
            "score": 99.34941101074219,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = static . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) return &",
            "score": 99.33845071231617,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) return &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , boolean isOverride ) {",
            "score": 99.42591616981908,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.in.inGlobalScope( ) ;",
            "score": 99.40357123480902,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Context t ) {",
            "score": 99.38544022409539,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Context t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "long isOverride = t.inGlobalScope( ) ;",
            "score": 99.3490219116211,
            "correctness": "uncompilable",
            "tokenized_patch": "long is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = System.inGlobalScope( )",
            "score": 99.33827311197916,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.33311462402344,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && inGlobalScope( ) {",
            "score": 99.32648064108456,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean isOverride , Node parent ) {",
            "score": 99.42536078559027,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Ref getprop ,",
            "score": 99.3853759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Ref get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Variable",
            "score": 99.35981750488281,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Variable",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected String isOverride = t.inGlobalScope( ) ;",
            "score": 99.348876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected String is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) != &",
            "score": 99.33817784926471,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) != &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t , private",
            "score": 99.33293914794922,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.4238640280331,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && true ) &&",
            "score": 99.40306332236842,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && true ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Object parent ) {",
            "score": 99.38523356119792,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( current ) ;",
            "score": 99.34828096277573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( current ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean check )",
            "score": 99.33158605238971,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean check )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( false ) &&",
            "score": 99.32602108226104,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , Type parent )",
            "score": 99.52705688476563,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & t.inGlobalScope( ) ;",
            "score": 99.4024722450658,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( ) {",
            "score": 99.3590949563419,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & t !=0&&",
            "score": 99.34701538085938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & t != 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t1.inGlobalScope( ) &&",
            "score": 99.33721564797794,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t 1 . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.33106904871323,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ) && & & ;",
            "score": 99.32599954044117,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.52678833007812,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = parent.inGlobalScope( ) ;",
            "score": 99.40179084329044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , String propertyName ) {",
            "score": 99.38460083007813,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean parent )",
            "score": 99.32861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = input.inGlobalScope( ) &&",
            "score": 99.32523345947266,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = input . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node getprop , Node parent ) throws",
            "score": 99.42312782689145,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && -",
            "score": 99.34346277573529,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && -",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope(( ) &&",
            "score": 99.33702895220588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.32686121323529,
            "correctness": "uncompilable",
            "tokenized_patch": "if check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( *&& *",
            "score": 99.32518813189338,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * && *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , boolean isConstructor ) {",
            "score": 99.42312140213816,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && | &",
            "score": 99.40158562911184,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void check ) {",
            "score": 99.38357204861111,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void check ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isGlobal( ) ;",
            "score": 99.3416259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Global ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( type )",
            "score": 99.33690688189338,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final NodeTraversal t , private",
            "score": 99.3263931274414,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ) ||",
            "score": 99.32513427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.5263736122533,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( Node getprop , Node getprop , Node parent )",
            "score": 99.42266524465461,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.38348067434211,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( true ||",
            "score": 99.35849896599265,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Token & &",
            "score": 99.33603084788604,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Token & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context parent , NodeTraversal t ,",
            "score": 99.32611443014706,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context parent , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope(",
            "score": 99.32505696614584,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop ) ;",
            "score": 99.42266167534723,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) && true ;",
            "score": 99.40060906661184,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "instanceof void checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.38255550986842,
            "correctness": "uncompilable",
            "tokenized_patch": "instanceof void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = Scope.inGlobalScope(",
            "score": 99.3581787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = this.inGlobalScope( ) ;",
            "score": 99.34091366038604,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = & & &",
            "score": 99.33521225873162,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( getprop , Node getprop ,",
            "score": 99.32593536376953,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) && & & &",
            "score": 99.32444852941177,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , int )",
            "score": 99.4216372841283,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , while(",
            "score": 99.382470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , while (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( System.",
            "score": 99.35796042049633,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( System .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( name ,",
            "score": 99.33502960205078,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , char parent ,",
            "score": 99.32579130284927,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , char parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! inGlobalScope( ) &&",
            "score": 99.32420247395834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Type parent ,",
            "score": 99.52511596679688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Type parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( ObjectType objectType ) {",
            "score": 99.4205551147461,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( L",
            "score": 99.35736846923828,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( L",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized boolean isOverride = t.inGlobalScope( )",
            "score": 99.33997300091912,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context t , NodeTraversal t ,",
            "score": 99.32468548943015,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( null ||",
            "score": 99.32384490966797,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node getprop , Node getprop ,",
            "score": 99.52410888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private.checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.47016987047698,
            "correctness": "uncompilable",
            "tokenized_patch": "private . check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , ) {",
            "score": 99.38197085731908,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope(.",
            "score": 99.35700988769531,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.getGlobalScope( ) ;",
            "score": 99.3399299172794,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final boolean isOverride = t.inGlobalScope( )",
            "score": 99.33497529871323,
            "correctness": "uncompilable",
            "tokenized_patch": "private final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop , Node getprop )",
            "score": 99.32459214154412,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node node )",
            "score": 99.52394505550987,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.42024739583333,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = type.inGlobalScope( this ) ;",
            "score": 99.39978745404412,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final NodeTraversal t , Node getprop ,",
            "score": 99.38192588404605,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.isOverride = true ;",
            "score": 99.33976236979167,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = in.inGlobalScope( ) &&",
            "score": 99.33477424172794,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = in . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , T parent ,",
            "score": 99.3241325827206,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( this.",
            "score": 99.32341003417969,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent ) { if(",
            "score": 99.523828125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Type parent ) {",
            "score": 99.42005112591912,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , LinkedCaMeL",
            "score": 99.38165283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Linked CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double isOverride = t.inGlobalScope( ) && &",
            "score": 99.3562873391544,
            "correctness": "uncompilable",
            "tokenized_patch": "double is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object isOverride = t.inGlobalScope( ) ;",
            "score": 99.33931238511029,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.inGlobalScope( ) {",
            "score": 99.33463781020221,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.32404436383929,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ && isOverride = t.inGlobalScope( ) &&",
            "score": 99.32314165900735,
            "correctness": "uncompilable",
            "tokenized_patch": "/ && is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , boolean isSubtype ) {",
            "score": 99.41926655016448,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.39873908547794,
            "correctness": "uncompilable",
            "tokenized_patch": "Override boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , NodeTraversal t ,",
            "score": 99.38157823350694,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( key )",
            "score": 99.35619399126838,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( key )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected final void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.32373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = null && inGlobalScope( ) &&",
            "score": 99.32232306985294,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = null && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node type , Node parent )",
            "score": 99.52238384046052,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node type , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Object parent )",
            "score": 99.46574571397569,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , try {",
            "score": 99.41900313527961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , try {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.38135375976563,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t t.inGlobalScope( )",
            "score": 99.3559929342831,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope != ) ;",
            "score": 99.33409118652344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope != ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.3228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride =( boolean inGlobalScope ) &&",
            "score": 99.32211303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.5217220908717,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws )",
            "score": 99.46500854492187,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Object parent , Node parent )",
            "score": 99.41893174913194,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , NodeTraversal t ) throws",
            "score": 99.38099429481908,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || &",
            "score": 99.35556927849265,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = get.inGlobalScope( ) ;",
            "score": 99.33768956801471,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope & &",
            "score": 99.3340072631836,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Token isOverride = t.inGlobalScope( ) &&",
            "score": 99.32209014892578,
            "correctness": "uncompilable",
            "tokenized_patch": "Token is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.32154192243304,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , void parent , Node parent )",
            "score": 99.41816149259868,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false t.inGlobalScope( )",
            "score": 99.35553337545956,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) / /",
            "score": 99.33733053768383,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) / /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = value.inGlobalScope( ) ;",
            "score": 99.33399200439453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = value . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean inGlobalScope ) &&",
            "score": 99.3219970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean dereference , NodeTraversal t ,",
            "score": 99.32135368795956,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean dereference , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Node n )",
            "score": 99.52117919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node n )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , null )",
            "score": 99.46442260742188,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , null )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.41776529947917,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t == getGlobalScope( )",
            "score": 99.355224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t == get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.isOverride = true ;",
            "score": 99.33307291666667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = & ).inGlobalScope( ) &&",
            "score": 99.32197840073529,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = & ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.32099465762867,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.4642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object getprop )",
            "score": 99.41706285978618,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized boolean checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.380712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( )(",
            "score": 99.35516716452206,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = true ;",
            "score": 99.33268229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride =0&& inGlobalScope( ) &&",
            "score": 99.32172707950367,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = 0 && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( JSDocInfo docInfo )",
            "score": 99.41668342141544,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( JS CaMeL Doc CaMeL Info doc CaMeL Info )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( int",
            "score": 99.35504150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.getGlobalScope( ) ;",
            "score": 99.33626556396484,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.valueOf(",
            "score": 99.3326416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . value CaMeL Of (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( *?",
            "score": 99.32145182291667,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , public",
            "score": 99.32051849365234,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , public",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node source , Node parent , Node parent )",
            "score": 99.51804606119792,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node source , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node parent , boolean",
            "score": 99.41646535773026,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void getprop ,",
            "score": 99.38039822048611,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( || )",
            "score": 99.3547004250919,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t !=.inGlobalScope( ) &&",
            "score": 99.33576516544117,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = source.inGlobalScope( ) &&",
            "score": 99.32139587402344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = source . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean checkPropertyVisibility )",
            "score": 99.41536458333333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && & !=",
            "score": 99.39697943793402,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && & !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static synchronized void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.38026123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) *",
            "score": 99.35454963235294,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = type.inGlobalScope( ) &&",
            "score": 99.32138959099265,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node current , Node getprop ,",
            "score": 99.31697082519531,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node current , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.51593017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , boolean isSubtype ) {",
            "score": 99.41514828330592,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.39683702256944,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? false",
            "score": 99.35399672564338,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( null ,",
            "score": 99.3213249655331,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , Node getprop ,",
            "score": 99.31655883789062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.41497039794922,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && | &&",
            "score": 99.39605712890625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && | &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected public void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.37978644120066,
            "correctness": "uncompilable",
            "tokenized_patch": "protected public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.35369514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.35369514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.35369514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.35369514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ? $STRING$",
            "score": 99.35369514016544,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? $STRING$",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = &",
            "score": 99.32872721354167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "check checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.3160400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "check check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , Node getprop , Node getprop ,",
            "score": 99.51533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.45941162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "public private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Token getprop , Node parent ) {",
            "score": 99.41484518612133,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , ;",
            "score": 99.37957356770833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( ) throws",
            "score": 99.35342227711396,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Collection isOverride = t.inGlobalScope( ) ;",
            "score": 99.32801055908203,
            "correctness": "uncompilable",
            "tokenized_patch": "Collection is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false ||",
            "score": 99.32124328613281,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context this , NodeTraversal t ,",
            "score": 99.31565946691177,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context this , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node getprop , Node parent ,",
            "score": 99.51483764648438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , int ) {",
            "score": 99.41455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , int ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Global",
            "score": 99.35333251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Global",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( ) &&(",
            "score": 99.33219640395221,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope ,",
            "score": 99.32792663574219,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t.inGlobalScope( &&",
            "score": 99.32110954733456,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , / *",
            "score": 99.31499481201172,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , / *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.45776977539063,
            "correctness": "uncompilable",
            "tokenized_patch": "Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName , Node parent )",
            "score": 99.41423483455883,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Class )",
            "score": 99.35329302619485,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Class )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride = true ;",
            "score": 99.33218587239584,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( null ) &&",
            "score": 99.32109069824219,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( null ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.314697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node node , Node getprop , Node parent )",
            "score": 99.514404296875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean checkPropertyVisibility , Node parent )",
            "score": 99.41401110197368,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void dereference ) {",
            "score": 99.37778049045139,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void dereference ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) =",
            "score": 99.35281192555146,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false ; inGlobalScope( ) ;",
            "score": 99.33212459788604,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false ; in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( this ,",
            "score": 99.32075051700367,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , int )",
            "score": 99.3145523071289,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node type , Node parent , Node parent )",
            "score": 99.51422119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node type , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int getprop , Node parent ) {",
            "score": 99.41382598876953,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node getprop ) throws",
            "score": 99.3773257606908,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope && &",
            "score": 99.32722473144531,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean inGlobalScope( ) &&",
            "score": 99.32052612304688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Token property ,",
            "score": 99.31374942555146,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Token property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , Object parent ,",
            "score": 99.512939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.41295572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.inGlobalScope(",
            "score": 99.39152308872768,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( && |",
            "score": 99.35108857996323,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = input.inGlobalScope( ) ;",
            "score": 99.32587432861328,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = input . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = false.inGlobalScope( ) &&",
            "score": 99.32018324908088,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , scope )",
            "score": 99.45572509765626,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private boolean isOverride = t.inGlobalScope( )",
            "score": 99.39069680606617,
            "correctness": "uncompilable",
            "tokenized_patch": "public private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Property checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.37718441611842,
            "correctness": "uncompilable",
            "tokenized_patch": "public Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) , &",
            "score": 99.35085161994485,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( mode ) ;",
            "score": 99.33034380744485,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( mode ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = isOverride &&",
            "score": 99.32562255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object current , Node getprop ,",
            "score": 99.31297302246094,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object current , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean t , Node getprop , Node parent )",
            "score": 99.41249593098958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope(",
            "score": 99.39031219482422,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true ;",
            "score": 99.32523600260417,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & *& & & & ?",
            "score": 99.31795501708984,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & * & & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context node , NodeTraversal t ,",
            "score": 99.31062586167279,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context node , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.5118472450658,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean checkPropertyVisibility )",
            "score": 99.4124755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in inGlobalScope( ) ;",
            "score": 99.39015107996323,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node node ,",
            "score": 99.37605116102431,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( , )",
            "score": 99.3502197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( , )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( module )",
            "score": 99.3241958618164,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( module )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && {",
            "score": 99.31770324707031,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.31061150045956,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node parent , Node parent ,",
            "score": 99.51157740542763,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int )",
            "score": 99.45169067382812,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , NodeCaMeL",
            "score": 99.4124267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) != null &&",
            "score": 99.38980441623264,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) != null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Dimension isOverride = t.inGlobalScope( ) && &",
            "score": 99.35005457261029,
            "correctness": "uncompilable",
            "tokenized_patch": "Dimension is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = true ;",
            "score": 99.32952880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context t , Node getprop ,",
            "score": 99.31039428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Type parent ,",
            "score": 99.51133422851562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Type parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Object getprop , Node parent ) {",
            "score": 99.41191101074219,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node module ) {",
            "score": 99.37512885199652,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node module ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Throwable",
            "score": 99.34982299804688,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Throwable",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( key )",
            "score": 99.32211303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( key )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && &&",
            "score": 99.31759643554688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object parent , Node getprop ,",
            "score": 99.30998992919922,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node module , Node getprop , Node parent )",
            "score": 99.51055586965461,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node module , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) { }",
            "score": 99.37460666232639,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( boolean",
            "score": 99.34957122802734,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope ? &",
            "score": 99.32203674316406,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object parent )",
            "score": 99.30818939208984,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , NodeCaMeL",
            "score": 99.41126844618056,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false : t.inGlobalScope( ) ;",
            "score": 99.38915337456598,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false : t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.in.in.in.in &&",
            "score": 99.34934369255515,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in . in . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( '') ;",
            "score": 99.32185872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 't find a visibility modifier; assume it') ;",
            "score": 99.32185872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 'a') ;",
            "score": 99.32185872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 'a = ...') ;",
            "score": 99.32185872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 'a.b') ;",
            "score": 99.32185872395833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.30813419117646,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , key )",
            "score": 99.44903564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , key )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( getprop , Node parent , Node parent ) {",
            "score": 99.4102783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( get@@ prop , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , short",
            "score": 99.37273848684211,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , short",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) is",
            "score": 99.34898466222427,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) is",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t.isOverride =",
            "score": 99.32561492919922,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( NodeTraversal t , Node parent , Node parent )",
            "score": 99.41002133018092,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private boolean isOverride = t.inGlobalScope( ) {",
            "score": 99.38836669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "public private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , if(",
            "score": 99.37237227590461,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ? t",
            "score": 99.34873334099265,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ? t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Override.inGlobalScope( ) ;",
            "score": 99.3251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Override . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( parent )",
            "score": 99.31990051269531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node vars ,",
            "score": 99.30734432444854,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node vars ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node t , Node parent , Node parent )",
            "score": 99.50939263237848,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , String propertyName ) {",
            "score": 99.40989925986842,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isGlobal = t.inGlobalScope( ) ;",
            "score": 99.38819885253906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Scope isOverride = t.inGlobalScope( ) && &",
            "score": 99.34858254825367,
            "correctness": "uncompilable",
            "tokenized_patch": "Scope is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride = isOverride ;",
            "score": 99.32445475260417,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override = is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.in = t.in &&",
            "score": 99.31610514322917,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in = t . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Class parent )",
            "score": 99.3056281594669,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parent , int",
            "score": 99.50865478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) :",
            "score": 99.34849548339844,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean isOverride = t.inGlobalScope ;",
            "score": 99.32390950520833,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) ^",
            "score": 99.31918334960938,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ^",
            "failed_triggering": "0/2",
            "failed_non_triggering": "6"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope(",
            "score": 99.314990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.30511115579044,
            "correctness": "uncompilable",
            "tokenized_patch": "final check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.40847439236111,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node Node getprop ,",
            "score": 99.37141498766448,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( boolean",
            "score": 99.34805501302084,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & &",
            "score": 99.3142598470052,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Type checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.30345243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "Type check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node l , Node getprop , Node parent )",
            "score": 99.50620631167763,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node l , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.444873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , boolean isOverride )",
            "score": 99.40831841362848,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && ) ;",
            "score": 99.38730197482639,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.37101527622768,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( scope ,",
            "score": 99.34782858455883,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( '',",
            "score": 99.31665802001953,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 't find a visibility modifier; assume it',",
            "score": 99.31665802001953,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a',",
            "score": 99.31665802001953,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a = ...',",
            "score": 99.31665802001953,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( 'a.b',",
            "score": 99.31665802001953,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = T.inGlobalScope( ) &&",
            "score": 99.31356048583984,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = T . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , -1,",
            "score": 99.30201631433823,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , - 1 ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal( ) {",
            "score": 99.4080874794408,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.37040630139802,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Enumeration isOverride = t.inGlobalScope( ) && &",
            "score": 99.3475700827206,
            "correctness": "uncompilable",
            "tokenized_patch": "Enumeration is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ; ) ;",
            "score": 99.32196044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ; ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = n.inGlobalScope( ) &&",
            "score": 99.31338500976562,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = n . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object parent , NodeTraversal t )",
            "score": 99.30167882582721,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object parent , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node name , Node parent )",
            "score": 99.50589792351974,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node name , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.44462076822917,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node node )",
            "score": 99.40775981702302,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( true &&",
            "score": 99.34735466452206,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = true ;",
            "score": 99.32167271205357,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope | &",
            "score": 99.315576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope | &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = t.in.in.",
            "score": 99.31309509277344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = t . in . in .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , LinkedCaMeL",
            "score": 99.30144500732422,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Linked CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , parent )",
            "score": 99.44446411132813,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.36967198988971,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( {",
            "score": 99.34703826904297,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope ;",
            "score": 99.3203369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope ;",
            "score": 99.315576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = original.inGlobalScope( ) &&",
            "score": 99.3123550415039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = original . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( void checkPropertyVisibility ,",
            "score": 99.30143737792969,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( void check CaMeL Property CaMeL Visibility ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.50407104492187,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.40676540798611,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Object getprop ) {",
            "score": 99.36937798394098,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = = t.inGlobalScope ;",
            "score": 99.320068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = ! t.isOverride = true ;",
            "score": 99.31470489501953,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ! t . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = function.inGlobalScope( ) &&",
            "score": 99.31230926513672,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = function . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean current )",
            "score": 99.30093204273896,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean current )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node parent ) {",
            "score": 99.50353285845588,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Object getprop ,",
            "score": 99.36869089226974,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getGlobalScope( ) ?",
            "score": 99.3465576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isGlobal( ) ;",
            "score": 99.31948416573661,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Global ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isOverride( ) && &",
            "score": 99.31352233886719,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Override ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T getprop , Node parent ,",
            "score": 99.29946899414062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , Node parent ) {",
            "score": 99.4061638327206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String property ) {",
            "score": 99.36817762586806,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != t.inGlobalScope ;",
            "score": 99.31940460205078,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node function ,",
            "score": 99.29862706801471,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node function ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node ref , Node getprop , Node parent )",
            "score": 99.502685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node ref , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , int ) {",
            "score": 99.40555612664474,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , int ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Object getprop ,",
            "score": 99.36762438322368,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( || ;",
            "score": 99.34579647288604,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & true &&",
            "score": 99.31868489583333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private public void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.29855143229166,
            "correctness": "uncompilable",
            "tokenized_patch": "private public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.502587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t , final Node getprop )",
            "score": 99.441650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent , NodeCaMeL",
            "score": 99.40554970189145,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && | ?",
            "score": 99.38370768229167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && | ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t , Object parent ) {",
            "score": 99.36754086143092,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( System.",
            "score": 99.3457892922794,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( System .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = isOverride ;",
            "score": 99.3182373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( value )",
            "score": 99.31251525878906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( value )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( &&",
            "score": 99.31057942708334,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , long property ,",
            "score": 99.29834702435662,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , long property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node key , Node getprop , Node parent )",
            "score": 99.50237073396382,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node key , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal parent ) {",
            "score": 99.405517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in inGlobalScope( ) ;",
            "score": 99.38340928819444,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected String checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.36727102179276,
            "correctness": "uncompilable",
            "tokenized_patch": "protected String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Throwable",
            "score": 99.3457260131836,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Throwable",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & & & & & &",
            "score": 99.31044006347656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , / case",
            "score": 99.29795927159927,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , / case",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private String checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.50126567639802,
            "correctness": "uncompilable",
            "tokenized_patch": "private String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName , NodeTraversal t )",
            "score": 99.40518991570724,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( this ) &&",
            "score": 99.38338216145833,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop ) { }",
            "score": 99.36661569695724,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) { }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( false ||",
            "score": 99.3453369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && & & &",
            "score": 99.31201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true ,",
            "score": 99.30999755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.29792336856617,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String name , Node getprop , Node parent )",
            "score": 99.5010922080592,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String name , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node node )",
            "score": 99.40477837456598,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ; Scope )",
            "score": 99.3136215209961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ; Scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( scope )",
            "score": 99.31177520751953,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && ?",
            "score": 99.30950927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.40431841681985,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true : t.inGlobalScope( ) ;",
            "score": 99.38299560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true : t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( module )",
            "score": 99.34513585707721,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( module )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null &&",
            "score": 99.3129150390625,
            "correctness": "plausible",
            "tokenized_patch": "boolean is CaMeL Override = t != null &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "boolean isOverride = isOverride = isOverride && &",
            "score": 99.31162923177084,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = is CaMeL Override && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & & *& & &",
            "score": 99.30872344970703,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & & * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , getprop ,",
            "score": 99.297607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private protected void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.44005126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean parent , Node getprop , Node parent )",
            "score": 99.40419514973958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public protected void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.36447625411184,
            "correctness": "uncompilable",
            "tokenized_patch": "public protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getGlobalScope( ) ,",
            "score": 99.34484145220588,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.inGlobalScope( ) ;",
            "score": 99.31005096435547,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = ) && inGlobalScope( ) &&",
            "score": 99.3071517944336,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = ) && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( final NodeTraversal t ,",
            "score": 99.29743194580078,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node getprop )",
            "score": 99.40403119255515,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.in.in.isOverride( ) ;",
            "score": 99.38241238064236,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in . in . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object parent ) {",
            "score": 99.36445168887867,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean isOverride = t.inGlobalScope(",
            "score": 99.34381866455078,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( int inGlobalScope( ) &&",
            "score": 99.3078384399414,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( int in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & *& & & & &",
            "score": 99.30697631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & * & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int }",
            "score": 99.29742431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , String property ,",
            "score": 99.49866943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , String property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.40369330512152,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Var",
            "score": 99.34265899658203,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Var",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != inGlobalScope( ) ;",
            "score": 99.3087387084961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( node )",
            "score": 99.3074722290039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context null , Node getprop ,",
            "score": 99.29705810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context null , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop ) {",
            "score": 99.49797712053571,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context t , Node getprop , Node parent ,",
            "score": 99.4373843544408,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName )",
            "score": 99.40297154017857,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope(",
            "score": 99.3812255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Class getprop ,",
            "score": 99.3629214638158,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Class get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer isOverride = t.inGlobalScope( ) && &",
            "score": 99.34217744715073,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isOverride =",
            "score": 99.30846228966347,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Vector isOverride = t.inGlobalScope( ) &&",
            "score": 99.30548095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "Vector is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( void checkPropertyVisibility )",
            "score": 99.29673767089844,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( void check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , final Node parent ) {",
            "score": 99.40231805098684,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false t.inGlobalScope( )",
            "score": 99.34173224954044,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope == &",
            "score": 99.30586242675781,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope == &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = mode.inGlobalScope( ) &&",
            "score": 99.30442810058594,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = mode . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.29559685202206,
            "correctness": "uncompilable",
            "tokenized_patch": "public check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Type checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.43698120117188,
            "correctness": "uncompilable",
            "tokenized_patch": "Type check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , NodeTraversal t )",
            "score": 99.40220133463542,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = mode.inGlobalScope( ) ;",
            "score": 99.38091278076172,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = mode . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ) Override",
            "score": 99.34117934283088,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) Override",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & -1;",
            "score": 99.30793762207031,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & - 1 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Integer isOverride = t.inGlobalScope( ) &&",
            "score": 99.30429077148438,
            "correctness": "uncompilable",
            "tokenized_patch": "Integer is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop ,",
            "score": 99.2952411358173,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.40199038856908,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected static boolean isOverride = t.inGlobalScope( )",
            "score": 99.38083065257354,
            "correctness": "uncompilable",
            "tokenized_patch": "protected static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.36244603207237,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) || &",
            "score": 99.34067670036765,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & *& & & & &",
            "score": 99.30399322509766,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & * & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node namespace ,",
            "score": 99.29492905560662,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node namespace ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node scope , Node getprop , Node parent )",
            "score": 99.40143500434027,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node scope , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected abstract boolean isOverride = t.inGlobalScope( ) ;",
            "score": 99.38047960069444,
            "correctness": "uncompilable",
            "tokenized_patch": "protected abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void check ) {",
            "score": 99.36138916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void check ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? t ,",
            "score": 99.3398796530331,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean inGlobalScope ) && &",
            "score": 99.30363464355469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.getprop ,",
            "score": 99.29446847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , Node getprop , Node parent ,",
            "score": 99.49448113692434,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.40117730034723,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = getGlobalScope( )",
            "score": 99.33982631138393,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = ).inGlobalScope( ) ;",
            "score": 99.30316925048828,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) {",
            "score": 99.30220031738281,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( null , Node getprop ,",
            "score": 99.29441731770834,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( null , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ,",
            "score": 99.4942626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object getprop ) {",
            "score": 99.39987521701389,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected abstract void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.361083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) *",
            "score": 99.33916159237133,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( *||",
            "score": 99.3031234741211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( * ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = & &",
            "score": 99.30188751220703,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.2937873391544,
            "correctness": "uncompilable",
            "tokenized_patch": "protected check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node id , Node parent , Node parent )",
            "score": 99.49286566840277,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node id , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Property checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.43536987304688,
            "correctness": "uncompilable",
            "tokenized_patch": "Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean getprop , Node parent , Node parent )",
            "score": 99.39866129557292,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.3610775596217,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = Scope.inGlobalScope( ) ;",
            "score": 99.3382927389706,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = ).inGlobalScope( ) &&",
            "score": 99.30306803385416,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ; &&",
            "score": 99.30123697916666,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ; &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , scope ,",
            "score": 99.29363250732422,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node source , Node getprop , Node getprop ,",
            "score": 99.49219360351563,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node source , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node parent ) ;",
            "score": 99.39773220486111,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean dereference ) {",
            "score": 99.35975477430556,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean dereference ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( false )",
            "score": 99.33762494255515,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = System.inGlobalScope( )",
            "score": 99.30097961425781,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = System . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( parent , NodeTraversal t ,",
            "score": 99.29258728027344,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( parent , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node getprop , Node parent ,",
            "score": 99.49185180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t ,( NodeTraversal t )",
            "score": 99.43521728515626,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node getprop , int",
            "score": 99.39772542317708,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false : t.inGlobalScope( ) &&",
            "score": 99.37702094184027,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false : t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , static getprop ) {",
            "score": 99.3593685752467,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , static get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( && |",
            "score": 99.33757467830883,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & &",
            "score": 99.30238560267857,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & &",
            "score": 99.30230158025569,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && &",
            "score": 99.3005038174716,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Class node ,",
            "score": 99.29249482996323,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Class node ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t , ;",
            "score": 99.43466186523438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t , ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.3974968405331,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Object checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.35931717722039,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ? t",
            "score": 99.33751723345588,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Mode.inGlobalScope( ) ;",
            "score": 99.30039978027344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Mode . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , long )",
            "score": 99.29244232177734,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , long )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node name , Node parent , Node parent )",
            "score": 99.49019368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node name , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.43406372070312,
            "correctness": "uncompilable",
            "tokenized_patch": "null check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean validator ) {",
            "score": 99.39732360839844,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) && **",
            "score": 99.37700737847223,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && * *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.35928780691964,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = get.inGlobalScope( )",
            "score": 99.33734130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Bucket isOverride = t.inGlobalScope( ) &&",
            "score": 99.3019790649414,
            "correctness": "uncompilable",
            "tokenized_patch": "Bucket is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope.) ;",
            "score": 99.30146026611328,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope . ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Scope.inGlobalScope( ) ;",
            "score": 99.29966735839844,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object property ,",
            "score": 99.29152544806985,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.43380126953124,
            "correctness": "uncompilable",
            "tokenized_patch": "final check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean getprop , Node parent ) {",
            "score": 99.39720243566177,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.type.inGlobalScope( ) ;",
            "score": 99.37589518229167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . type . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static final void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.35883532072368,
            "correctness": "uncompilable",
            "tokenized_patch": "static final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = n.inGlobalScope( )",
            "score": 99.33721923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = n . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Method",
            "score": 99.30169270833333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Method",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride( ) && & &",
            "score": 99.2992935180664,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object getprop , Node parent )",
            "score": 99.29150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Object parent )",
            "score": 99.3969482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = parent.inGlobalScope( )",
            "score": 99.33707427978516,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride( ) &&(",
            "score": 99.29959106445312,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ) return",
            "score": 99.29719543457031,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) return",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( getprop , Node getprop )",
            "score": 99.29138946533203,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( get@@ prop , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node n , Node parent , Node parent )",
            "score": 99.48933919270833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node n , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.39671495225694,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( id ) ;",
            "score": 99.37542365579044,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( id ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.35713276110198,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Var",
            "score": 99.33692169189453,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Var",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( / ?",
            "score": 99.29965209960938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( / ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isOverride( ) &&",
            "score": 99.2969482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Override ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void parent ,",
            "score": 99.29120950137867,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.43060302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node NodeTraversal t , Node getprop ,",
            "score": 99.35701711554276,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) :",
            "score": 99.33643296185662,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( false ) ;",
            "score": 99.29945373535156,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.28957232306985,
            "correctness": "uncompilable",
            "tokenized_patch": "null check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node parent , Node getprop , Node parent )",
            "score": 99.39666069878473,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Object getprop ,",
            "score": 99.3569271689967,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = value.inGlobalScope( )",
            "score": 99.33634185791016,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = value . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & & &",
            "score": 99.2992451985677,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & false &&",
            "score": 99.29598795572916,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Object parent , NodeTraversal t ,",
            "score": 99.28915584788604,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Object parent , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) return",
            "score": 99.42955322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) return",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent , Node parentCaMeL",
            "score": 99.39618278952206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , final Node parent ,",
            "score": 99.35672157689145,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( false ) &&",
            "score": 99.29899597167969,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ; ) {",
            "score": 99.29557800292969,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ; ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , short parent ,",
            "score": 99.28867474724265,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , short parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , final NodeTraversal t )",
            "score": 99.42871704101563,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isOverride )",
            "score": 99.39613694411058,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , Object",
            "score": 99.35604055304276,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( t ,",
            "score": 99.33608111213235,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ref.inGlobalScope( ) &&",
            "score": 99.29872131347656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ref . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && &",
            "score": 99.2927579012784,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.28851318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Object parent ) {",
            "score": 99.39583093979779,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( boolean type ) &&",
            "score": 99.37369791666667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( boolean type ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node property ,",
            "score": 99.35502355238971,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public isOverride = t.inGlobalScope( )",
            "score": 99.33606770833333,
            "correctness": "uncompilable",
            "tokenized_patch": "public is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( && :",
            "score": 99.29841613769531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Token {",
            "score": 99.29288482666016,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Token {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride = false ;",
            "score": 99.29222005208334,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T getprop , Node getprop ,",
            "score": 99.28786333869485,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node getprop , Node parent ,",
            "score": 99.4853271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.39478975183823,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , boolean dereference ) {",
            "score": 99.35498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean dereference ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = static.inGlobalScope( ) &&",
            "score": 99.29741668701172,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = static . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean inGlobalScope ) {",
            "score": 99.29274088541666,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( true , NodeTraversal t ,",
            "score": 99.2877426147461,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( true , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( null , Node getprop , Node parent ) {",
            "score": 99.39428032769098,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( null , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.3542839499081,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( ) boolean",
            "score": 99.33551384420956,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) boolean",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride =( t.inGlobalScope( ) &&",
            "score": 99.29719543457031,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && & &",
            "score": 99.29263305664062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object current , NodeTraversal t ,",
            "score": 99.28715245863971,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object current , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node id ) {",
            "score": 99.48365614149306,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( Node getprop , Node parent , Node parent )",
            "score": 99.39422607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Type getprop ,",
            "score": 99.35380045572917,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ?1",
            "score": 99.33416389016544,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? 1",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node isOverride = t.inGlobalScope( ) &&",
            "score": 99.29692077636719,
            "correctness": "uncompilable",
            "tokenized_patch": "Node is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && &",
            "score": 99.29115125868056,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride ;",
            "score": 99.28982543945312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node getprop ,",
            "score": 99.2870624248798,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String propertyName , Node parent , Node parent ,",
            "score": 99.4834228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Context parent ) {",
            "score": 99.39374856387867,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Context parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( ) && & &&",
            "score": 99.37245686848958,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) && & &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.35337201286765,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false &&",
            "score": 99.29570007324219,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = false &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "boolean isOverride = isOverride &&",
            "score": 99.29041137695313,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "float isOverride = t.inGlobalScope( ) ;",
            "score": 99.28937530517578,
            "correctness": "uncompilable",
            "tokenized_patch": "float is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( void checkPropertyVisibility )",
            "score": 99.28704833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( void check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Object parent )",
            "score": 99.42582397460937,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Style parent ) {",
            "score": 99.39352416992188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Style parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.35296630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "public static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( parent )",
            "score": 99.33385512408088,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & *",
            "score": 99.2953213778409,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope >= ) ;",
            "score": 99.28977966308594,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope >= ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null && t != null && &",
            "score": 99.28885650634766,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null && t != null && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String property )",
            "score": 99.28703038832721,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal parent , NodeTraversal t )",
            "score": 99.4256527549342,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal parent , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.39345415900735,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope( ) ||",
            "score": 99.37052408854167,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true.inGlobalScope( ) {",
            "score": 99.33330939797794,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope ;",
            "score": 99.28976876395089,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "byte isOverride = t.inGlobalScope( ) ;",
            "score": 99.28709411621094,
            "correctness": "uncompilable",
            "tokenized_patch": "byte is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String getprop , Node parent ,",
            "score": 99.28699493408203,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node getprop , Node getprop ,",
            "score": 99.481494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in inGlobalScope( ) &&",
            "score": 99.37047621783088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) && t",
            "score": 99.33315142463235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) && t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( this ||",
            "score": 99.29475402832031,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean checkPropertyVisibility ,",
            "score": 99.2866439819336,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.39325714111328,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = & t.inGlobalScope( ) &&",
            "score": 99.29463195800781,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = & t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , float property ,",
            "score": 99.28657082950367,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , float property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.isOverride = false ;",
            "score": 99.28595377604167,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Style parent ) {",
            "score": 99.39320283777573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Style parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope( this )",
            "score": 99.36956108940973,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Boolean property ) {",
            "score": 99.35209147135417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Boolean property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope(0)",
            "score": 99.33307961856617,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 0 )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = true && & &",
            "score": 99.28820037841797,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = true && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & & &",
            "score": 99.28543526785714,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node parent ,",
            "score": 99.28535730698529,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object parent , Node parent ,",
            "score": 99.47891395970395,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.39199649586396,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String getprop , Node getprop ,",
            "score": 99.28514188878677,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Scope isOverride = t.inGlobalScope( ) ;",
            "score": 99.28360748291016,
            "correctness": "uncompilable",
            "tokenized_patch": "Scope is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , final Node getprop )",
            "score": 99.423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean isConstructor ) {",
            "score": 99.39156901041666,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Constructor ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Token",
            "score": 99.29360961914062,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Token",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Override.inGlobalScope( ) &&",
            "score": 99.2878646850586,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Override . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node scope ,",
            "score": 99.28509880514706,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != inGlobalScope( ) &&",
            "score": 99.2834701538086,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node getprop , Object parent ,",
            "score": 99.47688598632813,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public protected boolean isOverride = t.inGlobalScope( ) &&",
            "score": 99.36760118272569,
            "correctness": "uncompilable",
            "tokenized_patch": "public protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal < NodeTraversal1,",
            "score": 99.35114203559027,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal < Node CaMeL Traversal 1 ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ) int",
            "score": 99.33269186580883,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Context",
            "score": 99.29331868489584,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Context",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Mode.inGlobalScope( ) &&",
            "score": 99.28768157958984,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Mode . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( extends NodeTraversal t ,",
            "score": 99.28487141927083,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( extends Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.inGlobalScope ;",
            "score": 99.283349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type parent , Node parent ,",
            "score": 99.47504272460938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) ;",
            "score": 99.42158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , final Node parent )",
            "score": 99.38931094898896,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true : t.inGlobalScope( ) &&",
            "score": 99.36692301432292,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true : t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "@ isOverride = t.inGlobalScope( ) && &",
            "score": 99.3326416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "@ is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int isOverride = t.inGlobalScope( )",
            "score": 99.28732299804688,
            "correctness": "uncompilable",
            "tokenized_patch": "private int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.28470284598214,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.420947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "static check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int getprop , Node parent , Node parent )",
            "score": 99.38907877604167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void void checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.35055202907986,
            "correctness": "uncompilable",
            "tokenized_patch": "void void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( t ,",
            "score": 99.33249798943015,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( *?",
            "score": 99.29116821289062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( * ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Factory t , Node getprop ,",
            "score": 99.2845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Factory t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "double isOverride = t.inGlobalScope( ) ;",
            "score": 99.28321838378906,
            "correctness": "uncompilable",
            "tokenized_patch": "double is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , String property )",
            "score": 99.38885498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , String property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal node , Node getprop ,",
            "score": 99.35007731119792,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal node , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ''.inGlobalScope( ) &&",
            "score": 99.29103088378906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 't find a visibility modifier; assume it'.inGlobalScope( ) &&",
            "score": 99.29103088378906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 'a'.inGlobalScope( ) &&",
            "score": 99.29103088378906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 'a = ...'.inGlobalScope( ) &&",
            "score": 99.29103088378906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 'a.b'.inGlobalScope( ) &&",
            "score": 99.29103088378906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.inGlobalScope( ) {",
            "score": 99.28710174560547,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride = false ;",
            "score": 99.28286307198661,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean checkPropertyVisibility )",
            "score": 99.28277587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean } ) {",
            "score": 99.38872213924633,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean } ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.inGlobalScope( ) ||",
            "score": 99.36623965992646,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & & ?",
            "score": 99.29085286458333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride( ) && &",
            "score": 99.28680419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Object getprop , Node parent )",
            "score": 99.28169250488281,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String getprop , Node parent ) {",
            "score": 99.38780212402344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope || &",
            "score": 99.28644205729167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = ) ;",
            "score": 99.282373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node n ) {",
            "score": 99.47315809461806,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , void parent ) {",
            "score": 99.38722737630208,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( this ) ;",
            "score": 99.36597357855902,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.34861246744792,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && inGlobalScope( ) && &",
            "score": 99.33185173483456,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true &&",
            "score": 99.286376953125,
            "correctness": "plausible",
            "tokenized_patch": "boolean is CaMeL Override = true &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "public boolean isOverride = inGlobalScope( ) ;",
            "score": 99.28162434895833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility(( NodeTraversal t ,",
            "score": 99.28055826822917,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node type ) {",
            "score": 99.47301567925348,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private NodeTraversal checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.4197021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node CaMeL Traversal check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.38689108455883,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = source.inGlobalScope( ) ;",
            "score": 99.36548614501953,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = source . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.34830729166667,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.in.in.in.",
            "score": 99.33172200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in . in . in .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( '') &&",
            "score": 99.28939056396484,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( 't find a visibility modifier; assume it') &&",
            "score": 99.28939056396484,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( 'a') &&",
            "score": 99.28939056396484,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( 'a = ...') &&",
            "score": 99.28939056396484,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( 'a.b') &&",
            "score": 99.28939056396484,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false ;",
            "score": 99.28384060329861,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == inGlobalScope( ) ;",
            "score": 99.28141784667969,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop ,",
            "score": 99.28021240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ,",
            "score": 99.41890869140624,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal node , Node parent ) {",
            "score": 99.38585707720588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal node , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( final Node getprop , final Node parent ) {",
            "score": 99.34810384114583,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Name",
            "score": 99.28857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Name",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( '') &&",
            "score": 99.28369954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 't find a visibility modifier; assume it') &&",
            "score": 99.28369954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a') &&",
            "score": 99.28369954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a = ...') &&",
            "score": 99.28369954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a.b') &&",
            "score": 99.28369954427083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & & false ;",
            "score": 99.28085327148438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object checkPropertyVisibility ,",
            "score": 99.2797622680664,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object check CaMeL Property CaMeL Visibility ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.38542624080883,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private isOverride = t.inGlobalScope( ) && &",
            "score": 99.33076746323529,
            "correctness": "uncompilable",
            "tokenized_patch": "private is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Dimension isOverride = t.inGlobalScope( ) &&",
            "score": 99.28821563720703,
            "correctness": "uncompilable",
            "tokenized_patch": "Dimension is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.getGlobalScope( ) ;",
            "score": 99.28071594238281,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.2797607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node name ) {",
            "score": 99.47081163194444,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node node ) {",
            "score": 99.38480377197266,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.34688991970486,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope =(",
            "score": 99.33055114746094,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) !=",
            "score": 99.28755950927734,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride = isOverride &&",
            "score": 99.27871907552084,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override = is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , match )",
            "score": 99.41786499023438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , match )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Type parent ) {",
            "score": 99.38447570800781,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.inGlobalScope( this ) ;",
            "score": 99.36170151654412,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node group ,",
            "score": 99.34666532628677,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node group ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( && )",
            "score": 99.33031508501838,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope.) &&",
            "score": 99.27912139892578,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope . ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , AbstractCaMeL",
            "score": 99.27806854248047,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Abstract CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node scope , Node parent ,",
            "score": 99.47018432617188,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node scope , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract void checkPropertyVisibility( Node getprop , Node parent ) ;",
            "score": 99.34650336371527,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = getGlobalScope( ) &&",
            "score": 99.33017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && t.inGlobalScope(",
            "score": 99.28723907470703,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( namespace , NodeTraversal t ,",
            "score": 99.27764129638672,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( namespace , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && & & & &",
            "score": 99.27406529017857,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node NodeTraversal t , NodeTraversal t )",
            "score": 99.41640625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node getprop ) {",
            "score": 99.38296169704861,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ? *",
            "score": 99.32943905101104,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & *",
            "score": 99.2813720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context true , Node getprop ,",
            "score": 99.27701568603516,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context true , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = !.inGlobalScope( ) ;",
            "score": 99.2757797241211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , final NodeTraversal t )",
            "score": 99.41636962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( ObjectType objectType ) {",
            "score": 99.38294175091912,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.in.in.in &&",
            "score": 99.32941080729167,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & ?",
            "score": 99.27865600585938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.2757080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isOverride = false ;",
            "score": 99.2723876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.46864149305556,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final private void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.38285319010417,
            "correctness": "uncompilable",
            "tokenized_patch": "final private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.inGlobalScope( ) {",
            "score": 99.36004997702206,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "float isOverride = t.inGlobalScope( ) && &",
            "score": 99.32929543887867,
            "correctness": "uncompilable",
            "tokenized_patch": "float is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t , protected",
            "score": 99.27486419677734,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , protected",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Class",
            "score": 99.27144368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Class",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node n , Node parent ,",
            "score": 99.46773681640624,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node get , Node parent ,",
            "score": 99.41569213867187,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal n , Node parent ) {",
            "score": 99.38243192784927,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal n , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.34541151258681,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t t.inGlobalScope( )",
            "score": 99.32928825827206,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( scope , Node getprop ,",
            "score": 99.2741943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( scope , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & &",
            "score": 99.27391639122597,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = t.in ;",
            "score": 99.26953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = t . in ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( '') &&",
            "score": 99.26806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 't find a visibility modifier; assume it') &&",
            "score": 99.26806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 'a') &&",
            "score": 99.26806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 'a = ...') &&",
            "score": 99.26806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.startsWith( 'a.b') &&",
            "score": 99.26806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . starts CaMeL With ( $STRING$ ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.38234576056985,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Object property ) {",
            "score": 99.34501817491319,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = get.inGlobalScope( ) && &",
            "score": 99.32903693704044,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , try ,",
            "score": 99.27379608154297,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , try ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & ==0;",
            "score": 99.27299499511719,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & == 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( /",
            "score": 99.2694091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( /",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && &",
            "score": 99.26609293619792,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ,( )",
            "score": 99.4154052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , final Node parent ) {",
            "score": 99.38090245863971,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , final Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = list.inGlobalScope( ) ;",
            "score": 99.35685729980469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = list . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.34449869791666,
            "correctness": "uncompilable",
            "tokenized_patch": "static private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean t , Node getprop ,",
            "score": 99.27378845214844,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int isOverride = t.inGlobalScope( )",
            "score": 99.2724380493164,
            "correctness": "uncompilable",
            "tokenized_patch": "public int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node parent , Node parent ,",
            "score": 99.46672620271382,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , private )",
            "score": 99.41512451171874,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , private )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , int )",
            "score": 99.37999052159927,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , int )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isGlobal = t.inGlobalScope( ) &&",
            "score": 99.35658264160156,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Global = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.34444986979166,
            "correctness": "uncompilable",
            "tokenized_patch": "public private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? true :",
            "score": 99.32859173943015,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String getprop , Node parent )",
            "score": 99.27351379394531,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &0Override ;",
            "score": 99.27218627929688,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & 0 Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = isOverride = isOverride &&",
            "score": 99.26476236979167,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = is CaMeL Override = is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , private Node getprop )",
            "score": 99.41509399414062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , private Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String propertyName , Node parent ) {",
            "score": 99.37953694661458,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.inGlobalScope(",
            "score": 99.35626220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.27313232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t == null ?",
            "score": 99.27162863991477,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t == null ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isGlobal = false ;",
            "score": 99.26173618861607,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Global = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node source , Node getprop , Node parent ,",
            "score": 99.46601947985198,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node source , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , type )",
            "score": 99.41502685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , final Node parent )",
            "score": 99.37950942095588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( module , NodeTraversal t ,",
            "score": 99.2725601196289,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( module , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride( ) ;",
            "score": 99.27130126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in = t.in ;",
            "score": 99.26454264322916,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in = t . in ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.isOverride = true ;",
            "score": 99.261181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object getprop , Node parent ,",
            "score": 99.46449584960938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Property checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.4150146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( , Node getprop , Node parent ) {",
            "score": 99.34383816189236,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && t.isOverride =",
            "score": 99.27025604248047,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & &",
            "score": 99.26432495117187,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride =( ) ;",
            "score": 99.26109212239584,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) ;",
            "score": 99.41500244140624,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , Object parent ) {",
            "score": 99.37928682215073,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = parent.inGlobalScope( ) &&",
            "score": 99.35548311121323,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , final Node parent ,",
            "score": 99.34358045789931,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , final Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope3( )",
            "score": 99.32781623391544,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope $NUMBER$ ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope2( )",
            "score": 99.32781623391544,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope $NUMBER$ ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope2008( )",
            "score": 99.32781623391544,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope $NUMBER$ ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = true.inGlobalScope( ) ;",
            "score": 99.26972961425781,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = inGlobalScope( ) {",
            "score": 99.25970052083333,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop , Node parent ) throws",
            "score": 99.46389770507812,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void parent , Node parent ,",
            "score": 99.41497802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.37875366210938,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope(0) ;",
            "score": 99.35540412454044,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 0 ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal parent , Node getprop ,",
            "score": 99.34331597222223,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = ! t.getGlobalScope( )",
            "score": 99.32699764476104,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ! t . get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean isOverride ,",
            "score": 99.27142333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ''.inGlobalScope( ) ;",
            "score": 99.2679672241211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 't find a visibility modifier; assume it'.inGlobalScope( ) ;",
            "score": 99.2679672241211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 'a'.inGlobalScope( ) ;",
            "score": 99.2679672241211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 'a = ...'.inGlobalScope( ) ;",
            "score": 99.2679672241211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = 'a.b'.inGlobalScope( ) ;",
            "score": 99.2679672241211,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = $STRING$ . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = true.inGlobalScope( ) &&",
            "score": 99.26167805989583,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getScope( ) ;",
            "score": 99.25904947916666,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , column )",
            "score": 99.41494750976562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , column )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = null.inGlobalScope( )",
            "score": 99.32683563232422,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = null . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( private NodeTraversal t ,",
            "score": 99.2707275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( private Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & &3;",
            "score": 99.2677230834961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & &2;",
            "score": 99.2677230834961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & &2008;",
            "score": 99.2677230834961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( this &&",
            "score": 99.26001790364583,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isOverride = t.inGlobalScope( )",
            "score": 99.258984375,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.46138080797698,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , String propertyName ) {",
            "score": 99.37820095486111,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private char checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.34261745876736,
            "correctness": "uncompilable",
            "tokenized_patch": "private char check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( void checkPropertyVisibility ,",
            "score": 99.2706298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( void check CaMeL Property CaMeL Visibility ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in( ) ;",
            "score": 99.267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = inGlobalScope( ) &&",
            "score": 99.258544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node t , Node parent , Node parent )",
            "score": 99.46137152777777,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = ) &&",
            "score": 99.35431780133929,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal n , Node getprop ,",
            "score": 99.34259711371527,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal n , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node isOverride = t.inGlobalScope( ) ;",
            "score": 99.26687622070312,
            "correctness": "uncompilable",
            "tokenized_patch": "Node is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope !=",
            "score": 99.25783865792411,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , void parent )",
            "score": 99.37776947021484,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( true ) ;",
            "score": 99.35421932444854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( true ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Bucket isOverride = t.inGlobalScope( ) && &",
            "score": 99.32615751378677,
            "correctness": "uncompilable",
            "tokenized_patch": "Bucket is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T getprop , Node parent )",
            "score": 99.27011108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null ?",
            "score": 99.26653442382812,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.46056450737848,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.41282348632812,
            "correctness": "uncompilable",
            "tokenized_patch": "private static boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Object property )",
            "score": 99.37728542751736,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object property )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = getGlobalScope( ) ;",
            "score": 99.3541259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , LocalCaMeL",
            "score": 99.26946258544922,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Local CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isGlobal =( ) ;",
            "score": 99.25572102864584,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Global = ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & & & &",
            "score": 99.25358363560268,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , int getprop ,",
            "score": 99.4602783203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , int get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Object getprop , Node parent , Node parent )",
            "score": 99.37709554036458,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public public boolean isOverride = t.inGlobalScope( )",
            "score": 99.35356588924633,
            "correctness": "uncompilable",
            "tokenized_patch": "public public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , Node node ) {",
            "score": 99.3414306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( || |",
            "score": 99.3254753561581,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.isOverride =",
            "score": 99.2656719501202,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = inGlobalScope( ) {",
            "score": 99.25550130208333,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node node , NodeTraversal t , Node parent ,",
            "score": 99.46026000976562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node node , Node CaMeL Traversal t , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Node getprop )",
            "score": 99.41240491365132,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.37693786621094,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ?(",
            "score": 99.32498168945312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object checkPropertyVisibility ,",
            "score": 99.26920318603516,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object check CaMeL Property CaMeL Visibility ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = t.isOverride( ) ;",
            "score": 99.2652587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride( ) &&",
            "score": 99.25533854166666,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & ;",
            "score": 99.25148518880208,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , function )",
            "score": 99.41138916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , function )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop ) {",
            "score": 99.37671770368304,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Object getprop ,",
            "score": 99.3404541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope(1)",
            "score": 99.32497989430146,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( 1 )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( '', Node getprop ,",
            "score": 99.26810709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 't find a visibility modifier; assume it', Node getprop ,",
            "score": 99.26810709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a', Node getprop ,",
            "score": 99.26810709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a = ...', Node getprop ,",
            "score": 99.26810709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( 'a.b', Node getprop ,",
            "score": 99.26810709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & ~",
            "score": 99.26457868303571,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & ~",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope +",
            "score": 99.25496128627232,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & *",
            "score": 99.25110973011364,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , boolean validator ) {",
            "score": 99.37647162543402,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal1, Node getprop ,",
            "score": 99.34042697482639,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal 1 , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride =( t.inGlobalScope( )",
            "score": 99.32483628216912,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.26793670654297,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null &&",
            "score": 99.26248168945312,
            "correctness": "wrong",
            "tokenized_patch": "boolean is CaMeL Override = t == null &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "3"
        },
        {
            "patch": "boolean isOverride = t.isOverride = false && &",
            "score": 99.253759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = false && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).inGlobalScope( ||",
            "score": 99.24954427083334,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.4109619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "public check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.37621392144098,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && inGlobalScope( ) {",
            "score": 99.32349350873162,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.26697540283203,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.toString( ) ;",
            "score": 99.26240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . to CaMeL String ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = inGlobalScope( ) &&",
            "score": 99.253759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean isOverride )",
            "score": 99.37621198381696,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Symbol getprop ,",
            "score": 99.33977593315973,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Symbol get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( + )",
            "score": 99.32342888327206,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( + )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Object getprop , Node parent ,",
            "score": 99.26670837402344,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &3&&",
            "score": 99.26199544270834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &2&&",
            "score": 99.26199544270834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &2008&&",
            "score": 99.26199544270834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ) ;",
            "score": 99.2523193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ).",
            "score": 99.24805559430804,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node parent , Node getprop ,",
            "score": 99.45787963867187,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node getprop ) {",
            "score": 99.37599182128906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.in.in.in.in.",
            "score": 99.32337143841912,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in . in . in . in .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = false ;",
            "score": 99.26175130208334,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = null ;",
            "score": 99.25224958147321,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = check.inGlobalScope( ) && &",
            "score": 99.32309139476104,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = check . in CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , this ,",
            "score": 99.26604461669922,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , this ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "E isOverride = t.inGlobalScope( ) ;",
            "score": 99.2607421875,
            "correctness": "uncompilable",
            "tokenized_patch": "E is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean inGlobalScope ) ;",
            "score": 99.2516357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = false && inGlobalScope( ) &&",
            "score": 99.24701334635417,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = false && in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Object getprop ,",
            "score": 99.45755615234376,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private.checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.40838012695312,
            "correctness": "uncompilable",
            "tokenized_patch": "private . check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = node.inGlobalScope( ) ;",
            "score": 99.35175637637867,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = node . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String current , Node getprop ,",
            "score": 99.26498413085938,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String current , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride( t ) ;",
            "score": 99.25966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ( t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope &",
            "score": 99.25135091145833,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , boolean isOverride )",
            "score": 99.40817260742188,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , String propertyName ) {",
            "score": 99.37549546185662,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( true )",
            "score": 99.32286161534927,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride( ) ;",
            "score": 99.25930989583334,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( t.inGlobalScope ,",
            "score": 99.2501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( t . in CaMeL Global CaMeL Scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.in = t.in ;",
            "score": 99.24611002604166,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in = t . in ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Property checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.40804250616776,
            "correctness": "uncompilable",
            "tokenized_patch": "public Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Location parent ) {",
            "score": 99.37531594669117,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Location parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = Scope.inGlobalScope( )",
            "score": 99.3208236694336,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , else {",
            "score": 99.26420593261719,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , else {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = false.inGlobalScope( ) &&",
            "score": 99.24480794270833,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = false . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent ) { }",
            "score": 99.45618960731908,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = type.inGlobalScope(",
            "score": 99.35054234095982,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal.NodeTraversal t ,",
            "score": 99.33681233723958,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal . Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = name.inGlobalScope( )",
            "score": 99.31977844238281,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = name . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , Node getprop )",
            "score": 99.26407623291016,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride = false ;",
            "score": 99.25831821986607,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope != )",
            "score": 99.24956868489583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope != )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Override isOverride = t.inGlobalScope(",
            "score": 99.24200439453125,
            "correctness": "uncompilable",
            "tokenized_patch": "Override is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Node parent , Node getprop , Node getprop ,",
            "score": 99.45521850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , namespace )",
            "score": 99.40714111328126,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , namespace )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int currentClass , Node parent ) {",
            "score": 99.37472713694854,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int current CaMeL Class , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.33658854166667,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( int",
            "score": 99.3178939819336,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( ObjectType objectType ,",
            "score": 99.26325225830078,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.toString( ) ;",
            "score": 99.25828450520834,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . to CaMeL String ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getScope( ) ;",
            "score": 99.24861653645833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & &",
            "score": 99.23862526633523,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.37400907628677,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = children.inGlobalScope( ) ;",
            "score": 99.35002136230469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = children . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.33525254991319,
            "correctness": "uncompilable",
            "tokenized_patch": "Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context type , Node getprop ,",
            "score": 99.2620849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context type , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized boolean isOverride = t.inGlobalScope( )",
            "score": 99.25665283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope &&",
            "score": 99.2479248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t inGlobalScope( ) &&",
            "score": 99.2384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , int",
            "score": 99.40611508018092,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node getprop ,",
            "score": 99.37366440716912,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( this ) &&",
            "score": 99.34983197380515,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( this ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static boolean checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.33423529730902,
            "correctness": "uncompilable",
            "tokenized_patch": "static boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final NodeTraversal t , protected",
            "score": 99.26171875,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , protected",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) &&(",
            "score": 99.25656127929688,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true( ) {",
            "score": 99.24671630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int isOverride = t.inGlobalScope(",
            "score": 99.23844691685268,
            "correctness": "uncompilable",
            "tokenized_patch": "int is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.t , Node getprop , Node parent )",
            "score": 99.40606689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) { return ;",
            "score": 99.373291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { return ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop , Node getprop ) {",
            "score": 99.334228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope(.",
            "score": 99.31742858886719,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean current , Node getprop ,",
            "score": 99.2615966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean current , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public static boolean isOverride = t.inGlobalScope ;",
            "score": 99.25615692138672,
            "correctness": "uncompilable",
            "tokenized_patch": "public static boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.getScope( ) &&",
            "score": 99.24532877604166,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . get CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & ?",
            "score": 99.23627263849431,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , boolean parent )",
            "score": 99.40454711914063,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean getprop , Node parent )",
            "score": 99.37310384114583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal l , Node getprop ,",
            "score": 99.33275689019098,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal l , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = type.inGlobalScope( )",
            "score": 99.31668090820312,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context '', Node getprop ,",
            "score": 99.26129913330078,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context 't find a visibility modifier; assume it', Node getprop ,",
            "score": 99.26129913330078,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context 'a', Node getprop ,",
            "score": 99.26129913330078,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context 'a = ...', Node getprop ,",
            "score": 99.26129913330078,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context 'a.b', Node getprop ,",
            "score": 99.26129913330078,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context $STRING$ , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & & true ;",
            "score": 99.2553939819336,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & & &",
            "score": 99.23276930588942,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent ) { {",
            "score": 99.45302220394737,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( Context NodeTraversal t , NodeTraversal t )",
            "score": 99.40407104492188,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Context Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = type.inGlobalScope( ) ;",
            "score": 99.34914981617646,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , type ,",
            "score": 99.26053619384766,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.isOverride =",
            "score": 99.2552490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope == )",
            "score": 99.24501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope == )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract boolean isOverride = t.inGlobalScope(",
            "score": 99.2321044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , module )",
            "score": 99.40306396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , module )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object getprop , Node parent ) {",
            "score": 99.37189797794117,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Runtime",
            "score": 99.3150634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Runtime",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object parent ,",
            "score": 99.25938415527344,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride ;",
            "score": 99.25502366286058,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = true &&",
            "score": 99.24478585379464,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ) ||",
            "score": 99.2288330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type parent ) {",
            "score": 99.44973415798611,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.37172564338235,
            "correctness": "uncompilable",
            "tokenized_patch": "int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = match.inGlobalScope( )",
            "score": 99.31468963623047,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = match . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static synchronized void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.2587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "private static synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = = t.inGlobalScope ;",
            "score": 99.25371551513672,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t( ) && & & & &",
            "score": 99.22443498883929,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ( ) && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Type parent , Node parent ,",
            "score": 99.44947574013158,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node getprop , Type parent )",
            "score": 99.40283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node node )",
            "score": 99.37150573730469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = scope.inGlobalScope( this ) ;",
            "score": 99.34754136029412,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , void getprop ,",
            "score": 99.33205837673611,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( {",
            "score": 99.31397247314453,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static static void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.25789642333984,
            "correctness": "uncompilable",
            "tokenized_patch": "private static static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void isOverride = t.inGlobalScope( )",
            "score": 99.25233459472656,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = ) ;",
            "score": 99.24169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope(",
            "score": 99.2242431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent ) { if(",
            "score": 99.44900673314145,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { if (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean objectType ) {",
            "score": 99.37147739955357,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node index ) {",
            "score": 99.33154975043402,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node index ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( T",
            "score": 99.31378936767578,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( T",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , )",
            "score": 99.25787760416667,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride( ) &&(",
            "score": 99.25231119791667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ( ) && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( t &&",
            "score": 99.2232666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Object parent ,",
            "score": 99.44810084292763,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private instanceof void checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.40137329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "private instanceof void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node parent ,",
            "score": 99.37122453962054,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Runtime",
            "score": 99.31348419189453,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Runtime",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , ?",
            "score": 99.25773111979167,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & & & &",
            "score": 99.24105631510416,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean checkPropertyVisibility )",
            "score": 99.36927795410156,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node id ,",
            "score": 99.3310905905331,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( throws",
            "score": 99.31334686279297,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Token getprop ,",
            "score": 99.2574932391827,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Token get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( )",
            "score": 99.25039876302084,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.equals( t ) ;",
            "score": 99.24008413461539,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . equals ( t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = null && & & & &",
            "score": 99.22318522135417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = null && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , boolean isOverride ) {",
            "score": 99.44748406661184,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.368896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ? true",
            "score": 99.31246185302734,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ? true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( ObjectType objectType ,",
            "score": 99.25727844238281,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.isOverride( ) ;",
            "score": 99.25003255208334,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && & & & |",
            "score": 99.23958042689732,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && & & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & ?",
            "score": 99.2207919034091,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final NodeTraversal t , final Node getprop )",
            "score": 99.40048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , final Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Token getprop , Node parent )",
            "score": 99.36812591552734,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Token get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = list.inGlobalScope( ) &&",
            "score": 99.344482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = list . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void getprop ) {",
            "score": 99.33103434244792,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( , NodeTraversal t ,",
            "score": 99.2572021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & &",
            "score": 99.24985758463542,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = Boolean.valueOf(",
            "score": 99.23935171274039,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = Boolean . value CaMeL Of (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & &",
            "score": 99.2199374112216,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.3680191040039,
            "correctness": "uncompilable",
            "tokenized_patch": "final void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false.inGlobalScope( )",
            "score": 99.31143951416016,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object checkPropertyVisibility )",
            "score": 99.256591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object check CaMeL Property CaMeL Visibility )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope , &",
            "score": 99.23846028645833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope , &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( ||",
            "score": 99.21958705357143,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Context NodeTraversal t , NodeTraversal t )",
            "score": 99.399560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Context Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean true ) {",
            "score": 99.36773681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean true ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void property ) {",
            "score": 99.33061387803819,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t , inGlobalScope( )",
            "score": 99.30985260009766,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t , in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Class getprop , Node parent ,",
            "score": 99.2549057006836,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Class get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isGlobal( ) &&",
            "score": 99.24796840122768,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Global ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected checkPropertyVisibility( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.39955444335938,
            "correctness": "uncompilable",
            "tokenized_patch": "protected check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , Node parent ,",
            "score": 99.36650848388672,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in.isGlobal( ) ;",
            "score": 99.34364318847656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in . is CaMeL Global ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String getprop , Node parent ) {",
            "score": 99.32994169347427,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.getGlobalScope( )",
            "score": 99.30913543701172,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( , Node getprop ,",
            "score": 99.25452532087054,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride ;",
            "score": 99.24591619318181,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.isGlobal = true ;",
            "score": 99.23687337239583,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . is CaMeL Global = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & ;",
            "score": 99.21855024857955,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Node parent ) ;",
            "score": 99.36610322840073,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.inGlobalScope(",
            "score": 99.34305013020834,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , /1",
            "score": 99.32975499770221,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , / 1",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & & ~",
            "score": 99.244580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & ~",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.matches( ) ;",
            "score": 99.23633829752605,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . matches ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & ) &&",
            "score": 99.21542593149039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int getprop ) {",
            "score": 99.44499126233552,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( , Node getprop , Node parent ) {",
            "score": 99.36585190716912,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = code.inGlobalScope( ) ;",
            "score": 99.34278106689453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = code . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = filter.inGlobalScope( )",
            "score": 99.308349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = filter . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , String property ,",
            "score": 99.25398254394531,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean inGlobalScope )",
            "score": 99.23611014229911,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean in CaMeL Global CaMeL Scope )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope( &&",
            "score": 99.21458217075893,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private double checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.39851459703948,
            "correctness": "uncompilable",
            "tokenized_patch": "private double check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , Node getprop ,",
            "score": 99.36537272135416,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object isOverride = t.inGlobalScope( ) &&",
            "score": 99.34235696231617,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = in.in.in.in.in &&",
            "score": 99.30691528320312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in . in . in . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T t , Node getprop ,",
            "score": 99.25367736816406,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ?",
            "score": 99.24241420200893,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.isOverride( ) ;",
            "score": 99.23543294270833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t( ) && & & & ?",
            "score": 99.21000453404018,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ( ) && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent ) { ;",
            "score": 99.44338507401316,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) { ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop , false )",
            "score": 99.39848022460937,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop , false )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , E parent ) {",
            "score": 99.36448041130515,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , E parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = ) &&",
            "score": 99.34187316894531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope((",
            "score": 99.30675506591797,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Object parent )",
            "score": 99.25345611572266,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ) ;",
            "score": 99.23492431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & ) && &",
            "score": 99.2086181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( final NodeTraversal t , NodeTraversal t )",
            "score": 99.39847412109376,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.36395622702206,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , Object parent ) {",
            "score": 99.32904052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , Object parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = key.inGlobalScope( )",
            "score": 99.30667877197266,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = key . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int current , Node getprop ,",
            "score": 99.25325775146484,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int current , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null ;",
            "score": 99.2401123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & & *",
            "score": 99.20697021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean parent ) {",
            "score": 99.36381261488971,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , boolean check ) {",
            "score": 99.32871500651042,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean check ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = super.inGlobalScope( )",
            "score": 99.30533599853516,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = super . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , else",
            "score": 99.25282389322916,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , else",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! t.isOverride = false ;",
            "score": 99.23323567708333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! t . is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = t.in.",
            "score": 99.2066650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = t . in .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object getprop ,",
            "score": 99.36346794577206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , String property ) {",
            "score": 99.3284553079044,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Class getprop , Node parent )",
            "score": 99.25273895263672,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Class get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride( ) ;",
            "score": 99.23499474158653,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && & & & & |",
            "score": 99.2326416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && & & & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = ) && & &",
            "score": 99.20157296316964,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isSubtype , Node parent ) {",
            "score": 99.36282169117646,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Subtype , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = name.inGlobalScope( ) ;",
            "score": 99.33995819091797,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = name . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = current.inGlobalScope( )",
            "score": 99.30258178710938,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = current . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( , NodeTraversal t ,",
            "score": 99.25248209635417,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & & |",
            "score": 99.23387044270834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ==",
            "score": 99.19607979910714,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) }",
            "score": 99.44086014597039,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isConstructor , Node parent ) {",
            "score": 99.36277142693015,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Constructor , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = true ;",
            "score": 99.33990478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , int objectType ,",
            "score": 99.32807074652777,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( ;",
            "score": 99.30146026611328,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Object parent ,",
            "score": 99.2511978149414,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = false &&",
            "score": 99.19466727120536,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node null , Node getprop , Node parent ,",
            "score": 99.39262309827302,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node null , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.36276424632354,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.32797420726104,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = annotation.inGlobalScope( )",
            "score": 99.30133819580078,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = annotation . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( ObjectType objectType )",
            "score": 99.25072479248047,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true( ) &&",
            "score": 99.23209838867187,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false.isOverride( ) ;",
            "score": 99.23184407552084,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & ? ) &&",
            "score": 99.19424874441964,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & ? ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean isOverride , Node parent )",
            "score": 99.36166561351104,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , String getprop ,",
            "score": 99.32785373263889,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope =(",
            "score": 99.30107116699219,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride ;",
            "score": 99.23143920898437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & ?",
            "score": 99.19394753196023,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node type , Node getprop , Node parent ,",
            "score": 99.43831594366776,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node type , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( ) {",
            "score": 99.36141357421874,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , NodeTraversal t ) {",
            "score": 99.32657199435764,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getScope( ) &&",
            "score": 99.30004069010417,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( nodes , NodeTraversal t ,",
            "score": 99.24734497070312,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( nodes , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & *& & &",
            "score": 99.19258335658482,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop ) ;",
            "score": 99.43764776932566,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object getprop )",
            "score": 99.3612419577206,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = n.inGlobalScope( ) ;",
            "score": 99.33817291259766,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = n . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node getprop ) throws",
            "score": 99.3263298483456,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( *",
            "score": 99.29991149902344,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , namespace ,",
            "score": 99.24728393554688,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , namespace ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) &&",
            "score": 99.19239807128906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node parent , Node parent ,",
            "score": 99.43733938116776,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node n ) {",
            "score": 99.36043054917279,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private short checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.32570393880208,
            "correctness": "uncompilable",
            "tokenized_patch": "private short check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( JSDocInfo t ,",
            "score": 99.24684143066406,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( JS CaMeL Doc CaMeL Info t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ,",
            "score": 99.23015485491071,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null ;",
            "score": 99.2282958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & & & &",
            "score": 99.19223458426339,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.3602294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node index ,",
            "score": 99.32523839613971,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node index ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( throws",
            "score": 99.29951477050781,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context",
            "score": 99.24624633789062,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.valueOf( & & &",
            "score": 99.2296630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . value CaMeL Of ( & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = ).inGlobalScope(",
            "score": 99.19130161830357,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = ) . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop )",
            "score": 99.43701171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ? checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.38936574835526,
            "correctness": "uncompilable",
            "tokenized_patch": "private ? check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , NodeCaMeL",
            "score": 99.35980987548828,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private isOverride = t.inGlobalScope( )",
            "score": 99.29938151041667,
            "correctness": "uncompilable",
            "tokenized_patch": "private is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( property , NodeTraversal t ,",
            "score": 99.24610137939453,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( property , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &0&&",
            "score": 99.22740071614584,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & 0 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && & & & ?",
            "score": 99.18761268028847,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , ) {",
            "score": 99.35972684972427,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , void property ) {",
            "score": 99.32430691189236,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( &&(",
            "score": 99.29933166503906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( && (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( vars , NodeTraversal t ,",
            "score": 99.24549102783203,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( vars , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( scope",
            "score": 99.229150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope",
            "score": 99.22728620256696,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , int getprop ,",
            "score": 99.4360415810033,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , int get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.35853486902573,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean checkPropertyVisibility ) {",
            "score": 99.32394588694854,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean check CaMeL Property CaMeL Visibility ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Exception",
            "score": 99.29756927490234,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( report , NodeTraversal t ,",
            "score": 99.24524688720703,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( report , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = inGlobalScope( )",
            "score": 99.2285907451923,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in( ) ;",
            "score": 99.22694749098558,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & && & &",
            "score": 99.18532889229911,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ! type.inGlobalScope( ) ;",
            "score": 99.33430750229779,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ! type . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node",
            "score": 99.32377115885417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = this.inGlobalScope( )",
            "score": 99.29686737060547,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = this . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static String checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.2448974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "private static String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &1&&",
            "score": 99.22623697916667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & 1 &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & & & ?",
            "score": 99.18518938337054,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node parent ) {",
            "score": 99.43439079733456,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , String property ) {",
            "score": 99.35756548713235,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Property checkPropertyVisibility( NodeTraversal t , Node getprop ) {",
            "score": 99.32372368706598,
            "correctness": "uncompilable",
            "tokenized_patch": "Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( getprop , Node parent ,",
            "score": 99.24466959635417,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.valueOf( & &",
            "score": 99.22766985212054,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . value CaMeL Of ( & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &0=",
            "score": 99.22578938802083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & 0 =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && & & & &",
            "score": 99.18386606069711,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent , Node parentCaMeL",
            "score": 99.43216745476974,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node parent CaMeL",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Property checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.38445723684211,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.35605755974265,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = type.inGlobalScope( ) ;",
            "score": 99.33374741498162,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , assert getprop ,",
            "score": 99.32361518012152,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , assert get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t , Node getprop )",
            "score": 99.24420166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t == null &&",
            "score": 99.22547496448864,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t == null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in = & ) &&",
            "score": 99.1837158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in = & ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node parent , Node getprop ,",
            "score": 99.43199398643092,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.323486328125,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != getGlobalScope( )",
            "score": 99.2944107055664,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( site , NodeTraversal t ,",
            "score": 99.2439956665039,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( site , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean isOverride ) &&",
            "score": 99.22582068810097,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean is CaMeL Override ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t ;",
            "score": 99.22529602050781,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & & &",
            "score": 99.18296461838942,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isSubtype ) {",
            "score": 99.35523332868304,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) ==",
            "score": 99.33244323730469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public double checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.32346598307292,
            "correctness": "uncompilable",
            "tokenized_patch": "public double check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope(( )",
            "score": 99.29414367675781,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context false , Node getprop ,",
            "score": 99.24344635009766,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context false , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope ||",
            "score": 99.22453090122768,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & *& & &",
            "score": 99.18278285435268,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node getprop , Node parent ,",
            "score": 99.43166632401316,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.35462188720703,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = filter.inGlobalScope( ) ;",
            "score": 99.33226102941177,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = filter . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( T",
            "score": 99.29364776611328,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( T",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.24339076450893,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.valueOf( t ) ;",
            "score": 99.22413736979166,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . value CaMeL Of ( t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean t ) && & & ;",
            "score": 99.18221609933036,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean t ) && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node parent , Node getprop ,",
            "score": 99.43074115953948,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , synchronized getprop )",
            "score": 99.38311446340461,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , synchronized get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t , Object parent )",
            "score": 99.35441320082721,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public protected boolean isOverride = t.inGlobalScope( )",
            "score": 99.3319450827206,
            "correctness": "uncompilable",
            "tokenized_patch": "public protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.32324896918402,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = true.inGlobalScope( )",
            "score": 99.29363250732422,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.24307686941964,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & true |",
            "score": 99.2232666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & true |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null ? false : & & &",
            "score": 99.22234700520833,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null ? false : & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & & ;",
            "score": 99.18098958333333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node parent , Node parent ,",
            "score": 99.43051486545139,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Object property ) {",
            "score": 99.35437729779412,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = check.inGlobalScope( ) ;",
            "score": 99.33181583180146,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = check . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object parent ,",
            "score": 99.24119059244792,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isOverride( ) ;",
            "score": 99.22236851283482,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void isOverride = t.in = t.in &&",
            "score": 99.18027169363839,
            "correctness": "uncompilable",
            "tokenized_patch": "void is CaMeL Override = t . in = t . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , ) {",
            "score": 99.42896792763158,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final NodeTraversal t ) {",
            "score": 99.35389811197916,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( Name",
            "score": 99.29238891601562,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Name",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , }",
            "score": 99.240283203125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & t ==0;",
            "score": 99.22191443810097,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & t == 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && & & & ;",
            "score": 99.17995981069711,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , boolean isOverride )",
            "score": 99.42886013454861,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( int getprop , Node parent ) {",
            "score": 99.35360897288604,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node key ,",
            "score": 99.32252412683823,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node key ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Object",
            "score": 99.29200744628906,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Object",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.23804728190105,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) && &",
            "score": 99.22080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &(",
            "score": 99.22076416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =0.0&& & &",
            "score": 99.1793924967448,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = 0 . 0 && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Node getprop )",
            "score": 99.38087222450658,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent , boolean isOverride ) {",
            "score": 99.3533073874081,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent , boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ~ t.inGlobalScope( ) ;",
            "score": 99.33156451056985,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ~ t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private ? checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.32198079427083,
            "correctness": "uncompilable",
            "tokenized_patch": "private ? check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( t",
            "score": 99.29188537597656,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( parameters , Node getprop ,",
            "score": 99.2364501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( parameters , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && & t ==0;",
            "score": 99.22010904947916,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && & t == 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( '') +",
            "score": 99.2200927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 't find a visibility modifier; assume it') +",
            "score": 99.2200927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a') +",
            "score": 99.2200927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a = ...') +",
            "score": 99.2200927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a.b') +",
            "score": 99.2200927734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ ) +",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && & & & & ;",
            "score": 99.17824881417411,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && & & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean validator )",
            "score": 99.35206604003906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean validator )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( this",
            "score": 99.29163360595703,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( this",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t != null &&",
            "score": 99.21994454520089,
            "correctness": "plausible",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t != null &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "private boolean isOverride = isOverride = true ;",
            "score": 99.21897536057692,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false &&",
            "score": 99.17641194661458,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( ) {",
            "score": 99.42601429332386,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = this.t.inGlobalScope(",
            "score": 99.33099365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = this . t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( if( NodeTraversal t ,",
            "score": 99.32128143310547,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( if ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope(_",
            "score": 99.29107666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( _",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getValue( ) ;",
            "score": 99.21886393229167,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Value ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope |",
            "score": 99.21834891183036,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = ) &&",
            "score": 99.17610677083333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Type getprop ) {",
            "score": 99.42497815583882,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Boolean checkPropertyVisibility( NodeTraversal t , NodeTraversal t )",
            "score": 99.38066020764802,
            "correctness": "uncompilable",
            "tokenized_patch": "private Boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Node parent , int",
            "score": 99.35167738970588,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.32091522216797,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Name",
            "score": 99.29107666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Name",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private protected void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.23167317708334,
            "correctness": "uncompilable",
            "tokenized_patch": "private protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride =( ) {",
            "score": 99.21766357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = = inGlobalScope( ) ;",
            "score": 99.21742350260416,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = = in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & && & & &",
            "score": 99.17440359933036,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node t , Node getprop , Node parent ,",
            "score": 99.4244384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node t , Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , int ) {",
            "score": 99.35164642333984,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) { {",
            "score": 99.32083468967014,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( final NodeTraversal t ,",
            "score": 99.23074544270834,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & t !=0;",
            "score": 99.21731770833334,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & t != 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean isOverride ) {",
            "score": 99.21580153245192,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "checkPropertyVisibility( NodeTraversal t , Node parent , Node parent ) {",
            "score": 99.42429070723684,
            "correctness": "uncompilable",
            "tokenized_patch": "check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final ObjectType objectType ) {",
            "score": 99.35073673023896,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Object CaMeL Type object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = type.inGlobalScope( ) ||",
            "score": 99.33025360107422,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = type . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Property getprop ,",
            "score": 99.31949869791667,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Property get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = getGlobalScope( ) {",
            "score": 99.29086100260416,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( current , Node getprop ,",
            "score": 99.230078125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( current , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null && & & & |",
            "score": 99.21580403645834,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null && & & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride && & & |",
            "score": 99.21315354567308,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override && & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & && & & &",
            "score": 99.17066301618304,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.42398231907895,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int propertyName , Node parent ) {",
            "score": 99.35045668658088,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int property CaMeL Name , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal , NodeTraversal t ,",
            "score": 99.31924099392361,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal , Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = scope.inGlobalScope( )",
            "score": 99.2905044555664,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected synchronized void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.229833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "protected synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.toString( ) ;",
            "score": 99.21566336495536,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . to CaMeL String ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = Boolean.valueOf(",
            "score": 99.21213003305289,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = Boolean . value CaMeL Of (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & & ;",
            "score": 99.1697528545673,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean true ) {",
            "score": 99.349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean true ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = parent.inGlobalScope( this ) ;",
            "score": 99.32941032858456,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = parent . in CaMeL Global CaMeL Scope ( this ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node n ,",
            "score": 99.31914924172794,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( t )",
            "score": 99.29045104980469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized private void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.22967936197917,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = inGlobalScope( )",
            "score": 99.21034458705357,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride =0.0&& & &",
            "score": 99.1691425030048,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = 0 . 0 && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node parent , Node parent ,",
            "score": 99.42230902777777,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node parent , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal l , Node parent ) {",
            "score": 99.348388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal l , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true ||",
            "score": 99.32940673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean checkPropertyVisibility( Node getprop , Node getprop ) {",
            "score": 99.31901719835069,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = start.inGlobalScope( )",
            "score": 99.2901840209961,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = start . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Object checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.22965785435268,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.toString( ) ;",
            "score": 99.21318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . to CaMeL String ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride &&",
            "score": 99.20546653053977,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && & & & ?",
            "score": 99.16881385216347,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isOverride , Node parent )",
            "score": 99.3483657836914,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private byte checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.31898328993056,
            "correctness": "uncompilable",
            "tokenized_patch": "private byte check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) ?",
            "score": 99.29004669189453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( abstract NodeTraversal t ,",
            "score": 99.22933756510416,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( abstract Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isConstructor( ) ;",
            "score": 99.211767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Constructor ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null && &",
            "score": 99.20478959517045,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =(",
            "score": 99.16737583705357,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent ) }",
            "score": 99.42019992404514,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , T parent ) {",
            "score": 99.34794347426471,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , T parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean dereference )",
            "score": 99.22793579101562,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean dereference )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = inGlobalScope( ) {",
            "score": 99.20375279017857,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & & & ?",
            "score": 99.1661376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node id )",
            "score": 99.41913200827206,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.3185676125919,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( Exception",
            "score": 99.28909301757812,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Exception",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , final",
            "score": 99.22748209635417,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride =( boolean isOverride ) {",
            "score": 99.20234026227679,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ( boolean is CaMeL Override ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride( ) && & &",
            "score": 99.16595458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( name",
            "score": 99.28750610351562,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( name",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.22658865792411,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride && t != null &&",
            "score": 99.2099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override && t != null &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = inGlobalScope( )",
            "score": 99.20071847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & *& & ?",
            "score": 99.16329520089286,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & * & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private public void checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.37574527138158,
            "correctness": "uncompilable",
            "tokenized_patch": "private public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "String checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.34483235677084,
            "correctness": "uncompilable",
            "tokenized_patch": "String check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t..inGlobalScope( ) ;",
            "score": 99.32813936121323,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , ;",
            "score": 99.317333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void isOverride = t.inGlobalScope ;",
            "score": 99.20985514322916,
            "correctness": "uncompilable",
            "tokenized_patch": "private void is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( String t ) && & & &",
            "score": 99.16325160435268,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( String t ) && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , boolean {",
            "score": 99.34433880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , boolean {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , String objectType ,",
            "score": 99.31722005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , String object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride = & ) :",
            "score": 99.28520965576172,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override = & ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =.inGlobalScope( ) ;",
            "score": 99.20813802083333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.length( ) ==0;",
            "score": 99.19614955357143,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . length ( ) == 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && inGlobalScope &&",
            "score": 99.16307721819196,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && in CaMeL Global CaMeL Scope &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node node ) {",
            "score": 99.41564223345588,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private.checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.31719292534723,
            "correctness": "uncompilable",
            "tokenized_patch": "private . check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.22417743389423,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride && t != null ;",
            "score": 99.202880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override && t != null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ) &&",
            "score": 99.19600423177083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & *",
            "score": 99.1612548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Type parent )",
            "score": 99.34317779541016,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Object property ) {",
            "score": 99.31691487630208,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Object property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final boolean isOverride = t.inGlobalScope( &&",
            "score": 99.28463745117188,
            "correctness": "uncompilable",
            "tokenized_patch": "final boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( boolean isOverride )",
            "score": 99.22248186383929,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false &&( t != null ) ;",
            "score": 99.20037434895833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && ( t != null ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null && & &",
            "score": 99.195556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = true && & &",
            "score": 99.1611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = true && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node type )",
            "score": 99.41351677389706,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node [ ] dereference )",
            "score": 99.37437679893092,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node [ ] dereference )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.34311810661765,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , /1,",
            "score": 99.31671142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , / 1 ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isGlobal( ) && &",
            "score": 99.28458404541016,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Global ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t , final",
            "score": 99.22120768229166,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = type ;",
            "score": 99.19310651506696,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = type ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = false && & &",
            "score": 99.16011265345982,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = false && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.41283461626838,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean } )",
            "score": 99.34230041503906,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean } )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void property ) {",
            "score": 99.31553021599265,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void property ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( property , Node getprop ,",
            "score": 99.21953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( property , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isConstructor( ) ;",
            "score": 99.20021275111607,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Constructor ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null && & & &",
            "score": 99.19276780348558,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Context parent )",
            "score": 99.3414535522461,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Context parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( false",
            "score": 99.32416178385417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract static void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.31511688232422,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract static void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Object checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.21830531529018,
            "correctness": "uncompilable",
            "tokenized_patch": "public Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & ;",
            "score": 99.1594571200284,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node name )",
            "score": 99.41226016773896,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal l , NodeTraversal t )",
            "score": 99.37190969366776,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal l , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean value ) {",
            "score": 99.34135167738971,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean value ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , boolean dereference ) {",
            "score": 99.31505629595588,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean dereference ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( false",
            "score": 99.28340148925781,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( false",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( ref , Node getprop ,",
            "score": 99.218115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( ref , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t.isOverride",
            "score": 99.19634602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t . is CaMeL Override",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.contains( t ) ;",
            "score": 99.19097430889423,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . contains ( t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & & & &",
            "score": 99.15837751116071,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Object getprop )",
            "score": 99.37113229851974,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Object get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName , boolean validator ) {",
            "score": 99.3407844094669,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name , boolean validator ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node dereference , Node getprop ,",
            "score": 99.31503295898438,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node dereference , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( || &",
            "score": 99.2830581665039,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( || &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private long checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.21806989397321,
            "correctness": "uncompilable",
            "tokenized_patch": "private long check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &3;",
            "score": 99.19561360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &2;",
            "score": 99.19561360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &2008;",
            "score": 99.19561360677083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t( ) && & & &",
            "score": 99.15782752403847,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ( ) && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node parent , ;",
            "score": 99.40966118706598,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent , ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node parent , Node parent )",
            "score": 99.34070638020833,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = column.inGlobalScope( ) ;",
            "score": 99.32234954833984,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = column . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node node ) {",
            "score": 99.3150275735294,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( public NodeTraversal t ,",
            "score": 99.2173095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( public Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride && &",
            "score": 99.18876139322917,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).isOverride = false &&",
            "score": 99.15719168526786,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . is CaMeL Override = false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Node checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.40938991970486,
            "correctness": "uncompilable",
            "tokenized_patch": "private Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Object parent ,",
            "score": 99.36947292751736,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Object parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Node node ,",
            "score": 99.31417846679688,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node node ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( ]",
            "score": 99.28219604492188,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ]",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public String checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.21697998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "public String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & && ;",
            "score": 99.15709510216347,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & && ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Object getprop ) {",
            "score": 99.40938313802083,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( getprop , Node parent , Node parent )",
            "score": 99.33988683363971,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( get@@ prop , Node parent , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( true",
            "score": 99.31790364583334,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void parent ,",
            "score": 99.3131332397461,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope( true",
            "score": 99.28153228759766,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( true",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected int checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.21658761160714,
            "correctness": "uncompilable",
            "tokenized_patch": "protected int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride( )",
            "score": 99.19376046316964,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = options.inGlobalScope ;",
            "score": 99.18472726004464,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = options . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & ;",
            "score": 99.15650523792614,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean compiler ) {",
            "score": 99.33879538143383,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean compiler ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = exp.inGlobalScope( ) ;",
            "score": 99.31776428222656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = exp . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Node checkPropertyVisibility( Node getprop , Node parent ) {",
            "score": 99.3122199563419,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Node check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride = & ) ;",
            "score": 99.28146362304688,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override = & ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static Object checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.2161376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "private static Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.equals( '') ;",
            "score": 99.18307729867789,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . equals ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.equals( 't find a visibility modifier; assume it') ;",
            "score": 99.18307729867789,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . equals ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.equals( 'a') ;",
            "score": 99.18307729867789,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . equals ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.equals( 'a = ...') ;",
            "score": 99.18307729867789,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . equals ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.equals( 'a.b') ;",
            "score": 99.18307729867789,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . equals ( $STRING$ ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t( ) && & &",
            "score": 99.1560770670573,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public final void checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.36740112304688,
            "correctness": "uncompilable",
            "tokenized_patch": "public final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( ObjectType objectType )",
            "score": 99.337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object CaMeL Type object CaMeL Type )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = scope.inGlobalScope(",
            "score": 99.31770542689732,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope(_",
            "score": 99.28108215332031,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( _",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( input , Node getprop ,",
            "score": 99.21599934895833,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( input , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.hashCode( ) ;",
            "score": 99.19186197916666,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . hash CaMeL Code ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true && &",
            "score": 99.18302001953126,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & *& & &",
            "score": 99.15536063058036,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & * & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , int getprop )",
            "score": 99.40668402777777,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , NodeTraversal t )",
            "score": 99.36714441636029,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop )",
            "score": 99.33771221454327,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = set.inGlobalScope( ) &&",
            "score": 99.31634521484375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = set . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal [ ] t ,",
            "score": 99.31024932861328,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal [ ] t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getGlobalScope( ) *",
            "score": 99.28099822998047,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Global CaMeL Scope ( ) *",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.getprop )",
            "score": 99.21575055803571,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.inGlobalScope( )",
            "score": 99.191162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.matches( ) && &",
            "score": 99.18157489483173,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . matches ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && & & & &",
            "score": 99.1545879657452,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private else if( NodeTraversal t , Node getprop , Node parent )",
            "score": 99.4051513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "private else if ( Node CaMeL Traversal t , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in.isOverride( ) ;",
            "score": 99.31583404541016,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in . is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node module ,",
            "score": 99.30977136948529,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node module ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = l.inGlobalScope( )",
            "score": 99.28063201904297,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = l . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( type , Node getprop ,",
            "score": 99.214599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( type , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &1|",
            "score": 99.19088541666666,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & 1 |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & & & & ;",
            "score": 99.15413992745536,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node getprop ) {",
            "score": 99.40413172104779,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean inGlobalScope ) {",
            "score": 99.33696746826172,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean in CaMeL Global CaMeL Scope ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = set.inGlobalScope( ) ;",
            "score": 99.3150634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = set . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( NodeTraversal t ) {",
            "score": 99.30856119791666,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = Scope.inGlobalScope(",
            "score": 99.279150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = Scope . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected String checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.21455601283482,
            "correctness": "uncompilable",
            "tokenized_patch": "protected String check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.isOverride = ) &&",
            "score": 99.19080403645833,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . is CaMeL Override = ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true( ) && &",
            "score": 99.18056418678977,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & & &",
            "score": 99.15280386117789,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal node , NodeTraversal t )",
            "score": 99.36619808799342,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal node , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , boolean parent ) {",
            "score": 99.33534240722656,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope( ) ||",
            "score": 99.31504821777344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ( ) ||",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal [ ] dereference ,",
            "score": 99.3074951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal [ ] dereference ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private static void checkPropertyVisibility( Node getprop ,",
            "score": 99.21365792410714,
            "correctness": "uncompilable",
            "tokenized_patch": "private static void check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & t &&",
            "score": 99.19071451822917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & t &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t != null ;",
            "score": 99.17982991536458,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && t != null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride =( boolean t ) {",
            "score": 99.15268961588542,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ( boolean t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int getprop , Node getprop ) {",
            "score": 99.40174018012152,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int get@@ prop , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( boolean isConstructor )",
            "score": 99.33391864483173,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( boolean is CaMeL Constructor )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = children.inGlobalScope( ) &&",
            "score": 99.31486511230469,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = children . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( , Node getprop , Node parent ) {",
            "score": 99.30738740808823,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( , Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected boolean isOverride = t.inGlobalScope( Module",
            "score": 99.27848815917969,
            "correctness": "uncompilable",
            "tokenized_patch": "protected boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Module",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object t ,",
            "score": 99.21242268880208,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.length( ) >0;",
            "score": 99.17918178013393,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . length ( ) > 0 ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & & & ?",
            "score": 99.15263148716518,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node Context t )",
            "score": 99.36317952473958,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node Context t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Object getprop , Node parent )",
            "score": 99.33187662760416,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Object get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.inGlobalScope = )",
            "score": 99.2784652709961,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( NodeTraversal t )",
            "score": 99.21236165364583,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true.isOverride = true ;",
            "score": 99.18992513020834,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true . is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = scope.inGlobalScope ;",
            "score": 99.17916434151786,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = scope . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & && & & ?",
            "score": 99.15206473214286,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & && & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , Node parent ) {",
            "score": 99.40062120225694,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , void parent )",
            "score": 99.36264217601104,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean getprop , Node parent )",
            "score": 99.33140563964844,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = changed.inGlobalScope( ) ;",
            "score": 99.31390380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = changed . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void dereference ) {",
            "score": 99.30641802619485,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void dereference ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope( method",
            "score": 99.2781982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( method",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( true , Node getprop ,",
            "score": 99.21197102864583,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( true , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride ) ;",
            "score": 99.18970665564903,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.type( ) ;",
            "score": 99.1790059407552,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . type ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope = ) &&",
            "score": 99.15168108258929,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope = ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node t , Node parent ) {",
            "score": 99.400146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.33094787597656,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope = ) ;",
            "score": 99.31272888183594,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = property.inGlobalScope( )",
            "score": 99.27752685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = property . in CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( static NodeTraversal t ,",
            "score": 99.21153971354167,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( static Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "abstract boolean isOverride = t.inGlobalScope ;",
            "score": 99.18936360677084,
            "correctness": "uncompilable",
            "tokenized_patch": "abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = true( ) {",
            "score": 99.17786754261364,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = true ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop , Node parent )",
            "score": 99.36050235523896,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent ) throws",
            "score": 99.32915496826172,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = id.inGlobalScope( ) ;",
            "score": 99.31167602539062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = id . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal < NodeTraversal <",
            "score": 99.30612362132354,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal < Node CaMeL Traversal <",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true &&( t != null ) ;",
            "score": 99.18916829427083,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && ( t != null ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = Boolean.valueOf( &",
            "score": 99.17722731370192,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = Boolean . value CaMeL Of ( &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && inGlobalScope(",
            "score": 99.15096609933036,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Object checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.39895968967014,
            "correctness": "uncompilable",
            "tokenized_patch": "private Object check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node parent ) {",
            "score": 99.32874552408855,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final Node getprop ,",
            "score": 99.30344063895089,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( |",
            "score": 99.27278645833333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( node , Node getprop ,",
            "score": 99.20974934895834,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( node , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false( ) {",
            "score": 99.17518310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ) && & &",
            "score": 99.1506014737216,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( getprop , Node parent ) {",
            "score": 99.32867838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( get@@ prop , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = names.inGlobalScope( ) ;",
            "score": 99.31088256835938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = names . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.inGlobalScope ;",
            "score": 99.18911307198661,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = isOverride = false ;",
            "score": 99.1744854266827,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = is CaMeL Override = false ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in.in.in.",
            "score": 99.15022495814732,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in . in . in .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( int getprop , Node parent )",
            "score": 99.32728678385416,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( int get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isGlobal( ) &&",
            "score": 99.31082589285714,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Global ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getScope( )",
            "score": 99.26475306919643,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object getprop )",
            "score": 99.2089374248798,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride = t != null && &",
            "score": 99.18895670572917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override = t != null && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.equals( t ) &&",
            "score": 99.17351825420673,
            "correctness": "plausible",
            "tokenized_patch": "boolean is CaMeL Override = t . equals ( t ) &&",
            "failed_triggering": "1/2",
            "failed_non_triggering": "0"
        },
        {
            "patch": "boolean isOverride =0.0&& & & & &",
            "score": 99.14814976283482,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = 0 . 0 && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) }",
            "score": 99.39777688419117,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , boolean {",
            "score": 99.32706705729167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , boolean {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal <",
            "score": 99.30091271033653,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal <",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( String propertyName ,",
            "score": 99.20713588169643,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.equals( t ) ;",
            "score": 99.18877301897321,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . equals ( t ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true( ) ;",
            "score": 99.17283325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ) !=",
            "score": 99.14662388392857,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) !=",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "static void checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.32563781738281,
            "correctness": "uncompilable",
            "tokenized_patch": "static void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = site.inGlobalScope( ) ;",
            "score": 99.30957794189453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = site . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getScope( ) :",
            "score": 99.25882161458334,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Scope ( ) :",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private synchronized void checkPropertyVisibility( Node getprop ,",
            "score": 99.20167759486607,
            "correctness": "uncompilable",
            "tokenized_patch": "private synchronized void check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = isOverride && & & &",
            "score": 99.17158726283482,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = is CaMeL Override && & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t( ) && & & & ;",
            "score": 99.14616176060268,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ( ) && & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node source ) {",
            "score": 99.39659288194444,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node source ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node parent , Node",
            "score": 99.32475280761719,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent , Node",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = in.in.in.in &&",
            "score": 99.25762939453125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = in . in . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private Factory checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.19873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private Factory check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t != null && &",
            "score": 99.18790690104167,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t != null && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == t && &",
            "score": 99.17087624289773,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == t && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.getScope( ) ==",
            "score": 99.1458740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . get CaMeL Scope ( ) ==",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node n )",
            "score": 99.3964484719669,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node n )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final Node getprop , Node parent )",
            "score": 99.32432556152344,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = start.inGlobalScope( ) ;",
            "score": 99.30784606933594,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = start . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , boolean parent ) {",
            "score": 99.29954618566177,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , boolean parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private final void checkPropertyVisibility( Node getprop ,",
            "score": 99.19786725725446,
            "correctness": "uncompilable",
            "tokenized_patch": "private final void check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.doubleValue( ) ;",
            "score": 99.18754069010417,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . double CaMeL Value ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "isOverride = t.inGlobalScope ;",
            "score": 99.17074819711539,
            "correctness": "uncompilable",
            "tokenized_patch": "is CaMeL Override = t . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & ;",
            "score": 99.145556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node id ) {",
            "score": 99.39579942491319,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node id ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Context t , NodeTraversal t )",
            "score": 99.35299862132354,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Context t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public int checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.32335662841797,
            "correctness": "uncompilable",
            "tokenized_patch": "public int check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = in.in.in.in.",
            "score": 99.2541748046875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = in . in . in . in .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected Property checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.18854631696429,
            "correctness": "uncompilable",
            "tokenized_patch": "protected Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == null && & & & &",
            "score": 99.17013985770089,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == null && & & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in = & ) ;",
            "score": 99.14503696986607,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in = & ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this , Node getprop , Node parent )",
            "score": 99.35276963975694,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this , Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = name.inGlobalScope( ) &&",
            "score": 99.30683898925781,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = name . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( final",
            "score": 99.25030924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( final",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop ,",
            "score": 99.18695537860577,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & null ;",
            "score": 99.18683268229167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( '')",
            "score": 99.16812569754464,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 't find a visibility modifier; assume it')",
            "score": 99.16812569754464,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a')",
            "score": 99.16812569754464,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a = ...')",
            "score": 99.16812569754464,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( 'a.b')",
            "score": 99.16812569754464,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( $STRING$ )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & && & &",
            "score": 99.14410400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private int checkPropertyVisibility( NodeTraversal t , Node parent ) {",
            "score": 99.39480251736111,
            "correctness": "uncompilable",
            "tokenized_patch": "private int check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node getprop.",
            "score": 99.35169135199652,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , Node node )",
            "score": 99.32307942708333,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node node )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node current ,",
            "score": 99.29902200137867,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node current ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & & &",
            "score": 99.18655598958334,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( )",
            "score": 99.1831787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && & & *& & ?",
            "score": 99.14306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && & & * & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node parent , Node parent ) {",
            "score": 99.32276916503906,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( Node getprop , Node getprop ,",
            "score": 99.29832548253677,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &3|",
            "score": 99.185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &2|",
            "score": 99.185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = &2008|",
            "score": 99.185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & $NUMBER$ |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility(",
            "score": 99.1824951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.matches( ) &&",
            "score": 99.1654052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . matches ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "= t.inGlobalScope( ) &&",
            "score": 99.14261881510417,
            "correctness": "uncompilable",
            "tokenized_patch": "= t . in CaMeL Global CaMeL Scope ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Type parent ) {",
            "score": 99.39386345358456,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Type parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Node checkPropertyVisibility( NodeTraversal t , Node getprop )",
            "score": 99.34943305121527,
            "correctness": "uncompilable",
            "tokenized_patch": "public Node check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( String propertyName ,",
            "score": 99.32269756610577,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = property.inGlobalScope( ) ;",
            "score": 99.30551147460938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = property . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( Node getprop , Node parent ,",
            "score": 99.29754997702206,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope(.",
            "score": 99.24391276041666,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( .",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.mode( ) ;",
            "score": 99.1833026592548,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . mode ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference )",
            "score": 99.1816914876302,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.indexOf( ) ;",
            "score": 99.16396658761161,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . index CaMeL Of ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.in = & & &",
            "score": 99.14217703683036,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . in = & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object checkPropertyVisibility( Node getprop , Node parent )",
            "score": 99.322314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "Object check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t [0] == null && & &",
            "score": 99.3054428100586,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t [ 0 ] == null && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node type ,",
            "score": 99.29737046185662,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( L",
            "score": 99.2432373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( L",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.inGlobalScope ;",
            "score": 99.18238118489583,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . in CaMeL Global CaMeL Scope ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( final NodeTraversal t ,",
            "score": 99.18089948381696,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride =( ) {",
            "score": 99.1633544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.in = & & &",
            "score": 99.14158412388393,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in = & & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( final NodeTraversal t , Boolean parent )",
            "score": 99.3487548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t , Boolean parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "&& isOverride = t.inGlobalScope( ) ;",
            "score": 99.30474090576172,
            "correctness": "uncompilable",
            "tokenized_patch": "&& is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference , Node getprop ) {",
            "score": 99.29734173943015,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference , Node get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t.getScope( ) ?",
            "score": 99.24295247395834,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t . get CaMeL Scope ( ) ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false( ) &&",
            "score": 99.16098022460938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = & ? ) ;",
            "score": 99.14101736886161,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = & ? ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node value ) {",
            "score": 99.39257134331598,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node value ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node parent , Node parent ) {",
            "score": 99.32096354166667,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node parent , Node parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , void check ) {",
            "score": 99.29655187270221,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , void check ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( global",
            "score": 99.2429443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( global",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility(",
            "score": 99.17968071831598,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride t ;",
            "score": 99.1789081280048,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride =3;",
            "score": 99.16086251395089,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride =2;",
            "score": 99.16086251395089,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride =2008;",
            "score": 99.16086251395089,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = $NUMBER$ ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride( ) &&",
            "score": 99.14085896809895,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( final NodeTraversal t ) {",
            "score": 99.32037353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( final Node CaMeL Traversal t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = true && ) ;",
            "score": 99.30358123779297,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = true && ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private abstract synchronized void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.29630279541016,
            "correctness": "uncompilable",
            "tokenized_patch": "private abstract synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = getGlobalScope( ) {",
            "score": 99.24188639322917,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.inGlobalScope",
            "score": 99.17662702287946,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public Property checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.17464773995536,
            "correctness": "uncompilable",
            "tokenized_patch": "public Property check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t != null && & & & |",
            "score": 99.16074044363839,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t != null && & & & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ).isOverride( ) &&",
            "score": 99.14060756138393,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) . is CaMeL Override ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , NodeTraversal t )",
            "score": 99.39160834418402,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( ]",
            "score": 99.24056803385416,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ]",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true.isOverride( ) &&",
            "score": 99.17601667131696,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true . is CaMeL Override ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String objectType ,",
            "score": 99.17388044084821,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true && & & & ?",
            "score": 99.1400897686298,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true && & & & ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( final String propertyName ) {",
            "score": 99.31814778645834,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( final String property CaMeL Name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public isOverride = t.inGlobalScope( ) ;",
            "score": 99.30313110351562,
            "correctness": "uncompilable",
            "tokenized_patch": "public is CaMeL Override = t . in CaMeL Global CaMeL Scope ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope =(",
            "score": 99.2391845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope = (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( ObjectType t ,",
            "score": 99.17184012276786,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object CaMeL Type t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( ) && &",
            "score": 99.15966186523437,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = false && & & & ;",
            "score": 99.13974233774039,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = false && & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node t ) {",
            "score": 99.38960774739583,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node t ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( checkPropertyVisibility t )",
            "score": 99.34632110595703,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( check CaMeL Property CaMeL Visibility t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = true && true ;",
            "score": 99.30239868164062,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = true && true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( Node getprop , Node parent ) { }",
            "score": 99.2953239889706,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { }",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride =",
            "score": 99.23337026742789,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override =",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( String propertyName ,",
            "score": 99.16975620814732,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( String property CaMeL Name ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == t ? &",
            "score": 99.15623890269886,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == t ? &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = ) && & & & ;",
            "score": 99.13900756835938,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ) && & & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false.isGlobal( ) &&",
            "score": 99.30233328683036,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false . is CaMeL Global ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( void checkPropertyVisibility ) {",
            "score": 99.29472799862133,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( void check CaMeL Property CaMeL Visibility ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( throws",
            "score": 99.232275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( throws",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.hashCode( ) ;",
            "score": 99.16727120535714,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . hash CaMeL Code ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized void checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.16717529296875,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = t.matches( ) ;",
            "score": 99.15469125600961,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = t . matches ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & & && & &",
            "score": 99.13857797475961,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & & && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node scope ) {",
            "score": 99.38906521267361,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node scope ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , Style parent )",
            "score": 99.31690216064453,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Style parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = getGlobalScope( )",
            "score": 99.23186383928571,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride( )",
            "score": 99.16721754807692,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( T getprop ,",
            "score": 99.16358360877403,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( T get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = true &&",
            "score": 99.1380615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = true &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( NodeTraversal t , Node name ) {",
            "score": 99.38901095920139,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node name ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean isSubtype ) {",
            "score": 99.31527506510416,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean is CaMeL Subtype ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Variable",
            "score": 99.23028157552083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Variable",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Object dereference ,",
            "score": 99.16217041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Object dereference ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride =( boolean isOverride )",
            "score": 99.15350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = ( boolean is CaMeL Override )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = false && & ;",
            "score": 99.13714599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = false && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , int getprop ) {",
            "score": 99.38787841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , int get@@ prop ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public synchronized boolean isOverride = t.inGlobalScope(",
            "score": 99.30167388916016,
            "correctness": "uncompilable",
            "tokenized_patch": "public synchronized boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , Node ref ,",
            "score": 99.29391659007354,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node ref ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.inGlobalScope( Throwable",
            "score": 99.22510579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope ( Throwable",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t == null ) ;",
            "score": 99.16586303710938,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t == null ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( int objectType ,",
            "score": 99.15757533482143,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( int object CaMeL Type ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == t && & &",
            "score": 99.15287272135417,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == t && & &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && & & ;",
            "score": 99.13441975911458,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && & & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node getprop , Node parent ) { ;",
            "score": 99.38705105251736,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Node parent ) { ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal , NodeTraversal t )",
            "score": 99.34235297309027,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Node getprop , Object parent )",
            "score": 99.31300354003906,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Node get@@ prop , Object parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = getGlobalScope( ) && ) &&",
            "score": 99.30036926269531,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = get CaMeL Global CaMeL Scope ( ) && ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Class checkPropertyVisibility( NodeTraversal t , Node getprop ,",
            "score": 99.29351447610294,
            "correctness": "uncompilable",
            "tokenized_patch": "Class check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void isOverride = true ;",
            "score": 99.16253662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "public void is CaMeL Override = true ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "protected void checkPropertyVisibility( )",
            "score": 99.15421752929687,
            "correctness": "uncompilable",
            "tokenized_patch": "protected void check CaMeL Property CaMeL Visibility ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t == t ?",
            "score": 99.15253295898438,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t == t ?",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = false &&",
            "score": 99.13380940755208,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = false &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public abstract boolean isOverride = t.inGlobalScope(",
            "score": 99.30001068115234,
            "correctness": "uncompilable",
            "tokenized_patch": "public abstract boolean is CaMeL Override = t . in CaMeL Global CaMeL Scope (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void checkPropertyVisibility( NodeTraversal t , Type getprop ,",
            "score": 99.29336368336396,
            "correctness": "uncompilable",
            "tokenized_patch": "void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Type get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.mode( ) ;",
            "score": 99.16056315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . mode ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.1531512920673,
            "correctness": "uncompilable",
            "tokenized_patch": "private check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = true && t == null ;",
            "score": 99.15006510416667,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = true && t == null ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t( ) &&",
            "score": 99.13258666992188,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t ( ) &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( Node getprop , void parent ) {",
            "score": 99.311767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node get@@ prop , void parent ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = this.in.in.in &&",
            "score": 99.21888834635416,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = this . in . in . in &&",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = t ;",
            "score": 99.15993923611111,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = t ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean checkPropertyVisibility( NodeTraversal t )",
            "score": 99.14998953683036,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && &",
            "score": 99.14493408203126,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private boolean isOverride = false && & ;",
            "score": 99.13175825639205,
            "correctness": "uncompilable",
            "tokenized_patch": "private boolean is CaMeL Override = false && & ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private private void checkPropertyVisibility( NodeTraversal t , Node parent )",
            "score": 99.38652208116319,
            "correctness": "uncompilable",
            "tokenized_patch": "private private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , Node parent )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( boolean objectType ) {",
            "score": 99.31058756510417,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( boolean object CaMeL Type ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( NodeTraversal t , this ) {",
            "score": 99.29259535845588,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , this ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = in.in.in.=(",
            "score": 99.21581217447917,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = in . in . in . = (",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride( ) ;",
            "score": 99.15962727864583,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override ( ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private float checkPropertyVisibility( NodeTraversal t ,",
            "score": 99.1488037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "private float check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true( ) {",
            "score": 99.14280007102273,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true ( ) {",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.in = ) ;",
            "score": 99.12626139322917,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . in = ) ;",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( this.t , NodeTraversal t )",
            "score": 99.33888075086806,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( this . t , Node CaMeL Traversal t )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean checkPropertyVisibility( NodeTraversal t , int",
            "score": 99.30930873325893,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean check CaMeL Property CaMeL Visibility ( Node CaMeL Traversal t , int",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "private void checkPropertyVisibility( Node check , Node getprop ,",
            "score": 99.29259490966797,
            "correctness": "uncompilable",
            "tokenized_patch": "private void check CaMeL Property CaMeL Visibility ( Node check , Node get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public boolean isOverride = true.isOverride( )",
            "score": 99.21454729352679,
            "correctness": "uncompilable",
            "tokenized_patch": "public boolean is CaMeL Override = true . is CaMeL Override ( )",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = t.isOverride = & |",
            "score": 99.15890938895089,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = t . is CaMeL Override = & |",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "public void checkPropertyVisibility( Object getprop ,",
            "score": 99.14871920072116,
            "correctness": "uncompilable",
            "tokenized_patch": "public void check CaMeL Property CaMeL Visibility ( Object get@@ prop ,",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        },
        {
            "patch": "boolean isOverride = isOverride( ) && &",
            "score": 99.1260986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "boolean is CaMeL Override = is CaMeL Override ( ) && &",
            "failed_triggering": "None/2",
            "failed_non_triggering": "None"
        }
    ]
}