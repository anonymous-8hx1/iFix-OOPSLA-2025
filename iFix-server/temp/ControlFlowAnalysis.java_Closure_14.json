{
    "src": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
    "patches": [
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.94860258556548,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.91459517045455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.87971496582031,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , true ) ;",
            "score": 99.74133831521739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.8662746263587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.82974906589673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.76958869485294,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.74745396205357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.7390773607337,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.80820719401042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.UNCOND ) ; }",
            "score": 99.763935546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ; }",
            "score": 99.75985717773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ;",
            "score": 99.7272418478261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.72225791529605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.7219005766369,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.66771298363095,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.8061014811198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.77512525475544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; break ;",
            "score": 99.75644318953805,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; break ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastChild( ) ) ;",
            "score": 99.74724786931819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.72904296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.71727454144022,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.70265502929688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.66078694661458,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.78668212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.77289177389706,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.70437782689145,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.68902033025569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , parent , cfa ) ) ; }",
            "score": 99.66020275297619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , parent , cfa ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) )",
            "score": 99.72037406589673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , true ) ; }",
            "score": 99.71859741210938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ) ;",
            "score": 99.71687622070313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.7097804857337,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.6773910522461,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false ) ;",
            "score": 99.65516662597656,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.7682574728261,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , cfa ) ;",
            "score": 99.76009468410327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } break ;",
            "score": 99.718017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.71658325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.7101806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.7006199048913,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode ) ;",
            "score": 99.67143322172619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , true ) ;",
            "score": 99.65298461914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.76060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ; } }",
            "score": 99.7168359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.70093883167614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.70093883167614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.70093883167614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.70093883167614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.70093883167614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.69952392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , false ) ;",
            "score": 99.69828869047619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.69664510091145,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode ) ; }",
            "score": 99.66660378196023,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.64293852306548,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.7583516438802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , finallyNode ) ; }",
            "score": 99.728759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + finallyNode ) ;",
            "score": 99.71537853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.71504720052083,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } } }",
            "score": 99.70048014322917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , true ) ;",
            "score": 99.69717261904762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.69223420516305,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ) ; }",
            "score": 99.69152250744048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.65973455255681,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.75697265625,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.727294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { next.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.7140476392663,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , Branch.UNCOND ,",
            "score": 99.700400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , false ) ;",
            "score": 99.69407056725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , finallyNode ) ; }",
            "score": 99.69044131324405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , finallyNode ) ;",
            "score": 99.67983610733695,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ;",
            "score": 99.65098987926136,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , parent , cfa ) ) ;",
            "score": 99.63928803943452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.71122409986413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( node , Branch.UNCOND , finallyNode ) ;",
            "score": 99.695029296875,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.64970317639802,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( parent ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.6342540922619,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( parent ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.75009390024039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ; }",
            "score": 99.70154339334239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , true ) ;",
            "score": 99.69320015285327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.6886874112216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.6886874112216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.6886874112216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'before') ; }",
            "score": 99.6886874112216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.6886874112216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.68088600852273,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false ) ; }",
            "score": 99.6354736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.74920333059211,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.UNCOND , finallyNode ) ;",
            "score": 99.70445185122283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.7041652513587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.6876932779948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.6749203330592,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } return parent ;",
            "score": 99.6315685453869,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.62713944284539,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.7453082540761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , null ) ;",
            "score": 99.68871008831522,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } else {",
            "score": 99.66421363467262,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.62061767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.74415940504808,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa , finallyNode ) ;",
            "score": 99.7020953634511,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.6983133951823,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', Branch.UNCOND , finallyNode ) ;",
            "score": 99.68869947350544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', Branch.UNCOND , finallyNode ) ;",
            "score": 99.68869947350544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', Branch.UNCOND , finallyNode ) ;",
            "score": 99.68869947350544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', Branch.UNCOND , finallyNode ) ;",
            "score": 99.68869947350544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', Branch.UNCOND , finallyNode ) ;",
            "score": 99.68869947350544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.create( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6856640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.66646321614583,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND , finallyNode ) ;",
            "score": 99.66348121279762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap.get( parent ) ) {",
            "score": 99.61790161132812,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { for( Node finallyNode : cfa.finallyMap.get( parent ) )",
            "score": 99.74301382211539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.69167162024456,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'less than') ; } }",
            "score": 99.68501613451087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( ' y (if true) and x ') ; } }",
            "score": 99.68501613451087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'greater than') ; } }",
            "score": 99.68501613451087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'before') ; } }",
            "score": 99.68501613451087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'Not reachable') ; } }",
            "score": 99.68501613451087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.6708347486413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.65904651988636,
            "correctness": "uncompilable",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.6166659268466,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( next ) ;",
            "score": 99.74154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.69950561523437,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.6881103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , Branch.UNCOND , finallyNode ) ;",
            "score": 99.66768215013587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.65886896306819,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.61564497514205,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; break ; }",
            "score": 99.69287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } return next ;",
            "score": 99.69005766369048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } return next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.68626644736842,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.68201171875,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , null ) ;",
            "score": 99.6659519361413,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; }",
            "score": 99.6566162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent , cfa ) ;",
            "score": 99.61719970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.61261541193181,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.7327521829044,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getFirstChild( ) ) ; }",
            "score": 99.69276494565217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa , cfa ) ;",
            "score": 99.68902297247024,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6834716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , null ) ;",
            "score": 99.66476004464286,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( parent , cfa ) ; }",
            "score": 99.65251813616071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , parent , cfa ) ) ;",
            "score": 99.61434326171874,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.61175537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.68589274088542,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.68140758167614,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.676806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.676806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.676806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.676806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.676806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.66175908627717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } break ;",
            "score": 99.65008835565476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , finallyNode ) ;",
            "score": 99.64820397418478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , node ) ;",
            "score": 99.60996607730263,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.72731526692708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , finallyNode ) ; }",
            "score": 99.68718155570652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.6746484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND , finallyNode ) ; }",
            "score": 99.64922540838069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, Branch.UNCOND , finallyNode ) ;",
            "score": 99.64755647078805,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.60577947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.7236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , true ) ; } }",
            "score": 99.67640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'less than') ; } } }",
            "score": 99.67317708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( ' y (if true) and x ') ; } } }",
            "score": 99.67317708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'greater than') ; } } }",
            "score": 99.67317708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'before') ; } } }",
            "score": 99.67317708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'Not reachable') ; } } }",
            "score": 99.67317708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ) ;",
            "score": 99.64873589409723,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } return node ;",
            "score": 99.60452706473214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } return node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.600341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "this . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getFirstChild( ) ) ; } }",
            "score": 99.67633056640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'less than') ; } }",
            "score": 99.67280910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; } }",
            "score": 99.67280910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'greater than') ; } }",
            "score": 99.67280910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'before') ; } }",
            "score": 99.67280910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'Not reachable') ; } }",
            "score": 99.67280910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa ) ;",
            "score": 99.66890171595982,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , null ) ; }",
            "score": 99.64767020089286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.64464222301136,
            "correctness": "uncompilable",
            "tokenized_patch": "finally . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.63818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "this . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node.UNCOND , finallyNode ) ;",
            "score": 99.59975363991477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.59691220238095,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.72134560032895,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null ) ;",
            "score": 99.64702690972223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.64443969726562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.59590418198529,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,( Node ) parent , cfa ) ;",
            "score": 99.5947033110119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ( Node ) parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , parent ) ;",
            "score": 99.6782863451087,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.66958618164062,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ;",
            "score": 99.64319428943452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , cfa ) ;",
            "score": 99.5943603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "children.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.59419389204545,
            "correctness": "uncompilable",
            "tokenized_patch": "children . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( fromNode , parent , cfa ) ; else",
            "score": 99.71908569335938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ) ) ; }",
            "score": 99.67724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.669169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.66661005434783,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa == null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) )",
            "score": 99.66383870442708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.64269438244048,
            "correctness": "uncompilable",
            "tokenized_patch": "finally . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } }",
            "score": 99.6402587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "My{ cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.63644276494566,
            "correctness": "uncompilable",
            "tokenized_patch": "My@@ { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; } } return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.59364536830357,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; } } return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , true ) ;",
            "score": 99.59141322544643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa.get( parent ) ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.71878756009616,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa . get ( parent ) ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , null ) ; }",
            "score": 99.66741943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next , parent , cfa ) ;",
            "score": 99.66620427911931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ) ; } }",
            "score": 99.66339983258929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -1, finallyNode ) ;",
            "score": 99.642333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node , cfa ) ; }",
            "score": 99.63947405133929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , 'less than') ;",
            "score": 99.63343877377717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , ' y (if true) and x ') ;",
            "score": 99.63343877377717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , 'greater than') ;",
            "score": 99.63343877377717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , 'before') ;",
            "score": 99.63343877377717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , 'Not reachable') ;",
            "score": 99.63343877377717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } } return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.58464704241071,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } } return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( next ) ; }",
            "score": 99.71585787259616,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( next ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.67240636488971,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , 'less than') ;",
            "score": 99.66654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ') ;",
            "score": 99.66654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , 'greater than') ;",
            "score": 99.66654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , 'before') ;",
            "score": 99.66654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable') ;",
            "score": 99.66654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'less than') ; } } }",
            "score": 99.66336059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; } } }",
            "score": 99.66336059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'greater than') ; } } }",
            "score": 99.66336059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'before') ; } } }",
            "score": 99.66336059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'Not reachable') ; } } }",
            "score": 99.66336059570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent , cfa ) ; }",
            "score": 99.63805571056548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.63331139605978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , false ) ;",
            "score": 99.58310081845238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa ) ;",
            "score": 99.67117648654514,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } ;",
            "score": 99.6659625509511,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.66304347826087,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( this , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6622265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( this , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.63588579963235,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , Branch.UNCOND , finallyNode ) ;",
            "score": 99.63332648026316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , this ) ;",
            "score": 99.63314964657738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,1) ;",
            "score": 99.5799331665039,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.7126953125,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , cfa ) ; }",
            "score": 99.67037527901786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getFirstChild( ) ) ;",
            "score": 99.66584916548295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( null , Branch.UNCOND , finallyNode ) ;",
            "score": 99.661982421875,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( null , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( next.getNext( ) ) ;",
            "score": 99.66197138247283,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( parent , cfa ) ; } }",
            "score": 99.63426624644886,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'less than') ;",
            "score": 99.63310314360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , ' y (if true) and x ') ;",
            "score": 99.63310314360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'greater than') ;",
            "score": 99.63310314360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'before') ;",
            "score": 99.63310314360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'Not reachable') ;",
            "score": 99.63310314360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( computeFollowNode( fromNode , parent , cfa ) ) ;",
            "score": 99.57838076636905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.71228966346153,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.67025417751736,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( name , Branch.UNCOND , finallyNode ) ;",
            "score": 99.66267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( name , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.6612109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } break ; } }",
            "score": 99.63380068824405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } break ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , this ) ;",
            "score": 99.6318359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.57547433035714,
            "correctness": "uncompilable",
            "tokenized_patch": "result . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , finallyNode ) ;",
            "score": 99.660810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } return null ;",
            "score": 99.657919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , cfa ) ;",
            "score": 99.65542457217262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( finallyNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6313244047619,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( finally CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "5"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ) ; } }",
            "score": 99.6251220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , true ) ; }",
            "score": 99.57664905894886,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2) ;",
            "score": 99.57494354248047,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,4) ;",
            "score": 99.57494354248047,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,3) ;",
            "score": 99.57494354248047,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,10) ;",
            "score": 99.57494354248047,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2008) ;",
            "score": 99.57494354248047,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , finallyNode , cfa ) ;",
            "score": 99.6697414232337,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , this ) ;",
            "score": 99.658828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ! Branch.UNCOND , finallyNode ) ;",
            "score": 99.63104802911931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node , cfa ) ; } }",
            "score": 99.62444513494319,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , Branch.UNCOND , finallyNode ) ;",
            "score": 99.57597270764802,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.707021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , cfa ) ; }",
            "score": 99.66946847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.65317993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.65317993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.65317993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'before') ; }",
            "score": 99.65317993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.65317993164062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.64783245584239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , new ) ;",
            "score": 99.6291736421131,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , new ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "list.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5757168856534,
            "correctness": "uncompilable",
            "tokenized_patch": "list . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , parent , cfa ) ; } }",
            "score": 99.70551006610577,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , new ) ;",
            "score": 99.6283542798913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , new ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ) ; }",
            "score": 99.6214599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.574462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.705498046875,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.66229538690476,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ; } }",
            "score": 99.65504964192708,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next , cfa ) ;",
            "score": 99.64532470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , true ) ;",
            "score": 99.62759001358695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ) ;",
            "score": 99.62100655691964,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.57255415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( node ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.57191685267857,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( node ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) , parent , cfa ) ;",
            "score": 99.65951936141305,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ; break ;",
            "score": 99.65208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node finallyNode = next ; cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.6451999830163,
            "correctness": "uncompilable",
            "tokenized_patch": "Node finally CaMeL Node = next ; cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , false ) ;",
            "score": 99.6273883322011,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.IN , finallyNode ) ;",
            "score": 99.6242431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . IN , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null ) ; }",
            "score": 99.62022640830592,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch ) ; }",
            "score": 99.57208806818181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( next ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56956845238095,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( next ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return null ;",
            "score": 99.64898681640625,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return null ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastChild( ) ) ; }",
            "score": 99.64417034646739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | finallyNode ) ;",
            "score": 99.62519763764881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; }",
            "score": 99.61796061197917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getParent( ) ) ;",
            "score": 99.57113037109374,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56928846571181,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.70330255681819,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.64771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.64771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.64771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'before') ; }",
            "score": 99.64771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.64771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getFirstChild( ) ) ; }",
            "score": 99.64110266644022,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6228259858631,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ) ; } } }",
            "score": 99.61611793154762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "(( Node ) next ).createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56744094122024,
            "correctness": "uncompilable",
            "tokenized_patch": "( ( Node ) next ) . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFollowNode( fromNode , parent , cfa ) ; } }",
            "score": 99.70257098858173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , finallyNode ) ; } }",
            "score": 99.65750254755434,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } } else {",
            "score": 99.64716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', finallyNode ) ;",
            "score": 99.62373182508681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.62373182508681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', finallyNode ) ;",
            "score": 99.62373182508681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', finallyNode ) ;",
            "score": 99.62373182508681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', finallyNode ) ;",
            "score": 99.62373182508681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return",
            "score": 99.6221036044034,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } break ; }",
            "score": 99.61480422247024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , false ) ; }",
            "score": 99.57084517045455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( this ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56726655505952,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( this ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.70146484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND ,0) ;",
            "score": 99.644345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } ; }",
            "score": 99.63839721679688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getParent( ) ) ;",
            "score": 99.63634033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Integer.UNCOND , finallyNode ) ;",
            "score": 99.62372116815476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Integer . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } return parent ;",
            "score": 99.61333673650569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -1, finallyNode ) ;",
            "score": 99.56931666324013,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56697591145833,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , root , cfa ) ;",
            "score": 99.6528087797619,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , node ) ;",
            "score": 99.641650390625,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.61238178453948,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.70067342122395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'less than') ; } } }",
            "score": 99.63983709161931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; } } }",
            "score": 99.63983709161931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'greater than') ; } } }",
            "score": 99.63983709161931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'before') ; } } }",
            "score": 99.63983709161931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'Not reachable') ; } } }",
            "score": 99.63983709161931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false ) ;",
            "score": 99.62227085658482,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.61273484002976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , false ) ;",
            "score": 99.61127387152777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this ) ;",
            "score": 99.56792891652961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.56123621323529,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return computeFallThrough( next ) ;",
            "score": 99.69911545973558,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.64720618206522,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.6388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastChild( ) ) ; } }",
            "score": 99.63613891601562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next , finallyNode ) ;",
            "score": 99.63254616477273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true ) ;",
            "score": 99.61750139508929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , finallyNode ) ;",
            "score": 99.61228345788044,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { finally { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.6108630952381,
            "correctness": "uncompilable",
            "tokenized_patch": "try { finally { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , float.UNCOND , finallyNode ) ; }",
            "score": 99.56496360085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , float . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "(( Node ) cfa ).createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56009347098214,
            "correctness": "uncompilable",
            "tokenized_patch": "( ( Node ) cfa ) . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.6978759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.64492458767361,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.63876342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.63876342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.63876342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.63876342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.63876342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , false ) ;",
            "score": 99.6325046705163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.63203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode : finallyNode ) ;",
            "score": 99.61749822443181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null ) ; } } }",
            "score": 99.60951450892857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.64456612723214,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( , Branch.UNCOND , finallyNode ) ;",
            "score": 99.638662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ) ;",
            "score": 99.6104403409091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , null ) ;",
            "score": 99.60882859002976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , node ) ; }",
            "score": 99.56474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.69114332932692,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND ) ; }",
            "score": 99.63702392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } } ;",
            "score": 99.62879435221355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } } ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , false ) ;",
            "score": 99.60928199404762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , null , null ) ;",
            "score": 99.60619007457386,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , null , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Token.UNCOND , finallyNode ) ;",
            "score": 99.56460425967262,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Token . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa ) ;",
            "score": 99.64263594777961,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.6356640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , Branch.UNCOND , finallyNode ) ;",
            "score": 99.60865319293478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ; }",
            "score": 99.60577947443181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , finallyNode ) ;",
            "score": 99.56337280273438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( node ) ;",
            "score": 99.68841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( ) ; } }",
            "score": 99.63307883522727,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , cfa ) ; }",
            "score": 99.6307040127841,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | finallyNode ) ; }",
            "score": 99.6256436434659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "dim.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.61453683035714,
            "correctness": "uncompilable",
            "tokenized_patch": "dim . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ) ; }",
            "score": 99.6052978515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.56316583806819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , root ) ;",
            "score": 99.55641682942708,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.6883036295573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ) , parent , cfa ) ;",
            "score": 99.64196246603261,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( hasFinally ) return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.62654976222827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( has CaMeL Finally ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , cfa ) ; }",
            "score": 99.62548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , false ) ; }",
            "score": 99.61277077414773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6062648607337,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; } }",
            "score": 99.56291852678571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; } return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.55476888020833,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; } return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.68687947591145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , finallyNode ) ;",
            "score": 99.641845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, Branch.UNCOND , finallyNode ) ;",
            "score": 99.61140242866848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent ) ;",
            "score": 99.6044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Token.UNCOND , finallyNode ) ; }",
            "score": 99.56291060014205,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Token . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , parent , cfa , cfa ) ;",
            "score": 99.63905400815217,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6278659986413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , cfa ) ;",
            "score": 99.62507459852431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target , Branch.UNCOND , finallyNode ) ;",
            "score": 99.62501061480978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , true ) ; }",
            "score": 99.6108065518466,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent ) ; }",
            "score": 99.6026611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.60239045516305,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getName( ) ) ;",
            "score": 99.56198120117188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( parent ) ;",
            "score": 99.685810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } return fromNode ;",
            "score": 99.6389797044837,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } return from CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6277567545573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.62289826766305,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , false ) ;",
            "score": 99.61073521205357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false ) ; }",
            "score": 99.55258358226104,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.685791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa ) ; } }",
            "score": 99.63786969866071,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.NULL ) ; }",
            "score": 99.62747192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; } }",
            "score": 99.6225818452381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , true ) ;",
            "score": 99.61050269717262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa , null ) ; }",
            "score": 99.60070219494048,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa , finallyNode ) ; }",
            "score": 99.6365276834239,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent ) ; } }",
            "score": 99.62157141644022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , finallyNode ) ; } }",
            "score": 99.60064142400569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , parent , finallyNode ) ;",
            "score": 99.59884510869566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parent , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Iterator.UNCOND , finallyNode ) ; }",
            "score": 99.55753950639205,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Iterator . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.68446858723958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.6363754272461,
            "correctness": "wrong",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'less than') ; } } }",
            "score": 99.62703080610795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( ' y (if true) and x ') ; } } }",
            "score": 99.62703080610795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'greater than') ; } } }",
            "score": 99.62703080610795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'before') ; } } }",
            "score": 99.62703080610795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'Not reachable') ; } } }",
            "score": 99.62703080610795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next , cfa ) ; }",
            "score": 99.62260509672619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , false ) ;",
            "score": 99.60930069633152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { finally { cfa.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.60059703480114,
            "correctness": "uncompilable",
            "tokenized_patch": "try { finally { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "context.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.59793526785714,
            "correctness": "uncompilable",
            "tokenized_patch": "context . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "e.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5517345610119,
            "correctness": "uncompilable",
            "tokenized_patch": "e . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , cfa ) ; else",
            "score": 99.68301391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , finallyNode , cfa ) ; }",
            "score": 99.63581649116848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ) ; } } }",
            "score": 99.6265536221591,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next , parent , cfa ) ; }",
            "score": 99.62026579483695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getFirstChild( ) ) ; } }",
            "score": 99.61965942382812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,0) ;",
            "score": 99.60925823709239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) , cfa ) ;",
            "score": 99.5997647372159,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNKNOWN , finallyNode ) ;",
            "score": 99.59667358398437,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UNKNOWN , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Iterator.UNCOND , finallyNode ) ;",
            "score": 99.55743117559524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Iterator . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return parent ; }",
            "score": 99.55162992931548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return parent ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , cfa , cfa ) ;",
            "score": 99.681513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } } return next ;",
            "score": 99.6338778409091,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } } return next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'less than') ; } }",
            "score": 99.62646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; } }",
            "score": 99.62646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'greater than') ; } }",
            "score": 99.62646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'before') ; } }",
            "score": 99.62646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'Not reachable') ; } }",
            "score": 99.62646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,0) ; }",
            "score": 99.61913045247395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , 0 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , true ) ;",
            "score": 99.60752802309783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , node ) ;",
            "score": 99.5963824728261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , float.UNCOND , finallyNode ) ;",
            "score": 99.55680338541667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , float . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,0) ;",
            "score": 99.55098724365234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { next.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.68115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , cfa , cfa ) ;",
            "score": 99.63346724076705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.62644449869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.62644449869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.62644449869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'before') ;",
            "score": 99.62644449869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.62644449869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'less than') ;",
            "score": 99.60743248980978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ' y (if true) and x ') ;",
            "score": 99.60743248980978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'greater than') ;",
            "score": 99.60743248980978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'before') ;",
            "score": 99.60743248980978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'Not reachable') ;",
            "score": 99.60743248980978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( parent , cfa ) ;",
            "score": 99.59468383789063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "children.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55673363095238,
            "correctness": "uncompilable",
            "tokenized_patch": "children . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , true ) ; }",
            "score": 99.54793054917279,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return computeFallThrough( node ) ;",
            "score": 99.68016639122597,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return compute CaMeL Fall CaMeL Through ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( ) ; } } }",
            "score": 99.62618215460526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getFirstChild( ) ) ;",
            "score": 99.61748712713069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0, finallyNode ) ;",
            "score": 99.60709281589673,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , null ) ; }",
            "score": 99.59375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , finallyNode ) ;",
            "score": 99.5929443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.55588600852273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.55588600852273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.55588600852273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'before') ; }",
            "score": 99.55588600852273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.55588600852273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , parent , cfa ) ; else",
            "score": 99.67900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , parent , cfa ) ; } }",
            "score": 99.63068953804348,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.62458602241848,
            "correctness": "uncompilable",
            "tokenized_patch": "result = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.61830767463235,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "} cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.61717640269886,
            "correctness": "uncompilable",
            "tokenized_patch": "} cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else { break ; }",
            "score": 99.59375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else { break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5928955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.55320980674342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.67864990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } return next ;",
            "score": 99.63020463423295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } return next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL , finallyNode ) ;",
            "score": 99.62415771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.61805791440217,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.61557006835938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa ) ; } }",
            "score": 99.59331984747024,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "dim.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55206853693181,
            "correctness": "uncompilable",
            "tokenized_patch": "dim . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.6783984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , finallyNode ) ; }",
            "score": 99.62868430397727,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( node.getNext( ) ) ; }",
            "score": 99.62327067057292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , null ) ; } }",
            "score": 99.61536175271739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , null ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.60399329144022,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.59255052649456,
            "correctness": "wrong",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( node , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55112915039062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ) ;",
            "score": 99.54220760569854,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( computeFollowNode( fromNode , parent , cfa ) ) ; }",
            "score": 99.677802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa , cfa ) ; }",
            "score": 99.62830699573864,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.clear( ) ; return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.61727241847827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . clear ( ) ; return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } else { }",
            "score": 99.59216889880952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } else { }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , UNCOND , finallyNode ) ;",
            "score": 99.59188842773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.6217624830163,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next , cfa ) ; } }",
            "score": 99.6160555752841,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; finally",
            "score": 99.60283868963069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa , cfa ) ; }",
            "score": 99.59192475818452,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58988229851974,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "3"
        },
        {
            "patch": "return computeFallThrough( computeFollowNode( fromNode , parent , cfa ) ) ; }",
            "score": 99.675693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , cfa , finallyNode ) ;",
            "score": 99.62705927309783,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( node.getNext( ) ) ; } }",
            "score": 99.62107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { parent.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.61416227921195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { parent . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , true ) ;",
            "score": 99.59144422743056,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , finallyNode ) ; }",
            "score": 99.54853748139881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( hasFinally( parent ) ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.67567795973558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( has CaMeL Finally ( parent ) ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , parent , cfa ) ;",
            "score": 99.62587193080357,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( ) ; }",
            "score": 99.6209004720052,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , null ) ;",
            "score": 99.58930896577381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "current.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54709694602273,
            "correctness": "uncompilable",
            "tokenized_patch": "current . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.62066650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.62066650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.62066650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.62066650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.62066650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this ) ; }",
            "score": 99.6103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , null ) ;",
            "score": 99.6012546705163,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent , cfa , parent ) ;",
            "score": 99.59120871803977,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent , cfa , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , finallyNode ) ; }",
            "score": 99.58822631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode ) ; }",
            "score": 99.54706365411931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.root ) ;",
            "score": 99.53942192925348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( ) ; } }",
            "score": 99.620302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , endNode ) ;",
            "score": 99.60105298913044,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TYPE , finallyNode ) ;",
            "score": 99.59108276367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TYPE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND : finallyNode ) ;",
            "score": 99.53916713169643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa ) ; return computeFallThrough( next , cfa ) ;",
            "score": 99.67506760817308,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ; return compute CaMeL Fall CaMeL Through ( next , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } }",
            "score": 99.62405556126645,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode ) ; } }",
            "score": 99.61865234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than') ; }",
            "score": 99.60940551757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ') ; }",
            "score": 99.60940551757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than') ; }",
            "score": 99.60940551757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before') ; }",
            "score": 99.60940551757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable') ; }",
            "score": 99.60940551757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( finallyNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5874911221591,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( finally CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } return null ;",
            "score": 99.53848121279762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa ) ; }",
            "score": 99.62401058799342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode + Branch.UNCOND , finallyNode ) ;",
            "score": 99.60951450892857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node + Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( startNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.6086758700284,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( start CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1, finallyNode ) ;",
            "score": 99.59862219769022,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , false ) ; }",
            "score": 99.58843703497024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5867229959239,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "current.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54471261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "current . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "list.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53601655505952,
            "correctness": "uncompilable",
            "tokenized_patch": "list . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.6721700032552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) )",
            "score": 99.61813221807066,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert cfa != null ; return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.6092196377841,
            "correctness": "wrong",
            "tokenized_patch": "assert cfa != null ; return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , target ) ;",
            "score": 99.59846297554348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } } else {",
            "score": 99.58754660866477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "target.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58562360491071,
            "correctness": "uncompilable",
            "tokenized_patch": "target . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode ) , parent , cfa ) ;",
            "score": 99.53553989955357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , cfa , finallyNode ) ; }",
            "score": 99.6231105638587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( ) ; }",
            "score": 99.61751302083333,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "9"
        },
        {
            "patch": "Node { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.60835597826087,
            "correctness": "uncompilable",
            "tokenized_patch": "Node { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ; }",
            "score": 99.607177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } else { break ;",
            "score": 99.58698064630681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } else { break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.54409644717262,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node.getNext( ) ) ; } }",
            "score": 99.67149939903847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , cfa , cfa ) ;",
            "score": 99.62309337797619,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , finallyNode ) ;",
            "score": 99.60796440972223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , name ) ; } }",
            "score": 99.6068805197011,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , name ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.true , finallyNode ) ;",
            "score": 99.58529052734374,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . true , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tree.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54400344122024,
            "correctness": "uncompilable",
            "tokenized_patch": "tree . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than') ;",
            "score": 99.53371710526316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ') ;",
            "score": 99.53371710526316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than') ;",
            "score": 99.53371710526316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before') ;",
            "score": 99.53371710526316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable') ;",
            "score": 99.53371710526316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa , cfa , cfa ) ;",
            "score": 99.62228260869566,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , fromNode ) ;",
            "score": 99.5976329985119,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , from CaMeL Node ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ! finallyNode ) ;",
            "score": 99.58546031605114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ! finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node ) fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58430989583333,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node ) from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , parent ) ;",
            "score": 99.54237124794408,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parent ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } } return parent ;",
            "score": 99.62189275568181,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } } return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + finallyNode ) ; }",
            "score": 99.6075106534091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.6055399576823,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , cfa ) ;",
            "score": 99.5962444802989,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , parent ) , cfa ) ; }",
            "score": 99.53281947544643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , parent ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.hasFinally( parent ) ) { return computeFallThrough( next ) ;",
            "score": 99.66957444411058,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , cfa , cfa ) ;",
            "score": 99.6202059659091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'less than') ; } }",
            "score": 99.61582728794643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( ' y (if true) and x ') ; } }",
            "score": 99.61582728794643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'greater than') ; } }",
            "score": 99.61582728794643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'before') ; } }",
            "score": 99.61582728794643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'Not reachable') ; } }",
            "score": 99.61582728794643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.60440726902173,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.60387652853261,
            "correctness": "uncompilable",
            "tokenized_patch": "node = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , false ) ; }",
            "score": 99.5848324424342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54110863095238,
            "correctness": "uncompilable",
            "tokenized_patch": "result = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.UNCOND , finallyNode ) ;",
            "score": 99.532470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( cfa ) ;",
            "score": 99.66734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.6043011209239,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa == null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | finallyNode ) ; } }",
            "score": 99.60379161005434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.59408967391305,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else { finally {",
            "score": 99.58463541666667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else { finally {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.66473388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , false ) ; }",
            "score": 99.6198962983631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , finallyNode ) ; }",
            "score": 99.60308547247024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,1) ;",
            "score": 99.59401537024456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } break ;",
            "score": 99.58463327508224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , finallyNode ) ;",
            "score": 99.54009331597223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( node ) ; }",
            "score": 99.66411884014423,
            "correctness": "wrong",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( node ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.61952903053977,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = next ; return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.60337136008523,
            "correctness": "uncompilable",
            "tokenized_patch": "Node next = next ; return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , this ) ;",
            "score": 99.59201978600544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ) ; } break ; }",
            "score": 99.5839510830966,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Task.UNCOND , finallyNode ) ;",
            "score": 99.5778576078869,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Task . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent , cfa ) ; }",
            "score": 99.53076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa ) ;",
            "score": 99.663525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'less than') ; } } }",
            "score": 99.61481323242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( ' y (if true) and x ') ; } } }",
            "score": 99.61481323242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'greater than') ; } } }",
            "score": 99.61481323242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'before') ; } } }",
            "score": 99.61481323242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'Not reachable') ; } } }",
            "score": 99.61481323242188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.60323963994566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name , Branch.UNCOND , finallyNode ) ;",
            "score": 99.60257090692934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node , cfa ) ;",
            "score": 99.58370971679688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than', finallyNode ) ;",
            "score": 99.57747749660327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.57747749660327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than', finallyNode ) ;",
            "score": 99.57747749660327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before', finallyNode ) ;",
            "score": 99.57747749660327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable', finallyNode ) ;",
            "score": 99.57747749660327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.53736461292614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.53736461292614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.53736461292614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.53736461292614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.53736461292614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.53040835731908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , parent , cfa ) ;",
            "score": 99.663134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ) ) ; }",
            "score": 99.61914672851563,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } return cfa ;",
            "score": 99.61447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND ) ; } }",
            "score": 99.6016133626302,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58928888494319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.class , finallyNode ) ;",
            "score": 99.57616577148437,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . class , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Comparable.UNCOND , finallyNode ) ;",
            "score": 99.53594680059524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Comparable . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next.getNext( ) ) ;",
            "score": 99.66304524739583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( ) ; } } }",
            "score": 99.61398182744566,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58864427649456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TYPE , finallyNode ) ; }",
            "score": 99.58354259672619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TYPE , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.5745849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tree.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53544477982955,
            "correctness": "uncompilable",
            "tokenized_patch": "tree . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.hasFinally( parent ) ) { return computeFallThrough( node ) ;",
            "score": 99.66257887620192,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , parent , cfa ) ;",
            "score": 99.61881510416667,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch != null ) { cfa.createEdge( fromNode , Branch.UNCOND ) ; }",
            "score": 99.6137109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode + true ) ;",
            "score": 99.58830460258152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node + true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , null ) ; }",
            "score": 99.58280806107955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NO , finallyNode ) ;",
            "score": 99.57415771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NO , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.52906799316406,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , cfa ) ;",
            "score": 99.66192072088069,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap.get( parent ) ) { if( }",
            "score": 99.61683721127717,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) { if ( }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.61292085193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.61292085193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.61292085193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.61292085193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.61292085193452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "scope.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58820452008929,
            "correctness": "uncompilable",
            "tokenized_patch": "scope . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null ) ; break ; }",
            "score": 99.5820545014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ; break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if(( cfa != null ) ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.660224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ( cfa != null ) ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) next.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.6019620028409,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.59852294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ) ; break ; }",
            "score": 99.58160109747024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ; break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; continue ;",
            "score": 99.5739109205163,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; continue ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , false ) ;",
            "score": 99.53398980034723,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) ) ;",
            "score": 99.52834647042411,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( parent ) ; }",
            "score": 99.6599590594952,
            "correctness": "wrong",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( parent ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "if( cfa != null ) { computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.61231530230978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } } }",
            "score": 99.61141967773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getParent( ) , cfa ) ;",
            "score": 99.59995339133523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Parent ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.58429509943181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; break ; }",
            "score": 99.58154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.DEFAULT , finallyNode ) ;",
            "score": 99.57381591796874,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . DEFAULT , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.52723524305556,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.65994966947116,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , cfa , finallyNode ) ;",
            "score": 99.61143427309783,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( ) ; } }",
            "score": 99.61089533025569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( hasFinally ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.59971552309783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( has CaMeL Finally ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , false ) ; } } }",
            "score": 99.58091517857143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , false ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND , node ) ;",
            "score": 99.5732930501302,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , node ) ;",
            "score": 99.52698432074652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node.getLastChild( ) ) ; else",
            "score": 99.65943321814903,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , null ) ; }",
            "score": 99.6113048735119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.EMPTY ) ; }",
            "score": 99.61086018880208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . EMPTY ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = next ; cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.59931873139881,
            "correctness": "uncompilable",
            "tokenized_patch": "Node next = next ; cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , null ) ;",
            "score": 99.58098038383152,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.Branch.UNCOND , finallyNode ) ; }",
            "score": 99.57975630326705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5328702059659,
            "correctness": "uncompilable",
            "tokenized_patch": "result . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return node ; }",
            "score": 99.52571614583333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND ) ) { return cfa ; }",
            "score": 99.61081949869792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) { return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.61081861413044,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5965067545573,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , null ) ;",
            "score": 99.58040364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , null ) ; } }",
            "score": 99.5791903409091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , null ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53248232886905,
            "correctness": "uncompilable",
            "tokenized_patch": "node = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL , finallyNode ) ; } }",
            "score": 99.60991876775569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , this ) ; }",
            "score": 99.59616088867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , this ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; break ; } } }",
            "score": 99.5790783110119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; break ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Assignment.UNCOND , finallyNode ) ;",
            "score": 99.56869652157738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Assignment . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , finallyNode ) ;",
            "score": 99.53125678168402,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , node , cfa ) ; }",
            "score": 99.52469308035714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this ) ; cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.65787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this ) ; cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , cfa ) ; } }",
            "score": 99.60978190104167,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.NONE ) ; }",
            "score": 99.60855102539062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next , finallyNode ) ; }",
            "score": 99.59726350203805,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.put( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.59541829427083,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . put ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2, Branch.UNCOND , finallyNode ) ;",
            "score": 99.57998259171195,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,4, Branch.UNCOND , finallyNode ) ;",
            "score": 99.57998259171195,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,3, Branch.UNCOND , finallyNode ) ;",
            "score": 99.57998259171195,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,10, Branch.UNCOND , finallyNode ) ;",
            "score": 99.57998259171195,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2008, Branch.UNCOND , finallyNode ) ;",
            "score": 99.57998259171195,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.Branch.UNCOND , finallyNode ) ;",
            "score": 99.57804361979167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "statements.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56722005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "statements . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "state . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.6577679177989,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , parent , cfa ) ; }",
            "score": 99.60761951264881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'less than') ; }",
            "score": 99.60641818576389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( ' y (if true) and x ') ; }",
            "score": 99.60641818576389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'greater than') ; }",
            "score": 99.60641818576389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'before') ; }",
            "score": 99.60641818576389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'Not reachable') ; }",
            "score": 99.60641818576389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,( Node ) cfa ) ;",
            "score": 99.59704008556548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , ( Node ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.59485394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.59485394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.59485394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'before') ;",
            "score": 99.59485394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.59485394021739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2) ;",
            "score": 99.5794741981908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4) ;",
            "score": 99.5794741981908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3) ;",
            "score": 99.5794741981908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10) ;",
            "score": 99.5794741981908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008) ;",
            "score": 99.5794741981908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } else { finally {",
            "score": 99.57771439985795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } else { finally {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , false ) ;",
            "score": 99.56626674107143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5299405184659,
            "correctness": "uncompilable",
            "tokenized_patch": "break cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.65773607336956,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL , finallyNode ) ; }",
            "score": 99.60638718377976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) ) ; } }",
            "score": 99.60631742931548,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than', finallyNode ) ; }",
            "score": 99.59429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ', finallyNode ) ; }",
            "score": 99.59429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than', finallyNode ) ; }",
            "score": 99.59429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before', finallyNode ) ; }",
            "score": 99.59429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable', finallyNode ) ; }",
            "score": 99.59429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5791546365489,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , { cfa",
            "score": 99.52874200994319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , { cfa",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.65721717247597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND ) ) { return cfa ; } }",
            "score": 99.60525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) { return cfa ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { next.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.59511931046195,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , 'less than') ;",
            "score": 99.57905910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , ' y (if true) and x ') ;",
            "score": 99.57905910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , 'greater than') ;",
            "score": 99.57905910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , 'before') ;",
            "score": 99.57905910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , 'Not reachable') ;",
            "score": 99.57905910326087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.56566365559895,
            "correctness": "uncompilable",
            "tokenized_patch": "else { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , UNCOND , finallyNode ) ; }",
            "score": 99.52849731445312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , cfa ) ; }",
            "score": 99.52213969983552,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node.getFirstChild( ) ) ;",
            "score": 99.65645658052884,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.60548311121323,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.57800823709239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null ) ; } break ;",
            "score": 99.57620675223214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , false , false ) ;",
            "score": 99.5656101392663,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , false , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'less than') ; }",
            "score": 99.52845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( ' y (if true) and x ') ; }",
            "score": 99.52845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'greater than') ; }",
            "score": 99.52845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'before') ; }",
            "score": 99.52845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'Not reachable') ; }",
            "score": 99.52845458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,( Node ) cfa ) ;",
            "score": 99.52015445106908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ( Node ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa ) ; return computeFallThrough( parent , cfa ) ;",
            "score": 99.65564903846153,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ; return compute CaMeL Fall CaMeL Through ( parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa , finallyNode ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.60525645380434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa , finally CaMeL Node ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.60517810639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.60517810639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.60517810639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'before') ;",
            "score": 99.60517810639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.60517810639881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , name ) ; }",
            "score": 99.59222966974431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , name ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node.UNCOND , finallyNode ) ) ;",
            "score": 99.57777471127717,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ) ; } break ;",
            "score": 99.57593936011905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; else",
            "score": 99.52817604758523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; break ;",
            "score": 99.51835801866319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.605068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.605068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.605068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.605068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.605068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , cfa ) ;",
            "score": 99.6029052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.create( finallyNode ) ) ; }",
            "score": 99.59211869673295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . create ( finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,(( Node ) parent , cfa ) ) ;",
            "score": 99.5918201264881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( ( Node ) parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.57745070684524,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; assert",
            "score": 99.5646639737216,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; assert",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "iterator.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.52803178267045,
            "correctness": "uncompilable",
            "tokenized_patch": "iterator . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.51828002929688,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return computeFallThrough( cfa ) ; }",
            "score": 99.65450345552884,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , parent , parent , cfa ) ;",
            "score": 99.60221000339673,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , null ) ; }",
            "score": 99.57697088068181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.UNCOND , finallyNode ) ; }",
            "score": 99.5721102627841,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { finallyNode",
            "score": 99.52772216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { finally CaMeL Node",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , cfa ) ;",
            "score": 99.5174789428711,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa instanceof Node ) { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.65309651692708,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa instanceof Node ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.60453287760417,
            "correctness": "uncompilable",
            "tokenized_patch": "result = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getLastChild( ) ) ;",
            "score": 99.6017333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , finallyNode ) ;",
            "score": 99.57294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.0, finallyNode ) ;",
            "score": 99.561767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'less than') ; }",
            "score": 99.52759399414063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( ' y (if true) and x ') ; }",
            "score": 99.52759399414063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'greater than') ; }",
            "score": 99.52759399414063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'before') ; }",
            "score": 99.52759399414063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'Not reachable') ; }",
            "score": 99.52759399414063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51627390008224,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "5"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.65245643028847,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( ) ; }",
            "score": 99.60395740327381,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "9"
        },
        {
            "patch": "cfa.createEdge( fromNode.getLastChild( ) ) ; }",
            "score": 99.60132998511905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,",
            "score": 99.585791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.651611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6037066915761,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , node , cfa ) ;",
            "score": 99.60106259300595,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58951469089673,
            "correctness": "uncompilable",
            "tokenized_patch": "null = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , finallyNode ) ;",
            "score": 99.57201470269098,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "2"
        },
        {
            "patch": "synchronized( cfa ) { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.5693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , UNCOND , finallyNode ) ;",
            "score": 99.56104800575658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.52747163318452,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) , parent , cfa ) ;",
            "score": 99.51121012369792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.6510721842448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'less than') ; } } }",
            "score": 99.60350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( ' y (if true) and x ') ; } } }",
            "score": 99.60350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'greater than') ; } } }",
            "score": 99.60350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'before') ; } } }",
            "score": 99.60350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'Not reachable') ; } } }",
            "score": 99.60350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa , root ) ;",
            "score": 99.59815615699405,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , finallyNode ,",
            "score": 99.58927408854167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , finally CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null ) ;",
            "score": 99.57166399274554,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent , cfa ) ; } }",
            "score": 99.5689364346591,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "block.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56094215029762,
            "correctness": "uncompilable",
            "tokenized_patch": "block . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.650810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return null ; }",
            "score": 99.6023828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return null ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.5890604654948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.5890604654948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.5890604654948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.5890604654948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.5890604654948,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , false , true ) ;",
            "score": 99.5596340013587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , false , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa ) ; }",
            "score": 99.51024576822917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.hasFinally( parent ) ) { return computeFallThrough( parent ) ;",
            "score": 99.65073805588942,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . has CaMeL Finally ( parent ) ) { return compute CaMeL Fall CaMeL Through ( parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.UNCOND ; }",
            "score": 99.60206095377605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , finallyNode ) ;",
            "score": 99.59748979048295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.58817138671876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.58340115017361,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.65036010742188,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } } break ;",
            "score": 99.5961681547619,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5873386548913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( next , finallyNode ) ;",
            "score": 99.58236839657738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( next , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5678378018466,
            "correctness": "uncompilable",
            "tokenized_patch": "o . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5586574388587,
            "correctness": "uncompilable",
            "tokenized_patch": "else { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , null ) ; }",
            "score": 99.52532404119319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.IF , finallyNode ) ;",
            "score": 99.50643920898438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . IF , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , root , cfa ) ; }",
            "score": 99.5956143465909,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , root , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( next , cfa ) ;",
            "score": 99.58221114309211,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( next , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ) ; } break ;",
            "score": 99.56773158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "removed.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.52496892755681,
            "correctness": "uncompilable",
            "tokenized_patch": "removed . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.64956430288461,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) { }",
            "score": 99.600078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) { }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , root ) ; }",
            "score": 99.59492420014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , root ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58664422286184,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch..UNCOND , finallyNode ) ;",
            "score": 99.58057750355114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2, finallyNode ) ;",
            "score": 99.56706436820652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4, finallyNode ) ;",
            "score": 99.56706436820652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3, finallyNode ) ;",
            "score": 99.56706436820652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10, finallyNode ) ;",
            "score": 99.56706436820652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008, finallyNode ) ;",
            "score": 99.56706436820652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , true ) ; }",
            "score": 99.56673391241776,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.50299682617188,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { next = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.649365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node != null ) { cfa.createEdge( fromNode , Branch.UNCOND ) ; }",
            "score": 99.6,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa , false ) ;",
            "score": 99.59480794270833,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5856221516927,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( parent ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.58052201704545,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( parent ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -1, finallyNode ) ; }",
            "score": 99.52431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 1 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent ) ;",
            "score": 99.50267198350694,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.649345703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.isDefaultCase( ) ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.5995703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.isDefaultCase( ) ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.5995703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.isDefaultCase( ) ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.5995703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.isDefaultCase( ) ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.5995703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.isDefaultCase( ) ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.5995703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , cfa , cfa ) ;",
            "score": 99.5942150297619,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getFirstChild( ) ) ; }",
            "score": 99.58455757472827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0) ;",
            "score": 99.56645122327302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getNext( ) ) ;",
            "score": 99.56614379882812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , true ) ;",
            "score": 99.55694289434524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getParent( ) ) ; }",
            "score": 99.52399553571429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa instanceof Node ) { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.64921061197917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa instanceof Node ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.59934488932292,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , target ) ; } }",
            "score": 99.584228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , target ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( true ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.57822963169643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( true ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode + false ) ;",
            "score": 99.56642747961956,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node + false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , true ) ; } } }",
            "score": 99.5661388578869,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , true ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5565185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root.getParent( ) ) ;",
            "score": 99.5232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return parent ;",
            "score": 99.50048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.64898681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.5991847826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , root , cfa ) ;",
            "score": 99.59227405894886,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFollowNode( fromNode , cfa ) ;",
            "score": 99.57570578835227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.56642150878906,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Comparable.UNCOND , finallyNode ) ; }",
            "score": 99.52247203480114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Comparable . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ; } }",
            "score": 99.59901936848958,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , UNCOND , finallyNode ) ;",
            "score": 99.59225027901786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( startNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58160109747024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( start CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56577845982143,
            "correctness": "uncompilable",
            "tokenized_patch": "o . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "item.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5649181547619,
            "correctness": "uncompilable",
            "tokenized_patch": "item . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getNext( ) ) ;",
            "score": 99.49944458007812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.64795860877403,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , cfa ) ;",
            "score": 99.58936767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , node ) ; } }",
            "score": 99.58138374660327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node( finallyNode ) ) ;",
            "score": 99.56453857421874,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TRUE , finallyNode ) ;",
            "score": 99.555517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TRUE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ;",
            "score": 99.52236106178977,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , cfa ) ;",
            "score": 99.49895477294922,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , fromNode , cfa ) ;",
            "score": 99.64654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) finallyNode ;",
            "score": 99.59782104492187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa ) ; }",
            "score": 99.58890380859376,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getFirstChild( ) ) ; break ;",
            "score": 99.58121744791667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , -1) ;",
            "score": 99.55467732747395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , - 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND( finallyNode ) ) ;",
            "score": 99.5215731534091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap.get( parent ) )",
            "score": 99.49862510279605,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFollowNode( fromNode , parent , cfa , cfa ) ;",
            "score": 99.64634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.59765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.59765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.59765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.59765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.59765625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , cfa ) ; } }",
            "score": 99.5870028409091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58085123697917,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( next ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.57007945667614,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( next ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1) ;",
            "score": 99.56344443873355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getName( ) , finallyNode ) ; }",
            "score": 99.52153087797619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Name ( ) , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.49809184827302,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.64633178710938,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'less than') ; } }",
            "score": 99.59737356085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( ' y (if true) and x ') ; } }",
            "score": 99.59737356085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'greater than') ; } }",
            "score": 99.59737356085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'before') ; } }",
            "score": 99.59737356085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'Not reachable') ; } }",
            "score": 99.59737356085526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , true ) ; }",
            "score": 99.58636765252976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , index ) ; } }",
            "score": 99.58082116168478,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , index ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.root , finallyNode ) ;",
            "score": 99.57000177556819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . root , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , this ) ;",
            "score": 99.56308381453805,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getName( ) , finallyNode ) ;",
            "score": 99.52128462357955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Name ( ) , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.fromNode , parent , cfa ) ;",
            "score": 99.49680786132812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , computeFollowNode( cfa ) ) ;",
            "score": 99.645595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , compute CaMeL Follow CaMeL Node ( cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND , name ) ;",
            "score": 99.596904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , name ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) , finallyNode ) ;",
            "score": 99.5795186360677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56987072172619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( false ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56246512276786,
            "correctness": "uncompilable",
            "tokenized_patch": "i . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56240012428977,
            "correctness": "uncompilable",
            "tokenized_patch": "! cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getName( ) ) ; }",
            "score": 99.51978701636905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Name ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( parent.getLastChild( ) ) ; else",
            "score": 99.64532940204327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final NodeUtil.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.59581502278645,
            "correctness": "uncompilable",
            "tokenized_patch": "final Node CaMeL Util . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ) ) ; } }",
            "score": 99.58560035342262,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.57947794596355,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56797572544643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , target ) ;",
            "score": 99.56234077785327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5620450106534,
            "correctness": "uncompilable",
            "tokenized_patch": "i . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode.getParent( ) ) ;",
            "score": 99.51938698508523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , this ) ;",
            "score": 99.49674479166667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next.getNext( ) ) ; }",
            "score": 99.6447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , root , cfa ) ; }",
            "score": 99.58506556919643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , root , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND + finallyNode ) ;",
            "score": 99.5676502046131,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.56174538352273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) {",
            "score": 99.56153506324405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , finallyNode ) ; }",
            "score": 99.55296834309895,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Disposer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51798502604167,
            "correctness": "uncompilable",
            "tokenized_patch": "Disposer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.49557834201389,
            "correctness": "wrong",
            "tokenized_patch": "cfa . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( next != null ) { return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.644443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } continue ;",
            "score": 99.5778299967448,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } continue ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getParent( ) ) ; }",
            "score": 99.5673595610119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode , new ) ;",
            "score": 99.56086531929348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node , new ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , List.UNCOND , finallyNode ) ;",
            "score": 99.51705496651786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , List . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , cfa ) ) ;",
            "score": 99.49026649876645,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.644287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , parent , cfa ) ; }",
            "score": 99.583251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ,0) ; } }",
            "score": 99.57728643002717,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , 0 ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55977199388587,
            "correctness": "uncompilable",
            "tokenized_patch": "if = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55258576766305,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.51630193536931,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNext( ) ) ;",
            "score": 99.48993598090277,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( parent.getNext( ) ) ; }",
            "score": 99.64421875,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "if( finallyNode == null ) { throw new IllegalArgumentException( ) ; } } }",
            "score": 99.59423828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , parent , cfa ) ;",
            "score": 99.5827869233631,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.Branch.UNCOND , finallyNode ) ; }",
            "score": 99.57595825195312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } break ; }",
            "score": 99.56156616210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.true ) ;",
            "score": 99.55190641983695,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , long.UNCOND , finallyNode ) ; }",
            "score": 99.51629083806819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , long . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.48946982935855,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null && cfa.createEdge( fromNode , Branch.UNCOND , null ) )",
            "score": 99.59416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , root , cfa ) ;",
            "score": 99.58214750744048,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent.getNext( ) ) ;",
            "score": 99.56465076264881,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( Node finallyNode : cfa.finallyMap.get( parent ) ) {",
            "score": 99.5614013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,( Node ) finallyNode ) ;",
            "score": 99.5508524576823,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ( Node ) finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND2, finallyNode ) ;",
            "score": 99.51418235085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND4, finallyNode ) ;",
            "score": 99.51418235085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND3, finallyNode ) ;",
            "score": 99.51418235085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND10, finallyNode ) ;",
            "score": 99.51418235085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND2008, finallyNode ) ;",
            "score": 99.51418235085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ) ) ;",
            "score": 99.64252786075367,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isDefaultCase( ) ) { throw new Error( 'less than') ; }",
            "score": 99.59322987432066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isDefaultCase( ) ) { throw new Error( ' y (if true) and x ') ; }",
            "score": 99.59322987432066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isDefaultCase( ) ) { throw new Error( 'greater than') ; }",
            "score": 99.59322987432066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isDefaultCase( ) ) { throw new Error( 'before') ; }",
            "score": 99.59322987432066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isDefaultCase( ) ) { throw new Error( 'Not reachable') ; }",
            "score": 99.59322987432066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Default CaMeL Case ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.57483927408855,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , null ) ;",
            "score": 99.55040922619048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } else {",
            "score": 99.48609619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } } break ;",
            "score": 99.59322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( nameNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.57422984730114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } break ; } } }",
            "score": 99.56022505326705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } break ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "adapter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55711728050595,
            "correctness": "uncompilable",
            "tokenized_patch": "adapter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , mode ) ;",
            "score": 99.55008067255434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , mode ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent ) ;",
            "score": 99.48533630371094,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next == null ) { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.6400655110677,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next == null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.class ) ; }",
            "score": 99.59304809570312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . class ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.58050858347039,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.Branch.UNCOND , finallyNode ) ;",
            "score": 99.57404891304348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode != null ) ;",
            "score": 99.54921025815217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node != null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getName( ) , finallyNode ) ;",
            "score": 99.51135864257813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Name ( ) , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , cfa ) ; }",
            "score": 99.63889478600544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent.getLastChild( ) ) ;",
            "score": 99.5600253018466,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55597478693181,
            "correctness": "uncompilable",
            "tokenized_patch": "final cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.6388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , cfa ) ;",
            "score": 99.57960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getFirstChild( ) ) ; } }",
            "score": 99.5732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( true ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.55905983664773,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( true ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , UNCOND , finallyNode ) ;",
            "score": 99.55579194568452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , false , false ) ;",
            "score": 99.54774541440217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , false , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } break ;",
            "score": 99.482373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ).getNext( ) ) ;",
            "score": 99.6384765625,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( ) ; }",
            "score": 99.59201049804688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , cfa , false ) ;",
            "score": 99.57826450892857,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next , Branch.UNCOND , finallyNode ) ;",
            "score": 99.57232344777961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , 'less than') ;",
            "score": 99.55574544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , ' y (if true) and x ') ;",
            "score": 99.55574544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , 'greater than') ;",
            "score": 99.55574544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , 'before') ;",
            "score": 99.55574544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , 'Not reachable') ;",
            "score": 99.55574544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54758522727273,
            "correctness": "uncompilable",
            "tokenized_patch": "else cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) finallyNode ) ;",
            "score": 99.5107357627467,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.DO , finallyNode ) ;",
            "score": 99.48209228515626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . DO , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.63787372295673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getNext( ) ) ; }",
            "score": 99.57777913411458,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , true ) ; }",
            "score": 99.55774507068452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { next.createEdge( fromNode , cfa ) ;",
            "score": 99.55551292782738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { next . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": ") { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55525008491848,
            "correctness": "uncompilable",
            "tokenized_patch": ") { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode , true ) ;",
            "score": 99.54714037024456,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , UNCOND , finallyNode ) ; }",
            "score": 99.50874467329545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.4816830283717,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.63770548502605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa , cfa ) ;",
            "score": 99.57749720982143,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this ) ; } }",
            "score": 99.5708240327381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55659412202381,
            "correctness": "uncompilable",
            "tokenized_patch": "v . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; } return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.48125,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; } return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( parent.getLastChild( ) ) ; }",
            "score": 99.63759202223558,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) , cfa ) ;",
            "score": 99.57654389880952,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.5703060752467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.5703060752467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.5703060752467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.5703060752467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.5703060752467,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "context.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55628551136364,
            "correctness": "uncompilable",
            "tokenized_patch": "context . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50848943536931,
            "correctness": "uncompilable",
            "tokenized_patch": "n . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( node ) ) { cfa.createEdge( node ) ; } }",
            "score": 99.58949788411458,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( node ) ) { cfa . create CaMeL Edge ( node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , root ) ; }",
            "score": 99.57609049479167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , root ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "callback.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5561290922619,
            "correctness": "uncompilable",
            "tokenized_patch": "callback . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , parent , cfa ) ;",
            "score": 99.5519775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , new ) ; }",
            "score": 99.55103648792614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , new ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.54600016276042,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cl.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5083895596591,
            "correctness": "uncompilable",
            "tokenized_patch": "cl . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,1) ; }",
            "score": 99.47898236443015,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.6362890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa , null ) ;",
            "score": 99.57463727678571,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , endNode ) ; }",
            "score": 99.5697021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EMPTY , finallyNode ) ;",
            "score": 99.55076904296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EMPTY , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , endNode ) ;",
            "score": 99.5507579985119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , end CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.47845099954044,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( parent.getFirstChild( ) ) ;",
            "score": 99.63437124399039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false ) cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5894140625,
            "correctness": "wrong",
            "tokenized_patch": "if ( false ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getLastChild( ) ) ; }",
            "score": 99.56926163383152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "AOM.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55591982886905,
            "correctness": "uncompilable",
            "tokenized_patch": "AOM . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , target ) ;",
            "score": 99.55068824404762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( false ) { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.55045942826705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( false ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Math.UNCOND , finallyNode ) ;",
            "score": 99.50792875744048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Math . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) parent , cfa ) ;",
            "score": 99.47690301192434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa ) ;",
            "score": 99.6342529296875,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND , this ) ;",
            "score": 99.56880696614583,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode + Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5558194247159,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node + Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5506007982337,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,(( Token ) parent , cfa ) ) ;",
            "score": 99.55021158854167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( ( Token ) parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.47672729492187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node.getNext( ) ) ; else",
            "score": 99.634033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , cfa ) ; } }",
            "score": 99.57405229048295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( fromNode , parent , cfa ) ; } }",
            "score": 99.5554431733631,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50678045099431,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.63369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isEmpty( ) ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.58826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isEmpty( ) ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.58826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isEmpty( ) ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.58826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isEmpty( ) ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.58826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isEmpty( ) ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.58826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55519797585227,
            "correctness": "uncompilable",
            "tokenized_patch": "v . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.class ) ;",
            "score": 99.5501125169837,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . class ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Disposer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50645862926136,
            "correctness": "uncompilable",
            "tokenized_patch": "Disposer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , fromNode ) ;",
            "score": 99.47649536132812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.588134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , cfa , cfa ) ; }",
            "score": 99.5722423735119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stmt.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55516415550595,
            "correctness": "uncompilable",
            "tokenized_patch": "stmt . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5442606608073,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ! cfa ) ;",
            "score": 99.47532025505515,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ! cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.6321437669837,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.58765933388158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.58765933388158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.58765933388158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.58765933388158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.58765933388158,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ) ) ; }",
            "score": 99.57111952039931,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.56715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.56715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.56715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'before') ; }",
            "score": 99.56715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.56715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , cfa ) ;",
            "score": 99.55501556396484,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new >( finallyNode ) ) ;",
            "score": 99.54913330078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new > ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Style.UNCOND , finallyNode ) ; }",
            "score": 99.50600363991477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Style . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2) ; }",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,4) ; }",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,3) ; }",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,10) ; }",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2008) ; }",
            "score": 99.47519818474265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.58720470610119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Style.UNCOND , finallyNode ) ;",
            "score": 99.54881649925595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Style . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent.getLastChild( ) ) ;",
            "score": 99.54551295230263,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "task.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54335239955357,
            "correctness": "uncompilable",
            "tokenized_patch": "task . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.63182576497395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) ) ; } }",
            "score": 99.56862278988487,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56592858355978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ) ; } }",
            "score": 99.55390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new , UNCOND , finallyNode ) ;",
            "score": 99.54873511904762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent.getNext( ) ) ;",
            "score": 99.54524536132813,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , false , true ) ;",
            "score": 99.54273522418478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , false , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50518243963069,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.47230224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next == null ) { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.63022867838542,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next == null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isNull( ) ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.586005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Null ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isNull( ) ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.586005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Null ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isNull( ) ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.586005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Null ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isNull( ) ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.586005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Null ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isNull( ) ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.586005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Null ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } ) ;",
            "score": 99.56517537434895,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getLastChild( ) ) ;",
            "score": 99.55371771918402,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , new ) ;",
            "score": 99.54811693274456,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , new ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this , finallyNode ) ;",
            "score": 99.54259723165761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; ;",
            "score": 99.50502319335938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch ) ; } }",
            "score": 99.5857464334239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.56434122721355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { next.createEdge( fromNode , cfa ) ; }",
            "score": 99.54414506392045,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { next . create CaMeL Edge ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , { finallyNode",
            "score": 99.54239908854167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , { finally CaMeL Node",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.6299715909091,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'less than') ; } }",
            "score": 99.58560844089673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( ' y (if true) and x ') ; } }",
            "score": 99.58560844089673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'greater than') ; } }",
            "score": 99.58560844089673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'before') ; } }",
            "score": 99.58560844089673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'Not reachable') ; } }",
            "score": 99.58560844089673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , target ) ; }",
            "score": 99.56427556818181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , target ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else { return parent ;",
            "score": 99.5521573153409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else { return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , Branch ) ;",
            "score": 99.54684315557066,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , finallyNode ) ;",
            "score": 99.54317220052083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,",
            "score": 99.54170532226563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = finallyNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5046053799716,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = finally CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56417410714286,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( NodeUtil.hasFinally( parent ) ) {",
            "score": 99.55211292613636,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, finallyNode ) ;",
            "score": 99.54665798611111,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50437233664773,
            "correctness": "uncompilable",
            "tokenized_patch": "break . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , node , cfa ) ;",
            "score": 99.47122192382812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getLastChild( ) == node ) { return computeFallThrough( next ) ;",
            "score": 99.62979830228366,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Last CaMeL Child ( ) == node ) { return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ) , cfa ) ;",
            "score": 99.56405784970238,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , parent ) ; } }",
            "score": 99.56304640997024,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , this ) ; }",
            "score": 99.54664195667614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , this ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54023670014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.50396437872024,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return node ;",
            "score": 99.47118530273437,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , cfa ) ;",
            "score": 99.56326454564145,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.56264860733695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.56264860733695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.56264860733695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.56264860733695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.56264860733695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null ) ; } }",
            "score": 99.550341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "loop.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54015531994048,
            "correctness": "uncompilable",
            "tokenized_patch": "loop . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , double.UNCOND , finallyNode ) ; }",
            "score": 99.50391734730114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , double . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( next.getLastChild( ) ) ; else",
            "score": 99.62975135216347,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) finallyNode ; }",
            "score": 99.58454241071429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } break ; }",
            "score": 99.56319754464286,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false ) ; } }",
            "score": 99.56230236235119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stmt.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54976029829545,
            "correctness": "uncompilable",
            "tokenized_patch": "stmt . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , != null ) ;",
            "score": 99.54012044270833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , != null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.50345187717014,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,1, finallyNode ) ;",
            "score": 99.47094116210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND ) ) ;",
            "score": 99.58328247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , UNCOND , finallyNode ) ; }",
            "score": 99.5599698153409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "queue.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54967151988636,
            "correctness": "uncompilable",
            "tokenized_patch": "queue . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally , finallyNode ) ;",
            "score": 99.53968877377717,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next == null ) { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.62956436820652,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next == null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this.Branch.UNCOND , finallyNode ) ;",
            "score": 99.5823390794837,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this . Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.56146240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) , cfa ) ; }",
            "score": 99.5594149502841,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , parent ) ;",
            "score": 99.54961867559524,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , 'less than') ;",
            "score": 99.54563306725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , ' y (if true) and x ') ;",
            "score": 99.54563306725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , 'greater than') ;",
            "score": 99.54563306725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , 'before') ;",
            "score": 99.54563306725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( fromNode != null ) { cfa.createEdge( fromNode , 'Not reachable') ;",
            "score": 99.54563306725544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( from CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "AST.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50335984002976,
            "correctness": "uncompilable",
            "tokenized_patch": "AST . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.47029383042279,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.56131142064145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.56131142064145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.56131142064145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'before') ;",
            "score": 99.56131142064145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.56131142064145,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , parent , cfa ) ;",
            "score": 99.55882626488095,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "queue.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54947916666667,
            "correctness": "uncompilable",
            "tokenized_patch": "queue . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,2) ;",
            "score": 99.5456012228261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,4) ;",
            "score": 99.5456012228261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,3) ;",
            "score": 99.5456012228261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,10) ;",
            "score": 99.5456012228261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,2008) ;",
            "score": 99.5456012228261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5393575032552,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , long.UNCOND , finallyNode ) ;",
            "score": 99.50279017857143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , long . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) cfa ) ;",
            "score": 99.4701286764706,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , finallyNode ) ; } }",
            "score": 99.58172052556819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ,0) ; }",
            "score": 99.56071333451705,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , 0 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.55746605282738,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else { } }",
            "score": 99.54889787946429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else { } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "logger.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "logger . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ) cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53877766927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = finallyNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50236002604167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = finally CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.46971978081598,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , parent , cfa ) ; } else",
            "score": 99.62814565805289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.55706176757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else { break ;",
            "score": 99.5488513764881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else { break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Integer( finallyNode ) ) ;",
            "score": 99.54515380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Integer ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFollowNode( fromNode , cfa ) ;",
            "score": 99.53853934151786,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , short.UNCOND , finallyNode ) ; }",
            "score": 99.50226384943181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , short . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.46959731158088,
            "correctness": "uncompilable",
            "tokenized_patch": "! cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ADD , finallyNode ) ;",
            "score": 99.58072509765626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ADD , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , node ) ; }",
            "score": 99.5604580965909,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54806082589286,
            "correctness": "uncompilable",
            "tokenized_patch": "state . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'less than') ; }",
            "score": 99.5445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , ' y (if true) and x ') ; }",
            "score": 99.5445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'greater than') ; }",
            "score": 99.5445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'before') ; }",
            "score": 99.5445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , 'Not reachable') ; }",
            "score": 99.5445556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EQ , finallyNode ) ;",
            "score": 99.5379150390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EQ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.53753662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastChild( ) , cfa ) ;",
            "score": 99.62694295247395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "/ *cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.58060886548913,
            "correctness": "uncompilable",
            "tokenized_patch": "/ * cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) Branch.UNCOND , finallyNode ) ;",
            "score": 99.56007893880208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , cfa ) ; }",
            "score": 99.55664672851563,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.getNode( ) ) ;",
            "score": 99.5478848544034,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } return",
            "score": 99.5378948709239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } return",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.getNext( ) ) ;",
            "score": 99.53595525568181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "listeners.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50200861150569,
            "correctness": "uncompilable",
            "tokenized_patch": "listeners . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.4677798622533,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , parent , cfa ) ; else",
            "score": 99.6260296365489,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap.get( parent ) ) { }",
            "score": 99.55647786458333,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) { }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , this ) ;",
            "score": 99.54429408482143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , && Branch.UNCOND , finallyNode ) ;",
            "score": 99.53776411576705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , && Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "keys.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50145374644886,
            "correctness": "uncompilable",
            "tokenized_patch": "keys . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , null ) ;",
            "score": 99.46719360351562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.62504069010417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND ) ) { return null ; }",
            "score": 99.58023071289062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) { return null ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55910237630208,
            "correctness": "uncompilable",
            "tokenized_patch": "node = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54411969866071,
            "correctness": "uncompilable",
            "tokenized_patch": "t . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.fromNode , cfa ) ;",
            "score": 99.5348233309659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Math.UNCOND , finallyNode ) ; }",
            "score": 99.5006991299716,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Math . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.46709442138672,
            "correctness": "uncompilable",
            "tokenized_patch": "result . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) return computeFallThrough( next , cfa ) ;",
            "score": 99.62499060997597,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) return compute CaMeL Fall CaMeL Through ( next , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'less than') ; } }",
            "score": 99.58016807154605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( ' y (if true) and x ') ; } }",
            "score": 99.58016807154605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'greater than') ; } }",
            "score": 99.58016807154605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'before') ; } }",
            "score": 99.58016807154605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'Not reachable') ; } }",
            "score": 99.58016807154605,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.55630493164062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getNext( ) ) ; }",
            "score": 99.54697963169643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "removed.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50019763764881,
            "correctness": "uncompilable",
            "tokenized_patch": "removed . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , parent , cfa ) ;",
            "score": 99.46602630615234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFollowNode( fromNode , parent , cfa ) ; } else",
            "score": 99.6249248798077,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0) ; }",
            "score": 99.55824584960938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "AOM.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54695268110795,
            "correctness": "uncompilable",
            "tokenized_patch": "AOM . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode.getName( ) ) ;",
            "score": 99.50004438920455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.UNCOND ,",
            "score": 99.46582709418402,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ).getNext( ) ) ;",
            "score": 99.624765625,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; break ; } }",
            "score": 99.5793359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; break ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55723266601562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.55441623263889,
            "correctness": "wrong",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Location( finallyNode ) ) ;",
            "score": 99.5413818359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Location ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53688557942708,
            "correctness": "uncompilable",
            "tokenized_patch": "finally . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "l.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4998446377841,
            "correctness": "uncompilable",
            "tokenized_patch": "l . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,0, finallyNode ) ;",
            "score": 99.46548461914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.62405395507812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( startNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.55717136548913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( start CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , new ) ;",
            "score": 99.5402599516369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , new ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49982244318181,
            "correctness": "uncompilable",
            "tokenized_patch": "node = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next , cfa ) ;",
            "score": 99.46517944335938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.6238671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( parent.getNext( ) ) ; }",
            "score": 99.55668131510417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , false ) ; } }",
            "score": 99.55409458705357,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , finallyNode ) ; }",
            "score": 99.54541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "out.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53607468377976,
            "correctness": "uncompilable",
            "tokenized_patch": "out . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getId( ) ) ;",
            "score": 99.4995849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Id ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'less than', Branch.UNCOND , finallyNode ) ;",
            "score": 99.46449681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ' y (if true) and x ', Branch.UNCOND , finallyNode ) ;",
            "score": 99.46449681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'greater than', Branch.UNCOND , finallyNode ) ;",
            "score": 99.46449681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'before', Branch.UNCOND , finallyNode ) ;",
            "score": 99.46449681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'Not reachable', Branch.UNCOND , finallyNode ) ;",
            "score": 99.46449681332237,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getLastChild( ) ) ; } }",
            "score": 99.55663045247395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return next ; }",
            "score": 99.55332728794643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return next ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "listener.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54506613991477,
            "correctness": "uncompilable",
            "tokenized_patch": "listener . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? fromNode : finallyNode ) ;",
            "score": 99.5398837002841,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? from CaMeL Node : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , finallyNode ) ; }",
            "score": 99.49953099300987,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.622685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this.Branch.UNCOND , finallyNode ) ; }",
            "score": 99.57860310872395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this . Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } } else",
            "score": 99.55652872721355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.55183919270833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getLastChild( ) ) ;",
            "score": 99.54496626420455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { cfa.createEdge( fromNode , Branch ) ;",
            "score": 99.5395740327381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.46345350477431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.62246704101562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( ) ; } }",
            "score": 99.57841186523437,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ,1) ; }",
            "score": 99.55466715494792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , cfa ) ; } }",
            "score": 99.55147879464286,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.54484419389205,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createInternal( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53888811383929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Internal ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch [ Node.UNCOND , finallyNode ) ;",
            "score": 99.53529424252717,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch [ Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; finally { }",
            "score": 99.55446370442708,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; finally { }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , finallyNode , cfa ) ;",
            "score": 99.55120294744319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "listeners.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54439871651786,
            "correctness": "uncompilable",
            "tokenized_patch": "listeners . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; finally {",
            "score": 99.53865913722827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; finally {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53517844460227,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | Token.DEFAULT ) ;",
            "score": 99.5288318452381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | Token . DEFAULT ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , parent ) ; }",
            "score": 99.49918212890626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.{ cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.46193976151316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ).getNext( ) ) ;",
            "score": 99.62119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , index ) ; }",
            "score": 99.5538662997159,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , index ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "loop.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54365678267045,
            "correctness": "uncompilable",
            "tokenized_patch": "loop . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.& UNCOND , finallyNode ) ;",
            "score": 99.53485662286931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . & UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "children = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49882579985119,
            "correctness": "uncompilable",
            "tokenized_patch": "children = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa ) ; } }",
            "score": 99.46120733963816,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55294799804688,
            "correctness": "uncompilable",
            "tokenized_patch": "null = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ASSIGN.UNCOND , finallyNode ) ;",
            "score": 99.53427269345238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ASSIGN . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'less than') ;",
            "score": 99.52853054470486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ' y (if true) and x ') ;",
            "score": 99.52853054470486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'greater than') ;",
            "score": 99.52853054470486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'before') ;",
            "score": 99.52853054470486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'Not reachable') ;",
            "score": 99.52853054470486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , parent ) , cfa ) ;",
            "score": 99.460009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , parent ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) { cfa.createEdge( ) ; }",
            "score": 99.5770263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) { cfa . create CaMeL Edge ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; )",
            "score": 99.55250133167614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) throws",
            "score": 99.53691173735119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) throws",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent.getNext( ) ) ;",
            "score": 99.52851795014881,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ) ;",
            "score": 99.45962863498264,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNext( ) , Branch.UNCOND , finallyNode ) ;",
            "score": 99.57693359375,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Next ( ) , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "5"
        },
        {
            "patch": "Object cfa = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55171712239583,
            "correctness": "uncompilable",
            "tokenized_patch": "Object cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , node ) ; }",
            "score": 99.54314864309211,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; if(",
            "score": 99.53249193274456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; if (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , List.UNCOND , finallyNode ) ; }",
            "score": 99.49736993963069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , List . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else {",
            "score": 99.45943410773026,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node.getNext( ) ) ; else",
            "score": 99.619609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( ) ; }",
            "score": 99.57599840666118,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( getNext( ) , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5515667459239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "listener.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54309663318452,
            "correctness": "uncompilable",
            "tokenized_patch": "listener . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tasks.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5364002046131,
            "correctness": "uncompilable",
            "tokenized_patch": "tasks . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "r.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49735884232955,
            "correctness": "uncompilable",
            "tokenized_patch": "r . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( fromNode , parent , cfa ) ; else",
            "score": 99.618984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( ) ; } }",
            "score": 99.57586669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getFirstChild( ) ) ;",
            "score": 99.55082563920455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ) , parent , cfa ) ;",
            "score": 99.54939778645833,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } } }",
            "score": 99.54302687872024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , || finallyNode ) ;",
            "score": 99.53618829900569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , || finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , *finallyNode ) ;",
            "score": 99.49730335582386,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , * finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , false ) ;",
            "score": 99.45899047851563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.6187160326087,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.57570393880208,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ++ , finallyNode ) ;",
            "score": 99.5257235440341,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ++ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , double.UNCOND , finallyNode ) ;",
            "score": 99.4970470610119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , double . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,0) ; }",
            "score": 99.45834530101104,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 0 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( name ) ; } }",
            "score": 99.54963764391448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( name ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54912775213069,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "callback.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54205877130681,
            "correctness": "uncompilable",
            "tokenized_patch": "callback . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; continue ; }",
            "score": 99.53148396809895,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; continue ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , finallyNode ) ; }",
            "score": 99.49667503720238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , node , cfa ) ;",
            "score": 99.45833333333333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.61822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node ) fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.575380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node ) from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.54949951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getNext( ) , parent , cfa ) ;",
            "score": 99.5490490141369,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; } }",
            "score": 99.54197291324013,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , String.UNCOND , finallyNode ) ;",
            "score": 99.53394717261905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , String . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.UNCOND ) ;",
            "score": 99.53096147017045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "frame.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49650435014205,
            "correctness": "uncompilable",
            "tokenized_patch": "frame . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) { return cfa ; } }",
            "score": 99.5753662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) { return cfa ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ) , cfa ) ; }",
            "score": 99.54823996803977,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ) ; }",
            "score": 99.54149712456598,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53096147017045,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) +",
            "score": 99.52415829613095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) +",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent , false ) ;",
            "score": 99.4568603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "target = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5480320142663,
            "correctness": "uncompilable",
            "tokenized_patch": "target = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } } else {",
            "score": 99.54764229910714,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "q.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5407947358631,
            "correctness": "uncompilable",
            "tokenized_patch": "q . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , true , false ) ;",
            "score": 99.53034774116848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , true , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ).getNext( ) ) ;",
            "score": 99.45680541992188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent.getLastChild( ) ) ;",
            "score": 99.61702827785327,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( node ) ; } }",
            "score": 99.57522743626645,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( parent.getLastChild( ) ) ; }",
            "score": 99.54673365542763,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , node ) ; } } }",
            "score": 99.54069010416667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , node ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , node ) ;",
            "score": 99.53209918478261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.2, finallyNode ) ;",
            "score": 99.52935791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.4, finallyNode ) ;",
            "score": 99.52935791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.3, finallyNode ) ;",
            "score": 99.52935791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.10, finallyNode ) ;",
            "score": 99.52935791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.2008, finallyNode ) ;",
            "score": 99.52935791015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( createNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52362351190476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( create CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , insert.UNCOND , finallyNode ) ; }",
            "score": 99.49554998224431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , insert . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , fromNode , parent , cfa ) ;",
            "score": 99.45667182074652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.573544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "result = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NAME , finallyNode ) ; }",
            "score": 99.54681687127976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NAME , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , cfa ) ;",
            "score": 99.54608475534539,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ) ) ;",
            "score": 99.54056803385417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5320354959239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,( Branch ) finallyNode ) ;",
            "score": 99.52930704752605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ( Branch ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , false ) ;",
            "score": 99.52311437270221,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "prev.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49543900923295,
            "correctness": "uncompilable",
            "tokenized_patch": "prev . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent , true ) ;",
            "score": 99.454638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ADD , finallyNode ) ; } }",
            "score": 99.57337535511364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ADD , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getLastChild( ) ) ; }",
            "score": 99.54049521998355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NAME , finallyNode ) ;",
            "score": 99.5225341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NAME , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49525035511364,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent , cfa ) ;",
            "score": 99.45446166992187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.61662153764205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( nameNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54599144345238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "area.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5317615327381,
            "correctness": "uncompilable",
            "tokenized_patch": "area . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , true ) ;",
            "score": 99.52897135416667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent.getNext( ) ) ;",
            "score": 99.52239435369319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.45293868215461,
            "correctness": "uncompilable",
            "tokenized_patch": "System . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , cfa ) ; } else",
            "score": 99.615888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) { return cfa ; }",
            "score": 99.57313296669408,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) { return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , , finallyNode ) ;",
            "score": 99.5437344637784,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "root.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53968394886364,
            "correctness": "uncompilable",
            "tokenized_patch": "root . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ) ;",
            "score": 99.53172084263393,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Task.UNCOND , finallyNode ) ; }",
            "score": 99.5288973721591,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Task . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , builder.UNCOND , finallyNode ) ; }",
            "score": 99.49510609019886,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , builder . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false ) ; } }",
            "score": 99.45219590928819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( node.getNext( ) ) ; }",
            "score": 99.5728175951087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'less than') ; }",
            "score": 99.54529418945313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.54529418945313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'greater than') ; }",
            "score": 99.54529418945313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'before') ; }",
            "score": 99.54529418945313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.54529418945313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , cfa ) ; }",
            "score": 99.52180561266448,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.49506170099431,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Token finallyNode : cfa.finallyMap.get( parent ) ) {",
            "score": 99.45047607421876,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Token finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) { return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.61404418945312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'less than') ; }",
            "score": 99.57199435763889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( ' y (if true) and x ') ; }",
            "score": 99.57199435763889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'greater than') ; }",
            "score": 99.57199435763889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'before') ; }",
            "score": 99.57199435763889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'Not reachable') ; }",
            "score": 99.57199435763889,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ; break ;",
            "score": 99.54471842447917,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ; break ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.54245827414773,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "table.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53816731770833,
            "correctness": "uncompilable",
            "tokenized_patch": "table . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode , finallyNode ) ;",
            "score": 99.52840523097827,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( computeFollowNode( fromNode , parent , cfa ) ) ;",
            "score": 99.61402384440105,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode ) ; } }",
            "score": 99.57133152173913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , false ) ;",
            "score": 99.54233269942434,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , short.UNCOND , finallyNode ) ;",
            "score": 99.5278087797619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , short . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ps.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49444025213069,
            "correctness": "uncompilable",
            "tokenized_patch": "ps . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , fromNode , cfa ) ;",
            "score": 99.45020751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.613095703125,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa == null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.put( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54379111842105,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . put ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent ) ; } } }",
            "score": 99.53681873139881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52733313519022,
            "correctness": "uncompilable",
            "tokenized_patch": "finally . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51827566964286,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , builder.UNCOND , finallyNode ) ;",
            "score": 99.4936290922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , builder . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.44999614514802,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , node , cfa ) ;",
            "score": 99.6128460427989,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ADD , finallyNode ) ; }",
            "score": 99.56988234747024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ADD , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , cfa ) ; }",
            "score": 99.54031982421876,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "root.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52648344494048,
            "correctness": "uncompilable",
            "tokenized_patch": "root . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , root ) ;",
            "score": 99.49351099917763,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ) , parent , cfa ) ;",
            "score": 99.4497314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( next ) ) { return computeFallThrough( next ) ;",
            "score": 99.612021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( next ) ) { return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.56885782877605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.create( finallyNode ) ) ;",
            "score": 99.54273623511905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . create ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , null ) ; } }",
            "score": 99.53912062872024,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , null ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , <= Branch.UNCOND , finallyNode ) ;",
            "score": 99.52634499289773,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , <= Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "temp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49346368963069,
            "correctness": "uncompilable",
            "tokenized_patch": "temp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , this ) ;",
            "score": 99.44957733154297,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( computeFollowNode( fromNode , parent , cfa ) ) ;",
            "score": 99.6117451985677,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "8"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than') ; } }",
            "score": 99.54218982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ') ; } }",
            "score": 99.54218982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than') ; } }",
            "score": 99.54218982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before') ; } }",
            "score": 99.54218982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable') ; } }",
            "score": 99.54218982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.5390625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , target ) ;",
            "score": 99.5262515419408,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = cfa.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.49335007440476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,( int ) cfa ) ;",
            "score": 99.4488525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ( int ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFallThrough( fromNode , parent , cfa ) ; else",
            "score": 99.6113789876302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5408426920573,
            "correctness": "uncompilable",
            "tokenized_patch": "super . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( parent , cfa ) ; }",
            "score": 99.53651646205357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "toplevel.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52616954985119,
            "correctness": "uncompilable",
            "tokenized_patch": "toplevel . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , true ) ; } }",
            "score": 99.44767252604167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , true ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getFirstChild( ) ) ; }",
            "score": 99.56818953804348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.54060164741848,
            "correctness": "uncompilable",
            "tokenized_patch": "next = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.52512613932292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "element.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49317515980114,
            "correctness": "uncompilable",
            "tokenized_patch": "element . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node.getFirstChild( ) ) ;",
            "score": 99.61021484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( ) ; }",
            "score": 99.56501850328948,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getLastChild( ) ) ;",
            "score": 99.5400057705966,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "q.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53615500710227,
            "correctness": "uncompilable",
            "tokenized_patch": "q . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.false ) ;",
            "score": 99.52493418817934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , type ) ;",
            "score": 99.52492357336956,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , type ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , finallyNode , cfa ) ;",
            "score": 99.516162109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , true ) ;",
            "score": 99.49295847039474,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return parent ;",
            "score": 99.446044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( fromNode , cfa ) ;",
            "score": 99.60949125744048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( ) ; } } }",
            "score": 99.56495303199405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( nameNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.53915803328805,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.53716681985294,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; throw",
            "score": 99.52476917613636,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; throw",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode && true ) ;",
            "score": 99.52414869225544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node && true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "children = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49294211647727,
            "correctness": "uncompilable",
            "tokenized_patch": "children = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.44603774126838,
            "correctness": "uncompilable",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) ; }",
            "score": 99.56472911005434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND ,",
            "score": 99.53633626302083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent ) ; }",
            "score": 99.5360107421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ) ; }",
            "score": 99.52433975883152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Generator.UNCOND , finallyNode ) ;",
            "score": 99.52401878720238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Generator . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , parent , cfa ,",
            "score": 99.51487038352273,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "AST.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49257590553977,
            "correctness": "uncompilable",
            "tokenized_patch": "AST . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.root ) ; }",
            "score": 99.4456787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . root ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFollowNode( fromNode , cfa ) ; }",
            "score": 99.6083984375,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.5637715657552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.5637715657552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.5637715657552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.5637715657552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.5637715657552,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than'+ finallyNode ) ;",
            "score": 99.53696076766305,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x '+ finallyNode ) ;",
            "score": 99.53696076766305,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than'+ finallyNode ) ;",
            "score": 99.53696076766305,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before'+ finallyNode ) ;",
            "score": 99.53696076766305,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable'+ finallyNode ) ;",
            "score": 99.53696076766305,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( parent.getLastChild( ) ) ; }",
            "score": 99.53577880859375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , true , true ) ;",
            "score": 99.52415930706522,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , true , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Region.UNCOND , finallyNode ) ;",
            "score": 99.49242001488095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Region . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'less than', finallyNode ) ;",
            "score": 99.44437866210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.44437866210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'greater than', finallyNode ) ;",
            "score": 99.44437866210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'before', finallyNode ) ;",
            "score": 99.44437866210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'Not reachable', finallyNode ) ;",
            "score": 99.44437866210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return cfa.createEdge( fromNode , parent , cfa ) ; else",
            "score": 99.60837809244792,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return cfa ;",
            "score": 99.53689575195312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; /",
            "score": 99.53572221235795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode , true ) ;",
            "score": 99.52396065848214,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.52388509114583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND1, finallyNode ) ;",
            "score": 99.51316139914773,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49232066761364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { next.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.6078464673913,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'less than') ;",
            "score": 99.53623560855263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( ' y (if true) and x ') ;",
            "score": 99.53623560855263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'greater than') ;",
            "score": 99.53623560855263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'before') ;",
            "score": 99.53623560855263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'Not reachable') ;",
            "score": 99.53623560855263,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52394701086956,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.IN , finallyNode ) ; }",
            "score": 99.52385602678571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . IN , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "g.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49193226207386,
            "correctness": "uncompilable",
            "tokenized_patch": "g . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , parent , cfa ) ;",
            "score": 99.44400024414062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge break = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53603108723958,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge break = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52385147758152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , false , null ) ;",
            "score": 99.52372409986413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , false , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , parent , cfa ) ;",
            "score": 99.5115966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } }",
            "score": 99.44374389648438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.60673191236413,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53567637567934,
            "correctness": "uncompilable",
            "tokenized_patch": "final cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , cfa ) ; }",
            "score": 99.53307387408088,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.MAX , finallyNode ) ;",
            "score": 99.5225341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . MAX , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.510986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "next = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.UNCOND , finallyNode ) ; }",
            "score": 99.49097789417614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode ) , cfa ) ;",
            "score": 99.44321803042763,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.60544655539773,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "it.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53542258522727,
            "correctness": "uncompilable",
            "tokenized_patch": "it . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this ) ;",
            "score": 99.52214704241071,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , root ) ; }",
            "score": 99.44316020764802,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , root ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.60451341711956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { return cfa.createEdge( ) ; } }",
            "score": 99.56200009300595,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { return cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.5353771391369,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ) ;",
            "score": 99.52303059895833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , longValue ) ;",
            "score": 99.49085053943452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , long CaMeL Value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null , cfa ) ;",
            "score": 99.44307454427083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.60431640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalArgumentException( ) ; } } }",
            "score": 99.56196521577381,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.finallyNode ) ;",
            "score": 99.53369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode , finallyNode ) ;",
            "score": 99.50846724076705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( parent ) , parent , cfa ) ;",
            "score": 99.44215794613487,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( parent ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent.getLastChild( ) ) ;",
            "score": 99.60403575067934,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.5618312669837,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , next ) ; }",
            "score": 99.53515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , next ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.53315286075367,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( true , fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52049719769022,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( true , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getFirstChild( ) ) ;",
            "score": 99.50844855057566,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; } ;",
            "score": 99.4905017671131,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; } ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.44145122327302,
            "correctness": "uncompilable",
            "tokenized_patch": "this . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.603896484375,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa == null ) return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.56177775065105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.56177775065105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.56177775065105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'before') ;",
            "score": 99.56177775065105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( ) ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.56177775065105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53177315848214,
            "correctness": "uncompilable",
            "tokenized_patch": "n . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode.getLastChild( ) ) ; }",
            "score": 99.53163840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next ) ; }",
            "score": 99.50844212582237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , UNCOND , finallyNode ) ;",
            "score": 99.490478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastChild( ) ) ; break ;",
            "score": 99.53446451822917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "element.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52139136904762,
            "correctness": "uncompilable",
            "tokenized_patch": "element . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , System.UNCOND , finallyNode ) ;",
            "score": 99.51799665178571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , System . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.50770970394737,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break ; } return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.44103393554687,
            "correctness": "uncompilable",
            "tokenized_patch": "break ; } return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next == null ) return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.6033245584239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next == null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.56062825520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.56062825520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.56062825520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'before') ;",
            "score": 99.56062825520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.56062825520833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getFirstChild( ) ) ; }",
            "score": 99.53378441220238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } return next ; }",
            "score": 99.53118341619319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } return next ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Assignment.UNCOND , finallyNode ) ; }",
            "score": 99.52099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Assignment . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.50770399305556,
            "correctness": "uncompilable",
            "tokenized_patch": "Node return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48985706676136,
            "correctness": "uncompilable",
            "tokenized_patch": "t . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode +",
            "score": 99.44029541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node +",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next.getFirstChild( ) ) ; }",
            "score": 99.53340480638587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ) ) ; } }",
            "score": 99.53116861979167,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "l.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53083147321429,
            "correctness": "uncompilable",
            "tokenized_patch": "l . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( false , fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51680324388587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( false , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.fromNode , finallyNode ) ;",
            "score": 99.50752397017045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "vars.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48975719105114,
            "correctness": "uncompilable",
            "tokenized_patch": "vars . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2, finallyNode ) ;",
            "score": 99.44013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,4, finallyNode ) ;",
            "score": 99.44013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,3, finallyNode ) ;",
            "score": 99.44013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,10, finallyNode ) ;",
            "score": 99.44013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2008, finallyNode ) ;",
            "score": 99.44013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55971165707237,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "block = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53324558423913,
            "correctness": "uncompilable",
            "tokenized_patch": "block = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FUNCTION , finallyNode ) ;",
            "score": 99.52059936523438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FUNCTION , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', UNCOND , finallyNode ) ;",
            "score": 99.51643880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', UNCOND , finallyNode ) ;",
            "score": 99.51643880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', UNCOND , finallyNode ) ;",
            "score": 99.51643880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', UNCOND , finallyNode ) ;",
            "score": 99.51643880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', UNCOND , finallyNode ) ;",
            "score": 99.51643880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND = finallyNode ) ;",
            "score": 99.5058361235119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND = finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Float.UNCOND , finallyNode ) ;",
            "score": 99.48962983630952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Float . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.43998887803819,
            "correctness": "uncompilable",
            "tokenized_patch": "this . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getFirstChild( ) ) ;",
            "score": 99.60093287417763,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , parent , cfa ) ; }",
            "score": 99.5307849702381,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , cfa ) ;",
            "score": 99.52934337797619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ;",
            "score": 99.52014690896739,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ,",
            "score": 99.51619096235795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , finallyNode ) ; }",
            "score": 99.48934775904605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , cfa ) ; } }",
            "score": 99.43895263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { fromNode = Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55811608355978,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.NONE ) ; }",
            "score": 99.5310567220052,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . NONE ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , finallyNode ) ; }",
            "score": 99.5295474403783,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rs.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52923874627976,
            "correctness": "uncompilable",
            "tokenized_patch": "rs . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ; ;",
            "score": 99.51607082201087,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ; ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2, finallyNode ) ;",
            "score": 99.48880343967014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,4, finallyNode ) ;",
            "score": 99.48880343967014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,3, finallyNode ) ;",
            "score": 99.48880343967014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,10, finallyNode ) ;",
            "score": 99.48880343967014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2008, finallyNode ) ;",
            "score": 99.48880343967014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.43865288628473,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , getNext( ) ) ; }",
            "score": 99.55772908528645,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa , cfa ) ; }",
            "score": 99.52940784801136,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50459428267045,
            "correctness": "uncompilable",
            "tokenized_patch": "assert compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , true ) ; }",
            "score": 99.48824462890624,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.5996602376302,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( node ) ) { cfa.createEdge( node ) ; }",
            "score": 99.55757472826087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( node ) ) { cfa . create CaMeL Edge ( node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , parent , finallyNode ) ; }",
            "score": 99.51967366536458,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parent , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , E.UNCOND , finallyNode ) ;",
            "score": 99.51506696428571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , E . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5042391690341,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "source.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4881258877841,
            "correctness": "uncompilable",
            "tokenized_patch": "source . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.43803325452302,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) { return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.59921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ) ) ; }",
            "score": 99.52803762335526,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode && false ) ;",
            "score": 99.51490319293478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node && false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.43733978271484,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } return parent ;",
            "score": 99.5983654203869,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } if(",
            "score": 99.53036499023438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } if (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , false ) ;",
            "score": 99.52799682617187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; break ; } }",
            "score": 99.52796020507813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; break ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51893682065217,
            "correctness": "uncompilable",
            "tokenized_patch": "else cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , true ) ; }",
            "score": 99.48743785511364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , parent , false ) ) ;",
            "score": 99.437158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , parent , false ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55569458007812,
            "correctness": "uncompilable",
            "tokenized_patch": "do { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.create( finallyNode ) ) ; } }",
            "score": 99.52991253396739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . create ( finally CaMeL Node ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( node , cfa ) ; }",
            "score": 99.52779715401786,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , finallyNode ) ; }",
            "score": 99.51829020182292,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) UNCOND , finallyNode ) ;",
            "score": 99.5143155184659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root.getName( ) ) ;",
            "score": 99.48720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new : Branch( fromNode , parent , cfa ) ) ;",
            "score": 99.59492420014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new : Branch ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Branch.UNCOND , finallyNode ) ;",
            "score": 99.5553866299716,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0) ; } }",
            "score": 99.52987816220238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "messages.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52776227678571,
            "correctness": "uncompilable",
            "tokenized_patch": "messages . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , finallyNode ) ; }",
            "score": 99.5274325284091,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode , true ) ;",
            "score": 99.51417077105978,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.43634033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next == null ) { return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.594921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next == null ) { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new NullPointerException( 'less than') ; }",
            "score": 99.55536443536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new NullPointerException( ' y (if true) and x ') ; }",
            "score": 99.55536443536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new NullPointerException( 'greater than') ; }",
            "score": 99.55536443536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new NullPointerException( 'before') ; }",
            "score": 99.55536443536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new NullPointerException( 'Not reachable') ; }",
            "score": 99.55536443536931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } else {",
            "score": 99.52980550130208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "iter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52764601934524,
            "correctness": "uncompilable",
            "tokenized_patch": "iter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa ) ; } } }",
            "score": 99.52715773809524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "statements.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51750044389205,
            "correctness": "uncompilable",
            "tokenized_patch": "statements . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND +",
            "score": 99.50337219238281,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND +",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "list.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.43621063232422,
            "correctness": "uncompilable",
            "tokenized_patch": "list . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa ) ; }",
            "score": 99.59368896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( node ) ; } } }",
            "score": 99.5549560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( node ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int cfa = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52932739257812,
            "correctness": "uncompilable",
            "tokenized_patch": "int cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) {",
            "score": 99.526806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , null ) ;",
            "score": 99.5264956825658,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , fromNode ) ; }",
            "score": 99.5174227627841,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51305621603261,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( NodeUtil.hasFinally( parent ) )",
            "score": 99.50312732514881,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( Node CaMeL Util . has CaMeL Finally ( parent ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode ) ;",
            "score": 99.48682803199405,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.cfa , finallyNode ) ;",
            "score": 99.43600463867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.59222966974431,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55484672214673,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , true ) ; } }",
            "score": 99.52606491815476,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , true ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Factory.UNCOND , finallyNode ) ;",
            "score": 99.51304560122283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Factory . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNext( ) , parent , cfa ) ;",
            "score": 99.50302956321023,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Node.UNCOND , finallyNode ) ;",
            "score": 99.48673502604167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getFirstChild( ) ) ; break ;",
            "score": 99.52930704752605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL First CaMeL Child ( ) ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NO , finallyNode ) ; }",
            "score": 99.52568126860119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NO , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.51697308084239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , false ) ; ;",
            "score": 99.51298384232955,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.fromNode ) ;",
            "score": 99.5015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , Branch.UNCOND ,",
            "score": 99.43568115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51692708333333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , true ) ; ;",
            "score": 99.5128173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.48634033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'less than') ;",
            "score": 99.43567657470703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ' y (if true) and x ') ;",
            "score": 99.43567657470703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'greater than') ;",
            "score": 99.43567657470703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'before') ;",
            "score": 99.43567657470703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'Not reachable') ;",
            "score": 99.43567657470703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) finallyNode ) ; } }",
            "score": 99.55221424932066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , node ) ; }",
            "score": 99.52840169270833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , parent , cfa ) ; } }",
            "score": 99.52434430803571,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa [ createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa [ create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.WHILE , finallyNode ) ;",
            "score": 99.4356201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . WHILE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getFirstChild( ) ) ; } }",
            "score": 99.5518290201823,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; false ; }",
            "score": 99.5280253092448,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; false ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.52315063476563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ts.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51685732886905,
            "correctness": "uncompilable",
            "tokenized_patch": "ts . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode : fromNode ) ;",
            "score": 99.51262872869319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node : from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.parent , cfa ) ;",
            "score": 99.49944458007812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,( Node ) cfa ) ; }",
            "score": 99.43549194335938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ( Node ) cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node != null ) { cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.5517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode.getLastChild( ) ) ;",
            "score": 99.52314685639881,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode( finallyNode ) ) ;",
            "score": 99.51644234035327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , parent , true ) ) ;",
            "score": 99.43489990234374,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , parent , true ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "do { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5515773607337,
            "correctness": "uncompilable",
            "tokenized_patch": "do { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ps.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52397228422619,
            "correctness": "uncompilable",
            "tokenized_patch": "ps . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.finallyNode ) ; }",
            "score": 99.52293759300595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next.getNext( ) ) ;",
            "score": 99.43474731445312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa.createEdge( ) ; } }",
            "score": 99.55116673519737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.52776227678571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( node ) ; }",
            "score": 99.52359169407895,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( node ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.BLOCK , finallyNode ) ;",
            "score": 99.51566162109376,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . BLOCK , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, finallyNode ) ;",
            "score": 99.51131184895833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "mau.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48473011363636,
            "correctness": "uncompilable",
            "tokenized_patch": "mau . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.return createEdge( fromNode , parent , cfa ) ;",
            "score": 99.43462775735294,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . return create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.55081176757812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , type , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.52768961588542,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , type , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNext( ) ) ; }",
            "score": 99.52288497121711,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": ") { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51553344726562,
            "correctness": "uncompilable",
            "tokenized_patch": ") { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.null ) ;",
            "score": 99.51109247622283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent.getNext( ) ) ; }",
            "score": 99.49868629092262,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , node ) ;",
            "score": 99.48445638020833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ) , cfa ) ;",
            "score": 99.58608863467262,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( cloneNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.52748801491477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( clone CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , ) ;",
            "score": 99.5147705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node( UNCOND , finallyNode ) ) ;",
            "score": 99.51039189877717,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ( UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , parent ) ;",
            "score": 99.49863688151042,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) finallyNode ) ; }",
            "score": 99.48389892578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , cfa ) ;",
            "score": 99.43450317382812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; break ;",
            "score": 99.54846722146739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.5225830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.IN , finallyNode , true ) ;",
            "score": 99.5146151455966,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . IN , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5100734544837,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'less than', finallyNode ) ;",
            "score": 99.49815784801136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.49815784801136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'greater than', finallyNode ) ;",
            "score": 99.49815784801136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'before', finallyNode ) ;",
            "score": 99.49815784801136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'Not reachable', finallyNode ) ;",
            "score": 99.49815784801136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( next ) , parent , cfa ) ;",
            "score": 99.43449964021382,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( next ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa ) ; } catch( Exception",
            "score": 99.58548106317934,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } catch ( Exception",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , type , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5270465353261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , type , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( parent.getLastChild( ) ) ; }",
            "score": 99.52241443452381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.51443481445312,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Factory.UNCOND , finallyNode ) ;",
            "score": 99.50961449032738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Factory . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.58433024088542,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( next.getLastChild( ) ) ; }",
            "score": 99.52103464226974,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , UNCOND , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51413981119792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , UN@@ COND , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , n ) ;",
            "score": 99.50955332880434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , n ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , parent , cfa ) ;",
            "score": 99.49737258184524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -1) ;",
            "score": 99.48336791992188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.else { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.433740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . else { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next == null ) return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.5834452311198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next == null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) )",
            "score": 99.54758619225544,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.NONE ) ;",
            "score": 99.52602751358695,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . NONE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.52098388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Targets.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52058919270833,
            "correctness": "uncompilable",
            "tokenized_patch": "Targets . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNKNOWN , finallyNode ) ; }",
            "score": 99.513427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UNKNOWN , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "insets.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48333185369319,
            "correctness": "uncompilable",
            "tokenized_patch": "insets . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51334281589673,
            "correctness": "uncompilable",
            "tokenized_patch": "! cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ;",
            "score": 99.50910295758929,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) return computeFallThrough( fromNode , parent , cfa ) ; else",
            "score": 99.58268229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , false ) ; }",
            "score": 99.52590110085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , false ) ; } }",
            "score": 99.52014770507813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ht.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48308771306819,
            "correctness": "uncompilable",
            "tokenized_patch": "ht . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return parent ; }",
            "score": 99.43329467773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return parent ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , parent ) ;",
            "score": 99.5819091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than'+ fromNode ) ;",
            "score": 99.52479619565217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x '+ fromNode ) ;",
            "score": 99.52479619565217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than'+ fromNode ) ;",
            "score": 99.52479619565217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before'+ fromNode ) ;",
            "score": 99.52479619565217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable'+ fromNode ) ;",
            "score": 99.52479619565217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.52034759521484,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , null , null ) ;",
            "score": 99.51272715692934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , null , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "body.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50834728422619,
            "correctness": "uncompilable",
            "tokenized_patch": "body . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.UNCOND ) ;",
            "score": 99.43304764597039,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TYPE , finallyNode ) ; } }",
            "score": 99.54600941051136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TYPE , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.) ; }",
            "score": 99.52427606997283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ) ; } }",
            "score": 99.51988220214844,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.51949055989583,
            "correctness": "wrong",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { finallyNode ; }",
            "score": 99.51250665838069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , && finallyNode ) ;",
            "score": 99.50792347301136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , && finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa1.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49591619318181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa 1 . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.43279418945312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa ) ; }",
            "score": 99.5811538696289,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch != null ) { cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.54600016276042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getLastChild( ) ) ; }",
            "score": 99.52425484035327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNext( ) ) ;",
            "score": 99.51985931396484,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , cfa ) ; }",
            "score": 99.51914349724265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.UNCOND , finallyNode ) ;",
            "score": 99.48234049479167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getNext( ) ) ;",
            "score": 99.43276638454861,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ) , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5809765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'less than') ;",
            "score": 99.523974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( ' y (if true) and x ') ;",
            "score": 99.523974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'greater than') ;",
            "score": 99.523974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'before') ;",
            "score": 99.523974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'Not reachable') ;",
            "score": 99.523974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "container.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51983351934524,
            "correctness": "uncompilable",
            "tokenized_patch": "container . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , null ) ;",
            "score": 99.51895141601562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.null , finallyNode ) ;",
            "score": 99.51209716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . null , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , false ) ; }",
            "score": 99.50737970525569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND + finallyNode ) ; }",
            "score": 99.49468439275569,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ) ; }",
            "score": 99.48157958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , cfa ) ;",
            "score": 99.43264288651316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != node ) cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.58052201704545,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != node ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.54496684827302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.54496684827302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.54496684827302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'before') ;",
            "score": 99.54496684827302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.54496684827302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than'+ finallyNode ) ; }",
            "score": 99.52389526367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x '+ finallyNode ) ; }",
            "score": 99.52389526367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than'+ finallyNode ) ; }",
            "score": 99.52389526367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before'+ finallyNode ) ; }",
            "score": 99.52389526367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable'+ finallyNode ) ; }",
            "score": 99.52389526367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getNext( ) , parent , cfa ) ; }",
            "score": 99.51887650923295,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51204057173295,
            "correctness": "uncompilable",
            "tokenized_patch": "assert cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4814120205966,
            "correctness": "uncompilable",
            "tokenized_patch": "p . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.54483032226562,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.Branch.UNCOND , finallyNode ) ;",
            "score": 99.52302352241848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode [ Branch.UNCOND , finallyNode ) ;",
            "score": 99.51972888764881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node [ Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getLastChild( ) ) ; } }",
            "score": 99.51885431463069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "prev.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5112537202381,
            "correctness": "uncompilable",
            "tokenized_patch": "prev . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } } }",
            "score": 99.43248901367187,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.getCatchBlock( fromNode , parent , cfa ) == null ) {",
            "score": 99.579912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . get CaMeL Catch CaMeL Block ( from CaMeL Node , parent , cfa ) == null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.54453531901042,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "frame.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50712658110119,
            "correctness": "uncompilable",
            "tokenized_patch": "frame . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch [ UNCOND : finallyNode ) ;",
            "score": 99.48127092633929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch [ UN@@ COND : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.43210177951389,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode -1) ; }",
            "score": 99.52280680338542,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node - 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "operation.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51042829241071,
            "correctness": "uncompilable",
            "tokenized_patch": "operation . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nodes.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50694056919643,
            "correctness": "uncompilable",
            "tokenized_patch": "nodes . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root.getParent( ) ) ; }",
            "score": 99.48042224702381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root . get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getFirst( ) ) ;",
            "score": 99.43173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode +1) ; }",
            "score": 99.52234903971355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node + 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ) , parent , cfa ) ; }",
            "score": 99.5183438387784,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ccfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50989879261364,
            "correctness": "uncompilable",
            "tokenized_patch": "c@@ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode2) ;",
            "score": 99.50661399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode4) ;",
            "score": 99.50661399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode3) ;",
            "score": 99.50661399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode10) ;",
            "score": 99.50661399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode2008) ;",
            "score": 99.50661399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND : finallyNode ) ; }",
            "score": 99.49210981889205,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND : finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode ,",
            "score": 99.48023071289063,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.43161190257354,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( next.getNext( ) ) ; else",
            "score": 99.57834879557292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ; }",
            "score": 99.52229817708333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ) ; } else {",
            "score": 99.51891508556548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ; } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node( fromNode ) ) ;",
            "score": 99.5063720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.480224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "break . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'less than') ; } }",
            "score": 99.54388718377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; } }",
            "score": 99.54388718377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'greater than') ; } }",
            "score": 99.54388718377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'before') ; } }",
            "score": 99.54388718377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( 'Not reachable') ; } }",
            "score": 99.54388718377976,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , insert.UNCOND , finallyNode ) ;",
            "score": 99.52222842261905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , insert . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "factory.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51840355282738,
            "correctness": "uncompilable",
            "tokenized_patch": "factory . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.PROPERTY , finallyNode ) ;",
            "score": 99.50903930664063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . PROPERTY , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , true ) ; }",
            "score": 99.50617009943181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.49113913143383,
            "correctness": "uncompilable",
            "tokenized_patch": "break compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.48011538856908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getLastChild( ) ) ; } }",
            "score": 99.5213623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.51829223632812,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "manager.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50603376116071,
            "correctness": "uncompilable",
            "tokenized_patch": "manager . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; finally",
            "score": 99.48005814985795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( next != null ) return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.57759425951087,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next.getFirstChild( ) ) ; } }",
            "score": 99.52128092447917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "engine.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51790364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "engine . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , true , false ) ;",
            "score": 99.5087253736413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , true , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Character.UNCOND , finallyNode ) ;",
            "score": 99.50544084821429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Character . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , cfa ) ;",
            "score": 99.49095807756696,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Float.UNCOND , finallyNode ) ; }",
            "score": 99.47968084161931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Float . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) { throw cfa ; } }",
            "score": 99.54204711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) { throw cfa ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND( finallyNode ) ) ; }",
            "score": 99.52096424932066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ( finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.51769409179687,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa ) ; } }",
            "score": 99.51715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return node ;",
            "score": 99.50868733723958,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return node ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "cfa( createEdge( fromNode , Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.50530450994319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa ( create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49065290178571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "found.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47965864701705,
            "correctness": "uncompilable",
            "tokenized_patch": "found . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'less than') ; }",
            "score": 99.5419689360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( ' y (if true) and x ') ; }",
            "score": 99.5419689360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'greater than') ; }",
            "score": 99.5419689360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'before') ; }",
            "score": 99.5419689360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new Error( 'Not reachable') ; }",
            "score": 99.5419689360119,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.51565212673611,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "expr.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50799851190476,
            "correctness": "uncompilable",
            "tokenized_patch": "expr . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , true , finallyNode ) ;",
            "score": 99.42955322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , true , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "int start = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52090454101562,
            "correctness": "uncompilable",
            "tokenized_patch": "int start = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "il.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "il . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.51513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sink.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5078125,
            "correctness": "uncompilable",
            "tokenized_patch": "sink . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1, ) ;",
            "score": 99.50499267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "scope.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47956986860795,
            "correctness": "uncompilable",
            "tokenized_patch": "scope . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null && cfa.createEdge( fromNode , Branch.UNCOND ) ) {",
            "score": 99.54190063476562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.52070949388587,
            "correctness": "uncompilable",
            "tokenized_patch": "} cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null ) ; } else {",
            "score": 99.51674107142857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ; } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , finallyNode ) ; }",
            "score": 99.51486687911184,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50754712975544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ofn.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50482468377976,
            "correctness": "uncompilable",
            "tokenized_patch": "ofn . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48984596946023,
            "correctness": "uncompilable",
            "tokenized_patch": "break compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , false ) ; }",
            "score": 99.47944779829545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.42891010485198,
            "correctness": "wrong",
            "tokenized_patch": "Node next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ) ; } }",
            "score": 99.5415547688802,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ) ; break ;",
            "score": 99.52064098011364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null && cfa.finallyMap.get( parent ) == node ) {",
            "score": 99.51669456845238,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && cfa . finally CaMeL Map . get ( parent ) == node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ERROR , finallyNode ) ;",
            "score": 99.50747680664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ERROR , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.42889725534539,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.54144577752976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , false , null ) ;",
            "score": 99.50710130774456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , false , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.42835828993056,
            "correctness": "uncompilable",
            "tokenized_patch": "node . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge cfa = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5204569498698,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , finallyNode ) ;",
            "score": 99.50444878472223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.addNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} else { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52018229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "} else { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.SIZE , finallyNode ) ;",
            "score": 99.51288452148438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . SIZE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? Branch.UNCOND , finallyNode ) ;",
            "score": 99.50358780570652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Region.UNCOND , finallyNode ) ; }",
            "score": 99.4789706143466,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Region . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "vars.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51449730282738,
            "correctness": "uncompilable",
            "tokenized_patch": "vars . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , true ) ;",
            "score": 99.5125732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode + null ) ;",
            "score": 99.50319505774456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node + null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "al.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51427641369048,
            "correctness": "uncompilable",
            "tokenized_patch": "al . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.1, finallyNode ) ;",
            "score": 99.50595092773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new( finallyNode ) ) ;",
            "score": 99.5029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getParent( ) , parent , cfa ) ;",
            "score": 99.4862060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Parent ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EMPTY , finallyNode ) ; } }",
            "score": 99.54074928977273,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EMPTY , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( ) , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51906331380208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( ) , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.DEFAULT , finallyNode ) ; }",
            "score": 99.51411365327381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . DEFAULT , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new , finallyNode ) ;",
            "score": 99.50250244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getLastChild( ) ) ;",
            "score": 99.48577270507812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "temp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "temp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getFirstChild( ) ) ; }",
            "score": 99.42716064453126,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , Branch.UNCOND , finallyNode , cfa ) ;",
            "score": 99.57122802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) finallyNode ; } }",
            "score": 99.54066051136364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) finally CaMeL Node ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null && cfa.finallyMap.get( parent ) == null ) {",
            "score": 99.5134044828869,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && cfa . finally CaMeL Map . get ( parent ) == null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , cfa ) ; } } }",
            "score": 99.51088645241477,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode , finallyNode ) ;",
            "score": 99.50248579545455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent.getNext( ) ) ; }",
            "score": 99.48576216264205,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.42643229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "else { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ; finallyNode ) {",
            "score": 99.54017857142857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; finally CaMeL Node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51878865559895,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode - true ) ;",
            "score": 99.50222911005434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node - true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent.getLastChild( ) , cfa ) ;",
            "score": 99.57056640625,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.53992716471355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getFirstChild( ) ) ;",
            "score": 99.51787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ORB.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51327659970238,
            "correctness": "uncompilable",
            "tokenized_patch": "ORB . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node node = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50563557942708,
            "correctness": "uncompilable",
            "tokenized_patch": "Node node = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new : Branch.UNCOND , finallyNode ) ;",
            "score": 99.50216542119566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new : Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , finallyNode , cfa ) ;",
            "score": 99.48539011101974,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "cfa.createEdge( fromNode , Map.UNCOND , finallyNode ) ;",
            "score": 99.47705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Map . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.{ cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.42632092927632,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.finallyMap.get( parent ) ) ;",
            "score": 99.57021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . finally CaMeL Map . get ( parent ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51783288043478,
            "correctness": "uncompilable",
            "tokenized_patch": "super . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return fromNode ;",
            "score": 99.50977672230114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return from CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return parent.getFirstChild( ).getNext( ) ;",
            "score": 99.48524305555556,
            "correctness": "wrong",
            "tokenized_patch": "return parent . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "cfa.return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.426171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( parent.getNext( ) ) ; else",
            "score": 99.570068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "it.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.51720660665761,
            "correctness": "uncompilable",
            "tokenized_patch": "it . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50497436523438,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode || true ) ;",
            "score": 99.50162406589673,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node || true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.48518880208333,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return next ;",
            "score": 99.42592163085938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent.getLastChild( ) ) )",
            "score": 99.5685702237216,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent . get CaMeL Last CaMeL Child ( ) ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0, finallyNode ) ; }",
            "score": 99.51705932617188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.50927124023437,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -2, finallyNode ) ;",
            "score": 99.50486246744792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -4, finallyNode ) ;",
            "score": 99.50486246744792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -3, finallyNode ) ;",
            "score": 99.50486246744792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -10, finallyNode ) ;",
            "score": 99.50486246744792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -2008, finallyNode ) ;",
            "score": 99.50486246744792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.createEdge( fromNode ) ) ;",
            "score": 99.50134808084239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . create CaMeL Edge ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , cfa , cfa ) ;",
            "score": 99.50910034179688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , != ) ;",
            "score": 99.5046917459239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , != ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,( Node ) cfa ) ;",
            "score": 99.48431951349431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ( Node ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "names.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4759854403409,
            "correctness": "uncompilable",
            "tokenized_patch": "names . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.56753394717262,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , append.UNCOND , finallyNode ) ;",
            "score": 99.53764415922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , append . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa ) ; } }",
            "score": 99.50903998480902,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "mau.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50449916294643,
            "correctness": "uncompilable",
            "tokenized_patch": "mau . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.42559493215461,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , source.getFirstChild( ) ) ; }",
            "score": 99.51614512567934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , source . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ns.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51221865699405,
            "correctness": "uncompilable",
            "tokenized_patch": "ns . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getFirstChild( ) ) ; } }",
            "score": 99.51600230823864,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "g.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51216052827381,
            "correctness": "uncompilable",
            "tokenized_patch": "g . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , id , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4999469259511,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , id , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent.getNext( ) ) ;",
            "score": 99.48312557444854,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null , finallyNode ) ;",
            "score": 99.42440795898438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent.getLastChild( ) , cfa ) ;",
            "score": 99.5653515625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) finallyNode ) ; }",
            "score": 99.53598854758523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , name ) ;",
            "score": 99.515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , name ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Branch.UNCOND , finallyNode ) ;",
            "score": 99.50428838315217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( true , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4996273643092,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( true , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node.UNCOND ) finallyNode ) ;",
            "score": 99.47536399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node . UN@@ COND ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null ) ; }",
            "score": 99.51546223958333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , parent , cfa ) ;",
            "score": 99.5085205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Generator.UNCOND , finallyNode ) ;",
            "score": 99.5040973165761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Generator . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "r.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47477213541667,
            "correctness": "uncompilable",
            "tokenized_patch": "r . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.42426893446181,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ) ;",
            "score": 99.56451822916667,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( endNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51542524857955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( end CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "document.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51099795386905,
            "correctness": "uncompilable",
            "tokenized_patch": "document . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , true ) ;",
            "score": 99.50837258731617,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , flow.UNCOND , finallyNode ) ;",
            "score": 99.4995349702381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , flow . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false , finallyNode ) ;",
            "score": 99.48173828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ref.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47468705610795,
            "correctness": "uncompilable",
            "tokenized_patch": "ref . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.56406656901042,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5342508951823,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.put( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51538696289063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . put ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ALL , finallyNode ) ;",
            "score": 99.5074462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ALL , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.UNCOND , ) ;",
            "score": 99.50393809442934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . UN@@ COND , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v{ cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49952233355978,
            "correctness": "uncompilable",
            "tokenized_patch": "v@@ { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNext( ) , cfa ) ;",
            "score": 99.48163452148438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.47430974786931,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode , parent ) ;",
            "score": 99.42410888671876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent.getLastChild( ) ) ) {",
            "score": 99.56069548233695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent . get CaMeL Last CaMeL Child ( ) ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "res.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51041666666667,
            "correctness": "uncompilable",
            "tokenized_patch": "res . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "builder.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50613839285714,
            "correctness": "uncompilable",
            "tokenized_patch": "builder . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , true , true ) ;",
            "score": 99.50358780570652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , true , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = cfa.create( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4739002046131,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "e.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.42386627197266,
            "correctness": "uncompilable",
            "tokenized_patch": "e . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getLastChild( ) , parent , cfa ) ;",
            "score": 99.50612571022727,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNKNOWN.UNCOND , finallyNode ) ;",
            "score": 99.50346042798913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UNKNOWN . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.root , cfa ) ;",
            "score": 99.48095092773437,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.else return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.42352294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "System . else return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode , parent , cfa ) ; else",
            "score": 99.5602518717448,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( ) , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53337296195652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( ) , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.UNCOND ) ;",
            "score": 99.51522827148438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "names.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50947498139881,
            "correctness": "uncompilable",
            "tokenized_patch": "names . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa..createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50611461292614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , -0) ;",
            "score": 99.50284830729167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , - 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pending.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49894205729167,
            "correctness": "uncompilable",
            "tokenized_patch": "pending . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "module.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47343306107955,
            "correctness": "uncompilable",
            "tokenized_patch": "module . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , n ) ;",
            "score": 99.4232406616211,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , n ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getFirstChild( ) ) ;",
            "score": 99.56010356702302,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "clazz.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50891694568452,
            "correctness": "uncompilable",
            "tokenized_patch": "clazz . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode.addNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50282796223958,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . add CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ) ;",
            "score": 99.49865191915761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getLastChild( ) , cfa ) ;",
            "score": 99.48052423650569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch [ UNCOND : finallyNode ) ; }",
            "score": 99.47341086647727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch [ UN@@ COND : finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "conn.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50882393973214,
            "correctness": "uncompilable",
            "tokenized_patch": "conn . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , parent , cfa ) ;",
            "score": 99.50579512746711,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , && Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50282353940217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , && Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "vcfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49840198863636,
            "correctness": "uncompilable",
            "tokenized_patch": "v@@ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "values.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47327769886364,
            "correctness": "uncompilable",
            "tokenized_patch": "values . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , cfa , cfa ) ;",
            "score": 99.4226806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent.getLastChild( ) ) ; }",
            "score": 99.558837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; } } }",
            "score": 99.53228204900569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getParent( ) ) ; } }",
            "score": 99.51458185369319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Parent ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode + Branch.UNCOND , finallyNode ) ;",
            "score": 99.47991388494319,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node + Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch ) ;",
            "score": 99.4728771391369,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this.fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.55845575747283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this . from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ) ; } else {",
            "score": 99.50869605654762,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; *",
            "score": 99.50499378551136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; *",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Loop.UNCOND , finallyNode ) ;",
            "score": 99.50158110119048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Loop . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , element ) ;",
            "score": 99.49791949728261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , element ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , finallyNode ) ;",
            "score": 99.47911312705592,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2) ; }",
            "score": 99.47188110351563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4) ; }",
            "score": 99.47188110351563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3) ; }",
            "score": 99.47188110351563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10) ; }",
            "score": 99.47188110351563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008) ; }",
            "score": 99.47188110351563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.parent ) ;",
            "score": 99.42213948567708,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , false ) ; } }",
            "score": 99.51448921535327,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getNext( ) ) ;",
            "score": 99.50455474853516,
            "correctness": "wrong",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode , false ) ;",
            "score": 99.49768597146739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null ) ;",
            "score": 99.422119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , append.UNCOND , finallyNode ) ; }",
            "score": 99.5309170809659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , append . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.UNCOND ,",
            "score": 99.51376740828805,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.false , finallyNode ) ;",
            "score": 99.50130004882813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . false , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.47853597005208,
            "correctness": "uncompilable",
            "tokenized_patch": "Node compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "exp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47132457386364,
            "correctness": "uncompilable",
            "tokenized_patch": "exp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , source , cfa ) ;",
            "score": 99.42194366455078,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , source , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNext( ) ) ; }",
            "score": 99.50779095818015,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , n.getLastChild( ) ) ;",
            "score": 99.50383966619319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , n . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , UNCOND , finallyNode ) ;",
            "score": 99.4972613790761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.class , finallyNode ) ; }",
            "score": 99.47091238839286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . class , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa ) ; } catch(",
            "score": 99.5570956143466,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } catch (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EMPTY , finallyNode ) ; }",
            "score": 99.5305408296131,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EMPTY , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51309867527173,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.507568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.50265984786184,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; } cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50057983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; } cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new >( fromNode ) ) ;",
            "score": 99.4972412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new > ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Loop.UNCOND , finallyNode ) ; }",
            "score": 99.47090287642045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Loop . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode , cfa ) ;",
            "score": 99.42183837890624,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , insert.UNCOND , finallyNode ) ; } }",
            "score": 99.51276961616848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , insert . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , } ) ;",
            "score": 99.50663248697917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "manager.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47081409801136,
            "correctness": "uncompilable",
            "tokenized_patch": "manager . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , this ) ;",
            "score": 99.42178955078126,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return this ;",
            "score": 99.52882893880208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return this ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , target ) ; }",
            "score": 99.51267496744792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , target ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.SIZE , finallyNode ) ; }",
            "score": 99.50233677455357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . SIZE , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "registry.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49643089657738,
            "correctness": "uncompilable",
            "tokenized_patch": "registry . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | 'less than') ;",
            "score": 99.47712787828948,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | ' y (if true) and x ') ;",
            "score": 99.47712787828948,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | 'greater than') ;",
            "score": 99.47712787828948,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | 'before') ;",
            "score": 99.47712787828948,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | 'Not reachable') ;",
            "score": 99.47712787828948,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , true ) ;",
            "score": 99.42177734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent.getLastChild( ) ) ; }",
            "score": 99.5557149251302,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.finallyMap.put( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51179305366848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . finally CaMeL Map . put ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( parent , cfa ) ;",
            "score": 99.50582082648026,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new | UNCOND , finallyNode ) ;",
            "score": 99.49624488467262,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new | UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , {",
            "score": 99.47030784970238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getNext( ) ) ; }",
            "score": 99.51127697172619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "params.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50545247395833,
            "correctness": "uncompilable",
            "tokenized_patch": "params . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , root ) ;",
            "score": 99.5010498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Node.UNCOND , finallyNode ) ;",
            "score": 99.4955523947011,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.4216244346217,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Visitor.UNCOND , finallyNode ) ;",
            "score": 99.52726944633152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Visitor . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getFirstChild( ) ) ; }",
            "score": 99.51123046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , getLastChild( ) ) ;",
            "score": 99.500732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49996815557066,
            "correctness": "uncompilable",
            "tokenized_patch": "continue { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49530029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47557484019886,
            "correctness": "uncompilable",
            "tokenized_patch": "Node compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , + Branch.UNCOND , finallyNode ) ;",
            "score": 99.47021484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , + Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) , parent , cfa ) ; }",
            "score": 99.42143811677632,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getLastChild( ) , parent , cfa ) ;",
            "score": 99.5537821451823,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.5266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.5266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.5266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'before') ; }",
            "score": 99.5266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.5266357421875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51084391276042,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ch.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50527808779762,
            "correctness": "uncompilable",
            "tokenized_patch": "ch . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.UNCOND ) ; }",
            "score": 99.4999469259511,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49525518002717,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , int.UNCOND , finallyNode ) ;",
            "score": 99.47541155133929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , int . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "iterator.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47015671502976,
            "correctness": "uncompilable",
            "tokenized_patch": "iterator . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.UNCOND , finallyNode ) ;",
            "score": 99.55377197265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "proc.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50523158482143,
            "correctness": "uncompilable",
            "tokenized_patch": "proc . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -0, finallyNode ) ;",
            "score": 99.4998779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.49979248046876,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode Branch ) ;",
            "score": 99.49492853338069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node Branch ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -2, finallyNode ) ;",
            "score": 99.4700863486842,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -4, finallyNode ) ;",
            "score": 99.4700863486842,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -3, finallyNode ) ;",
            "score": 99.4700863486842,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -10, finallyNode ) ;",
            "score": 99.4700863486842,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -2008, finallyNode ) ;",
            "score": 99.4700863486842,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.553193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; break ;",
            "score": 99.50963774181548,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; break ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "xform.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50519670758929,
            "correctness": "uncompilable",
            "tokenized_patch": "xform . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , || Branch.UNCOND , finallyNode ) ;",
            "score": 99.4946621981534,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , || Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , Branch.UNCOND + finallyNode ) ;",
            "score": 99.4746426669034,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getName( ) ) ;",
            "score": 99.47005615234374,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , node ) ;",
            "score": 99.42072143554688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; } } } else {",
            "score": 99.52572631835938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; } } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50889521059783,
            "correctness": "uncompilable",
            "tokenized_patch": "n = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2, true ) ;",
            "score": 99.49351283482143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4, true ) ;",
            "score": 99.49351283482143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3, true ) ;",
            "score": 99.49351283482143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10, true ) ;",
            "score": 99.49351283482143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008, true ) ;",
            "score": 99.49351283482143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , function.UNCOND , finallyNode ) ; }",
            "score": 99.47002618963069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , function . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( false , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49337607935855,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( false , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46965997869319,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.42005615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CHECK , finallyNode ) ;",
            "score": 99.52554321289062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CHECK , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( node , cfa ) ;",
            "score": 99.50433670847039,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49918619791667,
            "correctness": "uncompilable",
            "tokenized_patch": "continue { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode || false ) ;",
            "score": 99.4932171365489,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node || false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node( Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.551220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ( Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return ;",
            "score": 99.50753651494566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ht.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50402250744048,
            "correctness": "uncompilable",
            "tokenized_patch": "ht . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.IN , finallyNode , false ) ;",
            "score": 99.49907892400569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . IN , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( ? finallyNode : finallyNode ) ) ;",
            "score": 99.49280315896739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( ? finally CaMeL Node : finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.41988525390624,
            "correctness": "uncompilable",
            "tokenized_patch": "System . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ) ; }",
            "score": 99.50750732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , null , false ) ;",
            "score": 99.4989703634511,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , null , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , false ) ; }",
            "score": 99.49828491210937,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( node.getLastChild( ) ) ;",
            "score": 99.47347861842105,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; ; }",
            "score": 99.46909877232143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.419677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "next . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , target ) ; }",
            "score": 99.50703735351563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , target ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "session.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50360398065476,
            "correctness": "uncompilable",
            "tokenized_patch": "session . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.IN ) ;",
            "score": 99.49887483016305,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . IN ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , cfa ,",
            "score": 99.4981689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c{ cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49211319633152,
            "correctness": "uncompilable",
            "tokenized_patch": "c@@ { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND | finallyNode ) ;",
            "score": 99.47300502232143,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Symbol.UNCOND , finallyNode ) ;",
            "score": 99.46894763764881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Symbol . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.else return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.41959228515626,
            "correctness": "uncompilable",
            "tokenized_patch": "System . else return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.52310180664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fs.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50345284598214,
            "correctness": "uncompilable",
            "tokenized_patch": "fs . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, UNCOND , finallyNode ) ;",
            "score": 99.4916759672619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.47300318667763,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.46890258789062,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CHECK , finallyNode ) ; } }",
            "score": 99.52269398082386,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CHECK , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , true ) ; } }",
            "score": 99.50328369140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , true ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "comparator.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49793061755952,
            "correctness": "uncompilable",
            "tokenized_patch": "comparator . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode + ) ;",
            "score": 99.49149946732955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node + ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.41920776367188,
            "correctness": "uncompilable",
            "tokenized_patch": "this . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ;",
            "score": 99.50691024116848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFollowNode( fromNode , parent , cfa ,",
            "score": 99.49786931818181,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , LT , finallyNode ) ;",
            "score": 99.4912746263587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , LT , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , byte.UNCOND , finallyNode ) ;",
            "score": 99.47258649553571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , byte . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } ) ;",
            "score": 99.41910593133224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode.getLastChild( ) ) ;",
            "score": 99.54800269717262,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.NONE ) ;",
            "score": 99.50649626358695,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "indexer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50289481026786,
            "correctness": "uncompilable",
            "tokenized_patch": "indexer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "found.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46808733258929,
            "correctness": "uncompilable",
            "tokenized_patch": "found . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.41679551866319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.52190290178571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( parent , cfa ) ;",
            "score": 99.50280151367187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , false ) ; }",
            "score": 99.49770779079861,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "d.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49100167410714,
            "correctness": "uncompilable",
            "tokenized_patch": "d . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent.getParent( ) ) ;",
            "score": 99.47227260044643,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Stat.UNCOND , finallyNode ) ; }",
            "score": 99.46797318892045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Stat . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa -1) ;",
            "score": 99.41623942057292,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa - 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.getCatchBlock( fromNode , parent , cfa ) != null ) {",
            "score": 99.547373046875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . get CaMeL Catch CaMeL Block ( from CaMeL Node , parent , cfa ) != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final ; cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50588060461956,
            "correctness": "uncompilable",
            "tokenized_patch": "final ; cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pool.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50258091517857,
            "correctness": "uncompilable",
            "tokenized_patch": "pool . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ALL , finallyNode ) ; }",
            "score": 99.49767485119048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ALL , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "iv.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49097842261905,
            "correctness": "uncompilable",
            "tokenized_patch": "iv . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46791770241477,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ,",
            "score": 99.41596137152777,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa.createEdge( fromNode ) )",
            "score": 99.52167038690476,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa . create CaMeL Edge ( from CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode } ) ;",
            "score": 99.505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "transformer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5024646577381,
            "correctness": "uncompilable",
            "tokenized_patch": "transformer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49753639914773,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa , finallyNode ) ; }",
            "score": 99.49722144717262,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Object.UNCOND , finallyNode ) ;",
            "score": 99.4909335049716,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Object . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , fromNode ) ; }",
            "score": 99.46781782670455,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.41566226356908,
            "correctness": "uncompilable",
            "tokenized_patch": "next . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NAME , finallyNode ) ; } }",
            "score": 99.5057040127841,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NAME , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,( Integer ) finallyNode ) ;",
            "score": 99.4973653157552,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ( Integer ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.49696260340073,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , LT.UNCOND , finallyNode ) ;",
            "score": 99.4906994047619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , LT . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , finallyNode ) ;",
            "score": 99.47133567116477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , Branch.UNCOND , finallyNode , cfa ) ;",
            "score": 99.54676310221355,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.52127511160714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode1) ; }",
            "score": 99.50532863451087,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "impl.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50125558035714,
            "correctness": "uncompilable",
            "tokenized_patch": "impl . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ) ) ;",
            "score": 99.41544342041016,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) { throw cfa ; }",
            "score": 99.52064915707237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) { throw cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.interrupt( ) ; } } }",
            "score": 99.50524184283088,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . interrupt ( ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.getCatchBlock( parent ) == node ) {",
            "score": 99.50053325452302,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . get CaMeL Catch CaMeL Block ( parent ) == node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , cfa ) ; }",
            "score": 99.49671630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , element ) ;",
            "score": 99.4897396689967,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , element ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa ; cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51990276834239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa ; cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50506591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; throw null ;",
            "score": 99.4961649576823,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; throw null ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , node , finallyNode ) ;",
            "score": 99.489501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Stat.UNCOND , finallyNode ) ;",
            "score": 99.46587844122024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Stat . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , getNext( ) ) ;",
            "score": 99.51973293138587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'less than') ; }",
            "score": 99.50476684570313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( ' y (if true) and x ') ; }",
            "score": 99.50476684570313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'greater than') ; }",
            "score": 99.50476684570313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'before') ; }",
            "score": 99.50476684570313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Error( 'Not reachable') ; }",
            "score": 99.50476684570313,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50025576636905,
            "correctness": "uncompilable",
            "tokenized_patch": "c . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.UNCOND , null ) ;",
            "score": 99.49612426757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + false ) ;",
            "score": 99.47063245271382,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( createNode , parent , cfa ) ;",
            "score": 99.41443634033203,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( create CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( ) ; }",
            "score": 99.51943824404762,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "3"
        },
        {
            "patch": "ctx.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49989536830357,
            "correctness": "uncompilable",
            "tokenized_patch": "ctx . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ||",
            "score": 99.48902529761905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ||",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.fromNode , parent , cfa ) ;",
            "score": 99.47055886008523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "viewer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46558779761905,
            "correctness": "uncompilable",
            "tokenized_patch": "viewer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.41359349300987,
            "correctness": "uncompilable",
            "tokenized_patch": "System . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) finallyNode ) ;",
            "score": 99.5192638578869,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( getNext( ) ) ; }",
            "score": 99.50447221235795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , true , null ) ;",
            "score": 99.4957859205163,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , true , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.49577985491071,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , BLOCK.UNCOND , finallyNode ) ;",
            "score": 99.48902529761905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , BLOCK . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( NodeUtil ) finallyNode ) ;",
            "score": 99.46554129464286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node CaMeL Util ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) ) ; }",
            "score": 99.41338704427083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { for( Node finallyNode : parent.getNext( ) ) {",
            "score": 99.54445393880208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { for ( Node finally CaMeL Node : parent . get CaMeL Next ( ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( node.getNext( ) ) ;",
            "score": 99.51906419836956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , source.getFirstChild( ) ) ; } }",
            "score": 99.50437418619792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , source . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "strbuff.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49933733258929,
            "correctness": "uncompilable",
            "tokenized_patch": "strbuff . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.49569702148438,
            "correctness": "wrong",
            "tokenized_patch": "finally CaMeL Node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "Children.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48894391741071,
            "correctness": "uncompilable",
            "tokenized_patch": "Children . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.parent , finallyNode ) ;",
            "score": 99.47039240056819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . parent , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46517944335938,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( parent , cfa ) ) ;",
            "score": 99.41320082720588,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } else if( cfa != null )",
            "score": 99.543564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } else if ( cfa != null )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.51888374660327,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND ) ; else",
            "score": 99.50416056315105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap.get( parent ) ) { } }",
            "score": 99.4956387606534,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) { } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return finallyNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48848876953124,
            "correctness": "uncompilable",
            "tokenized_patch": "return finally CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.47000282689145,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Symbol.UNCOND , finallyNode ) ; }",
            "score": 99.46495472301136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Symbol . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa ) ; } }",
            "score": 99.41319274902344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , null , null ) ;",
            "score": 99.4954144021739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , null , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ctrl.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4883045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "ctrl . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent.getParent( ) ) ;",
            "score": 99.46894975142045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "p.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46492513020833,
            "correctness": "uncompilable",
            "tokenized_patch": "p . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.41263156467014,
            "correctness": "uncompilable",
            "tokenized_patch": "this . compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , finallyNode , cfa ) ;",
            "score": 99.54341457201087,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND ) finallyNode ) {",
            "score": 99.5186183763587,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) finally CaMeL Node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.49777560763889,
            "correctness": "uncompilable",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stack.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49518694196429,
            "correctness": "uncompilable",
            "tokenized_patch": "stack . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , root , cfa ) ;",
            "score": 99.495068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node fromNode , finallyNode ) ;",
            "score": 99.48825905539773,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent.getParent( ) ) ;",
            "score": 99.4687744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FOR , finallyNode ) ;",
            "score": 99.41259765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FOR , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return ) ;",
            "score": 99.517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , addNode ) ;",
            "score": 99.50401239809783,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , add CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.49761672247024,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stack.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46465509588069,
            "correctness": "uncompilable",
            "tokenized_patch": "stack . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.4124396829044,
            "correctness": "uncompilable",
            "tokenized_patch": "result . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastChild( ) , cfa ) ; }",
            "score": 99.542802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Child ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , append.UNCOND , finallyNode ) ; } }",
            "score": 99.51737644361413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , append . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'less than') ; }",
            "score": 99.50367228190105,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ' y (if true) and x ') ; }",
            "score": 99.50367228190105,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'greater than') ; }",
            "score": 99.50367228190105,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'before') ; }",
            "score": 99.50367228190105,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , 'Not reachable') ; }",
            "score": 99.50367228190105,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , fromNode ) ; }",
            "score": 99.49747721354167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode == null ? ) ;",
            "score": 99.494873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node == null ? ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null , cfa , finallyNode ) ;",
            "score": 99.49397416548295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cx.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48795572916667,
            "correctness": "uncompilable",
            "tokenized_patch": "cx . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.root ) ;",
            "score": 99.4680240028783,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getParent( ) , finallyNode ) ; }",
            "score": 99.46443684895833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Parent ( ) , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target , cfa ) ;",
            "score": 99.41217803955078,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = computeFollowNode( fromNode , parent , cfa ) ; if( next != null )",
            "score": 99.542802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "Node next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; if ( next != null )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0.0, finallyNode ) ; } }",
            "score": 99.51723410866477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 . 0 , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fcfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5035067471591,
            "correctness": "uncompilable",
            "tokenized_patch": "f@@ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( node.getNext( ) ) ;",
            "score": 99.49715847439236,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.& UNCOND , finallyNode ) ; }",
            "score": 99.49426800271739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . & UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge finallyNode = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.49383835565476,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge finally CaMeL Node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , finallyNode , finallyNode ) ;",
            "score": 99.46431107954545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ).getNext( ) ) ;",
            "score": 99.54270426432292,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "SLOT.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49669828869048,
            "correctness": "uncompilable",
            "tokenized_patch": "SLOT . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , filter ) ;",
            "score": 99.4940875509511,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , filter ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1, true ) ;",
            "score": 99.48778134300595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , endNode ) ; }",
            "score": 99.4661532315341,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , end CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.{ cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.41157836914063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { return computeFallThrough( node , cfa ) ;",
            "score": 99.49658813476563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { return compute CaMeL Fall CaMeL Through ( node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , false ) ;",
            "score": 99.4874267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "-- cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46380060369319,
            "correctness": "uncompilable",
            "tokenized_patch": "-- cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NO , finallyNode ) ; } }",
            "score": 99.51677911931819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NO , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "conf.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49648902529762,
            "correctness": "uncompilable",
            "tokenized_patch": "conf . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.49346923828125,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND - finallyNode ) ;",
            "score": 99.48735119047619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND - finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) cfa , finallyNode ) ;",
            "score": 99.46537853422619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ).getNext( ) ) ;",
            "score": 99.54147206182066,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "gs.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49589611235119,
            "correctness": "uncompilable",
            "tokenized_patch": "gs . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "target.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49358575994319,
            "correctness": "uncompilable",
            "tokenized_patch": "target . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { finallyNode ) ;",
            "score": 99.49341930042614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.finallyMap ) ;",
            "score": 99.46476440429687,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . finally CaMeL Map ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch.createEdge( fromNode , Branch.UNCOND , finallyNode ) )",
            "score": 99.5164104959239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next.getFirstChild( ) ) ;",
            "score": 99.5025634765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Scheduler.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "Scheduler . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "self.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4934314546131,
            "correctness": "uncompilable",
            "tokenized_patch": "self . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , true ) ;",
            "score": 99.49331665039062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , true ) ;",
            "score": 99.48659939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND || finallyNode ) ;",
            "score": 99.46465773809524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND || finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.40982216282895,
            "correctness": "uncompilable",
            "tokenized_patch": "else { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.54111735026042,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getNext( ) ) ; } }",
            "score": 99.50254128196023,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "schema.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46283249627976,
            "correctness": "uncompilable",
            "tokenized_patch": "schema . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa.UNCOND , finallyNode ) ;",
            "score": 99.54111550071023,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0.0, finallyNode ) ;",
            "score": 99.51624145507813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 . 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , false ) ; ;",
            "score": 99.50252278645833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Kit.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48653738839286,
            "correctness": "uncompilable",
            "tokenized_patch": "Kit . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "added.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46259099786931,
            "correctness": "uncompilable",
            "tokenized_patch": "added . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CHECK , finallyNode ) ; }",
            "score": 99.515869140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CHECK , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50182574728261,
            "correctness": "uncompilable",
            "tokenized_patch": "} } cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "dd.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49508231026786,
            "correctness": "uncompilable",
            "tokenized_patch": "dd . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.createEdge( finallyNode ) ) ;",
            "score": 99.4865191915761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . create CaMeL Edge ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.46429443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getParent( ) ) ;",
            "score": 99.40964965820312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getFirstChild( ) ) ; }",
            "score": 99.54033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode",
            "score": 99.50159976356908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parser.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49426850818452,
            "correctness": "uncompilable",
            "tokenized_patch": "parser . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4926227072011,
            "correctness": "uncompilable",
            "tokenized_patch": "Node . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'less than', Branch.UNCOND , finallyNode ) ;",
            "score": 99.48647925967262,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , ' y (if true) and x ', Branch.UNCOND , finallyNode ) ;",
            "score": 99.48647925967262,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'greater than', Branch.UNCOND , finallyNode ) ;",
            "score": 99.48647925967262,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'before', Branch.UNCOND , finallyNode ) ;",
            "score": 99.48647925967262,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'Not reachable', Branch.UNCOND , finallyNode ) ;",
            "score": 99.48647925967262,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , int.UNCOND , finallyNode ) ; }",
            "score": 99.46230246803977,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , int . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; *",
            "score": 99.40922995174633,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; *",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ec.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49422200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "ec . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.| Branch.UNCOND , finallyNode ) ;",
            "score": 99.49251302083333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . | Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getNext( ) , cfa ) ;",
            "score": 99.49187268708882,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Location.UNCOND , finallyNode ) ;",
            "score": 99.48644438244048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Location . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , , cfa ) ;",
            "score": 99.40850471047794,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalStateException( ) ;",
            "score": 99.51549762228261,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL State CaMeL Exception ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5014117697011,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ctor.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "ctor . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.true , finallyNode ) ; }",
            "score": 99.49237351190476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . true , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.46384148848684,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , EXPRESSION.UNCOND , finallyNode ) ;",
            "score": 99.46220470610119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , EXPRESSION . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( hasFinally ) return computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.53908284505208,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( has CaMeL Finally ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ) ; } break ;",
            "score": 99.5014011548913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , root , cfa ) ;",
            "score": 99.49401274181548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "data.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48589797247024,
            "correctness": "uncompilable",
            "tokenized_patch": "data . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4620694247159,
            "correctness": "uncompilable",
            "tokenized_patch": "c . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent.getLastChild( ) ) ; }",
            "score": 99.40841064453124,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return parent.getFirstChild( ).getNext( ).getNext( ) ;",
            "score": 99.53883870442708,
            "correctness": "wrong",
            "tokenized_patch": "return parent . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) . get CaMeL Next ( ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "info.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49171084449405,
            "correctness": "uncompilable",
            "tokenized_patch": "info . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "helper.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48558407738095,
            "correctness": "uncompilable",
            "tokenized_patch": "helper . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , fromNode , cfa ) ;",
            "score": 99.46355646306819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ext.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46202503551136,
            "correctness": "uncompilable",
            "tokenized_patch": "ext . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , parent ) ) ;",
            "score": 99.4083187705592,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , parent ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.getLastChild( ).createEdge( fromNode , parent , cfa ) ;",
            "score": 99.53875732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . get CaMeL Last CaMeL Child ( ) . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name.UNCOND , finallyNode ) ;",
            "score": 99.51405552455357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , true ) ;",
            "score": 99.4916280110677,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , parent , cfa ,",
            "score": 99.49014136904762,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , type ) ;",
            "score": 99.48531943873355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , type ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND : finallyNode ) ;",
            "score": 99.46332077752976,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ctx.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46201393821023,
            "correctness": "uncompilable",
            "tokenized_patch": "ctx . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa.UNCOND , finallyNode ) ;",
            "score": 99.53797496448864,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getNext( ) ) ;",
            "score": 99.5011474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "collection.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49286179315476,
            "correctness": "uncompilable",
            "tokenized_patch": "collection . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { fromNode",
            "score": 99.49158325195313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { from CaMeL Node",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } break ;",
            "score": 99.49003295898437,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ) ;",
            "score": 99.48492752878289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "s.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46192515980114,
            "correctness": "uncompilable",
            "tokenized_patch": "s . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,1) ;",
            "score": 99.40825737847223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0.0, finallyNode ) ; }",
            "score": 99.51363699776786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 . 0 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.EMPTY ) ;",
            "score": 99.49147630774456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . EMPTY ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new : finallyNode ) ;",
            "score": 99.48481580946181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.46154203869048,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.40814971923828,
            "correctness": "uncompilable",
            "tokenized_patch": "this . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5372898267663,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ) ; } }",
            "score": 99.5008544921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch( Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.491455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch ( Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , this , cfa ) ;",
            "score": 99.48971896701389,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , this , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , group.UNCOND , finallyNode ) ;",
            "score": 99.48458426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , group . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "iter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46134810014205,
            "correctness": "uncompilable",
            "tokenized_patch": "iter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.4079833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.53727921195652,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Iter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49125744047619,
            "correctness": "uncompilable",
            "tokenized_patch": "Iter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "graph.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4843982514881,
            "correctness": "uncompilable",
            "tokenized_patch": "graph . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "a.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46124822443181,
            "correctness": "uncompilable",
            "tokenized_patch": "a . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.STRING , finallyNode ) ;",
            "score": 99.40762329101562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . STRING , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.51273970170455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50046705163044,
            "correctness": "uncompilable",
            "tokenized_patch": "i = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ;",
            "score": 99.4925537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.46090359157986,
            "correctness": "uncompilable",
            "tokenized_patch": "Node { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , Branch.UNCOND ,",
            "score": 99.40726511101974,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( source , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.5002685546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( source , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "toolkit.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49204799107143,
            "correctness": "uncompilable",
            "tokenized_patch": "toolkit . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , ) ;",
            "score": 99.49074096679688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return null ;",
            "score": 99.40700073242188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.51176313920455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , node.null ) ;",
            "score": 99.49059477306548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node . null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Ref.UNCOND , finallyNode ) ;",
            "score": 99.48408435639881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Ref . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buffer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46058872767857,
            "correctness": "uncompilable",
            "tokenized_patch": "buffer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , true ) ; }",
            "score": 99.40676540798611,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode.addNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4902980638587,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . add CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "block.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46077104048295,
            "correctness": "uncompilable",
            "tokenized_patch": "block . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | Token.DO ) ;",
            "score": 99.46036783854167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | Token . DO ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.40593872070312,
            "correctness": "wrong",
            "tokenized_patch": "from CaMeL Node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; return break ;",
            "score": 99.49881998697917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; return break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , next ) ;",
            "score": 99.49089219835069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "writer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4875720796131,
            "correctness": "uncompilable",
            "tokenized_patch": "writer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "bounds.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48318917410714,
            "correctness": "uncompilable",
            "tokenized_patch": "bounds . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getParent( ) , cfa ) ;",
            "score": 99.46019287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Parent ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { cfa.createEdge( fromNode ,",
            "score": 99.536474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { throw new IllegalArgumentException( ) ;",
            "score": 99.51106063179348,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.49801199776786,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cstmt.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49068777901786,
            "correctness": "uncompilable",
            "tokenized_patch": "cstmt . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , root ) ;",
            "score": 99.48724365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "comp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4605379971591,
            "correctness": "uncompilable",
            "tokenized_patch": "comp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.40529913651316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.UNCOND , finallyNode ) ; }",
            "score": 99.5364481608073,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ; }",
            "score": 99.51051927649456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ) ; } } }",
            "score": 99.49061802455357,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ui.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48303803943452,
            "correctness": "uncompilable",
            "tokenized_patch": "ui . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) , parent ) ;",
            "score": 99.45939497514205,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ) , cfa ) ; }",
            "score": 99.53619939630681,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( int ) Branch.UNCOND , finallyNode ) ;",
            "score": 99.49753824869792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( int ) Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.node ) ;",
            "score": 99.49060736762152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( node.getNext( ) ) ;",
            "score": 99.48632094439338,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Reference.UNCOND , finallyNode ) ;",
            "score": 99.48250325520833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Reference . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + true ) ;",
            "score": 99.45930561266448,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.40514458550348,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode )",
            "score": 99.5102294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this , finallyNode ) ; }",
            "score": 99.4972432454427,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , UNCOND , finallyNode ) ;",
            "score": 99.48983101222827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2, ) ;",
            "score": 99.48053588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4, ) ;",
            "score": 99.48053588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3, ) ;",
            "score": 99.48053588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10, ) ;",
            "score": 99.48053588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008, ) ;",
            "score": 99.48053588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getId( ) ) ; }",
            "score": 99.45935639880952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Id ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( fromNode , cfa ) ; } else",
            "score": 99.53555297851562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "nodes.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "nodes . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "enumeration.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4902576264881,
            "correctness": "uncompilable",
            "tokenized_patch": "enumeration . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target , UNCOND , finallyNode ) ;",
            "score": 99.48042224702381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "module.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45927501860119,
            "correctness": "uncompilable",
            "tokenized_patch": "module . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , finallyNode , cfa ) ;",
            "score": 99.45920817057292,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5354534646739,
            "correctness": "uncompilable",
            "tokenized_patch": "node . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , node ) ; } }",
            "score": 99.49641927083333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ref.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4902111235119,
            "correctness": "uncompilable",
            "tokenized_patch": "ref . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge node = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48942057291667,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge node = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } else",
            "score": 99.40463738692434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Visitor.UNCOND , finallyNode ) ; }",
            "score": 99.50925699869792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Visitor . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , null , true ) ;",
            "score": 99.48941703464673,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , null , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than') ;",
            "score": 99.48007638113839,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ') ;",
            "score": 99.48007638113839,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than') ;",
            "score": 99.48007638113839,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before') ;",
            "score": 99.48007638113839,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable') ;",
            "score": 99.48007638113839,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Arguments.UNCOND , finallyNode ) ;",
            "score": 99.45910063244048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Arguments . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode.getNext( ) ) ;",
            "score": 99.458740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastSibling( ) ) ; } }",
            "score": 99.49497477213542,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Sibling ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ws.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48994373139881,
            "correctness": "uncompilable",
            "tokenized_patch": "ws . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;_",
            "score": 99.47993607954545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; _",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cl.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45901925223214,
            "correctness": "uncompilable",
            "tokenized_patch": "cl . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastSibling( ) ) ; }",
            "score": 99.49431046195652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Sibling ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.NULL ) ;",
            "score": 99.4891941236413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . NULL ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45881791548295,
            "correctness": "uncompilable",
            "tokenized_patch": "continue cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( UNCOND , finallyNode ) ) ;",
            "score": 99.457666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , cfa ) ; }",
            "score": 99.4024299172794,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'less than') ; }",
            "score": 99.50835418701172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( ' y (if true) and x ') ; }",
            "score": 99.50835418701172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'greater than') ; }",
            "score": 99.50835418701172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'before') ; }",
            "score": 99.50835418701172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'Not reachable') ; }",
            "score": 99.50835418701172,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Factory.UNCOND , finallyNode ) ; }",
            "score": 99.49418131510417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Factory . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.next( ) ) ;",
            "score": 99.4896240234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FUNCTION.UNCOND , finallyNode ) ;",
            "score": 99.48908797554348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FUNCTION . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa , cfa ) ;",
            "score": 99.48417358398437,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "source.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45870535714286,
            "correctness": "uncompilable",
            "tokenized_patch": "source . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5342508951823,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5080233487216,
            "correctness": "uncompilable",
            "tokenized_patch": "throw cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "points.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48908342633929,
            "correctness": "uncompilable",
            "tokenized_patch": "points . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', finallyNode , true ) ;",
            "score": 99.47904663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode , true ) ;",
            "score": 99.47904663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', finallyNode , true ) ;",
            "score": 99.47904663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', finallyNode , true ) ;",
            "score": 99.47904663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', finallyNode , true ) ;",
            "score": 99.47904663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Package.UNCOND , finallyNode ) ;",
            "score": 99.45868210565476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Package . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , fromNode , parent , cfa ) ;",
            "score": 99.45765904017857,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.53333984375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name.UNCOND , finallyNode ) ; }",
            "score": 99.50783469460227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getFirstChild( ) , false ) ;",
            "score": 99.49404907226562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "j.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48833937872024,
            "correctness": "uncompilable",
            "tokenized_patch": "j . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "data.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4582186612216,
            "correctness": "uncompilable",
            "tokenized_patch": "data . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "config.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45756603422619,
            "correctness": "uncompilable",
            "tokenized_patch": "config . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.{ cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.40203247070312,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.getFirstChild( ).createEdge( fromNode , parent , cfa ) ;",
            "score": 99.53323364257812,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . get CaMeL First CaMeL Child ( ) . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.49392832880434,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "comparator.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "comparator . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { if( NodeUtil.hasFinally( parent ) ) {",
            "score": 99.45751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , node , cfa ) ;",
            "score": 99.40199584960938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) throw new IllegalStateException( 'less than') ; }",
            "score": 99.50723427220395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.50723427220395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) throw new IllegalStateException( 'greater than') ; }",
            "score": 99.50723427220395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) throw new IllegalStateException( 'before') ; }",
            "score": 99.50723427220395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.50723427220395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNode( ) ) ;",
            "score": 99.48784790039062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode.getNext( ) ) ; }",
            "score": 99.4833740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.length , finallyNode ) ;",
            "score": 99.45750732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . length , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ! finallyNode ) ;",
            "score": 99.4018490439967,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ! finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5322774251302,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , false , false ) ;",
            "score": 99.48824940557066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , false , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( cloneNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48780459449405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( clone CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } } } else {",
            "score": 99.48325417258523,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "it.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47820172991071,
            "correctness": "uncompilable",
            "tokenized_patch": "it . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , cfa ) ;",
            "score": 99.45742652529762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( node.getNext( ) ) ;",
            "score": 99.45655014935662,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( next != null ) return computeFallThrough( node.getNext( ) ) ; else",
            "score": 99.5322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( next != null ) return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.50682431175595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "arguments.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48746744791667,
            "correctness": "uncompilable",
            "tokenized_patch": "arguments . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Map.UNCOND , finallyNode ) ; }",
            "score": 99.45735307173295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Map . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , node , cfa ) ;",
            "score": 99.45654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( Branch.UNCOND , finallyNode ) ) ; }",
            "score": 99.50676935369319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( Branch . UN@@ COND , finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target ) ; }",
            "score": 99.493505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , root ) ;",
            "score": 99.4826595908717,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.45732964409723,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.50662841796876,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.50662841796876,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.50662841796876,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'before') ; }",
            "score": 99.50662841796876,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.50662841796876,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "qualifier.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48739769345238,
            "correctness": "uncompilable",
            "tokenized_patch": "qualifier . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , null ) ; }",
            "score": 99.48252563476562,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.fromNode , parent ) ;",
            "score": 99.4548006924716,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , cfa ) ) ; }",
            "score": 99.40125732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , cfa ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { finallyNode ; } }",
            "score": 99.48741083559783,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { finally CaMeL Node ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ for( Node finallyNode : cfa.finallyMap.get( parent ) ) {",
            "score": 99.487060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "{ for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND.finallyNode ) ; }",
            "score": 99.48248845880681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND . finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , EXPRESSION.UNCOND , finallyNode ) ; }",
            "score": 99.45707563920455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , EXPRESSION . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) finallyNode , cfa ) ;",
            "score": 99.45463634672619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , index ) ;",
            "score": 99.49223400297619,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , index ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.null , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48736281622024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . null , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "env.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48680478050595,
            "correctness": "uncompilable",
            "tokenized_patch": "env . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , intValue ) ;",
            "score": 99.45704287574405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , int CaMeL Value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getNext( ) ) ; }",
            "score": 99.50606863839286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getLastChild( ) ) ; } }",
            "score": 99.48228149414062,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "res.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45689808238636,
            "correctness": "uncompilable",
            "tokenized_patch": "res . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa , false ) ;",
            "score": 99.45414225260417,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.40071186266448,
            "correctness": "uncompilable",
            "tokenized_patch": "this . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ) ; } }",
            "score": 99.50579833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element.getFirstChild( ) ) ; }",
            "score": 99.49208135190217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "runtime.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48651413690476,
            "correctness": "uncompilable",
            "tokenized_patch": "runtime . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , node ) ;",
            "score": 99.48194644325658,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , - finallyNode ) ;",
            "score": 99.47639604048295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.45675998263889,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ) , cfa ) ;",
            "score": 99.45407104492188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , count ) ;",
            "score": 99.40067291259766,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , count ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.0) ;",
            "score": 99.4865085767663,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "db.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4861072358631,
            "correctness": "uncompilable",
            "tokenized_patch": "db . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , null ) ;",
            "score": 99.47587754991319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , node ) ;",
            "score": 99.40060424804688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getFirstChild( ) , cfa ) ;",
            "score": 99.5277099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.create( finallyNode , false ) ) ;",
            "score": 99.4911472486413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . create ( finally CaMeL Node , false ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.DEFAULT.UNCOND , finallyNode ) ;",
            "score": 99.48643427309783,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . DEFAULT . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.48166375411184,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rect.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47584170386905,
            "correctness": "uncompilable",
            "tokenized_patch": "rect . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent.getNext( ) , cfa ) ;",
            "score": 99.45390181107955,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ; } }",
            "score": 99.50399116847827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ) ; } } }",
            "score": 99.49063773777173,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "void cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4862948330966,
            "correctness": "uncompilable",
            "tokenized_patch": "void cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.node ) ; }",
            "score": 99.48580129523026,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode.getLastChild( ) ) ; }",
            "score": 99.48136763139205,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge..createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47539728338069,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge . . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , finallyNode ) ; } finally",
            "score": 99.45626831054688,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; } finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return parent.getFirstChild( ).getNext( ) ; }",
            "score": 99.40037777549342,
            "correctness": "uncompilable",
            "tokenized_patch": "return parent . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( - fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50386186079545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( - from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode( fromNode ) ) ;",
            "score": 99.48587168817934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null ) ; }",
            "score": 99.48566750919117,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , false ) ;",
            "score": 99.48124186197917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.45607688210227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.52686767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "metadata.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48547944568452,
            "correctness": "uncompilable",
            "tokenized_patch": "metadata . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND.finallyNode ) ;",
            "score": 99.48106166294643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Compiler.UNCOND , finallyNode ) ;",
            "score": 99.47469075520833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Compiler . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "f.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45599920099431,
            "correctness": "uncompilable",
            "tokenized_patch": "f . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode true ) ;",
            "score": 99.45308061079545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.40010579427083,
            "correctness": "uncompilable",
            "tokenized_patch": "continue compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.52674560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( cloneNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.49020253057066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( clone CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "k.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48539806547619,
            "correctness": "uncompilable",
            "tokenized_patch": "k . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1, false ) ;",
            "score": 99.48517717633929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , root ) ; }",
            "score": 99.45595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , root ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getLastChild( ) , cfa ) ;",
            "score": 99.45306951349431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , list ) ;",
            "score": 99.40009307861328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , list ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5261867357337,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.50318400065105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + finallyNode ) ; } }",
            "score": 99.48974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , cfa , finallyNode ) ;",
            "score": 99.485302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Visitor.UNCOND , finallyNode ) ;",
            "score": 99.4851306733631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Visitor . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getNext( ) , parent , cfa ) ;",
            "score": 99.48078002929688,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.BOTH , finallyNode ) ;",
            "score": 99.4741455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . BOTH , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "code.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45578835227273,
            "correctness": "uncompilable",
            "tokenized_patch": "code . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.50254603794643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , source.getFirstChild( ) ) ;",
            "score": 99.4895907315341,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , source . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "owner.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48499116443452,
            "correctness": "uncompilable",
            "tokenized_patch": "owner . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , | Branch.UNCOND , finallyNode ) ;",
            "score": 99.4849853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , | Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } } } else",
            "score": 99.48060825892857,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } } } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new RefNode( finallyNode ) ) ;",
            "score": 99.4739102450284,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Ref CaMeL Node ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -0, finallyNode ) ;",
            "score": 99.45578484786184,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , target , cfa ) ;",
            "score": 99.45270647321429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , target , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , getNext( ) ) ;",
            "score": 99.3990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50215871710526,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Exception( 'less than') ;",
            "score": 99.48927066200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Exception( ' y (if true) and x ') ;",
            "score": 99.48927066200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Exception( 'greater than') ;",
            "score": 99.48927066200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Exception( 'before') ;",
            "score": 99.48927066200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { throw new Exception( 'Not reachable') ;",
            "score": 99.48927066200658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( root , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48466411389802,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( root , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getNext( ) ) ; } }",
            "score": 99.4805908203125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.45259174547698,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) , fromNode , cfa ) ;",
            "score": 99.3990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50212266710069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fcfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48886506453805,
            "correctness": "uncompilable",
            "tokenized_patch": "f@@ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "arity.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48478190104167,
            "correctness": "uncompilable",
            "tokenized_patch": "arity . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.== ) ;",
            "score": 99.4845554517663,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . == ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? null : finallyNode ) ;",
            "score": 99.47330322265626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? null : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , Branch.UNCOND ,",
            "score": 99.3984619140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.IN , finallyNode ) ; } }",
            "score": 99.50184215198864,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . IN , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48458426339286,
            "correctness": "uncompilable",
            "tokenized_patch": "cp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name , finallyNode ) ; }",
            "score": 99.48846756784539,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node.UNCOND , finallyNode ) ) ;",
            "score": 99.48436215049342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "project.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48416573660714,
            "correctness": "uncompilable",
            "tokenized_patch": "project . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.PREFIX , finallyNode ) ;",
            "score": 99.4732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . PREFIX , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; fromNode = next ;",
            "score": 99.4522372159091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; from CaMeL Node = next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) parent , cfa ) ; }",
            "score": 99.39827880859374,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new : fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.52469004755434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new : from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.size( ) , finallyNode ) ;",
            "score": 99.4843417080966,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . size ( ) , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "m.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47299339657738,
            "correctness": "uncompilable",
            "tokenized_patch": "m . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , finallyNode , parent , cfa ) ;",
            "score": 99.45210193452381,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , finally CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.398193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.getLastChild( ) ) ;",
            "score": 99.52461751302083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.RETURN , finallyNode ) ; } }",
            "score": 99.50152033025569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . RETURN , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.48815387228261,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Type.UNCOND , finallyNode ) ;",
            "score": 99.48424711681548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Type . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Package.UNCOND , finallyNode ) ; }",
            "score": 99.45460094105114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Package . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getParent( ) ) ;",
            "score": 99.45191786024306,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue ; } cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3981869346217,
            "correctness": "uncompilable",
            "tokenized_patch": "continue ; } cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa.finallyMap.get( parent ) ) ;",
            "score": 99.52390543619792,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa . finally CaMeL Map . get ( parent ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "jsp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48347981770833,
            "correctness": "uncompilable",
            "tokenized_patch": "jsp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , COMMA.UNCOND , finallyNode ) ;",
            "score": 99.47224934895833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , COMMA . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "viewer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45460094105114,
            "correctness": "uncompilable",
            "tokenized_patch": "viewer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , root , node ) ;",
            "score": 99.398095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , root , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( computeFollowNode( fromNode , parent , cfa ) ) ;",
            "score": 99.52309782608695,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( source , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50137489720395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( source , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , Branch ) ;",
            "score": 99.4840777853261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , Branch ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'less than', finallyNode ) ;",
            "score": 99.4720791903409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.4720791903409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'greater than', finallyNode ) ;",
            "score": 99.4720791903409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'before', finallyNode ) ;",
            "score": 99.4720791903409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'Not reachable', finallyNode ) ;",
            "score": 99.4720791903409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node.getLastChild( ) ) ;",
            "score": 99.397705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "addNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50115003083882,
            "correctness": "uncompilable",
            "tokenized_patch": "add CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.next( ) ) ; }",
            "score": 99.483154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2, false ) ;",
            "score": 99.47205171130952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4, false ) ;",
            "score": 99.47205171130952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3, false ) ;",
            "score": 99.47205171130952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10, false ) ;",
            "score": 99.47205171130952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008, false ) ;",
            "score": 99.47205171130952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { next.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.39753160978618,
            "correctness": "uncompilable",
            "tokenized_patch": "try { next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa ; cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.50110880533855,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa ; cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getFirstChild( ) ) ; } }",
            "score": 99.48764038085938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , null , false ) ;",
            "score": 99.4838336447011,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , null , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "mgr.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47201683407738,
            "correctness": "uncompilable",
            "tokenized_patch": "mgr . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.39741346571181,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5004352072011,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , endNode ) ; } }",
            "score": 99.48693316915761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , end CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "head.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48297991071429,
            "correctness": "uncompilable",
            "tokenized_patch": "head . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.getNext( ).getNext( ).getNext( ) ; }",
            "score": 99.47880415482955,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . get CaMeL Next ( ) . get CaMeL Next ( ) . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Thread.UNCOND , finallyNode ) ;",
            "score": 99.4716564360119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Thread . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { finallyNode ;",
            "score": 99.45405505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else { }",
            "score": 99.39736938476562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else { }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LINE , finallyNode ) ; } }",
            "score": 99.50038840553977,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LINE , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , builder , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48362134850544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , builder , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return parent ; } else {",
            "score": 99.48277064732143,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return parent ; } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , Branch.UNCOND , false ) ; }",
            "score": 99.45375754616477,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent ) ; }",
            "score": 99.39692957261029,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name.UNCOND , finallyNode ) ; } }",
            "score": 99.4998195482337,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | finallyNode ) ; break ;",
            "score": 99.48656165081522,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "se.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48275902157738,
            "correctness": "uncompilable",
            "tokenized_patch": "se . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "outer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45375754616477,
            "correctness": "uncompilable",
            "tokenized_patch": "outer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , finallyNode , finallyNode ) ;",
            "score": 99.45034644717262,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39680311414931,
            "correctness": "uncompilable",
            "tokenized_patch": "} return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ) , parent , cfa ) ;",
            "score": 99.52089621803977,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( - fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49955417798913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( - from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parameters.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48251488095238,
            "correctness": "uncompilable",
            "tokenized_patch": "parameters . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45367986505681,
            "correctness": "uncompilable",
            "tokenized_patch": "try cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39657772288604,
            "correctness": "uncompilable",
            "tokenized_patch": "continue compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ; finallyNode = null ; }",
            "score": 99.49949048913044,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; finally CaMeL Node = null ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finished.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "finished . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ) ; } }",
            "score": 99.48248612253289,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than'.UNCOND , finallyNode ) ;",
            "score": 99.4704822358631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x '.UNCOND , finallyNode ) ;",
            "score": 99.4704822358631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than'.UNCOND , finallyNode ) ;",
            "score": 99.4704822358631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before'.UNCOND , finallyNode ) ;",
            "score": 99.4704822358631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable'.UNCOND , finallyNode ) ;",
            "score": 99.4704822358631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , true ) ; }",
            "score": 99.45365767045455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , size ) ;",
            "score": 99.39638943142361,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , size ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.fromNode , finallyNode ) ;",
            "score": 99.52052815755208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.RETURN , finallyNode ) ;",
            "score": 99.49898071289063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . RETURN , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "owner.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4536465731534,
            "correctness": "uncompilable",
            "tokenized_patch": "owner . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , 'less than') ;",
            "score": 99.3960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , ' y (if true) and x ') ;",
            "score": 99.3960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , 'greater than') ;",
            "score": 99.3960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , 'before') ;",
            "score": 99.3960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , 'Not reachable') ;",
            "score": 99.3960205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( parent.getLastChild( ) , parent , cfa ) ;",
            "score": 99.47760564630681,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , finallyNode , finallyNode ) ;",
            "score": 99.45348011363636,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.44878859747024,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , getParent( ) ) ;",
            "score": 99.395703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'less than') ;",
            "score": 99.48565266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( ' y (if true) and x ') ;",
            "score": 99.48565266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'greater than') ;",
            "score": 99.48565266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'before') ;",
            "score": 99.48565266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'Not reachable') ;",
            "score": 99.48565266927083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.2) ;",
            "score": 99.48299507472827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.4) ;",
            "score": 99.48299507472827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.3) ;",
            "score": 99.48299507472827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.10) ;",
            "score": 99.48299507472827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.2008) ;",
            "score": 99.48299507472827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "grammar.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48221261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "grammar . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( NodeUtil ) finallyNode ) ; }",
            "score": 99.45313609730114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node CaMeL Util ) finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , parent , cfa ) ; }",
            "score": 99.4482654389881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.5199307528409,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , parent , cfa ) ) ; }",
            "score": 99.4481534090909,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , parent , cfa ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ).getNode( ) ) ;",
            "score": 99.39539794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) . get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , null ) )",
            "score": 99.49838402157738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -1, ) ;",
            "score": 99.48256138392857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - 1 , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , false ) ; } else {",
            "score": 99.48202659970238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , false ) ; } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.4771728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa2.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46953790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa4.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46953790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa3.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46953790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa10.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46953790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa2008.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46953790838069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( finallyNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45272972470238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( finally CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39522976345486,
            "correctness": "uncompilable",
            "tokenized_patch": "node . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51956309442934,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getFirstChild( ) ) ; }",
            "score": 99.498291015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; } break ;",
            "score": 99.48443048650569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(1, Branch.UNCOND , finallyNode ) ;",
            "score": 99.48252467105263,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( 1 , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47700427827381,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', finallyNode , finallyNode ) ;",
            "score": 99.46918279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode , finallyNode ) ;",
            "score": 99.46918279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', finallyNode , finallyNode ) ;",
            "score": 99.46918279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', finallyNode , finallyNode ) ;",
            "score": 99.46918279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', finallyNode , finallyNode ) ;",
            "score": 99.46918279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND : Branch.UNCOND ) ;",
            "score": 99.44743208451705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND : Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ,1) ;",
            "score": 99.39474487304688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa.finallyMap.get( parent ) ) ;",
            "score": 99.51913452148438,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa . finally CaMeL Map . get ( parent ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND )( finallyNode ) ; }",
            "score": 99.49819548233695,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ( finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ; } }",
            "score": 99.48401988636364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "out.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.48203346946023,
            "correctness": "uncompilable",
            "tokenized_patch": "out . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "addr.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48113141741071,
            "correctness": "uncompilable",
            "tokenized_patch": "addr . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode : Branch.UNCOND , finallyNode ) ;",
            "score": 99.46855236235119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node : Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode *Branch.UNCOND , finallyNode ) ;",
            "score": 99.44740513392857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node * Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastSibling( ) , parent , cfa ) ;",
            "score": 99.39459838867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Sibling ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , parent , cfa ) ; else {",
            "score": 99.51873779296875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode , false ) ; }",
            "score": 99.48342063210227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.48105340254934,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Arguments.UNCOND , finallyNode ) ; }",
            "score": 99.4524813565341,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Arguments . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; } return null ;",
            "score": 99.498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; } return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.size( ) ) ;",
            "score": 99.48157269021739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . size ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa ) ; } } else {",
            "score": 99.47674851190476,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sash.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46830822172619,
            "correctness": "uncompilable",
            "tokenized_patch": "sash . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode.getName( ) ) ;",
            "score": 99.45229270241477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , cfa ) ; }",
            "score": 99.44642740885416,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) return computeFallThrough( next ) ;",
            "score": 99.51819864908855,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LINE , finallyNode ) ; }",
            "score": 99.49801199776786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LINE , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , this , cfa , finallyNode ) ;",
            "score": 99.4765957919034,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , this , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , false ) ;",
            "score": 99.39427947998047,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; ; }",
            "score": 99.48309616815476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { fromNode ; } }",
            "score": 99.48147715692934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { from CaMeL Node ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than', null ) ;",
            "score": 99.48018973214286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ', null ) ;",
            "score": 99.48018973214286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than', null ) ;",
            "score": 99.48018973214286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before', null ) ;",
            "score": 99.48018973214286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable', null ) ;",
            "score": 99.48018973214286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , true ) ;",
            "score": 99.45181613498264,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return node ;",
            "score": 99.39418431332237,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.51808763586956,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( ) ; } }",
            "score": 99.49765353732639,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode +1) ;",
            "score": 99.48303753396739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node + 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48045813519022,
            "correctness": "uncompilable",
            "tokenized_patch": "try { node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa , cfa , finallyNode ) ;",
            "score": 99.47637384588069,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "comp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46818033854167,
            "correctness": "uncompilable",
            "tokenized_patch": "comp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( this ) { cfa.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.45176003196023,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( this ) { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { if( NodeUtil.hasFinally( parent ) )",
            "score": 99.44595191592262,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { if ( Node CaMeL Util . has CaMeL Finally ( parent ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( parent ) , cfa ) ;",
            "score": 99.3941291360294,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( parent ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent.getNext( ) ) ; }",
            "score": 99.5180331143466,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ; finallyNode ) { } }",
            "score": 99.49742060122283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; finally CaMeL Node ) { } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.0, finallyNode ) ; }",
            "score": 99.48017810639881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . 0 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "socket.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47941080729167,
            "correctness": "uncompilable",
            "tokenized_patch": "socket . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , n.getNext( ) ) ;",
            "score": 99.47614080255681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , n . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , callNode ) ;",
            "score": 99.46759905133929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , call CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) cfa ) ; }",
            "score": 99.39400227864583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.51800537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Task.UNCOND , finallyNode ) ;",
            "score": 99.48013969089673,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Task . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.475830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , finallyNode , false ) ;",
            "score": 99.45143821022727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.5176311990489,
            "correctness": "uncompilable",
            "tokenized_patch": "node . compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.FUNCTION ) ;",
            "score": 99.48009723165761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . FUNCTION ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "builder.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47580788352273,
            "correctness": "uncompilable",
            "tokenized_patch": "builder . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "group.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46735491071429,
            "correctness": "uncompilable",
            "tokenized_patch": "group . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | Token.TRY ) ;",
            "score": 99.44521949404762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | Token . TRY ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.39347116570724,
            "correctness": "uncompilable",
            "tokenized_patch": "this . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.51730213994566,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LINE , finallyNode ) ;",
            "score": 99.49624633789062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LINE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -1) ; }",
            "score": 99.48222423735119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ) ) ; } }",
            "score": 99.47572728207237,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, UNCOND , finallyNode ) ;",
            "score": 99.46716889880952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge = fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44496372767857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge = from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , false , true ) ;",
            "score": 99.4797894021739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , false , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( next.getNext( ) ) ; }",
            "score": 99.4757080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? fromNode : fromNode ) ;",
            "score": 99.46705211292614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? from CaMeL Node : from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getParent( ) , finallyNode ) ;",
            "score": 99.450537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Parent ( ) , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert return cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49569038722827,
            "correctness": "uncompilable",
            "tokenized_patch": "assert return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "element = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48203974184783,
            "correctness": "uncompilable",
            "tokenized_patch": "element = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Node.UNCOND , finallyNode ) ;",
            "score": 99.479736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , finallyNode ) ;",
            "score": 99.45018768310547,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { for( Node finallyNode : cfa.finallyMap ) {",
            "score": 99.44394753196023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { for ( Node finally CaMeL Node : cfa . finally CaMeL Map ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1, null ) ;",
            "score": 99.47965494791667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node.UNCOND ) ) ;",
            "score": 99.4500796669408,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node . UN@@ COND ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ) ; break ; }",
            "score": 99.48159391983695,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ) ; break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root.getName( ) ) ; }",
            "score": 99.45004417782738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root . get CaMeL Name ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return cfa ;",
            "score": 99.3924560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.RETURN , finallyNode ) ; }",
            "score": 99.49546595982143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . RETURN , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "temp = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48148777173913,
            "correctness": "uncompilable",
            "tokenized_patch": "temp = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0, null ) ;",
            "score": 99.4780505952381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.finallyMap ) ;",
            "score": 99.47457449776786,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . finally CaMeL Map ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.addNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44998604910714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , true ) ;",
            "score": 99.39242553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48127547554348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reader.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47798084077381,
            "correctness": "uncompilable",
            "tokenized_patch": "reader . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.47443498883929,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "renderer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.466552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "renderer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ,",
            "score": 99.4499744233631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Branch.UNCOND , finallyNode ) ;",
            "score": 99.4428378018466,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa.UNCOND , finallyNode ) ; }",
            "score": 99.51383109714673,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'less than') ; } }",
            "score": 99.49395392922794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( ' y (if true) and x ') ; } }",
            "score": 99.49395392922794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'greater than') ; } }",
            "score": 99.49395392922794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'before') ; } }",
            "score": 99.49395392922794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'Not reachable') ; } }",
            "score": 99.49395392922794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , null , cfa ) ;",
            "score": 99.4736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , null , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return parent ;",
            "score": 99.44273546006944,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; /",
            "score": 99.3913933249081,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pi = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48038383152173,
            "correctness": "uncompilable",
            "tokenized_patch": "pi = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , options ) ;",
            "score": 99.47858992866848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , options ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Metadata.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47764369419643,
            "correctness": "uncompilable",
            "tokenized_patch": "Metadata . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cmp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46643647693452,
            "correctness": "uncompilable",
            "tokenized_patch": "cmp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.create( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4493075284091,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Util.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.39130401611328,
            "correctness": "uncompilable",
            "tokenized_patch": "Util . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.513427734375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , null , null ) ;",
            "score": 99.47858992866848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , null , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "values.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47759719122024,
            "correctness": "uncompilable",
            "tokenized_patch": "values . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , true ) ;",
            "score": 99.47359212239583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = cfa.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.44898570667614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | Token.DEFAULT ) ; }",
            "score": 99.44246049360795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | Token . DEFAULT ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode , parent , cfa ) ;",
            "score": 99.39122772216797,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , parent.getFirstChild( ) ) )",
            "score": 99.49356079101562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNode( ) ) ; } }",
            "score": 99.48015802556819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Node ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cs.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47734142485119,
            "correctness": "uncompilable",
            "tokenized_patch": "cs . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "timer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46636672247024,
            "correctness": "uncompilable",
            "tokenized_patch": "timer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node ) fromNode , parent , cfa ) ;",
            "score": 99.44240851151316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node ) from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.39120144314236,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(0, Branch.UNCOND , finallyNode ) ;",
            "score": 99.49351099917763,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( 0 , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getNext( ) , cfa ) ; }",
            "score": 99.4732666015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ,.UNCOND , finallyNode ) ;",
            "score": 99.46598677201705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( node ) ; }",
            "score": 99.44860229492187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ).getNext( ) ;",
            "score": 99.44166148792614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) . get CaMeL Next ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , parent ) ;",
            "score": 99.39100952148438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "blackboard.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47728329613095,
            "correctness": "uncompilable",
            "tokenized_patch": "blackboard . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode.getNext( ) ) ;",
            "score": 99.47282329358552,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , getFirstChild( ) ) ;",
            "score": 99.44148559570313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47961956521739,
            "correctness": "uncompilable",
            "tokenized_patch": "state = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.GET , finallyNode ) ;",
            "score": 99.47774047851563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . GET , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "processor.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47719029017857,
            "correctness": "uncompilable",
            "tokenized_patch": "processor . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Var.UNCOND , finallyNode ) ;",
            "score": 99.46571568080357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Var . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return cfa ; }",
            "score": 99.39086303710937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , fromNode , cfa ) ;",
            "score": 99.51119192023026,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , from CaMeL Node , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( endNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4794921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( end CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47771344866071,
            "correctness": "uncompilable",
            "tokenized_patch": "ret . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , null ) ;",
            "score": 99.47708129882812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.47264515269886,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode ) ; ;",
            "score": 99.4483975497159,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { if( finallyNode != null ) {",
            "score": 99.4930355674342,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { if ( finally CaMeL Node != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( } fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4790371981534,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( } from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , fromNode ) ;",
            "score": 99.47749660326087,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cb.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.465576171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cb . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | Branch.DEFAULT ) ;",
            "score": 99.44131324404762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | Branch . DEFAULT ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ! cfa ) ; }",
            "score": 99.39049614800348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ! cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent.getFirstChild( ) ) ;",
            "score": 99.51034943953805,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.49302455357143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , parent , cfa ) ; } else",
            "score": 99.47252836681548,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , null , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46520414806548,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , null , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TRUE , finallyNode ) ; }",
            "score": 99.44807942708333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TRUE , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ,2) ;",
            "score": 99.39032592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ,4) ;",
            "score": 99.39032592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ,3) ;",
            "score": 99.39032592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ,10) ;",
            "score": 99.39032592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ,2008) ;",
            "score": 99.39032592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; assert false ;",
            "score": 99.49285888671875,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; assert false ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , UNCOND , finallyNode ) ; }",
            "score": 99.44783158735795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,.root ) ;",
            "score": 99.39029091282895,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , . root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , current.getFirstChild( ) ) ; }",
            "score": 99.49260147758152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , current . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND2, finallyNode ) ; }",
            "score": 99.47864300271739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND4, finallyNode ) ; }",
            "score": 99.47864300271739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND3, finallyNode ) ; }",
            "score": 99.47864300271739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND10, finallyNode ) ; }",
            "score": 99.47864300271739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND2008, finallyNode ) ; }",
            "score": 99.47864300271739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode , null ) ;",
            "score": 99.47700832201087,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "failed.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4763416108631,
            "correctness": "uncompilable",
            "tokenized_patch": "failed . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , scope ) ;",
            "score": 99.47208444695724,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , scope ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; break ;",
            "score": 99.44757952008929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } ) ;",
            "score": 99.39025268554687,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "a.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47674851190476,
            "correctness": "uncompilable",
            "tokenized_patch": "a . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "model.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4753650483631,
            "correctness": "uncompilable",
            "tokenized_patch": "model . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode ) ; }",
            "score": 99.44733220880681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.44004193474265,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; if(",
            "score": 99.39019775390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; if (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ).getNext( ) ) ;",
            "score": 99.50973378057066,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } */",
            "score": 99.49252319335938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } * /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( endNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.47834578804348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( end CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.START , finallyNode ) ;",
            "score": 99.47628784179688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . START , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , parent , cfa ) ; }",
            "score": 99.47535615808823,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa.finallyNode ) ;",
            "score": 99.47175736860795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode Node ) ;",
            "score": 99.46471058238636,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "f.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44732375372024,
            "correctness": "uncompilable",
            "tokenized_patch": "f . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = computeFollowNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.50950025475544,
            "correctness": "uncompilable",
            "tokenized_patch": "node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { if( cfa.createEdge( fromNode ) )",
            "score": 99.49231487771739,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { if ( cfa . create CaMeL Edge ( from CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getParent( ) ) ; } }",
            "score": 99.47813831676136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Parent ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , reversed.UNCOND , finallyNode ) ;",
            "score": 99.47628348214286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , reversed . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getLastChild( ) , cfa ) ;",
            "score": 99.47515258789062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null , cfa ) ; }",
            "score": 99.47140984786184,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) &&",
            "score": 99.46456473214286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) &&",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lock.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44679953835227,
            "correctness": "uncompilable",
            "tokenized_patch": "lock . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode ,",
            "score": 99.39000028722427,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode -1) ;",
            "score": 99.47776197350544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node - 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "elements.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47502790178571,
            "correctness": "uncompilable",
            "tokenized_patch": "elements . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false , finallyNode ) ; }",
            "score": 99.4709240141369,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , this ) ; }",
            "score": 99.38969983552632,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , this ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'less than') ;",
            "score": 99.49208286830357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.49208286830357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'greater than') ;",
            "score": 99.49208286830357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'before') ;",
            "score": 99.49208286830357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.49208286830357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , finallyNode , false ) ; }",
            "score": 99.47746475883152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , finally CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } } } else",
            "score": 99.47462100074405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } } } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , false ) ;",
            "score": 99.4644287109375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "phase.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44676624644886,
            "correctness": "uncompilable",
            "tokenized_patch": "phase . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "bridge.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47444661458333,
            "correctness": "uncompilable",
            "tokenized_patch": "bridge . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? UNCOND , finallyNode ) ;",
            "score": 99.46434384300595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.length , finallyNode ) ; }",
            "score": 99.44669596354167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . length , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.43814425998264,
            "correctness": "uncompilable",
            "tokenized_patch": "break compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode.getLastChild( ) ) ;",
            "score": 99.38887939453124,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) , cfa ) ; } }",
            "score": 99.5085979959239,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index.UNCOND , finallyNode ) ;",
            "score": 99.49189685639881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } else",
            "score": 99.47716754415761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lock.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47442336309524,
            "correctness": "uncompilable",
            "tokenized_patch": "lock . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.38887023925781,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , src.getFirstChild( ) ) ; }",
            "score": 99.49179475203805,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , src . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ASSIGN.UNCOND , finallyNode ) ; }",
            "score": 99.47536399147727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ASSIGN . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , parent ) ; } }",
            "score": 99.47427368164062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , parent ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "members.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44658868963069,
            "correctness": "uncompilable",
            "tokenized_patch": "members . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND , null ) ;",
            "score": 99.4767833891369,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , null , finallyNode ) ;",
            "score": 99.4751613451087,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , node ) ; } }",
            "score": 99.47398071289062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , function.UNCOND , finallyNode ) ;",
            "score": 99.44656808035714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , function . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getParent( ) , cfa ) ;",
            "score": 99.38849487304688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Parent ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getFirstChild( ) , cfa ) ;",
            "score": 99.50801013764881,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL First CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true + finallyNode ) ;",
            "score": 99.474853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , cfa , finallyNode ) ; }",
            "score": 99.47384207589286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "arguments.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46990411931819,
            "correctness": "uncompilable",
            "tokenized_patch": "arguments . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Arrays.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46382068452381,
            "correctness": "uncompilable",
            "tokenized_patch": "Arrays . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getParent( ) ) ;",
            "score": 99.43750678168402,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode , cfa ) ) ;",
            "score": 99.38845486111111,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.getNext( ) ) ;",
            "score": 99.50772758152173,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , cfa , finallyNode ) ;",
            "score": 99.47456691576087,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Visitor.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47383045014881,
            "correctness": "uncompilable",
            "tokenized_patch": "Visitor . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "writer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46973765980114,
            "correctness": "uncompilable",
            "tokenized_patch": "writer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44625418526786,
            "correctness": "uncompilable",
            "tokenized_patch": "Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null && cfa != null ) { cfa.createEdge( fromNode ,",
            "score": 99.4369784268466,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { next.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.38829888237848,
            "correctness": "uncompilable",
            "tokenized_patch": "try { next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( Branch.UNCOND , finallyNode ) ) ; }",
            "score": 99.49146569293478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( Branch . UN@@ COND , finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode ) ; } }",
            "score": 99.47624405570652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lcfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4743985262784,
            "correctness": "uncompilable",
            "tokenized_patch": "l@@ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNode( ) ) ; }",
            "score": 99.47347005208333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Node ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) ) ; } break ;",
            "score": 99.4697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "results.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4461669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "results . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , Branch.IF , finallyNode ) ;",
            "score": 99.38827175564236,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , Branch . IF , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.49031929347827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , builder ) ;",
            "score": 99.47434400475544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , builder ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node ) Branch.UNCOND , finallyNode ) ;",
            "score": 99.4696533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node ) Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , parent ) ; }",
            "score": 99.38809364720395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ) , parent , cfa ) ;",
            "score": 99.50754712975544,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , true , null ) ;",
            "score": 99.47425908627717,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , true , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , true ) ; }",
            "score": 99.46951293945312,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Proxy.UNCOND , finallyNode ) ;",
            "score": 99.46309988839286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Proxy . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "toolkit.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44585626775569,
            "correctness": "uncompilable",
            "tokenized_patch": "toolkit . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | Token.WHILE ) ;",
            "score": 99.43631417410714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | Token . WHILE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node.getNext( ) ) ;",
            "score": 99.3880615234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getNext( ) ) ; } }",
            "score": 99.49000133167614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getParent( ) , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47580884850544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Parent ( ) , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , null , true ) ;",
            "score": 99.47422724184783,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , null , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa runtime.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46943803267045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa runtime . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , true ) ;",
            "score": 99.46299438476562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , false ) ;",
            "score": 99.50560087316177,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa.createEdge( fromNode ) ) {",
            "score": 99.48984596946023,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa . create CaMeL Edge ( from CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.READ , finallyNode ) ;",
            "score": 99.4738525390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . READ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , false ) ;",
            "score": 99.47293090820312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , root , null ) ;",
            "score": 99.38785400390626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , root , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) computeFollowNode( fromNode , parent , cfa ) ; else",
            "score": 99.50559400475544,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( sourceName , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48982747395833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( source CaMeL Name , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL.UNCOND , finallyNode ) ;",
            "score": 99.4735691236413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , cfa ) ; }",
            "score": 99.46878051757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode ,",
            "score": 99.38780924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.48963012695313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cg.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47258649553571,
            "correctness": "uncompilable",
            "tokenized_patch": "cg . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "attributes.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44509055397727,
            "correctness": "uncompilable",
            "tokenized_patch": "attributes . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch next = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38766318873355,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.48938519021739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getNext( ) ) ; } }",
            "score": 99.47489790482955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( finallyNode , Branch.UNCOND , finallyNode , true ) ;",
            "score": 99.47277301290761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( finally CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , fromNode ) ;",
            "score": 99.46231418185764,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , from CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "3"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.44444056919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.44444056919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.44444056919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.44444056919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.44444056919643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , parent ) , cfa ) ;",
            "score": 99.43574451264881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , parent ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa1) ;",
            "score": 99.38760196461396,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "info.cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48935334578805,
            "correctness": "uncompilable",
            "tokenized_patch": "info . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "startNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47478926809211,
            "correctness": "uncompilable",
            "tokenized_patch": "start CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "classes.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47191220238095,
            "correctness": "uncompilable",
            "tokenized_patch": "classes . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode.getParent( ) ) ;",
            "score": 99.4620361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND , node ) ;",
            "score": 99.44427780877976,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , new Node( ) ) ;",
            "score": 99.43569113991477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , new Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.38740370008681,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index.UNCOND , finallyNode ) ; }",
            "score": 99.48902476917614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , Branch.UNCOND , finallyNode , false ) ; }",
            "score": 99.4745760830966,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , Branch . UN@@ COND , finally CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , String.UNCOND , finallyNode ) ; }",
            "score": 99.44416947798295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , String . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getNext( ) ) ;",
            "score": 99.4353256225586,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return null ; }",
            "score": 99.38740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return null ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.50431993272569,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createInternal( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47437633167614,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Internal ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , next ) ; }",
            "score": 99.47065815172698,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , next ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) ) ; } } }",
            "score": 99.468505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "layout.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46182105654762,
            "correctness": "uncompilable",
            "tokenized_patch": "layout . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( parent.getLastChild( ) ) ; }",
            "score": 99.50420587713069,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "mapper.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47059849330357,
            "correctness": "uncompilable",
            "tokenized_patch": "mapper . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Location( fromNode ) ) ;",
            "score": 99.4615966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Location ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,0) ;",
            "score": 99.38704427083333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element.UNCOND , finallyNode ) ;",
            "score": 99.48851376488095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47236560639881,
            "correctness": "uncompilable",
            "tokenized_patch": "try . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , } ) ; }",
            "score": 99.47051038240132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , } ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , finallyNode , parent ) ;",
            "score": 99.4680508700284,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Enum.UNCOND , finallyNode ) ;",
            "score": 99.46154203869048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Enum . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Redirect.UNCOND , finallyNode ) ; }",
            "score": 99.44389204545455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Redirect . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa.root ) ;",
            "score": 99.43479614257812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa . root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.parent , cfa ) ;",
            "score": 99.38671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target ) ;",
            "score": 99.47345842633929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , Branch.UNCOND , finallyNode , finallyNode ) ;",
            "score": 99.4721042798913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , Branch . UN@@ COND , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getLastChild( ) ) ; } }",
            "score": 99.47042846679688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , *Branch.UNCOND , finallyNode ) ;",
            "score": 99.4606045809659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , * Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Redirect.UNCOND , finallyNode ) ;",
            "score": 99.4438709077381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Redirect . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.38541666666667,
            "correctness": "uncompilable",
            "tokenized_patch": "! cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ).getNext( ) ) ;",
            "score": 99.50309614701705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND , null ) ; }",
            "score": 99.47285600142045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tmp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47199358258929,
            "correctness": "uncompilable",
            "tokenized_patch": "tmp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , ) ;",
            "score": 99.47042236328124,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa., finallyNode ) ;",
            "score": 99.46751767113095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2, finallyNode ) ; }",
            "score": 99.44376413445724,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,4, finallyNode ) ; }",
            "score": 99.44376413445724,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,3, finallyNode ) ; }",
            "score": 99.44376413445724,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,10, finallyNode ) ; }",
            "score": 99.44376413445724,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2008, finallyNode ) ; }",
            "score": 99.44376413445724,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "list.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.38489487591912,
            "correctness": "uncompilable",
            "tokenized_patch": "list . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( createNode( fromNode , parent , cfa ) ) ;",
            "score": 99.50208100818452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( create CaMeL Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4880704012784,
            "correctness": "uncompilable",
            "tokenized_patch": "finally cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , target ) ; } }",
            "score": 99.47202845982143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , target ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode = computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.46745954241071,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "insets.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44369652157738,
            "correctness": "uncompilable",
            "tokenized_patch": "insets . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ) ; }",
            "score": 99.48785869891827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, finallyNode ) ; }",
            "score": 99.47189812911184,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ARRAY.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47017996651786,
            "correctness": "uncompilable",
            "tokenized_patch": "ARRAY . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNode( ) , parent , cfa ) ;",
            "score": 99.46724076704545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Node ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , true ) ;",
            "score": 99.45940399169922,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( computeFollowNode( parent , cfa ) ) ;",
            "score": 99.38463745117187,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( compute CaMeL Follow CaMeL Node ( parent , cfa ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "return computeFallThrough( next.getFirstChild( ) ) ; }",
            "score": 99.50166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.length ) ;",
            "score": 99.47150985054348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . length ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , node ) ;",
            "score": 99.47014508928571,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( node.getLastChild( ) ) ; } }",
            "score": 99.46708751860119,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', fromNode ) ;",
            "score": 99.45934380425348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', fromNode ) ;",
            "score": 99.45934380425348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', fromNode ) ;",
            "score": 99.45934380425348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', fromNode ) ;",
            "score": 99.45934380425348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', fromNode ) ;",
            "score": 99.45934380425348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , startNode ) ;",
            "score": 99.43387276785714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , start CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL , finallyNode ) ; break ;",
            "score": 99.4873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , - , finallyNode ) ;",
            "score": 99.47145677649456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ) ; } }",
            "score": 99.47135416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Game.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47004045758929,
            "correctness": "uncompilable",
            "tokenized_patch": "Game . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa + finallyNode ) ;",
            "score": 99.466845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , pop.UNCOND , finallyNode ) ; }",
            "score": 99.44261585582386,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , pop . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND |",
            "score": 99.38399505615234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND |",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( finallyNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.48697562839673,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( finally CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this ) ; break ;",
            "score": 99.47133091517857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.>= UNCOND , finallyNode ) ;",
            "score": 99.47101384943181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . >= UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47004045758929,
            "correctness": "uncompilable",
            "tokenized_patch": "ter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ! UNCOND , finallyNode ) ;",
            "score": 99.45927124023437,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "schema.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44220525568181,
            "correctness": "uncompilable",
            "tokenized_patch": "schema . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38300238715277,
            "correctness": "uncompilable",
            "tokenized_patch": "else return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.hasFinally( parent.getLastChild( ) ) )",
            "score": 99.50113578464673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . has CaMeL Finally ( parent . get CaMeL Last CaMeL Child ( ) ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , root , finallyNode ) ;",
            "score": 99.47095788043478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , root , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "proxy.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46987769717262,
            "correctness": "uncompilable",
            "tokenized_patch": "proxy . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; } break ;",
            "score": 99.4420166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , cfa ) ;",
            "score": 99.43304443359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , options ) ;",
            "score": 99.47076737253289,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , options ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getLastChild( ) , cfa ) ; }",
            "score": 99.46977306547619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.46632893880208,
            "correctness": "wrong",
            "tokenized_patch": "node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "added.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45891462053571,
            "correctness": "uncompilable",
            "tokenized_patch": "added . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa.UNCOND , finallyNode ) ; }",
            "score": 99.50065811820652,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , parent , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47096946022727,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Generator.UNCOND , finallyNode ) ; }",
            "score": 99.47071422230114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Generator . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Variables.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46976143973214,
            "correctness": "uncompilable",
            "tokenized_patch": "Variables . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLastChild( ) , parent ) ;",
            "score": 99.46623883928571,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.{ cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3824462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "next . { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ; break ;",
            "score": 99.47053666548295,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "util.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47049386160714,
            "correctness": "uncompilable",
            "tokenized_patch": "util . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Support.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46968005952381,
            "correctness": "uncompilable",
            "tokenized_patch": "Support . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getNext( ) , parent , cfa ) ; }",
            "score": 99.46620396205357,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode cfa ) ;",
            "score": 99.45857377485795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ac.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44172807173295,
            "correctness": "uncompilable",
            "tokenized_patch": "ac . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38238204152961,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( node.getLastChild( ) , cfa ) ;",
            "score": 99.50023352581522,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "elem = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4861476732337,
            "correctness": "uncompilable",
            "tokenized_patch": "elem = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "status.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46993582589286,
            "correctness": "uncompilable",
            "tokenized_patch": "status . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "binding.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46965680803571,
            "correctness": "uncompilable",
            "tokenized_patch": "binding . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "DOMAST.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45826357886905,
            "correctness": "uncompilable",
            "tokenized_patch": "DOMAST . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return cfa ;",
            "score": 99.38233642578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ;",
            "score": 99.48609008789063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.parse( finallyNode ) ) ; }",
            "score": 99.47028142755681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . parse ( finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( fromNode , Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.46989639945652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "connector.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.469482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "connector . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tc.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44113991477273,
            "correctness": "uncompilable",
            "tokenized_patch": "tc . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode ) ) ;",
            "score": 99.38157025505515,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pm.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46940104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "pm . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46579811789773,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | Token.CASE ) ;",
            "score": 99.43132672991071,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | Token . CASE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,1) ; } }",
            "score": 99.3812255859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 1 ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNext( ) ) ; } }",
            "score": 99.48556518554688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "design.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46933128720238,
            "correctness": "uncompilable",
            "tokenized_patch": "design . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node ) parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46562056107955,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node ) parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "3"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.AND , finallyNode ) ;",
            "score": 99.45694580078126,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . AND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44105113636364,
            "correctness": "uncompilable",
            "tokenized_patch": "Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.finallyNode ) ;",
            "score": 99.4311290922619,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.root , node ) ;",
            "score": 99.3810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . root , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "graphics.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46905226934524,
            "correctness": "uncompilable",
            "tokenized_patch": "graphics . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TYPE.UNCOND , finallyNode ) ;",
            "score": 99.46902598505434,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TYPE . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.46533203125,
            "correctness": "wrong",
            "tokenized_patch": "node = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "next.createEdge( fromNode , parent ) ;",
            "score": 99.4310302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "dl.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46890113467262,
            "correctness": "uncompilable",
            "tokenized_patch": "dl . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , fromNode , parent , cfa ) ;",
            "score": 99.46527420847039,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , finallyNode , finallyNode ) ;",
            "score": 99.44077370383523,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; continue ;",
            "score": 99.38087972005208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; continue ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Location.UNCOND , finallyNode ) ;",
            "score": 99.45618785511364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Location . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "adapter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44068492542614,
            "correctness": "uncompilable",
            "tokenized_patch": "adapter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode ) ; break ;",
            "score": 99.46793619791667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.46502976190476,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getParent( ) ) ;",
            "score": 99.456103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode.getNext( ) ) ;",
            "score": 99.38043212890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( fromNode , parent , cfa ) ; } catch(",
            "score": 99.4966153231534,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } catch (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LABEL , finallyNode ) ; } }",
            "score": 99.4842862215909,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LABEL , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally.fromNode ) ;",
            "score": 99.4685589334239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally . from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null , parent ) ;",
            "score": 99.46831984747024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( element , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4649722450658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( element , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LABEL , finallyNode ) ;",
            "score": 99.45594482421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LABEL , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return node ; }",
            "score": 99.38019409179688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa ) ; } }",
            "score": 99.49615119485294,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new IllegalArgumentException( ) ; }",
            "score": 99.48418868215461,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.Token.UNCOND , finallyNode ) ;",
            "score": 99.46854831861413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . Token . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getParent( ) ) ; }",
            "score": 99.46737816220238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , cfa ) ; } }",
            "score": 99.46494838169643,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45591976768092,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , longValue ) ; }",
            "score": 99.44044078480114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , long CaMeL Value ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.{ cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.38010767886513,
            "correctness": "uncompilable",
            "tokenized_patch": "node . { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , nodes , Branch.UNCOND , finallyNode ) ;",
            "score": 99.468505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , nodes , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , node , cfa ) ; }",
            "score": 99.46462530838816,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cache.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4557872953869,
            "correctness": "uncompilable",
            "tokenized_patch": "cache . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,( Node ) true ) ;",
            "score": 99.44038529829545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ( Node ) true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , - cfa ) ;",
            "score": 99.38002642463235,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , - cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , fromNode , cfa ) ;",
            "score": 99.49599095394737,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( parent , Branch.UNCOND , finallyNode ) )",
            "score": 99.48404947916667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( parent , Branch . UN@@ COND , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch..UNCOND , finallyNode ) ; }",
            "score": 99.46847401494566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object parent = node.getNext( ) ; if( parent == null ) {",
            "score": 99.46731728001645,
            "correctness": "uncompilable",
            "tokenized_patch": "Object parent = node . get CaMeL Next ( ) ; if ( parent == null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node ) ; }",
            "score": 99.46703287760417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "var.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44020774147727,
            "correctness": "uncompilable",
            "tokenized_patch": "var . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node.UNCOND , finallyNode ) ; }",
            "score": 99.48350458559783,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { finallyNode ) ; }",
            "score": 99.4684527853261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , cfa ) ; } }",
            "score": 99.46710205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( node.getLastChild( ) ) ; } }",
            "score": 99.46435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally2) ;",
            "score": 99.4555419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally4) ;",
            "score": 99.4555419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally3) ;",
            "score": 99.4555419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally10) ;",
            "score": 99.4555419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally2008) ;",
            "score": 99.4555419921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.42921206825658,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.NULL ) ;",
            "score": 99.48348335597827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.fromNode ) ;",
            "score": 99.46834663722827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "able.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46698288690476,
            "correctness": "uncompilable",
            "tokenized_patch": "able . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46580868675595,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; return null ;",
            "score": 99.4400967684659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,2) ;",
            "score": 99.37892659505208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,4) ;",
            "score": 99.37892659505208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,3) ;",
            "score": 99.37892659505208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,10) ;",
            "score": 99.37892659505208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,2008) ;",
            "score": 99.37892659505208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( , fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.48322088068181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( , from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Ex.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46683175223214,
            "correctness": "uncompilable",
            "tokenized_patch": "Ex . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Node.UNCOND , finallyNode ) ; }",
            "score": 99.44005237926136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND == finallyNode ) ;",
            "score": 99.4287341889881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND == finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.true , UNCOND , finallyNode ) ;",
            "score": 99.46826171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . true , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tables.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46636672247024,
            "correctness": "uncompilable",
            "tokenized_patch": "tables . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index.UNCOND , finallyNode ) ; } }",
            "score": 99.48237941576087,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false , null , false ) ;",
            "score": 99.46815557065217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false , null , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', finallyNode ) ; }",
            "score": 99.46636641652961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode ) ; }",
            "score": 99.46636641652961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', finallyNode ) ; }",
            "score": 99.46636641652961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', finallyNode ) ; }",
            "score": 99.46636641652961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', finallyNode ) ; }",
            "score": 99.46636641652961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , parent , cfa ) ; }",
            "score": 99.46394653320313,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.equals( finallyNode ) ) ;",
            "score": 99.45513625372024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . equals ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.43998413085937,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Double.UNCOND , finallyNode ) ;",
            "score": 99.46786644345238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Double . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rt.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46556454613095,
            "correctness": "uncompilable",
            "tokenized_patch": "rt . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.43975539434524,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , cfa ) , cfa ) ;",
            "score": 99.4280017671131,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , cfa ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2) ; } }",
            "score": 99.37835015190973,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,4) ; } }",
            "score": 99.37835015190973,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,3) ; } }",
            "score": 99.37835015190973,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,10) ; } }",
            "score": 99.37835015190973,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,2008) ; } }",
            "score": 99.37835015190973,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getLastChild( ) , parent , cfa ) ;",
            "score": 99.49284224076705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Last CaMeL Child ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "implementations.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46551804315476,
            "correctness": "uncompilable",
            "tokenized_patch": "implementations . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLastChild( ) , parent ) ;",
            "score": 99.46378580729167,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cached.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.439697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "cached . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.49257590553977,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ) ; }",
            "score": 99.48171515213816,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ { cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46778405230978,
            "correctness": "uncompilable",
            "tokenized_patch": "{ { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "loader.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46539015997024,
            "correctness": "uncompilable",
            "tokenized_patch": "loader . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , name ) ;",
            "score": 99.4643618935033,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , name ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.finallyMap ) ; }",
            "score": 99.4637784090909,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . finally CaMeL Map ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "peer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43963068181819,
            "correctness": "uncompilable",
            "tokenized_patch": "peer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( computeFollowNode( parent , cfa ) ) ;",
            "score": 99.3780517578125,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( compute CaMeL Follow CaMeL Node ( parent , cfa ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "8"
        },
        {
            "patch": "cfa.createEdge( fromNode , Mode.UNCOND , finallyNode ) ;",
            "score": 99.46765718005952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Mode . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( Branch.UNCOND , finallyNode ) ;",
            "score": 99.4535773782169,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "while( createEdge( fromNode , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.4641446200284,
            "correctness": "uncompilable",
            "tokenized_patch": "while ( create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.46327903053977,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45298549107143,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , Branch.EMPTY ) ;",
            "score": 99.4812542459239,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . EMPTY ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND ) ;",
            "score": 99.46477194393383,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND , false ) ; }",
            "score": 99.46408913352273,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , false ) ;",
            "score": 99.46310264185855,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa , true ) ;",
            "score": 99.42720540364583,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.377490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sm.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46471586681548,
            "correctness": "uncompilable",
            "tokenized_patch": "sm . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name , finallyNode ) ;",
            "score": 99.46341959635417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, cfa ) ;",
            "score": 99.462646484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.WARNING , finallyNode ) ;",
            "score": 99.43916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . WARNING , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.return createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.37726508246527,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . return create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "constructors.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46465773809524,
            "correctness": "uncompilable",
            "tokenized_patch": "constructors . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , code.UNCOND , finallyNode ) ; }",
            "score": 99.43878728693181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , code . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent.getParent( ) ) ; }",
            "score": 99.42695545014881,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next , cfa ) ; }",
            "score": 99.37672334558823,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Listeners.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.464599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "Listeners . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , cfa ) ;",
            "score": 99.46204376220703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( ControlFlowAnalysis ) cfa ) ;",
            "score": 99.42689732142857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Control CaMeL Flow CaMeL Analysis ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; } } }",
            "score": 99.48058471679687,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ? finallyNode ) ;",
            "score": 99.46446010044643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ? finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode ,0) ;",
            "score": 99.46253022693452,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , l.UNCOND , finallyNode ) ;",
            "score": 99.4619373139881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , l . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fn.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45186941964286,
            "correctness": "uncompilable",
            "tokenized_patch": "fn . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Object [ ] { finallyNode } ) ;",
            "score": 99.43816583806819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Object [ ] { finally CaMeL Node } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , *cfa ) ;",
            "score": 99.37654383042279,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , * cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.SWITCH , finallyNode ) ;",
            "score": 99.47977294921876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . SWITCH , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , name ) ; }",
            "score": 99.4619873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , name ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0, ) ;",
            "score": 99.45182495117187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "s.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43815104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "s . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; */",
            "score": 99.4795558763587,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; * /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.Factory ) ;",
            "score": 99.46586277173913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . Factory ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "quickfix.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46365792410714,
            "correctness": "uncompilable",
            "tokenized_patch": "quickfix . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next , finallyNode ) ; }",
            "score": 99.46177271792763,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node ) Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46132114955357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node ) Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , null , finallyNode ) ;",
            "score": 99.4517489346591,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , null , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "out.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.37633514404297,
            "correctness": "uncompilable",
            "tokenized_patch": "out . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.BLOCK , finallyNode ) ; } }",
            "score": 99.47953657670455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . BLOCK , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Viewer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46564592633929,
            "correctness": "uncompilable",
            "tokenized_patch": "Viewer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "categories.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46301850818452,
            "correctness": "uncompilable",
            "tokenized_patch": "categories . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false ) ; ;",
            "score": 99.43801879882812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node computeFollowNode( fromNode , parent , cfa ) ; } }",
            "score": 99.4255435341283,
            "correctness": "uncompilable",
            "tokenized_patch": "Node compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.37612433182566,
            "correctness": "uncompilable",
            "tokenized_patch": "node . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; } } }",
            "score": 99.47944779829545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Factory.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46297200520833,
            "correctness": "uncompilable",
            "tokenized_patch": "Factory . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "margin.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45170665922619,
            "correctness": "uncompilable",
            "tokenized_patch": "margin . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2, true ) ; }",
            "score": 99.43793279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4, true ) ; }",
            "score": 99.43793279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3, true ) ; }",
            "score": 99.43793279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10, true ) ; }",
            "score": 99.43793279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008, true ) ; }",
            "score": 99.43793279474431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.fromNode ) ; }",
            "score": 99.425537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa true ) ;",
            "score": 99.37599092371323,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getLastSibling( ) ) ;",
            "score": 99.46088201349431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Last CaMeL Sibling ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getParent( ) , finallyNode ) ;",
            "score": 99.43781072443181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Parent ( ) , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this , cfa ) ;",
            "score": 99.425537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode.getNext( ) ) ;",
            "score": 99.48896227384868,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , <= Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46509850543478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , <= Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "members.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46244884672619,
            "correctness": "uncompilable",
            "tokenized_patch": "members . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.45977492559524,
            "correctness": "uncompilable",
            "tokenized_patch": "node = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , filter ) ;",
            "score": 99.375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , filter ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , - Branch.UNCOND , finallyNode ) ;",
            "score": 99.47895951704545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FUNCTION , finallyNode ) ; }",
            "score": 99.46061197916667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FUNCTION , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , BLOCK.UNCOND , finallyNode ) ; }",
            "score": 99.43755548650569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , BLOCK . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa = computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.37557373046874,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getNode( ) ) ;",
            "score": 99.46485595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( next.getNext( ) ) ; }",
            "score": 99.46218872070312,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , node ) ;",
            "score": 99.4593017578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , cfa ) ; }",
            "score": 99.4373446377841,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( computeFollowNode( fromNode , cfa ) ) ;",
            "score": 99.37553967927632,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.48819986979167,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LABEL , finallyNode ) ; }",
            "score": 99.47831798735119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LABEL , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfw.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46475074404762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfw . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "answer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46178617931548,
            "correctness": "uncompilable",
            "tokenized_patch": "answer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , add.UNCOND , finallyNode ) ; }",
            "score": 99.46013849431819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , add . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45088123139881,
            "correctness": "uncompilable",
            "tokenized_patch": "try { create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Location.UNCOND , finallyNode ) ; }",
            "score": 99.43732244318181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Location . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this.getLastChild( ) , cfa ) ;",
            "score": 99.425048828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next.getLastChild( ) ) ;",
            "score": 99.4878817471591,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND - finallyNode ) ; }",
            "score": 99.4781827059659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND - finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch == UNCOND , finallyNode ) ;",
            "score": 99.46472749255952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch == UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sc.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4616466703869,
            "correctness": "uncompilable",
            "tokenized_patch": "sc . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', finallyNode , false ) ;",
            "score": 99.45078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode , false ) ;",
            "score": 99.45078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', finallyNode , false ) ;",
            "score": 99.45078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', finallyNode , false ) ;",
            "score": 99.45078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', finallyNode , false ) ;",
            "score": 99.45078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.43722098214286,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ) ; }",
            "score": 99.48775482177734,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode - null ) ;",
            "score": 99.46399456521739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node - null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Name.UNCOND , finallyNode ) ; }",
            "score": 99.45989435369319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Name . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , parent ) ;",
            "score": 99.4580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new RefNode( fromNode ) ) ;",
            "score": 99.45073908025569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Ref CaMeL Node ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.create( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43704659598214,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , children.UNCOND , finallyNode ) ;",
            "score": 99.47726004464286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , children . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "attributes.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46156529017857,
            "correctness": "uncompilable",
            "tokenized_patch": "attributes . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode , null ) ;",
            "score": 99.45071847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ) , cfa ) ;",
            "score": 99.37507459852431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'less than') ; } }",
            "score": 99.47722311580883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( ' y (if true) and x ') ; } }",
            "score": 99.47722311580883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'greater than') ; } }",
            "score": 99.47722311580883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'before') ; } }",
            "score": 99.47722311580883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'Not reachable') ; } }",
            "score": 99.47722311580883,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "mapping.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46155366443452,
            "correctness": "uncompilable",
            "tokenized_patch": "mapping . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ) ;",
            "score": 99.45070393880208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent.getLastChild( ) , cfa ) ;",
            "score": 99.42474655877976,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "state.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.37506866455078,
            "correctness": "uncompilable",
            "tokenized_patch": "state . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FALSE , finallyNode ) ;",
            "score": 99.46388549804688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FALSE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "er.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46151878720238,
            "correctness": "uncompilable",
            "tokenized_patch": "er . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode ) ;",
            "score": 99.45021565755208,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cached.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43658156622024,
            "correctness": "uncompilable",
            "tokenized_patch": "cached . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; {",
            "score": 99.375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false + finallyNode ) ;",
            "score": 99.46383534307066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , cfa , finallyNode ) ;",
            "score": 99.45723266601563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.UNCOND , false ) ;",
            "score": 99.42446754092262,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.= computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.37494860197368,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.fromNode , cfa ) ;",
            "score": 99.48656616210937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ) , cfa ) ;",
            "score": 99.45695415296052,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , !1, finallyNode ) ;",
            "score": 99.44937936883224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa [0] ) ;",
            "score": 99.37482010690789,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa [ 0 ] ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -1) ; } }",
            "score": 99.45786354758523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - 1 ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode Node : cfa.finallyMap.get( parent ) ) {",
            "score": 99.456787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node Node : cfa . finally CaMeL Map . get ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.4361572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa ++ ; return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.4239990234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa ++ ; return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , -1) ;",
            "score": 99.37473658511513,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , - 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'less than') ; }",
            "score": 99.47614288330078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( ' y (if true) and x ') ; }",
            "score": 99.47614288330078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'greater than') ; }",
            "score": 99.47614288330078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'before') ; }",
            "score": 99.47614288330078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'Not reachable') ; }",
            "score": 99.47614288330078,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , - fromNode ) ;",
            "score": 99.46351207386364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "provider.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46075148809524,
            "correctness": "uncompilable",
            "tokenized_patch": "provider . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false.UNCOND , finallyNode ) ; }",
            "score": 99.43599076704545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.42375631893383,
            "correctness": "uncompilable",
            "tokenized_patch": "Node compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , target , cfa ) ;",
            "score": 99.37462022569444,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , target , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.UNKNOWN ) ;",
            "score": 99.46317722486413,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . UNKNOWN ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ! fromNode ) ;",
            "score": 99.44891912286931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ! from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , true , null ) ;",
            "score": 99.42346801757813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , true , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap.get( next ) ) {",
            "score": 99.37450561523437,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( next ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa ) ; } }",
            "score": 99.4851935891544,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( sourceName , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.47585227272727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( source CaMeL Name , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sender.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46033296130952,
            "correctness": "uncompilable",
            "tokenized_patch": "sender . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , false ) ;",
            "score": 99.44866180419922,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Thread.UNCOND , finallyNode ) ; }",
            "score": 99.43581321022727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Thread . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , startNode , cfa ) ;",
            "score": 99.37448459201389,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , start CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( fromNode , cfa ) ; else",
            "score": 99.48469682173295,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { for( Node finallyNode : cfa.finallyMap.get( parent ) )",
            "score": 99.46013532366071,
            "correctness": "uncompilable",
            "tokenized_patch": "try { for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.put( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.45757765997024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . put ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfw.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4357577237216,
            "correctness": "uncompilable",
            "tokenized_patch": "cfw . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode ) , cfa ) ; }",
            "score": 99.37446899414063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , node.getNext( ) ) ;",
            "score": 99.48450288318452,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.SWITCH , finallyNode ) ; } }",
            "score": 99.4753750887784,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . SWITCH , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , filter.UNCOND , finallyNode ) ;",
            "score": 99.46273949032738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , filter . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , endNode ) ;",
            "score": 99.45756530761719,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , root , cfa ) ;",
            "score": 99.45559353298611,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Function.UNCOND , finallyNode ) ;",
            "score": 99.44856770833333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Function . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.37435752467105,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; default",
            "score": 99.46270197088069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; default",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ) ) ; } }",
            "score": 99.460009765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.PREFIX , finallyNode ) ; }",
            "score": 99.45541527157738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . PREFIX , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,( int ) cfa ) ; }",
            "score": 99.37406005859376,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ( int ) cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.DEFAULT , finallyNode ) ; } }",
            "score": 99.47474254261364,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . DEFAULT , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL , finallyNode , true ) ;",
            "score": 99.462158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , true , finallyNode ) ; }",
            "score": 99.45540364583333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , true , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "keys.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4350818452381,
            "correctness": "uncompilable",
            "tokenized_patch": "keys . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( next.getLastChild( ) ) ; }",
            "score": 99.3740478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.BLOCK , finallyNode ) ; }",
            "score": 99.47462100074405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . BLOCK , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ke.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45970517113095,
            "correctness": "uncompilable",
            "tokenized_patch": "ke . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , parent.getFirstChild( ) ) ;",
            "score": 99.45720880681819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , parent . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1) ; }",
            "score": 99.42265014648437,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa2) ;",
            "score": 99.37400907628677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa4) ;",
            "score": 99.37400907628677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa3) ;",
            "score": 99.37400907628677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa10) ;",
            "score": 99.37400907628677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa2008) ;",
            "score": 99.37400907628677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; :",
            "score": 99.46186967329545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; :",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "en.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45970517113095,
            "correctness": "uncompilable",
            "tokenized_patch": "en . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa , cfa ) ;",
            "score": 99.455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "modified.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44827706473214,
            "correctness": "uncompilable",
            "tokenized_patch": "modified . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getId( ) , finallyNode ) ; }",
            "score": 99.43468656994048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Id ( ) , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.cfa ) ;",
            "score": 99.37377251519098,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.class ) ;",
            "score": 99.46183975883152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . class ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "service.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45948428199405,
            "correctness": "uncompilable",
            "tokenized_patch": "service . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.intern( finallyNode ) ) ; }",
            "score": 99.45676491477273,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . intern ( finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44814453125,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.47413394325658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.47413394325658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.47413394325658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.47413394325658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( Branch == null ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.47413394325658,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Branch == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.TRUE ) ;",
            "score": 99.46178668478261,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . TRUE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , children ) ;",
            "score": 99.44806229440789,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , children ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.43448893229167,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa ) ; } } }",
            "score": 99.37331671463816,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ) , fromNode , cfa ) ;",
            "score": 99.48137872869319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element.UNCOND , finallyNode ) ; }",
            "score": 99.47412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "task.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.46178089488636,
            "correctness": "uncompilable",
            "tokenized_patch": "task . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "history.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45936802455357,
            "correctness": "uncompilable",
            "tokenized_patch": "history . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element.getFirstChild( ) ) ;",
            "score": 99.4563876065341,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , SWITCH.UNCOND , finallyNode ) ;",
            "score": 99.44787016369048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , SWITCH . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap.get( parent ) ) { if(",
            "score": 99.48094593394886,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map . get ( parent ) ) { if (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "headers.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4592052641369,
            "correctness": "uncompilable",
            "tokenized_patch": "headers . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ? Branch.UNCOND , finallyNode ) ;",
            "score": 99.44777610085227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ? Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.43422154017857,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.getNext( ).getNext( ).getNext( ) ;",
            "score": 99.421142578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . get CaMeL Next ( ) . get CaMeL Next ( ) . get CaMeL Next ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.4736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.PI , finallyNode ) ;",
            "score": 99.46151123046874,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . PI , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0, cfa ) ;",
            "score": 99.45913550967262,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false ) ; break ;",
            "score": 99.45593843005952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reference.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44763764880952,
            "correctness": "uncompilable",
            "tokenized_patch": "reference . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "tc.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43415178571429,
            "correctness": "uncompilable",
            "tokenized_patch": "tc . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode , finallyNode ) ) ;",
            "score": 99.42079380580357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.37282104492188,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , children.UNCOND , finallyNode ) ; }",
            "score": 99.47345525568181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , children . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next , Branch.UNCOND , finallyNode , false ) ; }",
            "score": 99.4558993252841,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next , Branch . UN@@ COND , finally CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "mutex.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44733537946429,
            "correctness": "uncompilable",
            "tokenized_patch": "mutex . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "failed.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4339932528409,
            "correctness": "uncompilable",
            "tokenized_patch": "failed . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , false , null ) ;",
            "score": 99.42069091796876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , false , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return null ;",
            "score": 99.3726870888158,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new Exception( 'less than') ; }",
            "score": 99.47317843967014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new Exception( ' y (if true) and x ') ; }",
            "score": 99.47317843967014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new Exception( 'greater than') ; }",
            "score": 99.47317843967014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new Exception( 'before') ; }",
            "score": 99.47317843967014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new Exception( 'Not reachable') ; }",
            "score": 99.47317843967014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , Branch ; }",
            "score": 99.46060844089673,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , Branch ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.45880448190789,
            "correctness": "uncompilable",
            "tokenized_patch": "} return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Ref.UNCOND , finallyNode ) ; }",
            "score": 99.45585493607955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Ref . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FOR , finallyNode ) ; }",
            "score": 99.45418294270833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FOR , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode : null ) ;",
            "score": 99.44730224609376,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node : null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } } /",
            "score": 99.3726870888158,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } } /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNKNOWN , finallyNode , true ) ;",
            "score": 99.46038263494319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UNKNOWN , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Interface.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45875186011905,
            "correctness": "uncompilable",
            "tokenized_patch": "Interface . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , startNode , finallyNode ) ; }",
            "score": 99.4557872953869,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , start CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ^ Branch.UNCOND , finallyNode ) ;",
            "score": 99.4335604580966,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ^ Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , finallyNode , cfa ) ;",
            "score": 99.42034040178571,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getFirstChild( ) ) ;",
            "score": 99.47258966619319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "w.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45850771949405,
            "correctness": "uncompilable",
            "tokenized_patch": "w . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , node , cfa ) ;",
            "score": 99.45355545847039,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , format.UNCOND , finallyNode ) ;",
            "score": 99.44681222098214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , format . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , parent ) ;",
            "score": 99.43350074404762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; return next ;",
            "score": 99.37260999177632,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; return next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cm.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45839146205357,
            "correctness": "uncompilable",
            "tokenized_patch": "cm . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getFirstChild( ) ) ;",
            "score": 99.45530192057292,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null.UNCOND , finallyNode ) ;",
            "score": 99.44678896949405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node { return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.42019813939145,
            "correctness": "uncompilable",
            "tokenized_patch": "Node { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.37236192491319,
            "correctness": "uncompilable",
            "tokenized_patch": "next . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this.fromNode , parent , cfa ) ;",
            "score": 99.47943793402777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this . from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; ; } }",
            "score": 99.47243430397727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rv.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45986793154762,
            "correctness": "uncompilable",
            "tokenized_patch": "rv . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "meth.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45831008184524,
            "correctness": "uncompilable",
            "tokenized_patch": "meth . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NOT , finallyNode ) ; }",
            "score": 99.45470610119048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NOT , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ,0) ;",
            "score": 99.45309930098684,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( node.getNext( ) ) ;",
            "score": 99.41948106553819,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.37223093133224,
            "correctness": "uncompilable",
            "tokenized_patch": "else return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa.fromNode , cfa ) ;",
            "score": 99.478759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa . from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.47160538383152,
            "correctness": "uncompilable",
            "tokenized_patch": "i . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "con.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45828683035714,
            "correctness": "uncompilable",
            "tokenized_patch": "con . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Object [ ] { fromNode } ) ;",
            "score": 99.45412375710227,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Object [ ] { from CaMeL Node } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.getCurrentNode( ) ) ;",
            "score": 99.4466885653409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . get CaMeL Current CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root.getId( ) ) ;",
            "score": 99.43342895507813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root . get CaMeL Id ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , length ) ;",
            "score": 99.37215847439236,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , length ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode , Branch.UNCOND ,",
            "score": 99.47156292459239,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Node.UNCOND , finallyNode ) ;",
            "score": 99.45929827008929,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Long.UNCOND , finallyNode ) ;",
            "score": 99.44611467633929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Long . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , node ) ;",
            "score": 99.433349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.NULL ) ;",
            "score": 99.45928664434524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . NULL ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ) , cfa ) ; }",
            "score": 99.45807756696429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , finallyNode , false ) ;",
            "score": 99.45362437855114,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( element , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45250244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( element , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NOT , finallyNode ) ;",
            "score": 99.44589233398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NOT , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , null ) ; return null ;",
            "score": 99.4711581143466,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ; return null ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "2"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.MIN , finallyNode ) ;",
            "score": 99.45907592773438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . MIN , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than', false ) ; }",
            "score": 99.4534912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ', false ) ; }",
            "score": 99.4534912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than', false ) ; }",
            "score": 99.4534912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before', false ) ; }",
            "score": 99.4534912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable', false ) ; }",
            "score": 99.4534912109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,0) ;",
            "score": 99.45195456112133,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getName( ) ) ; }",
            "score": 99.4328380766369,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Name ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root , finallyNode ) ;",
            "score": 99.43263075086806,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.37196044921875,
            "correctness": "uncompilable",
            "tokenized_patch": "this . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFollowNode( fromNode , cfa ) ; else",
            "score": 99.47615189985795,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.DEFAULT ) ;",
            "score": 99.45843796502976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . DEFAULT ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Builder.UNCOND , finallyNode ) ;",
            "score": 99.44571940104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Builder . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "channel.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45762416294643,
            "correctness": "uncompilable",
            "tokenized_patch": "channel . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch cfa = createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44536798650569,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node ) ;",
            "score": 99.43175397600446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'less than') ; }",
            "score": 99.41844418174342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ' y (if true) and x ') ; }",
            "score": 99.41844418174342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'greater than') ; }",
            "score": 99.41844418174342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'before') ; }",
            "score": 99.41844418174342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , 'Not reachable') ; }",
            "score": 99.41844418174342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } return this ;",
            "score": 99.37152099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } return this ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode ) ; } } }",
            "score": 99.470458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.null , finallyNode ) ; }",
            "score": 99.45167178199405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . null , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , node , cfa ) ;",
            "score": 99.45082720588235,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , node , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , boolean.UNCOND , finallyNode ) ;",
            "score": 99.4453357514881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , boolean . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa ) ; } } }",
            "score": 99.37149047851562,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "msgs.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45811244419643,
            "correctness": "uncompilable",
            "tokenized_patch": "msgs . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "translet.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45724051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "translet . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , finallyNode , cfa ) ; }",
            "score": 99.45075334821429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , finally CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Integer ) finallyNode ) ;",
            "score": 99.4451840049342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Integer ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , endNode , finallyNode ) ;",
            "score": 99.43142700195312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { for( Node finallyNode : cfa.finallyMap )",
            "score": 99.41828264508929,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { for ( Node finally CaMeL Node : cfa . finally CaMeL Map )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( computeFollowNode( fromNode , parent , cfa ) ) ;",
            "score": 99.371337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "itr.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45697312127976,
            "correctness": "uncompilable",
            "tokenized_patch": "itr . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , parent , cfa ) ;",
            "score": 99.45054796006944,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "part.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44511486235119,
            "correctness": "uncompilable",
            "tokenized_patch": "part . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43138485863095,
            "correctness": "uncompilable",
            "tokenized_patch": "break create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , 'less than') ;",
            "score": 99.41810825892857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , ' y (if true) and x ') ;",
            "score": 99.41810825892857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , 'greater than') ;",
            "score": 99.41810825892857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , 'before') ;",
            "score": 99.41810825892857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , 'Not reachable') ;",
            "score": 99.41810825892857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.47554321289063,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.SWITCH , finallyNode ) ; }",
            "score": 99.47040085565476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . SWITCH , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "exp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45781017485119,
            "correctness": "uncompilable",
            "tokenized_patch": "exp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "perspectives.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45689174107143,
            "correctness": "uncompilable",
            "tokenized_patch": "perspectives . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than') ; break ;",
            "score": 99.45071847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ') ; break ;",
            "score": 99.45071847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than') ; break ;",
            "score": 99.45071847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before') ; break ;",
            "score": 99.45071847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable') ; break ;",
            "score": 99.45071847098214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , null ) ;",
            "score": 99.45053582442434,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "events.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44505673363095,
            "correctness": "uncompilable",
            "tokenized_patch": "events . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.43133866159539,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND | finallyNode ) )",
            "score": 99.469970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.null , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45778586647727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . null , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ie.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45688011532738,
            "correctness": "uncompilable",
            "tokenized_patch": "ie . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node finallyNode = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.45042782738095,
            "correctness": "uncompilable",
            "tokenized_patch": "Node finally CaMeL Node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND *finallyNode ) ; }",
            "score": 99.44985129616477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND * finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.VOID , finallyNode ) ;",
            "score": 99.44501953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . VOID , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , fromNode ) ;",
            "score": 99.47530691964286,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(0, Branch.UNCOND , finallyNode ) ; }",
            "score": 99.469873046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( 0 , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , root ) ;",
            "score": 99.45778490149456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name ) ; }",
            "score": 99.44966634114583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "li.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44499860491071,
            "correctness": "uncompilable",
            "tokenized_patch": "li . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , finallyNode ) )",
            "score": 99.43112521701389,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , fromNode , parent , cfa ) ; }",
            "score": 99.36969315378289,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLastChild( ) , parent ) ;",
            "score": 99.47474888392857,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ref = cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46971594769022,
            "correctness": "uncompilable",
            "tokenized_patch": "ref = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , finallyNode ) ; } }",
            "score": 99.456591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , parent , cfa , finallyNode ) ;",
            "score": 99.45018310546875,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.create( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44914106889205,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( finallyNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44495913856908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( finally CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.UNCOND , true ) ;",
            "score": 99.41728283110119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } ;",
            "score": 99.36968315972223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( = fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46942693536931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( = from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} } return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.45657509251645,
            "correctness": "uncompilable",
            "tokenized_patch": "} } return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( parent.getLastChild( ) ) ; } }",
            "score": 99.45011596679687,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getFirstChild( ) ) ; } }",
            "score": 99.4491299715909,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , !( Branch ) finallyNode ) ;",
            "score": 99.44486083984376,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! ( Branch ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) return computeFallThrough( parent , cfa ) ; else",
            "score": 99.47449951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) return compute CaMeL Fall CaMeL Through ( parent , cfa ) ; else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.exit , finallyNode ) ;",
            "score": 99.45709228515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . exit , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "DF.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45620582217262,
            "correctness": "uncompilable",
            "tokenized_patch": "DF . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getLastChild( ) ) ; }",
            "score": 99.44984654017857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode1) ;",
            "score": 99.44453568892045,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa = computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.36922414679276,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getNode( ) ) ;",
            "score": 99.45700073242188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , n ) ;",
            "score": 99.44451583059211,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , n ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.4167121438419,
            "correctness": "uncompilable",
            "tokenized_patch": "assert compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FUNCTION , finallyNode ) ; } }",
            "score": 99.46709650213069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FUNCTION , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ids.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4560779389881,
            "correctness": "uncompilable",
            "tokenized_patch": "ids . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa + finallyNode ) ;",
            "score": 99.44970703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) cfa.createEdge( fromNode ) ;",
            "score": 99.43003540039062,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge = fromNode( fromNode , parent , cfa ) ;",
            "score": 99.41612548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge = from CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NO , finallyNode , true ) ;",
            "score": 99.4560879794034,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NO , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , T.UNCOND , finallyNode ) ;",
            "score": 99.44959077380952,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , T . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getRoot( ) ) ; } }",
            "score": 99.44838645241477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Root ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "jobs.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44440569196429,
            "correctness": "uncompilable",
            "tokenized_patch": "jobs . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , intValue ) ;",
            "score": 99.42981719970703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , int CaMeL Value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + fromNode ) ;",
            "score": 99.41600399925595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( computeFallThrough( fromNode , cfa ) ) ;",
            "score": 99.36890933388158,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "declarations.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45584542410714,
            "correctness": "uncompilable",
            "tokenized_patch": "declarations . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , n.UNCOND , finallyNode ) ;",
            "score": 99.44941638764881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , n . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode , true ) ;",
            "score": 99.44410342261905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false.UNCOND , finallyNode ) ;",
            "score": 99.42910621279762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { if( cfa != null )",
            "score": 99.41515531994048,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { if ( cfa != null )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND ) ; }",
            "score": 99.45551147460938,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.concat( finallyNode ) ) ;",
            "score": 99.46643647693452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . concat ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , this ) ; } break ;",
            "score": 99.447998046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new >( ) ) ;",
            "score": 99.44386201746323,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new > ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + 'less than') ;",
            "score": 99.36797131990132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + ' y (if true) and x ') ;",
            "score": 99.36797131990132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + 'greater than') ;",
            "score": 99.36797131990132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + 'before') ;",
            "score": 99.36797131990132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND + 'Not reachable') ;",
            "score": 99.36797131990132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND + $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND ) )",
            "score": 99.4664242393092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , this , cfa ) ; }",
            "score": 99.44893606085526,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , this , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "receiver.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44363839285714,
            "correctness": "uncompilable",
            "tokenized_patch": "receiver . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , cfa ) ;",
            "score": 99.36787923177083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buf.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.47044735863095,
            "correctness": "uncompilable",
            "tokenized_patch": "buf . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ; }",
            "score": 99.45506376378677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch + UNCOND , finallyNode ) ;",
            "score": 99.44885835193452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch + UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , finallyNode , false ) ;",
            "score": 99.44742838541667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.36763080797698,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( node.getLastChild( ) ) ; }",
            "score": 99.470361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.PROPERTY , finallyNode ) ; } }",
            "score": 99.4659090909091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . PROPERTY , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.getFirstChild( ).getNext( ) ; }",
            "score": 99.44868977864583,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getFirstChild( ) ) ; }",
            "score": 99.44706798735119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "repository.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44340587797619,
            "correctness": "uncompilable",
            "tokenized_patch": "repository . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , finallyNode ) ;",
            "score": 99.41375732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa false ) ;",
            "score": 99.3675896139706,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node ) Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.4655428799716,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node ) Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( parent.getLastChild( ) ) ; } }",
            "score": 99.44819568452381,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( parent.getLastChild( ) ) ; }",
            "score": 99.46908714657738,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.45383814761513,
            "correctness": "uncompilable",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , this , cfa ) ;",
            "score": 99.44815866570724,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , this , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'less than', finallyNode ) ;",
            "score": 99.44303588867187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.44303588867187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'greater than', finallyNode ) ;",
            "score": 99.44303588867187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'before', finallyNode ) ;",
            "score": 99.44303588867187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'Not reachable', finallyNode ) ;",
            "score": 99.44303588867187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true , ) ; }",
            "score": 99.42814127604167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( node.getLastChild( ) , cfa ) ;",
            "score": 99.4689708891369,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( node.getFirstChild( ) ) ; } }",
            "score": 99.46492309570313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.root , cfa ) ; }",
            "score": 99.44811430431548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . root , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.MIN , finallyNode ) ; }",
            "score": 99.44544038318452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . MIN , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.42800903320312,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node parent = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.36704615542763,
            "correctness": "uncompilable",
            "tokenized_patch": "Node parent = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; continue ; }",
            "score": 99.36648077713816,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; continue ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.start , finallyNode ) ;",
            "score": 99.454833984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . start , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND && finallyNode ) ;",
            "score": 99.45331101190476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND && finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa , finallyNode ) ;",
            "score": 99.44783100328948,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getFirstChild( ) ) ; }",
            "score": 99.44501809512867,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , null , ) ;",
            "score": 99.36573550575658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa.fromNode , cfa ) ;",
            "score": 99.46854073660714,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa . from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.concat( finallyNode ) ) ; }",
            "score": 99.46427778764205,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . concat ( finally CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.1, finallyNode ) ; }",
            "score": 99.44774228050595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . 1 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , finallyNode ) ; } }",
            "score": 99.44475708007812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "shell.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44205729166667,
            "correctness": "uncompilable",
            "tokenized_patch": "shell . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.42757568359374,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( node.getNext( ) ) ;",
            "score": 99.46427778764205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this.getLastChild( ) ) ;",
            "score": 99.45296223958333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.44765753495066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( source , Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.44463820684524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( source , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "database.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44158063616071,
            "correctness": "uncompilable",
            "tokenized_patch": "database . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.41187808388158,
            "correctness": "uncompilable",
            "tokenized_patch": "Node return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( createEdge( fromNode , parent , cfa ) ) ;",
            "score": 99.46780831473214,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( create CaMeL Edge ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , finallyNode , true ) ;",
            "score": 99.4545010653409,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , Branch.UNCOND , finallyNode , false ) ;",
            "score": 99.44451032366071,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , Branch . UN@@ COND , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , join.UNCOND , finallyNode ) ;",
            "score": 99.44135974702381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , join . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false ) ; } ;",
            "score": 99.42650204613095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; } ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , node.getNext( ) ) ;",
            "score": 99.4677966889881,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Nodes.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45448521205357,
            "correctness": "uncompilable",
            "tokenized_patch": "Nodes . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "el.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45274135044643,
            "correctness": "uncompilable",
            "tokenized_patch": "el . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) , cfa , cfa ) ;",
            "score": 99.4474865141369,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) cfa.createEdge( fromNode , false ) ;",
            "score": 99.4412841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.WARNING , finallyNode ) ; }",
            "score": 99.42643229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . WARNING , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , current ) ;",
            "score": 99.36532931857639,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , current ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getLastChild( parent ) ) ;",
            "score": 99.4670177641369,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Last CaMeL Child ( parent ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "thread.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45438058035714,
            "correctness": "uncompilable",
            "tokenized_patch": "thread . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , next ) ;",
            "score": 99.44410342261905,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.42637416294643,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , cfa ) ;",
            "score": 99.4668960571289,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; break ;",
            "score": 99.46352667557566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.DEFAULT , finallyNode , true ) ;",
            "score": 99.45417924360795,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . DEFAULT , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "getter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45218331473214,
            "correctness": "uncompilable",
            "tokenized_patch": "getter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name.toString( ) ) ; }",
            "score": 99.44341750372024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name . to CaMeL String ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode ,0, finallyNode ) ;",
            "score": 99.4410733309659,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,( String ) cfa ) ;",
            "score": 99.36515727796052,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ( String ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , value.UNCOND , finallyNode ) ;",
            "score": 99.46342540922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , value . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , UNCOND , finallyNode ) ; } }",
            "score": 99.44739350818452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , endNode , finallyNode ) ; }",
            "score": 99.44310360863095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -2, finallyNode ) ; }",
            "score": 99.4257080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -4, finallyNode ) ; }",
            "score": 99.4257080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -3, finallyNode ) ; }",
            "score": 99.4257080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -10, finallyNode ) ; }",
            "score": 99.4257080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -2008, finallyNode ) ; }",
            "score": 99.4257080078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.4113037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "config.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.36451721191406,
            "correctness": "uncompilable",
            "tokenized_patch": "config . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.46644810267857,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.createEdge( fromNode , Branch.UNCOND , null ) )",
            "score": 99.462890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "agent.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45402018229167,
            "correctness": "uncompilable",
            "tokenized_patch": "agent . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , Branch.UNCOND , finallyNode ) ; break ;",
            "score": 99.44268508184524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , Branch . UN@@ COND , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NUMBER , finallyNode ) ;",
            "score": 99.44031982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NUMBER , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element , cfa ) ;",
            "score": 99.36444091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.EQ ) ;",
            "score": 99.45384680706522,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . EQ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getLastChild( ) , cfa ) ; }",
            "score": 99.44692847842262,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.UNCOND , finallyNode ) ;",
            "score": 99.44010416666667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa , cfa ) ;",
            "score": 99.41109212239583,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,0) ; } }",
            "score": 99.36437310112848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 0 ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa , cfa ) ;",
            "score": 99.4662224264706,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND ) ; }",
            "score": 99.451416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) cfa.createEdge( fromNode , true ) ;",
            "score": 99.43999689275569,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = cfa.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.42514183407738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45349702380952,
            "correctness": "uncompilable",
            "tokenized_patch": "continue . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "visitor.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45140438988095,
            "correctness": "uncompilable",
            "tokenized_patch": "visitor . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND ) ;",
            "score": 99.44674521998355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getNext( ) ) ; }",
            "score": 99.44114056755515,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.42477596507354,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.36402045355902,
            "correctness": "uncompilable",
            "tokenized_patch": "else return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( parent , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.4620028409091,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( parent , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; public",
            "score": 99.45339133522727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; public",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "caller.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45128813244048,
            "correctness": "uncompilable",
            "tokenized_patch": "caller . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getLastChild( ) , cfa ) ;",
            "score": 99.44664306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , } ) ;",
            "score": 99.44072522615132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , } ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , UNCOND , finallyNode ) ;",
            "score": 99.4382556733631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name , cfa ) ;",
            "score": 99.3636474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.VOID , finallyNode ) ; } }",
            "score": 99.4620028409091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . VOID , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "monitor.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45103236607143,
            "correctness": "uncompilable",
            "tokenized_patch": "monitor . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( next.getNext( ) , parent , cfa ) ;",
            "score": 99.44664306640625,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null ) ; } }",
            "score": 99.4401626586914,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( fromNode ) ;",
            "score": 99.43816266741071,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , intValue , finallyNode ) ;",
            "score": 99.42404174804688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , int CaMeL Value , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : cfa.finallyMap( parent ) ) {",
            "score": 99.36354573567708,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : cfa . finally CaMeL Map ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND L , finallyNode ) ;",
            "score": 99.45298073508523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND L , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Interpreter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45096261160714,
            "correctness": "uncompilable",
            "tokenized_patch": "Interpreter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , node ) ;",
            "score": 99.446435546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , finallyNode , finallyNode ) ;",
            "score": 99.43805486505681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , element ) ; }",
            "score": 99.42379150390624,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , element ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.41021728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch : return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.36348684210526,
            "correctness": "wrong",
            "tokenized_patch": "Branch : return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ; finallyNode ) { }",
            "score": 99.46164772727273,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; finally CaMeL Node ) { }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa + finallyNode ) ; }",
            "score": 99.44630068824405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ? ) ;",
            "score": 99.43803267045455,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ? ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , finallyNode , finallyNode ) ;",
            "score": 99.42366333007813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , *",
            "score": 99.362548828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , *",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.fromNode ) ; }",
            "score": 99.46159924958882,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "inst.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45093936011905,
            "correctness": "uncompilable",
            "tokenized_patch": "inst . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , declarations ) ;",
            "score": 99.4371337890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , declarations ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | true ) ;",
            "score": 99.40966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.36223401521382,
            "correctness": "uncompilable",
            "tokenized_patch": "node . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null &&( parent.getLastChild( ) == node ) )",
            "score": 99.46425083705357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && ( parent . get CaMeL Last CaMeL Child ( ) == node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( finallyNode != null ) {",
            "score": 99.46128216911765,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( finally CaMeL Node != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "destination.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4509044828869,
            "correctness": "uncompilable",
            "tokenized_patch": "destination . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2, UNCOND , finallyNode ) ;",
            "score": 99.43622116815476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,4, UNCOND , finallyNode ) ;",
            "score": 99.43622116815476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,3, UNCOND , finallyNode ) ;",
            "score": 99.43622116815476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,10, UNCOND , finallyNode ) ;",
            "score": 99.43622116815476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2008, UNCOND , finallyNode ) ;",
            "score": 99.43622116815476,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ext.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42243303571429,
            "correctness": "uncompilable",
            "tokenized_patch": "ext . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "e.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.36204618566177,
            "correctness": "uncompilable",
            "tokenized_patch": "e . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , shortValue ) ; }",
            "score": 99.46120383522727,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , short CaMeL Value ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ? finallyNode : finallyNode ) ;",
            "score": 99.43609328497024,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ? finally CaMeL Node : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode.putAll( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45158585258152,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . put CaMeL All ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.40934673108552,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , fromNode , parent , cfa ) ;",
            "score": 99.36142306857639,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , LT.UNCOND , finallyNode ) ; }",
            "score": 99.45131613991477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , LT . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next , Branch.UNCOND , finallyNode ) ; break ;",
            "score": 99.43767438616071,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next , Branch . UN@@ COND , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , true , true ) ;",
            "score": 99.42130533854167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.fromNode ) ;",
            "score": 99.46275111607143,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , == ) ;",
            "score": 99.45129925271739,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , == ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createProp( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45033482142857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Prop ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , add.UNCOND , finallyNode ) ;",
            "score": 99.43756975446429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , add . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "results.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42122395833333,
            "correctness": "uncompilable",
            "tokenized_patch": "results . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , cfa ) ;",
            "score": 99.40897369384766,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next ) ;",
            "score": 99.46253551136364,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode ) ;",
            "score": 99.46034749348958,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , false ) ; }",
            "score": 99.44562731291118,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( id , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43731689453125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( id , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finally.getNext( ) ) ;",
            "score": 99.40896606445312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , parent , false ) ;",
            "score": 99.360595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.46251860119048,
            "correctness": "uncompilable",
            "tokenized_patch": "null . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , Branch.NULL ) ;",
            "score": 99.45998313210227,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , name ) ; } }",
            "score": 99.43729073660714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , name ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , finallyNode , true ) ;",
            "score": 99.43533935546876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root.getNext( ) ) ;",
            "score": 99.42022705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , true , false ) ;",
            "score": 99.40889892578124,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , true , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.3603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "node . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(0, Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.45975167410714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( 0 , Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Branch ) finallyNode ) ;",
            "score": 99.43437114514802,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Branch ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , false ) ;",
            "score": 99.36016845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ) ; } }",
            "score": 99.45963832310268,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , parent , cfa ) ;",
            "score": 99.44943576388889,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , source , cfa ) ;",
            "score": 99.44529215494792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , source , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0, true ) ;",
            "score": 99.43348911830357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , finallyNode , cfa ) ; }",
            "score": 99.40814819335938,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , finally CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.36013312088816,
            "correctness": "uncompilable",
            "tokenized_patch": "this . compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.0, finallyNode , true ) ;",
            "score": 99.45068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . 0 , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getRoot( ) ) ; }",
            "score": 99.43603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Root ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , null ) ;",
            "score": 99.43272705078125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , false ) ; }",
            "score": 99.41922607421876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | false ) ;",
            "score": 99.407958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getParent( ) , parent , cfa ) ;",
            "score": 99.36007351345486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Parent ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.DEFAULT ) ;",
            "score": 99.45058806046195,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . DEFAULT ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name.toString( ) ) ;",
            "score": 99.4356201171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name . to CaMeL String ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return null ;",
            "score": 99.40780978732639,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , value ) ;",
            "score": 99.36006927490234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND , null ) ;",
            "score": 99.44790810032895,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , list ) ;",
            "score": 99.4188232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , list ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , false ) ; }",
            "score": 99.40763549804687,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE ) ;",
            "score": 99.35945892333984,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL ) ; }",
            "score": 99.45831657858456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ccfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45032269021739,
            "correctness": "uncompilable",
            "tokenized_patch": "c@@ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ,0) ; }",
            "score": 99.44784385279605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , 0 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , this , cfa , cfa ) ;",
            "score": 99.443994140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , this , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND , false ) ;",
            "score": 99.4355236235119,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , changes ) ;",
            "score": 99.4317626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , changes ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getParent( ) ) ;",
            "score": 99.41867065429688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , endNode ) ;",
            "score": 99.35940212673611,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , end CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; {",
            "score": 99.45018421519886,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , false ) ; }",
            "score": 99.43476305509868,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getId( ) , finallyNode ) ;",
            "score": 99.41827392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Id ( ) , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , cfa ) ; } }",
            "score": 99.40720825195312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , parent , true ) ;",
            "score": 99.35920545789931,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , finallyNode ) ; break ;",
            "score": 99.45794122869319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa , null ) ;",
            "score": 99.4464599609375,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch [ UNCOND , finallyNode ) ;",
            "score": 99.43128022693452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch [ UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ) ;",
            "score": 99.4067138671875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root , cfa ) ;",
            "score": 99.35919189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , replace.UNCOND , finallyNode ) ;",
            "score": 99.45758928571429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , replace . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this.getLastChild( ) ) ; }",
            "score": 99.44325015419408,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "startNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43308715820312,
            "correctness": "uncompilable",
            "tokenized_patch": "start CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LT , finallyNode ) ;",
            "score": 99.43106079101562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LT , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getState( ) ) ;",
            "score": 99.41755981445313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL State ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getFirstChild( ) ) ; } }",
            "score": 99.46026320684524,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNext( ) , parent , cfa ) ;",
            "score": 99.44601440429688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Next ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Integer.UNCOND , finallyNode ) ; }",
            "score": 99.43013139204545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Integer . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , true ) ;",
            "score": 99.35897488064236,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa , cfa ) ;",
            "score": 99.45929314108456,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.PROPERTY , finallyNode ) ; }",
            "score": 99.45743815104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . PROPERTY , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sink.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44944069602273,
            "correctness": "uncompilable",
            "tokenized_patch": "sink . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.4429931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode = Branch.UNCOND ; }",
            "score": 99.43262329101563,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node = Branch . UN@@ COND ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; null",
            "score": 99.43003151633523,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; null",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , fromNode , cfa ) ;",
            "score": 99.35840606689453,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND )( finallyNode ) ;",
            "score": 99.4573641690341,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ( finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = next.getNext( ) ; while( next != null ) {",
            "score": 99.44394402754934,
            "correctness": "uncompilable",
            "tokenized_patch": "Node next = next . get CaMeL Next ( ) ; while ( next != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , node ) ; }",
            "score": 99.44292602539062,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , finallyNode ) ;",
            "score": 99.41696506076389,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.40473768446181,
            "correctness": "uncompilable",
            "tokenized_patch": "next return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } /",
            "score": 99.35834418402777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , fromNode , cfa ) ; }",
            "score": 99.459130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNode( ) ) ; }",
            "score": 99.45726254111842,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Node ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( parent.getNext( ) ) ; }",
            "score": 99.44375610351562,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa.root ) ;",
            "score": 99.40463595920139,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa . root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa -2) ;",
            "score": 99.35821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa -4) ;",
            "score": 99.35821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa -3) ;",
            "score": 99.35821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa -10) ;",
            "score": 99.35821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa -2008) ;",
            "score": 99.35821533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pending.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44920765269886,
            "correctness": "uncompilable",
            "tokenized_patch": "pending . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNext( ) ) ; } }",
            "score": 99.44315592447917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , finallyNode ) ;",
            "score": 99.41663953993056,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false , cfa ) ;",
            "score": 99.40434434678819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ) ;",
            "score": 99.35797526041667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ts.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44901899857955,
            "correctness": "uncompilable",
            "tokenized_patch": "ts . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.4161376953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND *",
            "score": 99.40422821044922,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND *",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , type ) ;",
            "score": 99.35797119140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , type ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( ! cfa.createEdge( fromNode ) )",
            "score": 99.45707563920455,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( ! cfa . create CaMeL Edge ( from CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , finallyNode ) ;",
            "score": 99.40416044347427,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , true ) ;",
            "score": 99.35788861443015,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object next = node.getNext( ) ; if( next != null ) {",
            "score": 99.44207442434211,
            "correctness": "uncompilable",
            "tokenized_patch": "Object next = node . get CaMeL Next ( ) ; if ( next != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'less than') ; }",
            "score": 99.43115997314453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( ' y (if true) and x ') ; }",
            "score": 99.43115997314453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'greater than') ; }",
            "score": 99.43115997314453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'before') ; }",
            "score": 99.43115997314453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Error( 'Not reachable') ; }",
            "score": 99.43115997314453,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Error ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.YES , finallyNode ) ;",
            "score": 99.42579956054688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . YES , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , cfa ) ; } }",
            "score": 99.40406494140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , parent , parent , cfa ) ;",
            "score": 99.442236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.44086657072368,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.node , cfa ) ;",
            "score": 99.40404663085937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , parent , cfa ) ;",
            "score": 99.35771833147321,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , fromNode , cfa ) ;",
            "score": 99.45711059570313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LOCAL , finallyNode ) ; } }",
            "score": 99.45634321732955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LOCAL , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( next.getNext( ) ) ;",
            "score": 99.4421615600586,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , true ) ;",
            "score": 99.44020385742188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next , finallyNode ) ;",
            "score": 99.43083360460069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , fromNode ) ;",
            "score": 99.42438354492188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.40389404296874,
            "correctness": "uncompilable",
            "tokenized_patch": "Node create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND",
            "score": 99.35748697916667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ,",
            "score": 99.44208526611328,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Node.UNCOND , finallyNode ) ;",
            "score": 99.42438065378289,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getType( ) ) ;",
            "score": 99.41397094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Type ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( next.getLastChild( ) ) ;",
            "score": 99.40378289473684,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.35733371310764,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'less than', false ) ;",
            "score": 99.43043154761905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ' y (if true) and x ', false ) ;",
            "score": 99.43043154761905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'greater than', false ) ;",
            "score": 99.43043154761905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'before', false ) ;",
            "score": 99.43043154761905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , 'Not reachable', false ) ;",
            "score": 99.43043154761905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , 'less than', finallyNode ) ;",
            "score": 99.42367553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.42367553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , 'greater than', finallyNode ) ;",
            "score": 99.42367553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , 'before', finallyNode ) ;",
            "score": 99.42367553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , 'Not reachable', finallyNode ) ;",
            "score": 99.42367553710938,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , startNode , finallyNode ) ;",
            "score": 99.4138916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , start CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , cfa ) ;",
            "score": 99.40338134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ; }",
            "score": 99.45598288143383,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , next ) ;",
            "score": 99.42331414473684,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) cfa.createEdge( fromNode ,",
            "score": 99.41250770970395,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Branch parent = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.35715203536184,
            "correctness": "uncompilable",
            "tokenized_patch": "Branch parent = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE ) ; }",
            "score": 99.4556525735294,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.return computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.45493861607143,
            "correctness": "uncompilable",
            "tokenized_patch": "this . return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).getFirstChild( ).getNext( ) ; }",
            "score": 99.44025268554688,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , Branch.UNCOND ) ; }",
            "score": 99.43013305664063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1,2) ;",
            "score": 99.4223865327381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1,4) ;",
            "score": 99.4223865327381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1,3) ;",
            "score": 99.4223865327381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1,10) ;",
            "score": 99.4223865327381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1,2008) ;",
            "score": 99.4223865327381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( node , Branch.UNCOND , finallyNode ) ;",
            "score": 99.41246273643092,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false ) ; } } }",
            "score": 99.35693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.WITH , finallyNode ) ;",
            "score": 99.45560913085937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . WITH , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.45439317491319,
            "correctness": "uncompilable",
            "tokenized_patch": "next = cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.IN ) ;",
            "score": 99.44769577752976,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . IN ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( next.getLastChild( ) ) ;",
            "score": 99.44020385742188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null && NodeUtil.hasFinally( parent ) ) {",
            "score": 99.43764134457237,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && Node CaMeL Util . has CaMeL Finally ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getParent( ) ) ; }",
            "score": 99.42935983758224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , Branch ;",
            "score": 99.42209694602273,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , Branch ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getId( ) ) ;",
            "score": 99.411962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Id ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , finallyNode ) ;",
            "score": 99.40292358398438,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "handler.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44757952008929,
            "correctness": "uncompilable",
            "tokenized_patch": "handler . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , n.getNext( ) ) ;",
            "score": 99.44005126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , n . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Name.UNCOND , finallyNode ) ;",
            "score": 99.42916434151786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Name . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.41131591796875,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.35636632582721,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.VOID , finallyNode ) ; }",
            "score": 99.45514787946429,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . VOID , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , source ) ;",
            "score": 99.41092079564145,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , source ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa [ createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.45416814630681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa [ create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ! finallyNode ) ; }",
            "score": 99.44724439538044,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ! finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getNext( ) , cfa ) ; }",
            "score": 99.43968505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , finallyNode ) ; } }",
            "score": 99.4367919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, finallyNode , true ) ;",
            "score": 99.42181396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; ;",
            "score": 99.3562873391544,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { if( cfa.createEdge( ) ) {",
            "score": 99.45403180803571,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { if ( cfa . create CaMeL Edge ( ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.STATEMENT , finallyNode ) ;",
            "score": 99.43961181640626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . STATEMENT , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , parent , cfa ) ) {",
            "score": 99.43636924342105,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node fromNode ) ;",
            "score": 99.42159695095486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( node ) ;",
            "score": 99.41002133018092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next , fromNode , cfa ) ;",
            "score": 99.45334759880515,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , parent , cfa ) ; }",
            "score": 99.43634354440789,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'less than', finallyNode ) ; }",
            "score": 99.42855980282738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.' y (if true) and x ', finallyNode ) ; }",
            "score": 99.42855980282738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'greater than', finallyNode ) ; }",
            "score": 99.42855980282738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'before', finallyNode ) ; }",
            "score": 99.42855980282738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'Not reachable', finallyNode ) ; }",
            "score": 99.42855980282738,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EXPRESSION , finallyNode ) ;",
            "score": 99.42127075195313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EXPRESSION , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.35625861672794,
            "correctness": "uncompilable",
            "tokenized_patch": "final cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getFirstChild( ) , cfa ) ;",
            "score": 99.4533458891369,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL First CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.NULL , finallyNode ) )",
            "score": 99.4532137784091,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "scanner.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44687034970238,
            "correctness": "uncompilable",
            "tokenized_patch": "scanner . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , true ) ; }",
            "score": 99.43803325452302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name , finallyNode ) ; } }",
            "score": 99.4285400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2,2) ;",
            "score": 99.42120070684524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4,4) ;",
            "score": 99.42120070684524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3,3) ;",
            "score": 99.42120070684524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10,10) ;",
            "score": 99.42120070684524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008,2008) ;",
            "score": 99.42120070684524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'less than') ;",
            "score": 99.40847296463816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( ' y (if true) and x ') ;",
            "score": 99.40847296463816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'greater than') ;",
            "score": 99.40847296463816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'before') ;",
            "score": 99.40847296463816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new RuntimeException( 'Not reachable') ;",
            "score": 99.40847296463816,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.println( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.40138003700658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . println ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.35622687088816,
            "correctness": "wrong",
            "tokenized_patch": "return cfa . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Throwable.UNCOND , finallyNode ) ;",
            "score": 99.44664946056548,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Throwable . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , root ) ; }",
            "score": 99.43792724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , root ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode.createEdge( fromNode , finallyNode ) ;",
            "score": 99.4083251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa [ null ] ) ;",
            "score": 99.40135433799342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa [ null ] ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ADD , finallyNode ) ; break ;",
            "score": 99.4522372159091,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ADD , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "count.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44646344866071,
            "correctness": "uncompilable",
            "tokenized_patch": "count . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.parent ) ; }",
            "score": 99.43503289473684,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , parent ) ; } }",
            "score": 99.42833891369048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parent ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Integer( fromNode ) ) ;",
            "score": 99.42067260742188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Integer ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.3559506064967,
            "correctness": "uncompilable",
            "tokenized_patch": "next . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pane.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.45219494047619,
            "correctness": "uncompilable",
            "tokenized_patch": "pane . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "e.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44618918678977,
            "correctness": "uncompilable",
            "tokenized_patch": "e . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( fromNode , ) ;",
            "score": 99.42066539417614,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( from CaMeL Node , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , UNCOND , finallyNode ) ;",
            "score": 99.40812602796052,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.40073852539062,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , this ) ; }",
            "score": 99.35547593060662,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , this ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent.getNext( ) ) )",
            "score": 99.45110473632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent . get CaMeL Next ( ) ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ! Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44589631453805,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND , null ) ; }",
            "score": 99.434326171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , endNode ) ; }",
            "score": 99.42768411075367,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.40762939453126,
            "correctness": "uncompilable",
            "tokenized_patch": "this . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node , cfa ) ) ;",
            "score": 99.35518391927083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next , cfa ) ;",
            "score": 99.4509746844952,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; break ;",
            "score": 99.44584324048913,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { finally { cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.43397216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "try { finally { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , fromNode ) ;",
            "score": 99.42052544487848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.40748355263158,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch., finallyNode ) ;",
            "score": 99.40010793585526,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.43720703125,
            "correctness": "uncompilable",
            "tokenized_patch": "continue compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , 'less than', finallyNode ) ;",
            "score": 99.41986083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.41986083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , 'greater than', finallyNode ) ;",
            "score": 99.41986083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , 'before', finallyNode ) ;",
            "score": 99.41986083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , 'Not reachable', finallyNode ) ;",
            "score": 99.41986083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -0, finallyNode ) ; }",
            "score": 99.40745849609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 0 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , finallyNode , cfa ) ; }",
            "score": 99.40010151110198,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ! false ) ;",
            "score": 99.35434139476104,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ! false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( ) ; } }",
            "score": 99.45111083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Integer.NONE , finallyNode ) ;",
            "score": 99.41970825195312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Integer . NONE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'less than', fromNode , parent , cfa ) ;",
            "score": 99.39997694227431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ' y (if true) and x ', fromNode , parent , cfa ) ;",
            "score": 99.39997694227431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'greater than', fromNode , parent , cfa ) ;",
            "score": 99.39997694227431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'before', fromNode , parent , cfa ) ;",
            "score": 99.39997694227431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'Not reachable', fromNode , parent , cfa ) ;",
            "score": 99.39997694227431,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.43277780633224,
            "correctness": "uncompilable",
            "tokenized_patch": "try { compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.4071533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( finallyNode.getNext( ) ) ;",
            "score": 99.3995297080592,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( finally CaMeL Node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null , false ) ;",
            "score": 99.353271484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.TRUE ) ;",
            "score": 99.44544038318452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . TRUE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getNext( ) ) ; } }",
            "score": 99.4364013671875,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.41913452148438,
            "correctness": "uncompilable",
            "tokenized_patch": "assert create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'less than') ;",
            "score": 99.40692459909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( ' y (if true) and x ') ;",
            "score": 99.40692459909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'greater than') ;",
            "score": 99.40692459909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'before') ;",
            "score": 99.40692459909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw new RuntimeException( 'Not reachable') ;",
            "score": 99.40692459909539,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw new Runtime CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , scope ) ; }",
            "score": 99.43591918945313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , scope ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.43240966796876,
            "correctness": "uncompilable",
            "tokenized_patch": "this . return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next.getNext( ) ) ; }",
            "score": 99.42599051339286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) { finally",
            "score": 99.41900079900569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) { finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , false ) ; }",
            "score": 99.40667114257812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return parent ; }",
            "score": 99.45004111842105,
            "correctness": "wrong",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return parent ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null , cfa , cfa ) ;",
            "score": 99.43582763671876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = next.getNext( ) ; if( next != null ) {",
            "score": 99.43194258840461,
            "correctness": "uncompilable",
            "tokenized_patch": "Node next = next . get CaMeL Next ( ) ; if ( next != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.create( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42583937872024,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new( fromNode ) ) ;",
            "score": 99.4187075966283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ( from CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.40574815538194,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "NodeUtil.computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.39916381835937,
            "correctness": "uncompilable",
            "tokenized_patch": "Node CaMeL Util . compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "props.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44527762276786,
            "correctness": "uncompilable",
            "tokenized_patch": "props . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , cfa , finallyNode ) ;",
            "score": 99.43558959960937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ?",
            "score": 99.41786411830357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ?",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , false ) ;",
            "score": 99.40556897615132,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39872233072917,
            "correctness": "uncompilable",
            "tokenized_patch": "! return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , true ) ; } } }",
            "score": 99.35250051398026,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , true ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( src , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44815224095395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( src , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Type.UNCOND , finallyNode ) ; }",
            "score": 99.44513494318181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Type . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , scope , cfa ) ;",
            "score": 99.4355697631836,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , scope , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , parent ) ;",
            "score": 99.43131103515626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent.getNext( ) ) ; }",
            "score": 99.39870198567708,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , false ) ; }",
            "score": 99.35200051700367,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'less than') ;",
            "score": 99.44781815378289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.44781815378289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.44781815378289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'before') ;",
            "score": 99.44781815378289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node == null ) { throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.44781815378289,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node == null ) { throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index , finallyNode ) ; }",
            "score": 99.42481753700658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ).createEdge( fromNode ) ;",
            "score": 99.417724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ) . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , node ) ;",
            "score": 99.40343560112848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getNext( ) ;",
            "score": 99.39836682771382,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Next ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else return computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.35183876439145,
            "correctness": "uncompilable",
            "tokenized_patch": "else return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; ; } }",
            "score": 99.44777221679688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.size( ) , finallyNode ) ; }",
            "score": 99.44484544836956,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . size ( ) , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Object parent = node.getNext( ) ; if( parent != null ) {",
            "score": 99.42986739309211,
            "correctness": "uncompilable",
            "tokenized_patch": "Object parent = node . get CaMeL Next ( ) ; if ( parent != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0) ; }",
            "score": 99.42462565104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "else { return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.44789428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "else { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND , true ) )",
            "score": 99.44760277157738,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, cfa ) ; }",
            "score": 99.43501551011029,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target , finallyNode ) ;",
            "score": 99.41738552517361,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39728461371527,
            "correctness": "uncompilable",
            "tokenized_patch": "next . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , n , cfa ) ;",
            "score": 99.35118103027344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , n , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LOCAL , finallyNode ) ;",
            "score": 99.44732055664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LOCAL , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.4281005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "node = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getFirstChild( ) ) ; } }",
            "score": 99.42435709635417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL First CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node.UNCOND , finallyNode ) ;",
            "score": 99.41738059303977,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "children.createEdge( fromNode , Branch.UNCOND , true ) ; }",
            "score": 99.40269165039062,
            "correctness": "uncompilable",
            "tokenized_patch": "children . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.35037392064145,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , cfa ) ; }",
            "score": 99.43469956341912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { if( cfa != null ) {",
            "score": 99.4469353170956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { if ( cfa != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "items.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44470796130952,
            "correctness": "uncompilable",
            "tokenized_patch": "items . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , LT , finallyNode ) ;",
            "score": 99.41704644097223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , LT , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ref.getName( ) ) ;",
            "score": 99.4023193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ref . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LOCAL , finallyNode ) ; }",
            "score": 99.44614955357143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LOCAL , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , finallyNode , cfa ) ;",
            "score": 99.43433837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name ) ;",
            "score": 99.42293875558036,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( ] ) finallyNode ) ;",
            "score": 99.41701788651316,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( ] ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ) ; finally",
            "score": 99.40213623046876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , false ) ; }",
            "score": 99.34979248046875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa ,0) ;",
            "score": 99.43388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getParent( ) ) ; } }",
            "score": 99.42289428710937,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Parent ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , node , true ) ;",
            "score": 99.41631789434524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ,",
            "score": 99.40189615885417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , parent ) ; }",
            "score": 99.39583547491776,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.4456787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "dest.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44424293154762,
            "correctness": "uncompilable",
            "tokenized_patch": "dest . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( next.getNext( ) ) ;",
            "score": 99.42679636101974,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , parent ) ;",
            "score": 99.42261962890625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,0, false ) ;",
            "score": 99.41600399925595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.40155639648438,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND ) ; }",
            "score": 99.39581298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , fromNode , cfa ) ;",
            "score": 99.34901936848958,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cursor.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44538225446429,
            "correctness": "uncompilable",
            "tokenized_patch": "cursor . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break computeFallThrough( node.getLastChild( ) ) ; }",
            "score": 99.43355102539063,
            "correctness": "uncompilable",
            "tokenized_patch": "break compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, finallyNode ) ; }",
            "score": 99.40113589638158,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , id , cfa ) ;",
            "score": 99.34879302978516,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , id , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; } }",
            "score": 99.44526811079545,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally node ) ;",
            "score": 99.42640380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( prefix , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.42060546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( prefix , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -2) ;",
            "score": 99.41444091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -4) ;",
            "score": 99.41444091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -3) ;",
            "score": 99.41444091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -10) ;",
            "score": 99.41444091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , -2008) ;",
            "score": 99.41444091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node.UNCOND ) ) ; }",
            "score": 99.40050659179687,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node . UN@@ COND ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'less than', finallyNode ) ;",
            "score": 99.34873744419643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ' y (if true) and x ', finallyNode ) ;",
            "score": 99.34873744419643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'greater than', finallyNode ) ;",
            "score": 99.34873744419643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'before', finallyNode ) ;",
            "score": 99.34873744419643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'Not reachable', finallyNode ) ;",
            "score": 99.34873744419643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , null , cfa ) ; }",
            "score": 99.43245239257813,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , null , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.4261410361842,
            "correctness": "uncompilable",
            "tokenized_patch": "try { compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3957290649414,
            "correctness": "uncompilable",
            "tokenized_patch": "next = create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( endNode , parent , cfa ) ;",
            "score": 99.34838104248047,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( end CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , line ) ; }",
            "score": 99.41946411132812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , line ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'less than') ; }",
            "score": 99.34827378216912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ' y (if true) and x ') ; }",
            "score": 99.34827378216912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'greater than') ; }",
            "score": 99.34827378216912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'before') ; }",
            "score": 99.34827378216912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , 'Not reachable') ; }",
            "score": 99.34827378216912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( id , Branch.UNCOND , finallyNode ) ;",
            "score": 99.41938862047698,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( id , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "lock.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.34794616699219,
            "correctness": "uncompilable",
            "tokenized_patch": "lock . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.getNext( ) ) ;",
            "score": 99.4439208984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , true ) ;",
            "score": 99.43165989925987,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return super.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39509020353618,
            "correctness": "uncompilable",
            "tokenized_patch": "return super . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , true ) ; }",
            "score": 99.34780704273896,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "style.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44318498883929,
            "correctness": "uncompilable",
            "tokenized_patch": "style . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , parent , cfa ) ;",
            "score": 99.43162706163194,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch( Node ) finallyNode ) ;",
            "score": 99.41302490234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch ( Node ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , fromNode , finallyNode ) ;",
            "score": 99.39967651367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.computeFallThrough( node.getNext( ) ) ;",
            "score": 99.34726969401042,
            "correctness": "uncompilable",
            "tokenized_patch": "this . compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.GT , finallyNode ) ;",
            "score": 99.44400634765626,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . GT , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa ) ; } break ;",
            "score": 99.44360961914063,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.1) ;",
            "score": 99.4430515455163,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,0) ; }",
            "score": 99.43159315321181,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , 0 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, finallyNode ) ; } }",
            "score": 99.41688232421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( startNode , parent , cfa ) ;",
            "score": 99.34715270996094,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( start CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Util.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44302222842262,
            "correctness": "uncompilable",
            "tokenized_patch": "Util . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Branch( finallyNode ) ) ;",
            "score": 99.41296997070313,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Branch ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39410079152961,
            "correctness": "uncompilable",
            "tokenized_patch": "next = return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node fromNode , parent , cfa ) ;",
            "score": 99.34710693359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch ) ; }",
            "score": 99.44303385416667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , ) ;",
            "score": 99.4315185546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; break ; }",
            "score": 99.42415161132813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', Branch.UNCOND ,2) ;",
            "score": 99.4128650483631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', Branch.UNCOND ,2) ;",
            "score": 99.4128650483631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', Branch.UNCOND ,2) ;",
            "score": 99.4128650483631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', Branch.UNCOND ,2) ;",
            "score": 99.4128650483631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', Branch.UNCOND ,2) ;",
            "score": 99.4128650483631,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ref.getParent( ) ) ;",
            "score": 99.3986083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ref . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( nameNode , parent , cfa ) ;",
            "score": 99.39398193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "final return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.34657796223958,
            "correctness": "uncompilable",
            "tokenized_patch": "final return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c. createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44294084821429,
            "correctness": "uncompilable",
            "tokenized_patch": "c@@ . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return cfa ; }",
            "score": 99.44120708264802,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', 'less than', finallyNode ) ;",
            "score": 99.41276245117187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', ' y (if true) and x ', finallyNode ) ;",
            "score": 99.41276245117187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', 'greater than', finallyNode ) ;",
            "score": 99.41276245117187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', 'before', finallyNode ) ;",
            "score": 99.41276245117187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', 'Not reachable', finallyNode ) ;",
            "score": 99.41276245117187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , - -1, finallyNode ) ;",
            "score": 99.3976806640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - - 1 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,0, cfa ) ;",
            "score": 99.34654405381944,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 0 , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.44100791529605,
            "correctness": "uncompilable",
            "tokenized_patch": "Node next = cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.node ) ; } }",
            "score": 99.42349243164062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2,0) ;",
            "score": 99.41192336309524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4,0) ;",
            "score": 99.41192336309524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3,0) ;",
            "score": 99.41192336309524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10,0) ;",
            "score": 99.41192336309524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008,0) ;",
            "score": 99.41192336309524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } else",
            "score": 99.34652370876736,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ;",
            "score": 99.44272682883523,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; return null ;",
            "score": 99.44153442382813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa , finallyNode ) ; }",
            "score": 99.43085327148438,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.INSTANCEOF , finallyNode ) ;",
            "score": 99.41171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . INSTANCEOF , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , true ) ; }",
            "score": 99.34636773003473,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfg.UNCOND , finallyNode ) ;",
            "score": 99.44259207589286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfg . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.42292865953948,
            "correctness": "uncompilable",
            "tokenized_patch": "this . return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ;",
            "score": 99.41148071289062,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , length ) ;",
            "score": 99.34562683105469,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , length ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CONTINUE , finallyNode ) ; }",
            "score": 99.43946475074405,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CONTINUE , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , fromNode , cfa ) ; }",
            "score": 99.43936157226562,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , root ) ; } }",
            "score": 99.42234497070312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , root ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Integer.IN , finallyNode ) ;",
            "score": 99.41103515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Integer . IN , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , finallyNode ) ; }",
            "score": 99.39251708984375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( super.getLastChild( ) ) ;",
            "score": 99.3455810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( super . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next , finallyNode ) ; } }",
            "score": 99.411083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ! finallyNode ) ;",
            "score": 99.4105583639706,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node { cfa.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.39232113486842,
            "correctness": "uncompilable",
            "tokenized_patch": "Node { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.size( ) ) ;",
            "score": 99.34511311848958,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . size ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.44226604959239,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'less than', finallyNode ) ;",
            "score": 99.41079711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.' y (if true) and x ', finallyNode ) ;",
            "score": 99.41079711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'greater than', finallyNode ) ;",
            "score": 99.41079711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'before', finallyNode ) ;",
            "score": 99.41079711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.'Not reachable', finallyNode ) ;",
            "score": 99.41079711914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , this ) ;",
            "score": 99.39657432154605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , index ) ;",
            "score": 99.39226331208882,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , index ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "player.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44224330357143,
            "correctness": "uncompilable",
            "tokenized_patch": "player . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.LENGTH , finallyNode ) ;",
            "score": 99.4390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . LENGTH , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { break ; }",
            "score": 99.43865288628473,
            "correctness": "wrong",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { break ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "{ return computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.42998303865132,
            "correctness": "wrong",
            "tokenized_patch": "{ return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ) ; } } }",
            "score": 99.42120002297794,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! createEdge( fromNode , Branch.UNCOND , finallyNode ) )",
            "score": 99.40959028764205,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.39218621504934,
            "correctness": "uncompilable",
            "tokenized_patch": "break compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } *",
            "score": 99.34482150607639,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } *",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "value.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4421154203869,
            "correctness": "uncompilable",
            "tokenized_patch": "value . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next , parent , cfa ) ;",
            "score": 99.4299560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa , ) ;",
            "score": 99.42080849095395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , finallyNode ) ; }",
            "score": 99.41007915296052,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , callback ) ;",
            "score": 99.40945595189145,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , callback ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , false ) ;",
            "score": 99.39643859863281,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node( fromNode ,",
            "score": 99.3426513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Iterator.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44205729166667,
            "correctness": "uncompilable",
            "tokenized_patch": "Iterator . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2,1) ;",
            "score": 99.40941220238095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4,1) ;",
            "score": 99.40941220238095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3,1) ;",
            "score": 99.40941220238095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10,1) ;",
            "score": 99.40941220238095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008,1) ;",
            "score": 99.40941220238095,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root , finallyNode ) ; }",
            "score": 99.39617598684211,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "handler.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.34208679199219,
            "correctness": "uncompilable",
            "tokenized_patch": "handler . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.PARAMETER , finallyNode ) ;",
            "score": 99.44190063476563,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . PARAMETER , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ! fromNode ) ;",
            "score": 99.40925867417279,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent.getRoot( ) ) ;",
            "score": 99.4089111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent . get CaMeL Root ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( finallyNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.39597778320312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( finally CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , cfa ) ; } }",
            "score": 99.34180365668402,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.contains( finallyNode ) ) ;",
            "score": 99.44185965401786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . contains ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EQ , finallyNode ) ; }",
            "score": 99.43710472470238,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EQ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , fromNode , parent , cfa ) ; }",
            "score": 99.42877807617188,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , finallyNode , false ) ;",
            "score": 99.40906982421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , exp.getParent( ) ) ;",
            "score": 99.395947265625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , exp . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , mode ) ;",
            "score": 99.34164428710938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , mode ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44161551339286,
            "correctness": "uncompilable",
            "tokenized_patch": "sa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CONTINUE , finallyNode ) ;",
            "score": 99.43685302734374,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CONTINUE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getParent( ) ) ; } }",
            "score": 99.40863037109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Parent ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.39591899671052,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , 'less than') ;",
            "score": 99.39178788034539,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , ' y (if true) and x ') ;",
            "score": 99.39178788034539,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , 'greater than') ;",
            "score": 99.39178788034539,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , 'before') ;",
            "score": 99.39178788034539,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , 'Not reachable') ;",
            "score": 99.39178788034539,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.341552734375,
            "correctness": "uncompilable",
            "tokenized_patch": "super . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { if( finallyNode != null ) { throw",
            "score": 99.43682250976562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { if ( finally CaMeL Node != null ) { throw",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null ) ; } }",
            "score": 99.42032877604167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , line ) ;",
            "score": 99.40839586759868,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , line ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , key , cfa ) ;",
            "score": 99.34132385253906,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , key , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( ) ; }",
            "score": 99.43638700597427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ,1) ;",
            "score": 99.42812628495066,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , fromNode , parent , cfa ) ; }",
            "score": 99.41898386101974,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target , finallyNode ) ; }",
            "score": 99.40818385074013,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , endNode , cfa ) ;",
            "score": 99.34117296006944,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.WITH , finallyNode ) ; }",
            "score": 99.43593052455357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . WITH , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , parent , cfa ) ;",
            "score": 99.42803344726562,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.init( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.40816650390624,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . init ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode ) ; finally",
            "score": 99.4079922762784,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , false ) ;",
            "score": 99.3944320678711,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,1) ; }",
            "score": 99.34090847439236,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.getNode( ) ) ;",
            "score": 99.44070434570312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFallThrough( parent.getLastChild( ) ) ;",
            "score": 99.43590087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CATCH , finallyNode ) ;",
            "score": 99.42803344726562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CATCH , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , name ) ;",
            "score": 99.407470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , name ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.39395751953126,
            "correctness": "uncompilable",
            "tokenized_patch": "break create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent.getFirstChild( ) ) ;",
            "score": 99.39096551192434,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "node.computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.34070502387152,
            "correctness": "uncompilable",
            "tokenized_patch": "node . compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { try { cfa.createEdge( ) ; }",
            "score": 99.43565150669643,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { try { cfa . create CaMeL Edge ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "inst = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.42777506510417,
            "correctness": "uncompilable",
            "tokenized_patch": "inst = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , source.getParent( ) ) ;",
            "score": 99.39390258789062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , source . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.node , cfa ) ;",
            "score": 99.34043375651042,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "SVNURL.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.44039481026786,
            "correctness": "uncompilable",
            "tokenized_patch": "SVNURL . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , end.UNCOND , finallyNode ) ;",
            "score": 99.43551199776786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getParent( ) ) ;",
            "score": 99.43530991498162,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "computeFallThrough( parent.getLastChild( ) , cfa ) ;",
            "score": 99.42776489257812,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,1,0) ;",
            "score": 99.40752883184524,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'less than') ;",
            "score": 99.405859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( ' y (if true) and x ') ;",
            "score": 99.405859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'greater than') ;",
            "score": 99.405859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'before') ;",
            "score": 99.405859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'Not reachable') ;",
            "score": 99.405859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , insert.getName( ) ) ;",
            "score": 99.39368286132813,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , insert . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Runnable.UNCOND , finallyNode ) ;",
            "score": 99.44022042410714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Runnable . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally ) ;",
            "score": 99.4073550575658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Catch : return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39081774259868,
            "correctness": "wrong",
            "tokenized_patch": "Catch : return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa , null ) ;",
            "score": 99.33953179253473,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , { fromNode ; }",
            "score": 99.44008567116477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , { from CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( addNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4352794828869,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( add CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( root.getLastChild( ) ) ;",
            "score": 99.41735161675348,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( root . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "prev.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.33915710449219,
            "correctness": "uncompilable",
            "tokenized_patch": "prev . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( parent.getNext( ) ) ; }",
            "score": 99.42749741498162,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getNext( ) ) ; } } }",
            "score": 99.41732788085938,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , startNode ) ;",
            "score": 99.40440368652344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , start CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ) ; ;",
            "score": 99.3927001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND1) ;",
            "score": 99.39055040147569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , n ) ;",
            "score": 99.33885362413194,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , n ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "wizard.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43997628348214,
            "correctness": "uncompilable",
            "tokenized_patch": "wizard . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( fromNode , parent , cfa , cfa ) ;",
            "score": 99.42738647460938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.41699829101563,
            "correctness": "uncompilable",
            "tokenized_patch": "state . return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', Branch.UNCOND , false ) ;",
            "score": 99.40687779017857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', Branch.UNCOND , false ) ;",
            "score": 99.40687779017857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', Branch.UNCOND , false ) ;",
            "score": 99.40687779017857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', Branch.UNCOND , false ) ;",
            "score": 99.40687779017857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', Branch.UNCOND , false ) ;",
            "score": 99.40687779017857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getNext( ) ) ; } }",
            "score": 99.40435112847223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch [ UNCOND ] ) ;",
            "score": 99.39255099826389,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch [ UN@@ COND ] ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa , false ) ; }",
            "score": 99.38993755139802,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa + false ) ;",
            "score": 99.33849419487848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa + false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "main.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43973214285714,
            "correctness": "uncompilable",
            "tokenized_patch": "main . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) )",
            "score": 99.43366350446429,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.getLastChild( ).getNext( ) ; }",
            "score": 99.42731391059027,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . get CaMeL Last CaMeL Child ( ) . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.416943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ).",
            "score": 99.40601748511905,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) .",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target ) ; } }",
            "score": 99.4042739868164,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.3919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false ) ; }",
            "score": 99.38955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43972911005434,
            "correctness": "uncompilable",
            "tokenized_patch": "assert cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , false , false ) ;",
            "score": 99.41693115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , false , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , prefix , finallyNode ) ;",
            "score": 99.406005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , prefix , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , value ) ;",
            "score": 99.40389854029605,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , n ) ; }",
            "score": 99.39144897460938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , n ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , cfa ) ;",
            "score": 99.43336397058823,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( next.getLastChild( ) ) ; } }",
            "score": 99.426416015625,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( next . get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ) ) ; }",
            "score": 99.41580020680146,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.39113255550987,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false , false ) ;",
            "score": 99.38946533203125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , source , cfa ) ; }",
            "score": 99.33790498621323,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , source , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , Branch.NONE ) ;",
            "score": 99.43958100818452,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , Branch . NONE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "addNode( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43345336914062,
            "correctness": "uncompilable",
            "tokenized_patch": "add CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , type ) ; }",
            "score": 99.4030517578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , type ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.39053165211396,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , size ) ; }",
            "score": 99.43219604492188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , size ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , parent , cfa ) ;",
            "score": 99.4261474609375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , id , finallyNode ) ;",
            "score": 99.40546332465277,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , id , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,",
            "score": 99.3885498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , cfa , finallyNode ) ;",
            "score": 99.38854302300348,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,2) ; }",
            "score": 99.33751085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,4) ; }",
            "score": 99.33751085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,3) ; }",
            "score": 99.33751085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,10) ; }",
            "score": 99.33751085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,2008) ; }",
            "score": 99.33751085069444,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "filter.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43946475074405,
            "correctness": "uncompilable",
            "tokenized_patch": "filter . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , parent , cfa ) ; } }",
            "score": 99.42599969161184,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent ) ; }",
            "score": 99.41460822610294,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2, null ) ;",
            "score": 99.40483165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,4, null ) ;",
            "score": 99.40483165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,3, null ) ;",
            "score": 99.40483165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,10, null ) ;",
            "score": 99.40483165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,2008, null ) ;",
            "score": 99.40483165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getName( ) ) ;",
            "score": 99.38829040527344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.println( fromNode.getLastChild( ) ) ;",
            "score": 99.33740912543402,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . println ( from CaMeL Node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38829210069444,
            "correctness": "uncompilable",
            "tokenized_patch": "return return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.33734130859375,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.43202514648438,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode ) ; }",
            "score": 99.4311459189967,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND , cfa ) ;",
            "score": 99.41363204152961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node ) ; } }",
            "score": 99.40186309814453,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node } return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38792660361842,
            "correctness": "uncompilable",
            "tokenized_patch": "Node } return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3371223000919,
            "correctness": "uncompilable",
            "tokenized_patch": "} cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( root.getLastChild( ) ) ; }",
            "score": 99.41179456208882,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( root . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', Branch.UNCOND , true ) ;",
            "score": 99.40351795014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', Branch.UNCOND , true ) ;",
            "score": 99.40351795014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', Branch.UNCOND , true ) ;",
            "score": 99.40351795014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', Branch.UNCOND , true ) ;",
            "score": 99.40351795014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', Branch.UNCOND , true ) ;",
            "score": 99.40351795014881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( fromNode ) ) ; }",
            "score": 99.40183512369792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( from CaMeL Node ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.38432760799633,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.next( ) ) ;",
            "score": 99.33680555555556,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , parent , cfa ) ; } }",
            "score": 99.41145155164931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.38404605263158,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode.getNext( ) ) ; }",
            "score": 99.43152465820313,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( src , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.42931518554687,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( src , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.42520944695724,
            "correctness": "uncompilable",
            "tokenized_patch": "assert compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , cfa , null ) ;",
            "score": 99.41145155164931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( fromNode , ) ;",
            "score": 99.40198974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( from CaMeL Node , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , fromNode , parent , cfa ) ;",
            "score": 99.38680013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.33554256663604,
            "correctness": "uncompilable",
            "tokenized_patch": "this . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null ,0, finallyNode ) ;",
            "score": 99.40192260742188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , 0 , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , finallyNode ) ; }",
            "score": 99.40078895970395,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , finallyNode ) ;",
            "score": 99.38667377672698,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Node.UNCOND , finallyNode ) ;",
            "score": 99.3835513466283,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,",
            "score": 99.33533653846153,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "item.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43867631392045,
            "correctness": "uncompilable",
            "tokenized_patch": "item . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getLastChild( ) , parent ) ;",
            "score": 99.43092041015625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.428662109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node = computeFallThrough( node.getNext( ) ) ;",
            "score": 99.41056315104167,
            "correctness": "wrong",
            "tokenized_patch": "node = compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , node ) ;",
            "score": 99.40042114257812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa , this ) ;",
            "score": 99.38652600740132,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , capacity , finallyNode ) ;",
            "score": 99.38347032335069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , capacity , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ==",
            "score": 99.43859281994048,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ==",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge next = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.43022075452302,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( parent.getNext( ) ) ; }",
            "score": 99.42380777994792,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNext( ) , cfa ) ;",
            "score": 99.41013590494792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode ) ; finally",
            "score": 99.40176391601562,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( prefix , Branch.UNCOND , finallyNode ) ;",
            "score": 99.40029425370066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( prefix , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , n , finallyNode ) ;",
            "score": 99.38227674696181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , n , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38621610753677,
            "correctness": "uncompilable",
            "tokenized_patch": "! compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cr.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43826729910714,
            "correctness": "uncompilable",
            "tokenized_patch": "cr . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , cfa , cfa ) ; }",
            "score": 99.42955186631944,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNode( ) ) ; } }",
            "score": 99.42724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Node ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNext( ) , cfa ) ; }",
            "score": 99.40995065789474,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Next ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.38206722861842,
            "correctness": "uncompilable",
            "tokenized_patch": "this . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ! true ) ;",
            "score": 99.33470961626838,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ! true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , mode ) ;",
            "score": 99.43818102384868,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , mode ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Ref( finallyNode ) ) ;",
            "score": 99.40138549804688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Ref ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target.getFirstChild( ) ) ; }",
            "score": 99.39889365748355,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode ) ; }",
            "score": 99.38180202907986,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "root.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.33460235595703,
            "correctness": "uncompilable",
            "tokenized_patch": "root . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "l. createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43810453869048,
            "correctness": "uncompilable",
            "tokenized_patch": "l@@ . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,2) ;",
            "score": 99.4294792624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,4) ;",
            "score": 99.4294792624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,3) ;",
            "score": 99.4294792624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,10) ;",
            "score": 99.4294792624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,2008) ;",
            "score": 99.4294792624081,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.OR , finallyNode ) ;",
            "score": 99.42445068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . OR , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getFirstChild( ) == node ) {",
            "score": 99.4097671508789,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL First CaMeL Child ( ) == node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.pop( ) ) ;",
            "score": 99.40121799045139,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . pop ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , endNode ) ; } }",
            "score": 99.39862738715277,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , parameters ) ;",
            "score": 99.38579358552632,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parameters ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createScope( fromNode , parent , cfa ) ;",
            "score": 99.33455657958984,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Scope ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CASE , finallyNode ) ;",
            "score": 99.42426147460938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CASE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ; ;",
            "score": 99.40027965198864,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode = Branch.UNCOND ;",
            "score": 99.39645867598684,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node = Branch . UN@@ COND ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , UNCOND , finallyNode ) ; }",
            "score": 99.37994384765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( node.getNext( ) ) ; }",
            "score": 99.3343505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.target ) ;",
            "score": 99.43803074048913,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "m = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.42772759331598,
            "correctness": "uncompilable",
            "tokenized_patch": "m = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ,1) ;",
            "score": 99.42272231158088,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.40910259046052,
            "correctness": "uncompilable",
            "tokenized_patch": "state . return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( index , Branch.UNCOND , finallyNode ) ;",
            "score": 99.39985094572368,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( index , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "names.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3343276977539,
            "correctness": "uncompilable",
            "tokenized_patch": "names . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.2, finallyNode ) ; }",
            "score": 99.43797665550595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.4, finallyNode ) ; }",
            "score": 99.43797665550595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.3, finallyNode ) ; }",
            "score": 99.43797665550595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.10, finallyNode ) ; }",
            "score": 99.43797665550595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.2008, finallyNode ) ; }",
            "score": 99.43797665550595,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . $NUMBER$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this ) ; }",
            "score": 99.3955810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.37935598273026,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "file.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43794177827381,
            "correctness": "uncompilable",
            "tokenized_patch": "file . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , node , cfa ) ;",
            "score": 99.4267937155331,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , node , cfa ) ; }",
            "score": 99.42190890842014,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "dim.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ;",
            "score": 99.39873712713069,
            "correctness": "uncompilable",
            "tokenized_patch": "dim . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next ) ; }",
            "score": 99.39554036458334,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ADD , finallyNode ) ;",
            "score": 99.37935384114583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ADD , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , parent , cfa , cfa ) ;",
            "score": 99.42073139391448,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.finallyMap.get( parent ) == node ) {",
            "score": 99.4076286764706,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . finally CaMeL Map . get ( parent ) == node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getFirstChild( ) ) ;",
            "score": 99.3953857421875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode finallyNode ) ;",
            "score": 99.37742213199013,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getNode( ) ) ;",
            "score": 99.33384874131944,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , environment.UNCOND , finallyNode ) ;",
            "score": 99.4375232514881,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , environment . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; cfa.createEdge( ) ; } }",
            "score": 99.4228451377467,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , addNode ) ; }",
            "score": 99.39515596277573,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , add CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( ) , parent , cfa ) ;",
            "score": 99.38328043619792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( ) , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( node ) ; }",
            "score": 99.37734646267361,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.33287048339844,
            "correctness": "wrong",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "cfa.createEdge( fromNode , | Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , | Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.createEdge( fromNode , Branch.UNCOND ) ) {",
            "score": 99.42256469726563,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | finallyNode ) ; ;",
            "score": 99.3984707919034,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , id , finallyNode ) ; }",
            "score": 99.39446057771382,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , id , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND ,1) ;",
            "score": 99.38288317228618,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND , parent ) ;",
            "score": 99.37678608141448,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.33228257123162,
            "correctness": "uncompilable",
            "tokenized_patch": "Node cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , root , cfa ) ;",
            "score": 99.41989617598684,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , root , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND ,",
            "score": 99.4069595336914,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getParent( ) ) ; }",
            "score": 99.39417788856908,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , finallyNode ) ; }",
            "score": 99.37665758634868,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , parent , cfa ) ;",
            "score": 99.33201381138393,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "xpath.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4372791108631,
            "correctness": "uncompilable",
            "tokenized_patch": "xpath . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.COLON , finallyNode ) ;",
            "score": 99.42212524414063,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . COLON , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( key , Branch.UNCOND , finallyNode ) ;",
            "score": 99.39775005139802,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( key , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ok.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43713960193452,
            "correctness": "uncompilable",
            "tokenized_patch": "ok . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , this ) ;",
            "score": 99.39690551757812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index , finallyNode ) ;",
            "score": 99.39289008246527,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Object [ ] { finallyNode",
            "score": 99.37630422491776,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Object [ ] { finally CaMeL Node",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Utilities.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.33103942871094,
            "correctness": "uncompilable",
            "tokenized_patch": "Utilities . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": ".createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43712158203125,
            "correctness": "uncompilable",
            "tokenized_patch": ". create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finally ) ; }",
            "score": 99.42125244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index ) ; }",
            "score": 99.39081217447917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , true ) ;",
            "score": 99.37574005126953,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , n ) ; }",
            "score": 99.33035098805146,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , n ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(( Node , Branch.UNCOND , finallyNode ) ) ;",
            "score": 99.436767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ( Node , Branch . UN@@ COND , finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , parent , cfa ) ; }",
            "score": 99.41900956003289,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa.createEdge( fromNode ) ;",
            "score": 99.39627878289474,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , parent , cfa ) ;",
            "score": 99.38216824001736,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.length ) ;",
            "score": 99.3302001953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . length ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "runnable.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43670944940476,
            "correctness": "uncompilable",
            "tokenized_patch": "runnable . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { if( finallyNode == null ) {",
            "score": 99.4205258018092,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { if ( finally CaMeL Node == null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.41887464021382,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, finallyNode , false ) ;",
            "score": 99.39617919921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , finally CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode = cfa.finallyMap.get( parent ) ;",
            "score": 99.38200940583882,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node = cfa . finally CaMeL Map . get ( parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode ) ; }",
            "score": 99.37499281939338,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Util.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.32998477711396,
            "correctness": "uncompilable",
            "tokenized_patch": "Util . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , finallyNode ) ;",
            "score": 99.423095703125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa.createEdge( ) ; } }",
            "score": 99.42028198242187,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ref , Branch.UNCOND , finallyNode ) ;",
            "score": 99.39593184621711,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ref , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.init( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.38721988075658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . init ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ) ; }",
            "score": 99.38113606770834,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , true ) ;",
            "score": 99.374267578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "context.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32977294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "context . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).createEdge( fromNode , parent , cfa ) ;",
            "score": 99.42241753472223,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , finallyNode ) ; } }",
            "score": 99.41971435546876,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node , parent , cfa ) ;",
            "score": 99.41861300998264,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND |0) ;",
            "score": 99.38108424136513,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( fromNode , parent , cfa ) ; }",
            "score": 99.42184287623355,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', finallyNode , null ) ;",
            "score": 99.39511108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode , null ) ;",
            "score": 99.39511108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', finallyNode , null ) ;",
            "score": 99.39511108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', finallyNode , null ) ;",
            "score": 99.39511108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', finallyNode , null ) ;",
            "score": 99.39511108398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'less than') ;",
            "score": 99.3847900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( ' y (if true) and x ') ;",
            "score": 99.3847900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'greater than') ;",
            "score": 99.3847900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'before') ;",
            "score": 99.3847900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Error( 'Not reachable') ;",
            "score": 99.3847900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , Branch.UNCOND , true ) ;",
            "score": 99.37275133634868,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target , cfa ) ; }",
            "score": 99.32861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.finallyMap.get( parent ) == null ) {",
            "score": 99.40436150045956,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . finally CaMeL Map . get ( parent ) == null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.38100714432566,
            "correctness": "uncompilable",
            "tokenized_patch": "break compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode.getName( ) ) ;",
            "score": 99.37216525607639,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node . get CaMeL Name ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.) ;",
            "score": 99.32848403033088,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "closed.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43608165922619,
            "correctness": "uncompilable",
            "tokenized_patch": "closed . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.40365261501736,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , node ) ;",
            "score": 99.37199964021382,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.32829733455883,
            "correctness": "uncompilable",
            "tokenized_patch": "continue compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , UNCOND , finallyNode ) ;",
            "score": 99.43600027901786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa , root ) ;",
            "score": 99.42115542763158,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.pop( ) ) ; }",
            "score": 99.41647820723684,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . pop ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , 'less than') ;",
            "score": 99.3944091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , ' y (if true) and x ') ;",
            "score": 99.3944091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , 'greater than') ;",
            "score": 99.3944091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , 'before') ;",
            "score": 99.3944091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode , 'Not reachable') ;",
            "score": 99.3944091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , false ) ; }",
            "score": 99.38315716911765,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.3802849264706,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , finallyNode ) ;",
            "score": 99.37152971540179,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "it.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32732391357422,
            "correctness": "uncompilable",
            "tokenized_patch": "it . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "log.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43589564732143,
            "correctness": "uncompilable",
            "tokenized_patch": "log . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , root , cfa ) ; }",
            "score": 99.41807154605263,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , root , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( finallyNode == null ) {",
            "score": 99.41606588924633,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( finally CaMeL Node == null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , input ) ;",
            "score": 99.39419073807566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , input ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( ) , cfa ) ;",
            "score": 99.37974548339844,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true ) ; }",
            "score": 99.3715087890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rc.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43560500372024,
            "correctness": "uncompilable",
            "tokenized_patch": "rc . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node next = computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.420166015625,
            "correctness": "uncompilable",
            "tokenized_patch": "Node next = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent ,0) ;",
            "score": 99.41759575737848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , true ) ; }",
            "score": 99.38144402754934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , true , cfa ) ;",
            "score": 99.37973361545139,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , true , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( node.getNext( ) ) ; } }",
            "score": 99.4174868935033,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ref ) ;",
            "score": 99.39345831620066,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ref ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Iterator ) finallyNode ) ;",
            "score": 99.37127364309211,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Iterator ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sb.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32485961914062,
            "correctness": "uncompilable",
            "tokenized_patch": "sb . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( fromNode , cfa ) ;",
            "score": 99.4197639016544,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return computeFallThrough( node.getNext( ) ) ; }",
            "score": 99.41744834498355,
            "correctness": "wrong",
            "tokenized_patch": "{ return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "if( ! cfa.createEdge( fromNode , Branch.UNCOND ) )",
            "score": 99.41448974609375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Integer.UNCOND , finallyNode ) ; ;",
            "score": 99.39274458451705,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Integer . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , fromNode ) ;",
            "score": 99.37931993272569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , capacity , finallyNode ) ; }",
            "score": 99.37105520148026,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , capacity , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "null.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32470703125,
            "correctness": "uncompilable",
            "tokenized_patch": "null . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , switch.UNCOND , finallyNode ) ;",
            "score": 99.43501209077381,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , switch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element , cfa ) ; }",
            "score": 99.41738712086396,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch ) ; } }",
            "score": 99.4141845703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.visit , finallyNode ) ;",
            "score": 99.39266357421874,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . visit , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , type , finallyNode ) ; }",
            "score": 99.38053813733552,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , type , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , children ) ;",
            "score": 99.32455444335938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , children ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND *finallyNode ) ;",
            "score": 99.43497721354167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND * finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; ; }",
            "score": 99.41412032277961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.type , finallyNode ) ;",
            "score": 99.39149169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . type , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.interrupt( ) ; } }",
            "score": 99.37983703613281,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . interrupt ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , size ) ;",
            "score": 99.32415771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , size ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( cfa.fromNode , parent , cfa ) ;",
            "score": 99.4195556640625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( cfa . from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastChild( ) ) ; } }",
            "score": 99.37848578559027,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Child ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "manager.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32354736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "manager . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( createEdge( fromNode , parent , cfa ) ) ;",
            "score": 99.4193115234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( create CaMeL Edge ( from CaMeL Node , parent , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ; finallyNode )",
            "score": 99.41310424804688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; finally CaMeL Node )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39973530016448,
            "correctness": "uncompilable",
            "tokenized_patch": "state . return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; ;",
            "score": 99.39070268110795,
            "correctness": "uncompilable",
            "tokenized_patch": "this . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.37875848067434,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'less than') ; }",
            "score": 99.37844848632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( ' y (if true) and x ') ; }",
            "score": 99.37844848632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'greater than') ; }",
            "score": 99.37844848632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'before') ; }",
            "score": 99.37844848632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { throw new Exception( 'Not reachable') ; }",
            "score": 99.37844848632812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { throw new Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , null ) ;",
            "score": 99.36905924479167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , id ) ;",
            "score": 99.32341766357422,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , id ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "strbuff.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43489213423295,
            "correctness": "uncompilable",
            "tokenized_patch": "strbuff . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return fromNode.getNext( ).getNext( ) ; }",
            "score": 99.415771484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return from CaMeL Node . get CaMeL Next ( ) . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getNext( ) ) ; }",
            "score": 99.41253983347039,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? false : finallyNode ) ;",
            "score": 99.390673828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? false : finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "endNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.37831517269737,
            "correctness": "uncompilable",
            "tokenized_patch": "end CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , list ) ; }",
            "score": 99.32328527113971,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , list ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "sheet.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4345470610119,
            "correctness": "uncompilable",
            "tokenized_patch": "sheet . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa , finallyNode ) ;",
            "score": 99.41910593133224,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa , cfa ) ; }",
            "score": 99.41570723684211,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa.createEdge( ) ) {",
            "score": 99.41230211759868,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa . create CaMeL Edge ( ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } continue ;",
            "score": 99.39872661389802,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } continue ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , callNode ) ;",
            "score": 99.39010620117188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , call CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , cfa.root ) ;",
            "score": 99.37782046669408,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa . root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true ,",
            "score": 99.36815049913194,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , options ) ;",
            "score": 99.32271575927734,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , options ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; } */",
            "score": 99.3985531455592,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } * /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , finallyNode , true ) ;",
            "score": 99.38905029296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.36762438322368,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode ,",
            "score": 99.32266438802084,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Reference.UNCOND , finallyNode ) ; }",
            "score": 99.43443714488636,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Reference . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( cfa , Branch.UNCOND , finallyNode ) ;",
            "score": 99.38881964432566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( cfa , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , LT , finallyNode ) ; }",
            "score": 99.36760510896382,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , LT , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( createNode , parent , cfa ) ; }",
            "score": 99.32216509650735,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( create CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "b.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43439592633929,
            "correctness": "uncompilable",
            "tokenized_patch": "b . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , cfa ) ; }",
            "score": 99.4147087545956,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "expr = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.39849853515625,
            "correctness": "uncompilable",
            "tokenized_patch": "expr = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, fromNode ) ;",
            "score": 99.38881429036458,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node , parent , cfa ) ;",
            "score": 99.3210205078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "STATEMENT.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4343029203869,
            "correctness": "uncompilable",
            "tokenized_patch": "STATEMENT . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , cfa ) ; } }",
            "score": 99.41810607910156,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : parent.getLastChild( ) ) {",
            "score": 99.41455078125,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : parent . get CaMeL Last CaMeL Child ( ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null && NodeUtil.hasFinally( parent ) ) {",
            "score": 99.39751876027961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null && Node CaMeL Util . has CaMeL Finally ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , module ) ;",
            "score": 99.3761050575658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , module ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch( finallyNode ) ) ;",
            "score": 99.36687268708882,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch ( finally CaMeL Node ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ,1) ;",
            "score": 99.32083129882812,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.41426809210526,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa.finallyMap.get( parent ) ) {",
            "score": 99.39729817708333,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa . finally CaMeL Map . get ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( } , Branch.UNCOND , finallyNode ) ;",
            "score": 99.37472373560855,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( } , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , count , finallyNode ) ;",
            "score": 99.36668565538194,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , count , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.32037353515625,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "input.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43418666294643,
            "correctness": "uncompilable",
            "tokenized_patch": "input . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , parent , cfa ) ;",
            "score": 99.41783796037946,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa , ) ;",
            "score": 99.41421669407895,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL , true ) ; }",
            "score": 99.40792686060855,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , fromNode ) ;",
            "score": 99.38837348090277,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.insert( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.37424830386513,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . insert ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "control.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43409365699405,
            "correctness": "uncompilable",
            "tokenized_patch": "control . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.41719777960526,
            "correctness": "uncompilable",
            "tokenized_patch": "! compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.cfa ) ;",
            "score": 99.41380550986842,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.4072265625,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , UNCOND ) ; } }",
            "score": 99.39693410773026,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , UN@@ COND ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.37542724609375,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , length ) ;",
            "score": 99.37379214638158,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , length ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Token.UNCOND , true ) ;",
            "score": 99.36647435238487,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Token . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent , cfa ) ; }",
            "score": 99.31858607700893,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node , fromNode , parent , cfa ) ;",
            "score": 99.41356136924342,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'less than') ;",
            "score": 99.38764105902777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , ' y (if true) and x ') ;",
            "score": 99.38764105902777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'greater than') ;",
            "score": 99.38764105902777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'before') ;",
            "score": 99.38764105902777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , 'Not reachable') ;",
            "score": 99.38764105902777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) cfa.createEdge( node ) ;",
            "score": 99.36612277560764,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) cfa . create CaMeL Edge ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent , cfa ) ;",
            "score": 99.31849161783855,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa.createEdge( ) ; }",
            "score": 99.40370579769737,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa . create CaMeL Edge ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.39611138237848,
            "correctness": "uncompilable",
            "tokenized_patch": "} return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return computeFallThrough( next ) ;",
            "score": 99.37527126736111,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return compute CaMeL Fall CaMeL Through ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) { return cfa ;",
            "score": 99.40357801649306,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) { return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , null , null ) ;",
            "score": 99.39580620659723,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , null , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, finallyNode , true ) ;",
            "score": 99.38678588867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , finally CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31817267922794,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.class ) ; }",
            "score": 99.40342084099265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . class ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.class ) ;",
            "score": 99.38652801513672,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . class ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent ) ;",
            "score": 99.375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , addNode ) ;",
            "score": 99.37330627441406,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , add CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.36398797286184,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , l ) ;",
            "score": 99.31797790527344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , l ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Outline.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43338448660714,
            "correctness": "uncompilable",
            "tokenized_patch": "Outline . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new : fromNode , parent , cfa ) ;",
            "score": 99.41582573784723,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new : from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL , null ) ; }",
            "score": 99.3990478515625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node finallyNode ) ;",
            "score": 99.38642713758681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -1) ;",
            "score": 99.363623046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , node ) ; }",
            "score": 99.31772748161765,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rep.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4333728608631,
            "correctness": "uncompilable",
            "tokenized_patch": "rep . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa.parent ) ;",
            "score": 99.41573293585526,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa . parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode ;",
            "score": 99.38635971966912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , ) ; }",
            "score": 99.36332622327302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "root.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.31657140395221,
            "correctness": "uncompilable",
            "tokenized_patch": "root . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "vb.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43326822916667,
            "correctness": "uncompilable",
            "tokenized_patch": "vb . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , -1) ;",
            "score": 99.41075942095588,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , - 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getFirstChild( ) ) ;",
            "score": 99.39631483289931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.39410041360294,
            "correctness": "uncompilable",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.38635932074652,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , length , finallyNode ) ; }",
            "score": 99.37120297080592,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , length , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ) ; ; }",
            "score": 99.36328803168402,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ;",
            "score": 99.31615397135417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "self.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4332275390625,
            "correctness": "uncompilable",
            "tokenized_patch": "self . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , cfa , cfa ) ; }",
            "score": 99.41444905598958,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue computeFallThrough( node.getLastChild( ) ) ;",
            "score": 99.41072162828948,
            "correctness": "uncompilable",
            "tokenized_patch": "continue compute CaMeL Fall CaMeL Through ( node . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; cfa.createEdge( ) ; }",
            "score": 99.39626057942708,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; cfa . create CaMeL Edge ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.next ) ;",
            "score": 99.39055040147569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , fromNode ) ;",
            "score": 99.38604736328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getParent( ) ) ;",
            "score": 99.37157485064338,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode ) ;",
            "score": 99.36954752604167,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'less than', fromNode , cfa ) ;",
            "score": 99.31596374511719,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ' y (if true) and x ', fromNode , cfa ) ;",
            "score": 99.31596374511719,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'greater than', fromNode , cfa ) ;",
            "score": 99.31596374511719,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'before', fromNode , cfa ) ;",
            "score": 99.31596374511719,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'Not reachable', fromNode , cfa ) ;",
            "score": 99.31596374511719,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , cfa ) ; } else",
            "score": 99.41409462376645,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; } else",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE ) ; } }",
            "score": 99.39622667100694,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "loop.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.38995720358456,
            "correctness": "uncompilable",
            "tokenized_patch": "loop . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , null ) ;",
            "score": 99.38536071777344,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , null ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "2"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND | null ) ;",
            "score": 99.37132504111842,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) ) ; } }",
            "score": 99.36942291259766,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node.UNCOND ) ; }",
            "score": 99.36313990542763,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Handler.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31538391113281,
            "correctness": "uncompilable",
            "tokenized_patch": "Handler . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Proxy.UNCOND , finallyNode ) ; }",
            "score": 99.4330721768466,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Proxy . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.finallyMap.get( parent ) != null ) {",
            "score": 99.3891960592831,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . finally CaMeL Map . get ( parent ) != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Iterator.UNCOND , true ) ;",
            "score": 99.36278011924342,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Iterator . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ).}",
            "score": 99.31537942325367,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) . }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , false ) ;",
            "score": 99.40915398848684,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target.getLastChild( ) ) ; }",
            "score": 99.39487818667763,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38919406467014,
            "correctness": "uncompilable",
            "tokenized_patch": "n = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.38483344184027,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.36249457465277,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "t.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31526184082031,
            "correctness": "uncompilable",
            "tokenized_patch": "t . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND , finallyNode ) ; break ;",
            "score": 99.4328082540761,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL ) ; } }",
            "score": 99.39463975694444,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name ) ; } }",
            "score": 99.36772918701172,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ,2) ;",
            "score": 99.31455993652344,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ,4) ;",
            "score": 99.31455993652344,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ,3) ;",
            "score": 99.31455993652344,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ,10) ;",
            "score": 99.31455993652344,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ,2008) ;",
            "score": 99.31455993652344,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.hasFinally( parent ) ) { return parent ;",
            "score": 99.41280324835526,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . has CaMeL Finally ( parent ) ) { return parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == Branch.UNCOND , finallyNode ) {",
            "score": 99.39457433363971,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == Branch . UN@@ COND , finally CaMeL Node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true + finallyNode ) ;",
            "score": 99.38361952039931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node.UNCOND ) ;",
            "score": 99.36159939236111,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "toplevel.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.43238414417614,
            "correctness": "uncompilable",
            "tokenized_patch": "toplevel . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.41252305772569,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , false , cfa ) ;",
            "score": 99.4086978310033,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , false , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) { throw cfa ;",
            "score": 99.39409722222223,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) { throw cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "} return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.38655598958333,
            "correctness": "uncompilable",
            "tokenized_patch": "} return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , cfa ,",
            "score": 99.36953938802084,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , / *finallyNode ) ;",
            "score": 99.36140950520833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , / * finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , count ) ; }",
            "score": 99.31410127527573,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , count ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , cfa ) ;",
            "score": 99.4124004657452,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , source , cfa ) ; }",
            "score": 99.40836374383224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , source , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa ; } }",
            "score": 99.39365797776442,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( id , fromNode , parent , cfa ) ;",
            "score": 99.38634575737848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( id , from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , fromNode , finallyNode ) ;",
            "score": 99.38292778862848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( source.getFirstChild( ) ) ; }",
            "score": 99.36673134251645,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( source . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( children , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43223170230263,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( children , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( node ) ; }",
            "score": 99.39274327895221,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) ; ; }",
            "score": 99.38597276475694,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.finallyNode ) ;",
            "score": 99.38227674696181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , UNCOND , finallyNode ) ;",
            "score": 99.35990636488971,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getLastSibling( ) ) ;",
            "score": 99.31356048583984,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Last CaMeL Sibling ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return cfa ;",
            "score": 99.41056315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , false ) ; } }",
            "score": 99.40806820518092,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', false ) ;",
            "score": 99.38153839111328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', false ) ;",
            "score": 99.38153839111328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', false ) ;",
            "score": 99.38153839111328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', false ) ;",
            "score": 99.38153839111328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', false ) ;",
            "score": 99.38153839111328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next.getFirstChild( ) ) ; }",
            "score": 99.36580617804276,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next . get CaMeL First CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.35986328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new , cfa ) ;",
            "score": 99.31355285644531,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , true ) ; }",
            "score": 99.38883891858552,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent ) ;",
            "score": 99.38526153564453,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , !2, finallyNode ) ;",
            "score": 99.38139262952302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , !4, finallyNode ) ;",
            "score": 99.38139262952302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , !3, finallyNode ) ;",
            "score": 99.38139262952302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , !10, finallyNode ) ;",
            "score": 99.38139262952302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , !2008, finallyNode ) ;",
            "score": 99.38139262952302,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! $NUMBER$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node( cfa ) ) ;",
            "score": 99.36781141493056,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ( cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "dialog.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31340789794922,
            "correctness": "uncompilable",
            "tokenized_patch": "dialog . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "page.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43205915178571,
            "correctness": "uncompilable",
            "tokenized_patch": "page . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node.getLast( ) ) ;",
            "score": 99.40910070082721,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node . get CaMeL Last ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , null ) ; }",
            "score": 99.38828531901042,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , round ) ;",
            "score": 99.37802605879934,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , round ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , startNode ) ; }",
            "score": 99.36354693244485,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , start CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Edge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.35873592601104,
            "correctness": "uncompilable",
            "tokenized_patch": "Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , *false ) ;",
            "score": 99.31328986672794,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , * false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , cfa ) ;",
            "score": 99.4088134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , name , cfa ) ;",
            "score": 99.40692816840277,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , name , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; } cfa.createEdge( ) ;",
            "score": 99.38759358723958,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; } cfa . create CaMeL Edge ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , key ) ;",
            "score": 99.37800678453948,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , key ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { return next ;",
            "score": 99.36759440104167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { return next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , mode , finallyNode ) ;",
            "score": 99.35654703776042,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , mode , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( next ) , cfa ) ;",
            "score": 99.31301700367646,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( next ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.put( parent.getLastChild( ) , cfa ) ;",
            "score": 99.40818277994792,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . put ( parent . get CaMeL Last CaMeL Child ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode ) ; } }",
            "score": 99.38634535845588,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "target = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38216824001736,
            "correctness": "uncompilable",
            "tokenized_patch": "target = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', true ) ;",
            "score": 99.37762451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', true ) ;",
            "score": 99.37762451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', true ) ;",
            "score": 99.37762451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', true ) ;",
            "score": 99.37762451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', true ) ;",
            "score": 99.37762451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , false ) ; } }",
            "score": 99.35892740885417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , exp , finallyNode ) ;",
            "score": 99.35639105902777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , exp , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cache.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31291198730469,
            "correctness": "uncompilable",
            "tokenized_patch": "cache . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , nodes ) ;",
            "score": 99.37667043585526,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , nodes ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , addNode ) ; } }",
            "score": 99.35892062717014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , add CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , logger ) ;",
            "score": 99.35458809988839,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , logger ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , parent , false ) ;",
            "score": 99.31282806396484,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; }",
            "score": 99.38577880859376,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new | finallyNode ) ;",
            "score": 99.37640380859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new | finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next : computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.36531575520833,
            "correctness": "wrong",
            "tokenized_patch": "next : compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , index ) ;",
            "score": 99.35626220703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , false ) ; }",
            "score": 99.35447184244792,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( next , cfa ) ) ;",
            "score": 99.31244255514706,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( next , cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Configurable.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43154761904762,
            "correctness": "uncompilable",
            "tokenized_patch": "Configurable . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.parent , cfa ) ;",
            "score": 99.40691460503473,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( ) ; }",
            "score": 99.38552676930146,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( ) ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "9"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( name ) ; }",
            "score": 99.35599093967014,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( name ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getParent( ) ) ; }",
            "score": 99.3535515280331,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( element.getLastChild( ) ) ; }",
            "score": 99.4058837890625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( element . get CaMeL Last CaMeL Child ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( ) ; }",
            "score": 99.3836669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false + finallyNode ) ;",
            "score": 99.37552218967014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0) ; } }",
            "score": 99.35572814941406,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , , finallyNode ) ;",
            "score": 99.35031307444854,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , comparator ) ;",
            "score": 99.31135559082031,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , comparator ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , source , cfa ) ;",
            "score": 99.4056396484375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , source , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TRUE ) ; }",
            "score": 99.38228113511029,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TRUE ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.38072374131944,
            "correctness": "uncompilable",
            "tokenized_patch": "try { compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.finallyNode ) ;",
            "score": 99.37552218967014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode , {",
            "score": 99.34968566894531,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node , {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , parent , true ) ;",
            "score": 99.31073760986328,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( next.getNext( ) ) ;",
            "score": 99.38060845269098,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EMPTY ) ; }",
            "score": 99.38035673253677,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EMPTY ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.36451551649306,
            "correctness": "wrong",
            "tokenized_patch": "parent = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "8"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'less than') ;",
            "score": 99.35337727864584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( ' y (if true) and x ') ;",
            "score": 99.35337727864584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'greater than') ;",
            "score": 99.35337727864584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'before') ;",
            "score": 99.35337727864584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw new Exception( 'Not reachable') ;",
            "score": 99.35337727864584,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.finallyNode ) ;",
            "score": 99.34897189670139,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent ) ; }",
            "score": 99.40526580810547,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , LABEL , finallyNode ) ;",
            "score": 99.37407769097223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , LABEL , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode ; }",
            "score": 99.3522216796875,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ) ; } ;",
            "score": 99.34888373480902,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; } ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "writer.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3104019165039,
            "correctness": "uncompilable",
            "tokenized_patch": "writer . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "loop.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.37995910644531,
            "correctness": "uncompilable",
            "tokenized_patch": "loop . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.34783257378473,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( super.getNext( ) ) ;",
            "score": 99.31034851074219,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( super . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "outer.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43124534970238,
            "correctness": "uncompilable",
            "tokenized_patch": "outer . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next , fromNode , cfa ) ; }",
            "score": 99.40365939670139,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next , from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element , parent , cfa ) ;",
            "score": 99.40355088975694,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { computeFallThrough( node.getNext( ) ) ;",
            "score": 99.37851291232639,
            "correctness": "uncompilable",
            "tokenized_patch": "try { compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ; } }",
            "score": 99.37725830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false , true ) ;",
            "score": 99.36414930555556,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , length , finallyNode ) ;",
            "score": 99.34800889756944,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , length , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , next ) ;",
            "score": 99.31016540527344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Enumeration.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43121047247024,
            "correctness": "uncompilable",
            "tokenized_patch": "Enumeration . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( fromNode , parent , cfa ) ; } }",
            "score": 99.40350341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next , cfa ) ; }",
            "score": 99.40146309988839,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.37828871783088,
            "correctness": "uncompilable",
            "tokenized_patch": "o . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( ) ; } }",
            "score": 99.37578986672794,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , this ) ;",
            "score": 99.372802734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.class ) ;",
            "score": 99.36332194010417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . class ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -1, false ) ;",
            "score": 99.34595444623162,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 1 , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , index ) ;",
            "score": 99.30955505371094,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , index ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode ) ;",
            "score": 99.40086012620192,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "i.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.37776947021484,
            "correctness": "uncompilable",
            "tokenized_patch": "i . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , children , finallyNode ) ;",
            "score": 99.34476047092014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , children , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.put( parent , Branch.UNCOND , finallyNode ) ;",
            "score": 99.40036908318015,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . put ( parent , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , false ) ;",
            "score": 99.3724365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target.getFirstChild( ) ) ;",
            "score": 99.34682210286458,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( Branch.UNCOND , finallyNode ) ; }",
            "score": 99.34475368923611,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFallThrough( node.getNext( ) ) ;",
            "score": 99.37772623697917,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( String ) finallyNode ) ;",
            "score": 99.37203176398026,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( String ) finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa.finallyNode ) ;",
            "score": 99.34440104166667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "out.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.30934053308823,
            "correctness": "uncompilable",
            "tokenized_patch": "out . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "i.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.37746294806985,
            "correctness": "uncompilable",
            "tokenized_patch": "i . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ) ;",
            "score": 99.37152099609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa ) +",
            "score": 99.36238098144531,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ) +",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next ) ;",
            "score": 99.34285191127232,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new Node , fromNode , cfa ) ;",
            "score": 99.30827780330883,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new Node , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index , cfa ) ;",
            "score": 99.40191650390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , ; } }",
            "score": 99.37725151909723,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode , true ) ;",
            "score": 99.37131861636513,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { if( cfa != null ) {",
            "score": 99.36981608072917,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { if ( cfa != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NONE , null ) ;",
            "score": 99.34273952907986,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NONE , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , super , finallyNode ) ;",
            "score": 99.34162733289931,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , super , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa2.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30823471966912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa4.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30823471966912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa3.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30823471966912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa10.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30823471966912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa2008.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30823471966912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa $NUMBER$ . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getNext( ) , cfa ) ; }",
            "score": 99.40178479646382,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'less than') ;",
            "score": 99.36976533777573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( ' y (if true) and x ') ;",
            "score": 99.36976533777573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'greater than') ;",
            "score": 99.36976533777573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'before') ;",
            "score": 99.36976533777573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Error( 'Not reachable') ;",
            "score": 99.36976533777573,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Error ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.34158145680146,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode ) ; } }",
            "score": 99.34046766493056,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Listeners.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3078384399414,
            "correctness": "uncompilable",
            "tokenized_patch": "Listeners . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , parent , true ) ;",
            "score": 99.40155993009868,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , parent , false ) ;",
            "score": 99.39959716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.null ) ;",
            "score": 99.37600368923611,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , filter ) ;",
            "score": 99.37018785978618,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , filter ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw cfa ; } }",
            "score": 99.36966646634616,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw cfa ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.class , cfa ) ;",
            "score": 99.36170111762152,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . class , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , list ) ;",
            "score": 99.30756487165179,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , list ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , true && finallyNode ) ;",
            "score": 99.4308445142663,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , true && finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( computeFollowNode( fromNode , parent , cfa ) )",
            "score": 99.39912245008681,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.getCaMeL",
            "score": 99.37558880974265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . get CaMeL",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'less than') ;",
            "score": 99.36906881893383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( ' y (if true) and x ') ;",
            "score": 99.36906881893383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'greater than') ;",
            "score": 99.36906881893383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'before') ;",
            "score": 99.36906881893383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { throw new Exception( 'Not reachable') ;",
            "score": 99.36906881893383,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { throw new Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( finallyNode , parent , cfa ) ;",
            "score": 99.3616943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( finally CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , true , null ) ;",
            "score": 99.33985731336806,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , true , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0) ;",
            "score": 99.33735874720982,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( cloneNode , parent , cfa ) ;",
            "score": 99.30742645263672,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( clone CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFallThrough( fromNode , cfa ) ;",
            "score": 99.39910888671875,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'less than') ;",
            "score": 99.3670654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , ' y (if true) and x ') ;",
            "score": 99.3670654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'greater than') ;",
            "score": 99.3670654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'before') ;",
            "score": 99.3670654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , 'Not reachable') ;",
            "score": 99.3670654296875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.fromNode , finallyNode ) ;",
            "score": 99.33938937717014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNext( ) , cfa ) ;",
            "score": 99.3071517944336,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "best.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43076869419643,
            "correctness": "uncompilable",
            "tokenized_patch": "best . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ,2) ;",
            "score": 99.39858829273896,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ,4) ;",
            "score": 99.39858829273896,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ,3) ;",
            "score": 99.39858829273896,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ,10) ;",
            "score": 99.39858829273896,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ,2008) ;",
            "score": 99.39858829273896,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.37384033203125,
            "correctness": "uncompilable",
            "tokenized_patch": "o . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true ) ; } }",
            "score": 99.36796569824219,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', null ) ;",
            "score": 99.36692810058594,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', null ) ;",
            "score": 99.36692810058594,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', null ) ;",
            "score": 99.36692810058594,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', null ) ;",
            "score": 99.36692810058594,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', null ) ;",
            "score": 99.36692810058594,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , false ) ; }",
            "score": 99.33751763237848,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , next ) ; } }",
            "score": 99.33619689941406,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , next ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "children.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30683898925781,
            "correctness": "uncompilable",
            "tokenized_patch": "children . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "client.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4304431733631,
            "correctness": "uncompilable",
            "tokenized_patch": "client . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , scope , cfa ) ; }",
            "score": 99.39871036305146,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , scope , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "o = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.37380642361111,
            "correctness": "uncompilable",
            "tokenized_patch": "o = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.ADD ) ; }",
            "score": 99.366943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ADD ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new && finallyNode ) ;",
            "score": 99.36429172092014,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new && finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'less than', fromNode , finallyNode ) ;",
            "score": 99.36117214626736,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ' y (if true) and x ', fromNode , finallyNode ) ;",
            "score": 99.36117214626736,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'greater than', fromNode , finallyNode ) ;",
            "score": 99.36117214626736,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'before', fromNode , finallyNode ) ;",
            "score": 99.36117214626736,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'Not reachable', fromNode , finallyNode ) ;",
            "score": 99.36117214626736,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , true , false ) ;",
            "score": 99.33712429470486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , true , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , finallyNode ) ; break ;",
            "score": 99.33574083116319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ref , cfa ) ;",
            "score": 99.30658721923828,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ref , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "mediator.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.43033854166667,
            "correctness": "uncompilable",
            "tokenized_patch": "mediator . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node ) ; }",
            "score": 99.36650848388672,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , l ) ;",
            "score": 99.3634097450658,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , l ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , finallyNode , finallyNode ) ;",
            "score": 99.3360595703125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "args.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4301990327381,
            "correctness": "uncompilable",
            "tokenized_patch": "args . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false ) ; } }",
            "score": 99.36605072021484,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , true ) ;",
            "score": 99.36332702636719,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.length( ) ) ;",
            "score": 99.36029052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . length ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , Branch.UNCOND , true ) ;",
            "score": 99.33558565027573,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , Branch . UN@@ COND , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ) ; break ;",
            "score": 99.33472442626953,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , end ) ;",
            "score": 99.3058090209961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , end ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next , parent , cfa ) ; }",
            "score": 99.39778137207031,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , fromNode , finallyNode ) ;",
            "score": 99.36199273003473,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , counter , finallyNode ) ;",
            "score": 99.3349609375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , counter , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , type , finallyNode ) ;",
            "score": 99.3331298828125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , type , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parameters ) ;",
            "score": 99.30471801757812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parameters ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( element.getLastChild( ) ) ;",
            "score": 99.39755588107639,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( element . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa ; }",
            "score": 99.36393229166667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , NONE , finallyNode ) ;",
            "score": 99.361083984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , NONE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( next.getNext( ) ) ;",
            "score": 99.3602294921875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( source.getFirstChild( ) ) ;",
            "score": 99.33171251085069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( source . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND /",
            "score": 99.30399322509766,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , reversed.UNCOND , finallyNode ) ; }",
            "score": 99.42979847301136,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , reversed . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, parent , cfa ) ;",
            "score": 99.39687771267361,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getParent( ) ) ;",
            "score": 99.39603917738971,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , flow ) ;",
            "score": 99.36078844572368,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , flow ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , CONTINUE , finallyNode ) ;",
            "score": 99.33293999565973,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , CONTINUE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,(",
            "score": 99.30324009486607,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4296875,
            "correctness": "uncompilable",
            "tokenized_patch": "continue . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , cfa ,",
            "score": 99.39675005744485,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , ! cfa ) ;",
            "score": 99.39590793185764,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , ! cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , cfa , cfa ) ;",
            "score": 99.36810980902777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , cfa , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , prefix ) ;",
            "score": 99.3601009971217,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , prefix ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Node return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.35980224609375,
            "correctness": "uncompilable",
            "tokenized_patch": "Node return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -1, true ) ;",
            "score": 99.33112649356617,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 1 , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index ) ; } }",
            "score": 99.33050537109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stack.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30321502685547,
            "correctness": "uncompilable",
            "tokenized_patch": "stack . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,0, false ) ;",
            "score": 99.39622667100694,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 0 , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , cfa ) ; }",
            "score": 99.36802455357143,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getStyle( ) ) ;",
            "score": 99.35980902777777,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Style ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , null , cfa ) ;",
            "score": 99.35967254638672,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , null , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode ) ;",
            "score": 99.32961138556985,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getNext( ) , cfa ) ;",
            "score": 99.39594862196181,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.36754653033088,
            "correctness": "uncompilable",
            "tokenized_patch": "v . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getNodes( ) ) ;",
            "score": 99.35942925347223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Nodes ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { for( Node finallyNode = next ;",
            "score": 99.35875028722427,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { for ( Node finally CaMeL Node = next ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode ) ; }",
            "score": 99.32949829101562,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa = finallyNode ; }",
            "score": 99.32910874310662,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa = finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "buffer.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.30168151855469,
            "correctness": "uncompilable",
            "tokenized_patch": "buffer . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "pos.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42923409598214,
            "correctness": "uncompilable",
            "tokenized_patch": "pos . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "v.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.36750793457031,
            "correctness": "uncompilable",
            "tokenized_patch": "v . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getResources( ) ) ;",
            "score": 99.35884602864583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Resources ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.createEdge( node ) ;",
            "score": 99.324951171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . create CaMeL Edge ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.SET , finallyNode ) ;",
            "score": 99.428955078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . SET , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , cfa ) ; }",
            "score": 99.39515596277573,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , target ) ;",
            "score": 99.36710611979167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new cfa ) ;",
            "score": 99.35859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next , finallyNode ) ;",
            "score": 99.35789388020834,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa ; } } }",
            "score": 99.35157121930804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getName( ) ) ; }",
            "score": 99.3221794577206,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Name ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , parent , false ) ;",
            "score": 99.3005599975586,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ) ; } }",
            "score": 99.39366239659927,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = fromNode.getFirstChild( ) ;",
            "score": 99.32258157169117,
            "correctness": "wrong",
            "tokenized_patch": "from CaMeL Node = from CaMeL Node . get CaMeL First CaMeL Child ( ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( node.UNCOND , finallyNode ) ;",
            "score": 99.32190659466912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root , cfa ) ; }",
            "score": 99.39468204273896,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , fromNode ) ;",
            "score": 99.39345974392361,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', finallyNode ) ; ;",
            "score": 99.35807077508224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', finallyNode ) ; ;",
            "score": 99.35807077508224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', finallyNode ) ; ;",
            "score": 99.35807077508224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', finallyNode ) ; ;",
            "score": 99.35807077508224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', finallyNode ) ; ;",
            "score": 99.35807077508224,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw cfa ; } } }",
            "score": 99.35032435825893,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw cfa ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , true ) ; }",
            "score": 99.32178452435662,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , true ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , false ) ;",
            "score": 99.32108800551471,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , names ) ;",
            "score": 99.30039978027344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , names ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.MAX , finallyNode ) ; }",
            "score": 99.42861793154762,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . MAX , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( next.getNext( ) ) ; }",
            "score": 99.39466010199652,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa.index ) ;",
            "score": 99.36567518446181,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa . index ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ++ ) ;",
            "score": 99.35721164279514,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ++ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TYPE ) ; }",
            "score": 99.3478142233456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TYPE ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , root ) ;",
            "score": 99.32095772879464,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , Branch.UNCOND ,",
            "score": 99.30023193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , parent , cfa ) ; }",
            "score": 99.39450073242188,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next ) ; }",
            "score": 99.39312744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( parent.getLastChild( ) == node ) {",
            "score": 99.36515045166016,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( parent . get CaMeL Last CaMeL Child ( ) == node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw return computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.35714382595486,
            "correctness": "uncompilable",
            "tokenized_patch": "throw return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND | finallyNode ) ;",
            "score": 99.35562294407895,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND | finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target.getNext( ) ) ; }",
            "score": 99.3459113625919,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target . get CaMeL Next ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null ) ; break ;",
            "score": 99.31941223144531,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.39375813802083,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , false , null ) ;",
            "score": 99.36505126953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , false , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NAME , cfa ) ;",
            "score": 99.35579427083333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NAME , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this ) ; } }",
            "score": 99.34425354003906,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch ) ;",
            "score": 99.32042585100446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa = finallyNode ; }",
            "score": 99.3187744140625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa = finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , fromNode , cfa ) ;",
            "score": 99.29959869384766,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getNext( ) , cfa ) ;",
            "score": 99.35556369357639,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Next ( ) , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode , target ) ;",
            "score": 99.35528564453125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , target ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ cfa.createEdge( fromNode , finallyNode ) ;",
            "score": 99.31950109145221,
            "correctness": "uncompilable",
            "tokenized_patch": "{ cfa . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { return cfa ; }",
            "score": 99.31809997558594,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , locale ) ;",
            "score": 99.29915618896484,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , locale ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( parent ) ) { break ;",
            "score": 99.3919677734375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( parent ) ) { break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "callback.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.36449432373047,
            "correctness": "uncompilable",
            "tokenized_patch": "callback . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , references ) ;",
            "score": 99.35520533511513,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , references ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2) ;",
            "score": 99.31944928850446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,4) ;",
            "score": 99.31944928850446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,3) ;",
            "score": 99.31944928850446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,10) ;",
            "score": 99.31944928850446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2008) ;",
            "score": 99.31944928850446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ) ; } break ;",
            "score": 99.3179931640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; } break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , parent , true ) ;",
            "score": 99.29884338378906,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , false && finallyNode ) ;",
            "score": 99.42794667119566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , false && finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ,0) ;",
            "score": 99.39165182674633,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , parent , cfa ) ;",
            "score": 99.35504828559027,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , - ) ;",
            "score": 99.35487124794408,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , - ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ) ; }",
            "score": 99.33877766927084,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , finallyNode ) ; }",
            "score": 99.31703096277573,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null.getLastChild( ) ) ;",
            "score": 99.36429850260417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode ) ;",
            "score": 99.35477023654514,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node ) ; } }",
            "score": 99.33621036305146,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( fromNode ,",
            "score": 99.3153076171875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , finallyNode ) ; }",
            "score": 99.314111328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , iterator ) ;",
            "score": 99.29712677001953,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , iterator ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "xsp.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42774600074405,
            "correctness": "uncompilable",
            "tokenized_patch": "xsp . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next( ).getNext( ).getNext( ) ; }",
            "score": 99.3924560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "next ( ) . get CaMeL Next ( ) . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "state.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.36391314338235,
            "correctness": "uncompilable",
            "tokenized_patch": "state . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , shortValue ) ;",
            "score": 99.31358337402344,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , short CaMeL Value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rv.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.29705047607422,
            "correctness": "uncompilable",
            "tokenized_patch": "rv . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "queue = computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.36350504557292,
            "correctness": "uncompilable",
            "tokenized_patch": "queue = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa1.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.353759765625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa 1 . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.FALSE ) ; }",
            "score": 99.334716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . FALSE ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { return cfa ; }",
            "score": 99.31299700055804,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "items.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.2961196899414,
            "correctness": "uncompilable",
            "tokenized_patch": "items . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , element , cfa ) ;",
            "score": 99.39130995008681,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , element , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , ! finallyNode ) ;",
            "score": 99.35366339432566,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , ! finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( parent.getLastChild( ) ) ;",
            "score": 99.35360378689236,
            "correctness": "wrong",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( finallyNode , finallyNode ) ;",
            "score": 99.31049346923828,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( finally CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.close( ) ; } }",
            "score": 99.30778503417969,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . close ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , , cfa ) ; }",
            "score": 99.39055040147569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND ) ; }",
            "score": 99.32937622070312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , finallyNode ) ;",
            "score": 99.30909075055804,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( ) ) ; }",
            "score": 99.30607096354167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , finallyNode , cfa ) ;",
            "score": 99.29408264160156,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( parent.getNext( ) ) ;",
            "score": 99.39012953814338,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( parent . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFollowNode( fromNode , cfa ) ; }",
            "score": 99.38969590928819,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( ) ; break ;",
            "score": 99.3271843405331,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , children ) ;",
            "score": 99.30806187220982,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , children ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "util.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.29267883300781,
            "correctness": "uncompilable",
            "tokenized_patch": "util . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( node.getFirstChild( ) ) ;",
            "score": 99.38892279730902,
            "correctness": "wrong",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( node . get CaMeL First CaMeL Child ( ) ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "6"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND L ) ;",
            "score": 99.35182020399306,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND L ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode ; }",
            "score": 99.35064697265625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , finallyNode ) ;",
            "score": 99.30646514892578,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , - ) ;",
            "score": 99.29247283935547,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , - ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode.TYPE ) ;",
            "score": 99.42720363451087,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node . TYPE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ref , cfa ) ;",
            "score": 99.38896348741319,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ref , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , cfa ) ; }",
            "score": 99.38855698529412,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "l.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.36140711167279,
            "correctness": "uncompilable",
            "tokenized_patch": "l . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.32698328354779,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { cfa = finallyNode ;",
            "score": 99.30640411376953,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { cfa = finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "keys.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.29241943359375,
            "correctness": "uncompilable",
            "tokenized_patch": "keys . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , ; break ;",
            "score": 99.42701256793478,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ return computeFallThrough( node.getNext( ) ) ;",
            "score": 99.38889567057292,
            "correctness": "uncompilable",
            "tokenized_patch": "{ return compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , cfa ) ;",
            "score": 99.38848005022321,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( ) ) ; } }",
            "score": 99.29733276367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Double.UNCOND , finallyNode ) ; }",
            "score": 99.42693536931819,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Double . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , -1) ; }",
            "score": 99.38713243272569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , - 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , false ) ;",
            "score": 99.34791564941406,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cleanup( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.32494399126838,
            "correctness": "uncompilable",
            "tokenized_patch": "cleanup ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent ,0) ;",
            "score": 99.29202270507812,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ,( finallyNode ) ) ;",
            "score": 99.42689580502717,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , ( finally CaMeL Node ) ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "0"
        },
        {
            "patch": "next.createEdge( parent.getLastChild( ) ) ;",
            "score": 99.38755967881944,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , cfa , false ) ;",
            "score": 99.38695610894098,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ) ; break ; }",
            "score": 99.35929601332721,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ) ; break ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, false ) ;",
            "score": 99.34778594970703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break computeFallThrough( node.getNext( ) ) ;",
            "score": 99.34652889476104,
            "correctness": "uncompilable",
            "tokenized_patch": "break compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , finallyNode ) ;",
            "score": 99.30313110351562,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target ) ; break ;",
            "score": 99.29638671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "code.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42688569568452,
            "correctness": "uncompilable",
            "tokenized_patch": "code . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , null ) ;",
            "score": 99.38608127170139,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.3586066750919,
            "correctness": "uncompilable",
            "tokenized_patch": "n . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.34680893841912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getNode( ) ) ; }",
            "score": 99.32354377297794,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Node ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2, false ) ;",
            "score": 99.30309295654297,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,4, false ) ;",
            "score": 99.30309295654297,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,3, false ) ;",
            "score": 99.30309295654297,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,10, false ) ;",
            "score": 99.30309295654297,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2008, false ) ;",
            "score": 99.30309295654297,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( next ) ) ;",
            "score": 99.2887451171875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( next ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode , { ) ;",
            "score": 99.42684273097827,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node , { ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( next.getLast( ) ) ;",
            "score": 99.3872429342831,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( next . get CaMeL Last ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , Branch.UNCOND ,",
            "score": 99.38567038143383,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new || finallyNode ) ;",
            "score": 99.34657118055556,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new || finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.CHECK ) ; }",
            "score": 99.32280417049633,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . CHECK ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , finallyNode ) ;",
            "score": 99.30141775948661,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { Thread.currentThread( ).interrupt( ) ; } }",
            "score": 99.29039809283088,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { Thread . current CaMeL Thread ( ) . interrupt ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent , cfa ) ;",
            "score": 99.28866811899039,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.true ) ;",
            "score": 99.4267349243164,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent , parent ) ;",
            "score": 99.38719267003677,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , parent , cfa ) ; } }",
            "score": 99.38554551866319,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode ,0) ;",
            "score": 99.34642876519098,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , this , cfa ) ;",
            "score": 99.34564568014706,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , this , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) ) { return null ; }",
            "score": 99.31965188419117,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) ) { return null ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , null ) ;",
            "score": 99.30054473876953,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "d.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.28837585449219,
            "correctness": "uncompilable",
            "tokenized_patch": "d . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , type ) ; }",
            "score": 99.28680013020833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , type ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "location.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42669968377976,
            "correctness": "uncompilable",
            "tokenized_patch": "location . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "AOM.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.35545349121094,
            "correctness": "uncompilable",
            "tokenized_patch": "AOM . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = fromNode( Branch.UNCOND , finallyNode ) ;",
            "score": 99.31932875689338,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = from CaMeL Node ( Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , false ) ; }",
            "score": 99.29850499770221,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( parent.getLastChild( ) ) ;",
            "score": 99.2870864868164,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( parent . get CaMeL Last CaMeL Child ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getParent( ) ) ; } }",
            "score": 99.2856674194336,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Parent ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , finallyNode ) ; }",
            "score": 99.38613552517361,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "n.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.35447692871094,
            "correctness": "uncompilable",
            "tokenized_patch": "n . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , flow.finallyNode ) ;",
            "score": 99.34575737847223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , flow . finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( ) ;",
            "score": 99.31856282552083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node ) ;",
            "score": 99.29490966796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getParent( ) ) ; }",
            "score": 99.28561197916666,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Parent ( ) ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , Branch.UNCOND ) ;",
            "score": 99.38420952690973,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stmt.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3532485961914,
            "correctness": "uncompilable",
            "tokenized_patch": "stmt . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , finallyNode ) {",
            "score": 99.34549753289474,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , Branch.UNCOND ) ;",
            "score": 99.31720377604167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { return finallyNode ; }",
            "score": 99.29261016845703,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { return finally CaMeL Node ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "popup.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.28614044189453,
            "correctness": "uncompilable",
            "tokenized_patch": "popup . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Mode.UNCOND , finallyNode ) ; }",
            "score": 99.42632501775569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Mode . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node , parent , cfa ) ;",
            "score": 99.38407389322917,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "context.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.35316377527573,
            "correctness": "uncompilable",
            "tokenized_patch": "context . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , target.fromNode ) ;",
            "score": 99.34368896484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , target . from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw cfa ; }",
            "score": 99.31600952148438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "synchronized( cfa ) { cfa.createEdge( fromNode ,",
            "score": 99.29239654541016,
            "correctness": "uncompilable",
            "tokenized_patch": "synchronized ( cfa ) { cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , lang ) ;",
            "score": 99.2861099243164,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , lang ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , list ) ; }",
            "score": 99.28194173177083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , list ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "stmt.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.3526252297794,
            "correctness": "uncompilable",
            "tokenized_patch": "stmt . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NAME ) ;",
            "score": 99.34368133544922,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NAME ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node( ) ) ;",
            "score": 99.34359920726104,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw cfa ; }",
            "score": 99.29135567801339,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getParent( ) ) ;",
            "score": 99.28599330357143,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { Thread.currentThread( ).interrupt( ) ; }",
            "score": 99.28060913085938,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { Thread . current CaMeL Thread ( ) . interrupt ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rules.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42607189360119,
            "correctness": "uncompilable",
            "tokenized_patch": "rules . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , Branch.UNCOND +",
            "score": 99.34351348876953,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND +",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , vars ) ;",
            "score": 99.34336635044643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , vars ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { return null ; }",
            "score": 99.31219482421875,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { return null ; }",
            "failed_triggering": "3/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "fromNode = cfa.createEdge( fromNode ) ;",
            "score": 99.29083251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "reader.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.28559112548828,
            "correctness": "uncompilable",
            "tokenized_patch": "reader . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'less than'+ fromNode ) ;",
            "score": 99.27908325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( ' y (if true) and x '+ fromNode ) ;",
            "score": 99.27908325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'greater than'+ fromNode ) ;",
            "score": 99.27908325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'before'+ fromNode ) ;",
            "score": 99.27908325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'Not reachable'+ fromNode ) ;",
            "score": 99.27908325195312,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; Node",
            "score": 99.42606977982955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; Node",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch , parent , cfa ) ;",
            "score": 99.38189019097223,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node , cfa ) ; }",
            "score": 99.35044642857143,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , getMessages( ) ) ;",
            "score": 99.34318033854167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , get CaMeL Messages ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "methods.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.28541564941406,
            "correctness": "uncompilable",
            "tokenized_patch": "methods . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element ) ; }",
            "score": 99.2686767578125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , void.UNCOND , finallyNode ) ;",
            "score": 99.42606026785714,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , void . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , parent , parent , cfa ) ;",
            "score": 99.38150363498264,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , parent , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , null , cfa ) ;",
            "score": 99.34323299632354,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , null , cfa ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "11"
        },
        {
            "patch": "cfa.createEdge( fromNode , Node.UNCOND ,",
            "score": 99.2901611328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Node . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ref ) ;",
            "score": 99.28527069091797,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ref ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name ) ; }",
            "score": 99.2667236328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "previous.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42588588169643,
            "correctness": "uncompilable",
            "tokenized_patch": "previous . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , null ) ; }",
            "score": 99.34758444393383,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , null ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , false ) ;",
            "score": 99.34146881103516,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node ) ; }",
            "score": 99.3088711825284,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, false ) ;",
            "score": 99.2899398803711,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , scope ) ;",
            "score": 99.28494262695312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , scope ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , type ) ;",
            "score": 99.26654052734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , type ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "decl.createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.42552548363095,
            "correctness": "uncompilable",
            "tokenized_patch": "decl . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent ,1) ;",
            "score": 99.38124593098958,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , parent , cfa ) ;",
            "score": 99.34259905133929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, null ) ;",
            "score": 99.34107971191406,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , booleanNode ) ;",
            "score": 99.28949737548828,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , boolean CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node ) ; break ;",
            "score": 99.2635498046875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , parent , null ) ;",
            "score": 99.38088091681985,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , null ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge = fromNode , parent , cfa ) ;",
            "score": 99.34188079833984,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge = from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ) ;",
            "score": 99.2884051983173,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ] ) ;",
            "score": 99.28279876708984,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ] ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( name ) ;",
            "score": 99.26273345947266,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( name ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.this , finallyNode ) ;",
            "score": 99.425341796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . this , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , parent , parent ) ;",
            "score": 99.38071017795139,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , parent , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , Branch.UNCOND ,",
            "score": 99.3731330422794,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , Branch . UN@@ COND ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "callback.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.34665096507354,
            "correctness": "uncompilable",
            "tokenized_patch": "callback . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode ,( Node ) cfa ) ;",
            "score": 99.34159581801471,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , ( Node ) cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Location( ) ) ;",
            "score": 99.34018841911765,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Location ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NULL ) ;",
            "score": 99.30741882324219,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NULL ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , longValue ) ;",
            "score": 99.2876205444336,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , long CaMeL Value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "target.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.28213500976562,
            "correctness": "uncompilable",
            "tokenized_patch": "target . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa = finallyNode ; } }",
            "score": 99.26211547851562,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa = finally CaMeL Node ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( parent , cfa ) ; }",
            "score": 99.3463363647461,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, fromNode ) ;",
            "score": 99.33865017361111,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , finallyNode ) ; }",
            "score": 99.28394368489583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Resources.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.28211212158203,
            "correctness": "uncompilable",
            "tokenized_patch": "Resources . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , finallyNode ) ;",
            "score": 99.26193673270089,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , STATEMENT.UNCOND , finallyNode ) ;",
            "score": 99.42490931919643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , STATEMENT . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , next , cfa ) ;",
            "score": 99.37293198529412,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , next , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'less than', finallyNode ) ; }",
            "score": 99.34632975260416,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ' y (if true) and x ', finallyNode ) ; }",
            "score": 99.34632975260416,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'greater than', finallyNode ) ; }",
            "score": 99.34632975260416,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'before', finallyNode ) ; }",
            "score": 99.34632975260416,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( 'Not reachable', finallyNode ) ; }",
            "score": 99.34632975260416,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( $STRING$ , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this.getNext( ) ) ;",
            "score": 99.3410873413086,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , true ) ;",
            "score": 99.33756256103516,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ) ; } }",
            "score": 99.30319213867188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , -(",
            "score": 99.28193359375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , - (",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1) ; }",
            "score": 99.26181640625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFallThrough( next.getNext( ) ) ; } }",
            "score": 99.37842475043402,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) cfa = finallyNode ;",
            "score": 99.28304850260416,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) cfa = finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , FALSE ) ;",
            "score": 99.28170776367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , FALSE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , name ) ; break ;",
            "score": 99.25845336914062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , name ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "! computeFallThrough( fromNode , parent , cfa ) ;",
            "score": 99.37089987362133,
            "correctness": "uncompilable",
            "tokenized_patch": "! compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,( Node ) parent ) ;",
            "score": 99.34094956341912,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ( Node ) parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , false ) ;",
            "score": 99.33395385742188,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , root ) ;",
            "score": 99.281005859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , root ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'less than') ;",
            "score": 99.25775146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( ' y (if true) and x ') ;",
            "score": 99.25775146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'greater than') ;",
            "score": 99.25775146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'before') ;",
            "score": 99.25775146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'Not reachable') ;",
            "score": 99.25775146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , index , cfa ) ; }",
            "score": 99.37744858685662,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , index , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode.isFunction( ) ) {",
            "score": 99.34519740513393,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node . is CaMeL Function ( ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return parent.getNext( ).getNext( ) ;",
            "score": 99.34041595458984,
            "correctness": "wrong",
            "tokenized_patch": "return parent . get CaMeL Next ( ) . get CaMeL Next ( ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "10"
        },
        {
            "patch": "cfa.createEdge( fromNode , length ) ; }",
            "score": 99.29574381510416,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , length ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2, true ) ;",
            "score": 99.28182983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,4, true ) ;",
            "score": 99.28182983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,3, true ) ;",
            "score": 99.28182983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,10, true ) ;",
            "score": 99.28182983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,2008, true ) ;",
            "score": 99.28182983398438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $NUMBER$ , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "entries.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.28089141845703,
            "correctness": "uncompilable",
            "tokenized_patch": "entries . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.out , finallyNode ) ;",
            "score": 99.4244140625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . out , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "queue.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.3437140969669,
            "correctness": "uncompilable",
            "tokenized_patch": "queue . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , node.fromNode ) ;",
            "score": 99.33220757378473,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , node . from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa ; } } else {",
            "score": 99.29468587239583,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa ; } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode ,",
            "score": 99.2818134014423,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.hasFinally( parent ) ) {",
            "score": 99.28080749511719,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . has CaMeL Finally ( parent ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than') ; }",
            "score": 99.25431315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ') ; }",
            "score": 99.25431315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than') ; }",
            "score": 99.25431315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before') ; }",
            "score": 99.25431315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable') ; }",
            "score": 99.25431315104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "l.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.34321594238281,
            "correctness": "uncompilable",
            "tokenized_patch": "l . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , finallyNode ) ; }",
            "score": 99.33957806755515,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , null ) ;",
            "score": 99.3319091796875,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode ;",
            "score": 99.29415457589286,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "super.createEdge( fromNode , finallyNode ) ;",
            "score": 99.2811050415039,
            "correctness": "uncompilable",
            "tokenized_patch": "super . create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( ) ) ;",
            "score": 99.25136021205357,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, cfa ) ;",
            "score": 99.33953094482422,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new ? finallyNode ; ;",
            "score": 99.33119032118056,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ? finally CaMeL Node ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , node ) ;",
            "score": 99.28020477294922,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.err , finallyNode ) ;",
            "score": 99.42274169921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . err , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ,0, null ) ;",
            "score": 99.37447102864583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , 0 , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! NodeUtil.hasFinally( parent ) )",
            "score": 99.36858723958333,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! Node CaMeL Util . has CaMeL Finally ( parent ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "queue.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.34300231933594,
            "correctness": "uncompilable",
            "tokenized_patch": "queue . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { return null ; } }",
            "score": 99.2921630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { return null ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( addNode , parent , cfa ) ;",
            "score": 99.2801284790039,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( add CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , null ) ;",
            "score": 99.27874755859375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = fromNode.getNext( ) ;",
            "score": 99.24422200520833,
            "correctness": "wrong",
            "tokenized_patch": "from CaMeL Node = from CaMeL Node . get CaMeL Next ( ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "2"
        },
        {
            "patch": "finished.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.42266290838069,
            "correctness": "uncompilable",
            "tokenized_patch": "finished . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.37437608506944,
            "correctness": "wrong",
            "tokenized_patch": "{ compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "return computeFallThrough( finallyNode , cfa ) ;",
            "score": 99.36787109375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( finally CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "AOM.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.34275189568015,
            "correctness": "uncompilable",
            "tokenized_patch": "AOM . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, true ) ;",
            "score": 99.32962799072266,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , cfa ) ; }",
            "score": 99.27892127403847,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = createEdge( fromNode , fromNode ) ;",
            "score": 99.27615356445312,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null && cfa.hasNext( ) )",
            "score": 99.24369303385417,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null && cfa . has CaMeL Next ( ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "runtime.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.42262961647727,
            "correctness": "uncompilable",
            "tokenized_patch": "runtime . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert computeFollowNode( fromNode , parent , cfa ) ; }",
            "score": 99.37432861328125,
            "correctness": "uncompilable",
            "tokenized_patch": "assert compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , parent ) ;",
            "score": 99.365234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , true ) ;",
            "score": 99.3277587890625,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.getLastChild( ).next( ) ;",
            "score": 99.2787841796875,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . get CaMeL Last CaMeL Child ( ) . next ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.EMPTY ) ;",
            "score": 99.27586364746094,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . EMPTY ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , element ) ;",
            "score": 99.23598807198661,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , element ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.BYTES , finallyNode ) ;",
            "score": 99.42174682617187,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . BYTES , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "listeners.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.34149528952206,
            "correctness": "uncompilable",
            "tokenized_patch": "listeners . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Location fromNode ) ;",
            "score": 99.32736545138889,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Location from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent , parent , cfa ) ; }",
            "score": 99.27863311767578,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , scope ) ; }",
            "score": 99.2336669921875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , scope ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Visitor.UNCOND , finallyNode ) ; }",
            "score": 99.42167524857955,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Visitor . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.3640998391544,
            "correctness": "uncompilable",
            "tokenized_patch": "next compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "adapter.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.341064453125,
            "correctness": "uncompilable",
            "tokenized_patch": "adapter . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent.getParent( ) ) ;",
            "score": 99.27267456054688,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent . get CaMeL Parent ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.interrupt( ) ; }",
            "score": 99.23251953125,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . interrupt ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , cfa ) ; }",
            "score": 99.37372903262867,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , false ) ;",
            "score": 99.363134765625,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "table.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.33979034423828,
            "correctness": "uncompilable",
            "tokenized_patch": "table . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , group , cfa ) ;",
            "score": 99.33522033691406,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , group , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = Branch.UNCOND , finallyNode ; } }",
            "score": 99.2845230102539,
            "correctness": "uncompilable",
            "tokenized_patch": "from CaMeL Node = Branch . UN@@ COND , finally CaMeL Node ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , nodes ) ;",
            "score": 99.27809143066406,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , nodes ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next , finallyNode ) ; }",
            "score": 99.23148600260417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.prefix , finallyNode ) ;",
            "score": 99.4205810546875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . prefix , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : parent.getNext( ) ) {",
            "score": 99.37314740349265,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : parent . get CaMeL Next ( ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.36234537760417,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , fromNode ) ; ;",
            "score": 99.32602108226104,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "filter.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.2776870727539,
            "correctness": "uncompilable",
            "tokenized_patch": "filter . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node.getId( ) ) ;",
            "score": 99.27095794677734,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node . get CaMeL Id ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next ) ; }",
            "score": 99.22824928977273,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFallThrough( next.getNext( ) ) ;",
            "score": 99.36208926930146,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Fall CaMeL Through ( next . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TRUE ) ;",
            "score": 99.32462310791016,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TRUE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) cfa.createEdge( node ) ;",
            "score": 99.2818603515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) cfa . create CaMeL Edge ( node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { cfa = finallyNode ;",
            "score": 99.27062225341797,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { cfa = finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , length ) ;",
            "score": 99.2247314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , length ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -1, cfa ) ;",
            "score": 99.33854406020221,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 1 , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , node , cfa ) ;",
            "score": 99.33351135253906,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; ;",
            "score": 99.32434760199652,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) ) { return cfa ;",
            "score": 99.21944173177083,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) ) { return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , children , cfa ) ;",
            "score": 99.3709487915039,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , children , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "listeners.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3382568359375,
            "correctness": "uncompilable",
            "tokenized_patch": "listeners . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , children ) ; }",
            "score": 99.28009440104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , children ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , BOTH ) ;",
            "score": 99.27714538574219,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , BOTH ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , false ) ;",
            "score": 99.27040100097656,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , append ) ; }",
            "score": 99.21768391927084,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , append ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , cfa , finallyNode ) ;",
            "score": 99.3702392578125,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , cfa , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent.getLast( ) ) ;",
            "score": 99.3609978170956,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent . get CaMeL Last ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "iter.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.33749569163604,
            "correctness": "uncompilable",
            "tokenized_patch": "iter . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new , false ) ;",
            "score": 99.32295989990234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { return fromNode ; }",
            "score": 99.2691879272461,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { return from CaMeL Node ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "2"
        },
        {
            "patch": "if( cfa == null ) { cfa = fromNode ; }",
            "score": 99.2171630859375,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa = from CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "msgs.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.41766912286931,
            "correctness": "uncompilable",
            "tokenized_patch": "msgs . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , , parent , cfa ) ;",
            "score": 99.36705106847427,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFollowNode( fromNode , cfa ) ;",
            "score": 99.36051177978516,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa ) ; } } }",
            "score": 99.33728745404412,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , fromNode ) ;",
            "score": 99.32283528645833,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw cfa ; } } else {",
            "score": 99.27589518229166,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw cfa ; } } else {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , exp ) ;",
            "score": 99.26910400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , exp ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isDefaultCase( ) )",
            "score": 99.21669224330357,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Default CaMeL Case ( ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( fromNode , cfa ) ; }",
            "score": 99.36046549479167,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Disposer.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.337158203125,
            "correctness": "uncompilable",
            "tokenized_patch": "Disposer . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ) ; finally",
            "score": 99.32052273220486,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( this , parent , cfa ) ; }",
            "score": 99.275146484375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( this , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new Node ) ;",
            "score": 99.27447102864583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw finallyNode ; }",
            "score": 99.2686996459961,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "ret.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.41685901988636,
            "correctness": "uncompilable",
            "tokenized_patch": "ret . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , size ) ; }",
            "score": 99.36447323069854,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , size ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , cfa , null ) ;",
            "score": 99.33708190917969,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , cfa , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( fromNode , parent , parent ) ;",
            "score": 99.3276596069336,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( from CaMeL Node , parent , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND , this ) ;",
            "score": 99.3188117532169,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , this ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( getNode( parent ) ) ;",
            "score": 99.27421061197917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( get CaMeL Node ( parent ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createNode( fromNode , finallyNode ) ;",
            "score": 99.26718139648438,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Node ( from CaMeL Node , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , end ) ; }",
            "score": 99.21199544270833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ref ) ; }",
            "score": 99.21136067708333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ref ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "{ computeFollowNode( fromNode , parent , cfa ) ;",
            "score": 99.36348230698529,
            "correctness": "uncompilable",
            "tokenized_patch": "{ compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.getFirstChild( ).getNext( ) ;",
            "score": 99.32715561810662,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , doubleValue ) ;",
            "score": 99.26544189453125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , double CaMeL Value ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "info.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.41645951704545,
            "correctness": "uncompilable",
            "tokenized_patch": "info . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "adapter.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.33420697380515,
            "correctness": "uncompilable",
            "tokenized_patch": "adapter . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'less than', finallyNode ) ;",
            "score": 99.31678771972656,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , ' y (if true) and x ', finallyNode ) ;",
            "score": 99.31678771972656,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'greater than', finallyNode ) ;",
            "score": 99.31678771972656,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'before', finallyNode ) ;",
            "score": 99.31678771972656,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , 'Not reachable', finallyNode ) ;",
            "score": 99.31678771972656,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , $STRING$ , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( parent , parent , cfa ) ;",
            "score": 99.26962890625,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( parent , parent , cfa ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode , id ) ; }",
            "score": 99.20799967447917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , id ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Throwable.UNCOND , finallyNode ) ; }",
            "score": 99.41642622514205,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Throwable . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', cfa ) ;",
            "score": 99.3619613647461,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', cfa ) ;",
            "score": 99.3619613647461,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', cfa ) ;",
            "score": 99.3619613647461,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', cfa ) ;",
            "score": 99.3619613647461,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', cfa ) ;",
            "score": 99.3619613647461,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( Node.UNCOND , finallyNode ) ;",
            "score": 99.33339556525735,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( Node . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( element.getNext( ) ) ;",
            "score": 99.32677459716797,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( element . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ! cfa ) ;",
            "score": 99.31502278645833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ! cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next.createEdge( getNext( ) ) ;",
            "score": 99.26824079241071,
            "correctness": "uncompilable",
            "tokenized_patch": "next . create CaMeL Edge ( get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node ) ; } }",
            "score": 99.26540120442708,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) return cfa ;",
            "score": 99.26388549804688,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , callback ) ; }",
            "score": 99.20043131510417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , callback ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.add( computeFallThrough( next ) ) ;",
            "score": 99.26722819010416,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . add ( compute CaMeL Fall CaMeL Through ( next ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch ; }",
            "score": 99.20004708426339,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Arrays.createEdge( fromNode , Branch.UNCOND , finallyNode ) ; }",
            "score": 99.4161044034091,
            "correctness": "uncompilable",
            "tokenized_patch": "Arrays . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , builder , cfa ) ;",
            "score": 99.3592758178711,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , builder , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , callback ) ;",
            "score": 99.31316266741071,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , callback ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "Thread.currentThread( ).interrupt( ) ; }",
            "score": 99.19880894252232,
            "correctness": "uncompilable",
            "tokenized_patch": "Thread . current CaMeL Thread ( ) . interrupt ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , false ) ;",
            "score": 99.35918426513672,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "listener.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.33097570082721,
            "correctness": "uncompilable",
            "tokenized_patch": "listener . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , builder ) ;",
            "score": 99.26138741629464,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , builder ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'less than') ;",
            "score": 99.25647989908855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( ' y (if true) and x ') ;",
            "score": 99.25647989908855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'greater than') ;",
            "score": 99.25647989908855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'before') ;",
            "score": 99.25647989908855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'Not reachable') ;",
            "score": 99.25647989908855,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa = finallyNode ;",
            "score": 99.19852120535714,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) { cfa = finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "for( Node finallyNode : node.getNext( ) ) {",
            "score": 99.35884363511029,
            "correctness": "uncompilable",
            "tokenized_patch": "for ( Node finally CaMeL Node : node . get CaMeL Next ( ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "container.createEdge( fromNode , parent , cfa ) ; }",
            "score": 99.330322265625,
            "correctness": "uncompilable",
            "tokenized_patch": "container . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false ) ; ;",
            "score": 99.30743815104167,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'less than'+ finallyNode ) ; }",
            "score": 99.2570068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( ' y (if true) and x '+ finallyNode ) ; }",
            "score": 99.2570068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'greater than'+ finallyNode ) ; }",
            "score": 99.2570068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'before'+ finallyNode ) ; }",
            "score": 99.2570068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'Not reachable'+ finallyNode ) ; }",
            "score": 99.2570068359375,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { break ; } }",
            "score": 99.25347900390625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { break ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name ) ;",
            "score": 99.1959716796875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.UNCOND ;",
            "score": 99.32532501220703,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new fromNode ) ;",
            "score": 99.3060302734375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { return cfa ; } }",
            "score": 99.25485026041666,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { return cfa ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , id ) ;",
            "score": 99.19026402064732,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , id ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( createEdge( fromNode , Branch.UNCOND , finallyNode ) ) {",
            "score": 99.4145174893466,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.createEdge( fromNode , cfa ) ; }",
            "score": 99.35401204427083,
            "correctness": "uncompilable",
            "tokenized_patch": "parent . create CaMeL Edge ( from CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND ,2) ;",
            "score": 99.30506807215073,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND ,4) ;",
            "score": 99.30506807215073,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND ,3) ;",
            "score": 99.30506807215073,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND ,10) ;",
            "score": 99.30506807215073,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND ,2008) ;",
            "score": 99.30506807215073,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , $NUMBER$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) return cfa ; }",
            "score": 99.2527606670673,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) return cfa ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ) ; break ;",
            "score": 99.24772426060268,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) cfa = finallyNode ;",
            "score": 99.18805401141827,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa == null ) cfa = finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent ) ;",
            "score": 99.35288307883523,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.TYPE ) ;",
            "score": 99.32852172851562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . TYPE ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new( ) ) ;",
            "score": 99.30451202392578,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , cfa ) ;",
            "score": 99.25559488932292,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , comparator ) ;",
            "score": 99.25070626395089,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , comparator ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { break ; }",
            "score": 99.23813100961539,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { break ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "Preconditions.createEdge( fromNode , cfa ) ;",
            "score": 99.35240827287946,
            "correctness": "uncompilable",
            "tokenized_patch": "Preconditions . create CaMeL Edge ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , null , parent ) ;",
            "score": 99.328369140625,
            "correctness": "wrong",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , null , parent ) ;",
            "failed_triggering": "3/3",
            "failed_non_triggering": "3"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.) ;",
            "score": 99.25210774739584,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , references ) ;",
            "score": 99.24738420758929,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , references ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { break ; } } }",
            "score": 99.23787434895833,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { break ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , scope ) ;",
            "score": 99.18418666294643,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , scope ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.getLastChild( ) == node ) {",
            "score": 99.32833099365234,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . get CaMeL Last CaMeL Child ( ) == node ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( null , parent , cfa ) ; }",
            "score": 99.25201822916667,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( null , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1) ;",
            "score": 99.24690464564732,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) {",
            "score": 99.23329467773438,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa == null ) { cfa = cfa ; }",
            "score": 99.17952786959134,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa == null ) { cfa = cfa ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, true ) ;",
            "score": 99.30374908447266,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'less than'+ finallyNode ) ;",
            "score": 99.24658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( ' y (if true) and x '+ finallyNode ) ;",
            "score": 99.24658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'greater than'+ finallyNode ) ;",
            "score": 99.24658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'before'+ finallyNode ) ;",
            "score": 99.24658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'Not reachable'+ finallyNode ) ;",
            "score": 99.24658203125,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , filter.UNCOND , finallyNode ) ; }",
            "score": 99.41289728338069,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , filter . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new( cfa ) ) ;",
            "score": 99.32236615349265,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new ( cfa ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true ) ; ;",
            "score": 99.30335286458333,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true ) ; ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , n ) ;",
            "score": 99.24898856026786,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , n ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'less than'+ fromNode ) ;",
            "score": 99.24517822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( ' y (if true) and x '+ fromNode ) ;",
            "score": 99.24517822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'greater than'+ fromNode ) ;",
            "score": 99.24517822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'before'+ fromNode ) ;",
            "score": 99.24517822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.err.println( 'Not reachable'+ fromNode ) ;",
            "score": 99.24517822265625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . err . println ( $STRING$ + from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; } return null ;",
            "score": 99.22426194411058,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; } return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node , parent , cfa ) ; }",
            "score": 99.35299682617188,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node , parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -1) ; }",
            "score": 99.3270263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 1 ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , flow ) ;",
            "score": 99.30333600725446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , flow ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , parent , cfa ) ;",
            "score": 99.24856131417411,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , finallyNode ) ; }",
            "score": 99.24337565104166,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "iter.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32649993896484,
            "correctness": "uncompilable",
            "tokenized_patch": "iter . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , false ) ;",
            "score": 99.30195617675781,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return fromNode ; }",
            "score": 99.21782575334821,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) { return from CaMeL Node ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "4"
        },
        {
            "patch": "q.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32598876953125,
            "correctness": "uncompilable",
            "tokenized_patch": "q . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa [ createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32067108154297,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa [ create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,1, null ) ;",
            "score": 99.301513671875,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 1 , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( node , finallyNode ) ; }",
            "score": 99.24146321614583,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( node , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { break ; }",
            "score": 99.20787635216347,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { break ; }",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "Thread.currentThread( ).interrupt( ) ;",
            "score": 99.17282339242789,
            "correctness": "wrong",
            "tokenized_patch": "Thread . current CaMeL Thread ( ) . interrupt ( ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "listener.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.32596588134766,
            "correctness": "uncompilable",
            "tokenized_patch": "listener . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , fromNode , cfa ) ;",
            "score": 99.3194580078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) finallyNode = finallyNode ;",
            "score": 99.241064453125,
            "correctness": "wrong",
            "tokenized_patch": "if ( cfa != null ) finally CaMeL Node = finally CaMeL Node ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "finallyNode.getNext( ) ; } }",
            "score": 99.20726600060097,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . get CaMeL Next ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next , finallyNode ) ;",
            "score": 99.1722412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.NE , finallyNode ) ;",
            "score": 99.41217651367188,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . NE , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "parent.getFirstChild( ).getNext( ) ;",
            "score": 99.35068646599265,
            "correctness": "wrong",
            "tokenized_patch": "parent . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "next = computeFallThrough( fromNode , parent ) ;",
            "score": 99.33870697021484,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { return computeFallThrough( node , cfa ) ; }",
            "score": 99.32520294189453,
            "correctness": "uncompilable",
            "tokenized_patch": "try { return compute CaMeL Fall CaMeL Through ( node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND ,0) ;",
            "score": 99.2997687844669,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent , cfa ) ; }",
            "score": 99.24481670673077,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { break ; } }",
            "score": 99.2049560546875,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { break ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa.interrupt( ) ;",
            "score": 99.16898018973214,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa . interrupt ( ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , children , cfa ) ; }",
            "score": 99.34970272288604,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , children , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "container.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.3251724243164,
            "correctness": "uncompilable",
            "tokenized_patch": "container . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , null ) ;",
            "score": 99.2966537475586,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; } } return null ;",
            "score": 99.20382254464286,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; } } return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( finallyNode , cfa ) ; }",
            "score": 99.33699035644531,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( finally CaMeL Node , cfa ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name , cfa ) ;",
            "score": 99.31771850585938,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , format ) ;",
            "score": 99.2958984375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , format ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , -0) ;",
            "score": 99.23418782552083,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , - 0 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'less than') ; }",
            "score": 99.2003643329327,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( ' y (if true) and x ') ; }",
            "score": 99.2003643329327,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'greater than') ; }",
            "score": 99.2003643329327,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'before') ; }",
            "score": 99.2003643329327,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( 'Not reachable') ; }",
            "score": 99.2003643329327,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , end ) ;",
            "score": 99.16283307756696,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , end ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "try { cfa.createEdge( fromNode , parent , cfa ,",
            "score": 99.348388671875,
            "correctness": "uncompilable",
            "tokenized_patch": "try { cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ;",
            "score": 99.32213416466347,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , current , cfa ) ;",
            "score": 99.31769561767578,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , current , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new , true ) ;",
            "score": 99.29536437988281,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( NodeUtil.hasFinally( next ) ) {",
            "score": 99.238916015625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( Node CaMeL Util . has CaMeL Finally ( next ) ) {",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) return finallyNode ;",
            "score": 99.23342459542411,
            "correctness": "wrong",
            "tokenized_patch": "if ( finally CaMeL Node != null ) return finally CaMeL Node ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "if( finallyNode == null ) return null ; }",
            "score": 99.19749098557692,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) return null ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "assert computeFallThrough( node.getNext( ) ) ;",
            "score": 99.34811580882354,
            "correctness": "uncompilable",
            "tokenized_patch": "assert compute CaMeL Fall CaMeL Through ( node . get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "result = computeFollowNode( fromNode , cfa ) ;",
            "score": 99.33627319335938,
            "correctness": "uncompilable",
            "tokenized_patch": "result = compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , input , cfa ) ;",
            "score": 99.3165512084961,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , input , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent ; }",
            "score": 99.31635393415179,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finally { cfa.createEdge( fromNode , null ) ;",
            "score": 99.29501342773438,
            "correctness": "uncompilable",
            "tokenized_patch": "finally { cfa . create CaMeL Edge ( from CaMeL Node , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "fromNode = fromNode.getParent( ) ;",
            "score": 99.23252766927084,
            "correctness": "wrong",
            "tokenized_patch": "from CaMeL Node = from CaMeL Node . get CaMeL Parent ( ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "1"
        },
        {
            "patch": "cfa.createEdge( ) ; } } }",
            "score": 99.19510904947917,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; } } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( parent ) ; }",
            "score": 99.15257679332386,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.STAR , finallyNode ) ;",
            "score": 99.40660400390625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . STAR , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode , parent ,1) ;",
            "score": 99.34800809972427,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node , parent , 1 ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "this.cfa.createEdge( fromNode , true ) ;",
            "score": 99.29176330566406,
            "correctness": "uncompilable",
            "tokenized_patch": "this . cfa . create CaMeL Edge ( from CaMeL Node , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.put( fromNode , parent , cfa ) ;",
            "score": 99.23655482700893,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . put ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { return finallyNode ;",
            "score": 99.23234049479167,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { return finally CaMeL Node ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ) ; ; }",
            "score": 99.19382149832589,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node ) ; ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , false ) ; }",
            "score": 99.34784294577206,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , false ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "al.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31526947021484,
            "correctness": "uncompilable",
            "tokenized_patch": "al . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , list , cfa ) ;",
            "score": 99.3145751953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , list , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , iterator ) ;",
            "score": 99.23178536551339,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , iterator ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( ) ; break ;",
            "score": 99.18316095525569,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( ) ; break ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , index ) ; }",
            "score": 99.3478142233456,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , index ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( fromNode ) ; }",
            "score": 99.3343505859375,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( from CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "c.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31491088867188,
            "correctness": "uncompilable",
            "tokenized_patch": "c . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( next , parent , cfa ) ;",
            "score": 99.23353678385416,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( next , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , UNCOND ) ;",
            "score": 99.2317626953125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { return cfa ;",
            "score": 99.17421653053977,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { return cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa.hasNext( ) )",
            "score": 99.14124644886364,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa . has CaMeL Next ( ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "node.createEdge( this , Branch.UNCOND , finallyNode ) ;",
            "score": 99.40483012952302,
            "correctness": "uncompilable",
            "tokenized_patch": "node . create CaMeL Edge ( this , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , cfa , cfa ,",
            "score": 99.34756290211396,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , cfa , cfa ,",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( new : fromNode , cfa ) ;",
            "score": 99.33401489257812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( new : from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , 'less than') ;",
            "score": 99.31319427490234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , ' y (if true) and x ') ;",
            "score": 99.31319427490234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , 'greater than') ;",
            "score": 99.31319427490234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , 'before') ;",
            "score": 99.31319427490234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false , 'Not reachable') ;",
            "score": 99.31319427490234,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , logger ) ; }",
            "score": 99.23113606770833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , logger ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'less than') ; }",
            "score": 99.16526442307692,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( ' y (if true) and x ') ; }",
            "score": 99.16526442307692,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'greater than') ; }",
            "score": 99.16526442307692,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'before') ; }",
            "score": 99.16526442307692,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalArgumentException( 'Not reachable') ; }",
            "score": 99.16526442307692,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( name ) ; } }",
            "score": 99.13968912760417,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( name ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , element , cfa ) ;",
            "score": 99.34746237362133,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , element , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "next = computeFollowNode( fromNode , parent ) ;",
            "score": 99.3292007446289,
            "correctness": "uncompilable",
            "tokenized_patch": "next = compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , declarations ) ;",
            "score": 99.28871372767857,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , declarations ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , filter ) ;",
            "score": 99.23177664620536,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , filter ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , chain ) ;",
            "score": 99.23058210100446,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , chain ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "finallyNode.getNext( ) ; }",
            "score": 99.1622314453125,
            "correctness": "uncompilable",
            "tokenized_patch": "finally CaMeL Node . get CaMeL Next ( ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.isEmpty( ) )",
            "score": 99.13333129882812,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . is CaMeL Empty ( ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , this , null ) ;",
            "score": 99.28792572021484,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , this , null ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( getNext( ) ) ;",
            "score": 99.23154296875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( get CaMeL Next ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode == null ) { return null ;",
            "score": 99.15410907451923,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node == null ) { return null ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.create( fromNode , parent ) ; }",
            "score": 99.12331918569711,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create ( from CaMeL Node , parent ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa = computeFallThrough( fromNode , cfa ) ;",
            "score": 99.3281478881836,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa = compute CaMeL Fall CaMeL Through ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , false ) ; finally",
            "score": 99.28740234375,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , false ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.out.println( 'less than'+ finallyNode ) ; }",
            "score": 99.229541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . out . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.out.println( ' y (if true) and x '+ finallyNode ) ; }",
            "score": 99.229541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . out . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.out.println( 'greater than'+ finallyNode ) ; }",
            "score": 99.229541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . out . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.out.println( 'before'+ finallyNode ) ; }",
            "score": 99.229541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . out . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "System.out.println( 'Not reachable'+ finallyNode ) ; }",
            "score": 99.229541015625,
            "correctness": "uncompilable",
            "tokenized_patch": "System . out . println ( $STRING$ + finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( node != null ) { throw node ; } }",
            "score": 99.15174278846153,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( node != null ) { throw node ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge(1, Branch.UNCOND , finallyNode ) ; }",
            "score": 99.40245361328125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( 1 , Branch . UN@@ COND , finally CaMeL Node ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , fromNode , cfa ) ;",
            "score": 99.34624167049633,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( parent , cfa ) ; } }",
            "score": 99.3125732421875,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( parent , cfa ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return cfa.createEdge( fromNode ) ;",
            "score": 99.14975210336539,
            "correctness": "uncompilable",
            "tokenized_patch": "return cfa . create CaMeL Edge ( from CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { break ; } }",
            "score": 99.1166483561198,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { break ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "computeFollowNode( fromNode , parent , true ) ;",
            "score": 99.34584045410156,
            "correctness": "uncompilable",
            "tokenized_patch": "compute CaMeL Follow CaMeL Node ( from CaMeL Node , parent , true ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node ) ;",
            "score": 99.32734818892045,
            "correctness": "wrong",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node ) ;",
            "failed_triggering": "2/3",
            "failed_non_triggering": "7"
        },
        {
            "patch": "vars.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31197357177734,
            "correctness": "uncompilable",
            "tokenized_patch": "vars . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , new , ) ;",
            "score": 99.2861572265625,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , new , ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { cfa = finallyNode ; }",
            "score": 99.22613932291667,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { cfa = finally CaMeL Node ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new IllegalStateException( ) ; } }",
            "score": 99.148681640625,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Illegal CaMeL State CaMeL Exception ( ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next ) ; } }",
            "score": 99.11293538411458,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next ) ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "continue createEdge( fromNode , Branch.UNCOND , finallyNode ) ;",
            "score": 99.4020263671875,
            "correctness": "uncompilable",
            "tokenized_patch": "continue create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND , finally CaMeL Node ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "g.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31158447265625,
            "correctness": "uncompilable",
            "tokenized_patch": "g . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'less than', 'less than') ;",
            "score": 99.28569793701172,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ' y (if true) and x ', ' y (if true) and x ') ;",
            "score": 99.28569793701172,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'greater than', 'greater than') ;",
            "score": 99.28569793701172,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'before', 'before') ;",
            "score": 99.28569793701172,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , 'Not reachable', 'Not reachable') ;",
            "score": 99.28569793701172,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , $STRING$ , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( target ) ; }",
            "score": 99.14369895241477,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( target ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFollowNode( fromNode , false ) ;",
            "score": 99.32548014322917,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Follow CaMeL Node ( from CaMeL Node , false ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , 'less than') ;",
            "score": 99.30044555664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , ' y (if true) and x ') ;",
            "score": 99.30044555664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , 'greater than') ;",
            "score": 99.30044555664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , 'before') ;",
            "score": 99.30044555664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true , 'Not reachable') ;",
            "score": 99.30044555664062,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , ref ) ;",
            "score": 99.22440883091518,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , ref ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( cfa != null ) { throw cfa ;",
            "score": 99.1413907137784,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( cfa != null ) { throw cfa ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( next ) ;",
            "score": 99.10850830078125,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( next ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "rs.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.31097412109375,
            "correctness": "uncompilable",
            "tokenized_patch": "rs . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , /",
            "score": 99.22542027064732,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , /",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "createEdge( fromNode , Branch.UNCOND ) ;",
            "score": 99.2220458984375,
            "correctness": "uncompilable",
            "tokenized_patch": "create CaMeL Edge ( from CaMeL Node , Branch . UN@@ COND ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { } }",
            "score": 99.1364034016927,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , Branch.getId( ) ) ;",
            "score": 99.40147094726562,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , Branch . get CaMeL Id ( ) ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "return computeFallThrough( node , cfa ) ;",
            "score": 99.32383375901442,
            "correctness": "uncompilable",
            "tokenized_patch": "return compute CaMeL Fall CaMeL Through ( node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "break.createEdge( fromNode , parent , cfa ) ;",
            "score": 99.29676055908203,
            "correctness": "uncompilable",
            "tokenized_patch": "break . create CaMeL Edge ( from CaMeL Node , parent , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , true ) ; finally",
            "score": 99.28230794270833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , true ) ; finally",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , - ;",
            "score": 99.22498372395833,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , - ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( finallyNode != null ) { throw cfa ; } }",
            "score": 99.221728515625,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( finally CaMeL Node != null ) { throw cfa ; } }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( 'less than') ;",
            "score": 99.13101196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( ' y (if true) and x ') ;",
            "score": 99.13101196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( 'greater than') ;",
            "score": 99.13101196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( 'before') ;",
            "score": 99.13101196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw new UnsupportedOperationException( 'Not reachable') ;",
            "score": 99.13101196289062,
            "correctness": "uncompilable",
            "tokenized_patch": "throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "if( ! cfa.hasNext( ) )",
            "score": 99.10471598307292,
            "correctness": "uncompilable",
            "tokenized_patch": "if ( ! cfa . has CaMeL Next ( ) )",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , ) ; }",
            "score": 99.34231567382812,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , ) ; }",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "throw computeFollowNode( fromNode , cfa ) ;",
            "score": 99.323828125,
            "correctness": "uncompilable",
            "tokenized_patch": "throw compute CaMeL Follow CaMeL Node ( from CaMeL Node , cfa ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, 'less than') ;",
            "score": 99.28144073486328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, ' y (if true) and x ') ;",
            "score": 99.28144073486328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, 'greater than') ;",
            "score": 99.28144073486328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, 'before') ;",
            "score": 99.28144073486328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode ,0, 'Not reachable') ;",
            "score": 99.28144073486328,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , 0 , $STRING$ ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , parent , new",
            "score": 99.22494070870536,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , parent , new",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        },
        {
            "patch": "cfa.createEdge( fromNode , nodes ) ;",
            "score": 99.22110421316964,
            "correctness": "uncompilable",
            "tokenized_patch": "cfa . create CaMeL Edge ( from CaMeL Node , nodes ) ;",
            "failed_triggering": "None/3",
            "failed_non_triggering": "None"
        }
    ]
}